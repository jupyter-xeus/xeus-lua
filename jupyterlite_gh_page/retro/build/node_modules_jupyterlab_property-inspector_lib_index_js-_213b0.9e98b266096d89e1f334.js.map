{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/property-inspector/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/property-inspector/lib/token.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACmD;AACM;AACd;AAC6B;AACnB;AACf;AACtC;AACA;AACA;AACA,wCAAwC,mDAAM;AAC9C;AACA;AACA;AACA;AACA;AACA,4BAA4B,yDAAY;AACxC;AACA;AACA,4BAA4B,yDAAY;AACxwCAAwC,mEAAc;AACtD;AACA,0CAA0C,4DAAe;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mDAAM,EAAE,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qDAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mDAAM;AACxC;AACA;AACA;AACA,gCAAgC,oEAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAgB;AAC5B;AACA;AACA;AACA,CAAC,0BAA0B;AAC3B,iC;;;;;;;;;;;;;;;;;AC3QA;AACA;AAC0C;AAC1C;AACA;AACA;AACO,uCAAuC,oDAAK;AACnD,iC","file":"node_modules_jupyterlab_property-inspector_lib_index_js-_213b0.9e98b266096d89e1f334.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module property-inspector\n */\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Signal } from '@lumino/signaling';\nimport { FocusTracker, SingletonLayout, Widget } from '@lumino/widgets';\nimport { IPropertyInspectorProvider } from './token';\nexport { IPropertyInspectorProvider };\n/**\n * The implementation of the PropertyInspector.\n */\nclass PropertyInspectorProvider extends Widget {\n    /**\n     * Construct a new Property Inspector.\n     */\n    constructor() {\n        super();\n        this._tracker = new FocusTracker();\n        this._inspectors = new Map();\n        this.addClass('jp-PropertyInspector');\n        this._tracker = new FocusTracker();\n        this._tracker.currentChanged.connect(this._onCurrentChanged, this);\n    }\n    /**\n     * Register a widget in the property inspector provider.\n     *\n     * @param widget The owner widget to register.\n     */\n    register(widget) {\n        if (this._inspectors.has(widget)) {\n            throw new Error('Widget is already registered');\n        }\n        const inspector = new Private.PropertyInspector(widget);\n        widget.disposed.connect(this._onWidgetDisposed, this);\n        this._inspectors.set(widget, inspector);\n        inspector.onAction.connect(this._onInspectorAction, this);\n        this._tracker.add(widget);\n        return inspector;\n    }\n    /**\n     * The current widget being tracked by the inspector.\n     */\n    get currentWidget() {\n        return this._tracker.currentWidget;\n    }\n    /**\n     * Refresh the content for the current widget.\n     */\n    refresh() {\n        const current = this._tracker.currentWidget;\n        if (!current) {\n            this.setContent(null);\n            return;\n        }\n        const inspector = this._inspectors.get(current);\n        if (inspector) {\n            this.setContent(inspector.content);\n        }\n    }\n    /**\n     * Handle the disposal of a widget.\n     */\n    _onWidgetDisposed(sender) {\n        const inspector = this._inspectors.get(sender);\n        if (inspector) {\n            inspector.dispose();\n            this._inspectors.delete(sender);\n        }\n    }\n    /**\n     * Handle inspector actions.\n     */\n    _onInspectorAction(sender, action) {\n        const owner = sender.owner;\n        const current = this._tracker.currentWidget;\n        switch (action) {\n            case 'content':\n                if (current === owner) {\n                    this.setContent(sender.content);\n                }\n                break;\n            case 'dispose':\n                if (owner) {\n                    this._tracker.remove(owner);\n                    this._inspectors.delete(owner);\n                }\n                break;\n            case 'show-panel':\n                if (current === owner) {\n                    this.showPanel();\n                }\n                break;\n            default:\n                throw new Error('Unsupported inspector action');\n        }\n    }\n    /**\n     * Handle a change to the current widget in the tracker.\n     */\n    _onCurrentChanged() {\n        const current = this._tracker.currentWidget;\n        if (current) {\n            const inspector = this._inspectors.get(current);\n            const content = inspector.content;\n            this.setContent(content);\n        }\n        else {\n            this.setContent(null);\n        }\n    }\n}\n/**\n * A class that adds a property inspector provider to the\n * JupyterLab sidebar.\n */\nexport class SideBarPropertyInspectorProvider extends PropertyInspectorProvider {\n    /**\n     * Construct a new Side Bar Property Inspector.\n     */\n    constructor(labshell, placeholder, translator) {\n        super();\n        this._labshell = labshell;\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        const layout = (this.layout = new SingletonLayout());\n        if (placeholder) {\n            this._placeholder = placeholder;\n        }\n        else {\n            const node = document.createElement('div');\n            const content = document.createElement('div');\n            content.textContent = this._trans.__('No properties to inspect.');\n            content.className = 'jp-PropertyInspector-placeholderContent';\n            node.appendChild(content);\n            this._placeholder = new Widget({ node });\n            this._placeholder.addClass('jp-PropertyInspector-placeholder');\n        }\n        layout.widget = this._placeholder;\n        labshell.currentChanged.connect(this._onShellCurrentChanged, this);\n        this._onShellCurrentChanged();\n    }\n    /**\n     * Set the content of the sidebar panel.\n     */\n    setContent(content) {\n        const layout = this.layout;\n        if (layout.widget) {\n            layout.widget.removeClass('jp-PropertyInspector-content');\n            layout.removeWidget(layout.widget);\n        }\n        if (!content) {\n            content = this._placeholder;\n        }\n        content.addClass('jp-PropertyInspector-content');\n        layout.widget = content;\n    }\n    /**\n     * Show the sidebar panel.\n     */\n    showPanel() {\n        this._labshell.activateById(this.id);\n    }\n    /**\n     * Handle the case when the current widget is not in our tracker.\n     */\n    _onShellCurrentChanged() {\n        const current = this.currentWidget;\n        if (!current) {\n            this.setContent(null);\n            return;\n        }\n        const currentShell = this._labshell.currentWidget;\n        if (currentShell === null || currentShell === void 0 ? void 0 : currentShell.node.contains(current.node)) {\n            this.refresh();\n        }\n        else {\n            this.setContent(null);\n        }\n    }\n}\n/**\n * A namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An implementation of the property inspector used by the\n     * property inspector provider.\n     */\n    class PropertyInspector {\n        /**\n         * Construct a new property inspector.\n         */\n        constructor(owner) {\n            this._isDisposed = false;\n            this._content = null;\n            this._owner = null;\n            this._onAction = new Signal(this);\n            this._owner = owner;\n        }\n        /**\n         * The owner widget for the property inspector.\n         */\n        get owner() {\n            return this._owner;\n        }\n        /**\n         * The current content for the property inspector.\n         */\n        get content() {\n            return this._content;\n        }\n        /**\n         * Whether the property inspector is disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n        /**\n         * A signal used for actions related to the property inspector.\n         */\n        get onAction() {\n            return this._onAction;\n        }\n        /**\n         * Show the property inspector panel.\n         */\n        showPanel() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._onAction.emit('show-panel');\n        }\n        /**\n         * Render the property inspector content.\n         */\n        render(widget) {\n            if (this._isDisposed) {\n                return;\n            }\n            if (widget instanceof Widget) {\n                this._content = widget;\n            }\n            else {\n                this._content = ReactWidget.create(widget);\n            }\n            this._onAction.emit('content');\n        }\n        /**\n         * Dispose of the property inspector.\n         */\n        dispose() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this._content = null;\n            this._owner = null;\n            Signal.clearData(this);\n        }\n    }\n    Private.PropertyInspector = PropertyInspector;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The property inspector provider token.\n */\nexport const IPropertyInspectorProvider = new Token('@jupyterlab/property-inspector:IPropertyInspectorProvider');\n//# sourceMappingURL=token.js.map"],"sourceRoot":""}