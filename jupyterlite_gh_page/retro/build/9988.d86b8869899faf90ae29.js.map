{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/mock-socket/dist/mock-socket.js"],"names":["exports","commonjsGlobal","window","g","self","requiresPort","port","protocol","split","has","Object","prototype","hasOwnProperty","decode","input","decodeURIComponent","replace","querystringify_1","stringify","obj","prefix","value","key","pairs","call","isNaN","push","encodeURIComponent","length","join","parse","query","part","parser","result","exec","protocolre","slashes","rules","address","NaN","undefined","ignore","hash","lolcation","loc","location","finaldestination","type","Url","unescape","pathname","test","href","extractProtocol","match","toLowerCase","rest","this","relative","extracted","instruction","index","instructions","slice","url","i","indexOf","charAt","base","path","concat","last","unshift","up","splice","resolve","host","hostname","username","password","auth","origin","toString","set","fn","pop","char","ins","qs","urlParse","delay","callback","context","setTimeout","timeoutContext","log","method","message","console","reject","array","results","forEach","itemInArray","EventTarget","listeners","trimQueryPartFromURL","queryIndex","addEventListener","listener","Array","isArray","item","removeEventListener","removingListener","arrayOfListeners","dispatchEvent","event","this$1","customArguments","len","arguments","eventName","apply","NetworkBridge","urlMap","attachWebSocket","websocket","serverURL","connectionLookup","server","websockets","addMembershipToRoom","room","roomMemberships","attachServer","serverLookup","websocketsLookup","broadcaster","filter","removeServer","removeWebSocket","socket","removeMembershipFromRoom","memberships","networkBridge","CLOSE_CODES","ERROR_PREFIX","CONSTRUCTOR_ERROR","CLOSE_ERROR","EVENT","CONSTRUCT","MESSAGE","CLOSE","EventPrototype","stopPropagation","stopImmediatePropagation","initEvent","bubbles","cancelable","Boolean","Event","EventPrototype$$1","eventInitConfig","TypeError","timeStamp","Date","now","target","srcElement","returnValue","isTrusted","eventPhase","defaultPrevented","currentTarget","canncelBubble","__proto__","create","constructor","MessageEvent","data","lastEventId","ports","CloseEvent","code","reason","wasClean","cancelBubble","parseInt","createEvent","config","eventObject","createMessageEvent","messageEvent","createCloseEvent","closeEvent","closeWebSocketConnection","readyState","WebSocket$1","CLOSING","CLOSED","normalizeSendData","ArrayBuffer","String","EventTarget$$1","WebSocket","protocols","urlRecord","SyntaxError","urlVerification","uniq","map","p","count","reduce","a","b","duplicates","keys","protocolVerification","binaryType","CONNECTING","options","verifyClient","selectProtocol","selectedProtocol","isFilled","isRequested","OPEN","handler","get","prop","cb","Proxy","prototypeAccessors","onopen","onmessage","onclose","onerror","open","close","error","send","Error","str","m","errorEvent","failWebSocketConnection","defineProperties","retrieveGlobalObject","Server$1","Server","originalWebSocket","start","globalObj","stop","on","emit","clients","to","broadcastList","deduped","chainedRoom","chainedBroadcaster","in","args","simulate","of","SocketIO$1","SocketIO","broadcast","disconnect","off","leave","IO","connect","defineProperty","factory"],"mappings":"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","file":"9988.d86b8869899faf90ae29.js","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.Mock = global.Mock || {})));\n}(this, (function (exports) { 'use strict';\n\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nvar requiresPort = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) { return false; }\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n\nvar has = Object.prototype.hasOwnProperty;\nvar undef;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  return decodeURIComponent(input.replace(/\\+/g, ' '));\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    if (key in result) { continue; }\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = []\n    , value\n    , key;\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) { prefix = '?'; }\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key];\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(value));\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nvar stringify = querystringify;\nvar parse = querystring;\n\nvar querystringify_1 = {\n\tstringify: stringify,\n\tparse: parse\n};\n\nvar protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i;\nvar slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//;\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address) {          // Sanitize what is left of the address\n    return address.replace('\\\\', '/');\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') { globalVar = window; }\n  else if (typeof commonjsGlobal !== 'undefined') { globalVar = commonjsGlobal; }\n  else if (typeof self !== 'undefined') { globalVar = self; }\n  else { globalVar = {}; }\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) { delete finaldestination[key]; }\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) { continue; }\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address) {\n  var match = protocolre.exec(address);\n\n  return {\n    protocol: match[1] ? match[1].toLowerCase() : '',\n    slashes: !!match[2],\n    rest: match[3]\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) { unshift = true; }\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) { path.unshift(''); }\n  if (last === '.' || last === '..') { path.push(''); }\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) { parser = querystringify_1.parse; }\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (!extracted.slashes) { instructions[3] = [/(.*)/, 'pathname']; }\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) { url[key] = url[key].toLowerCase(); }\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) { url.query = parser(url.query); }\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!requiresPort(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || querystringify_1.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!requiresPort(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) { value += ':'+ url.port; }\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) { url[ins[1]] = url[ins[1]].toLowerCase(); }\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) { stringify = querystringify_1.stringify; }\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') { protocol += ':'; }\n\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) { result += ':'+ url.password; }\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) { result += '?' !== query.charAt(0) ? '?'+ query : query; }\n\n  if (url.hash) { result += url.hash; }\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.qs = querystringify_1;\n\nvar urlParse = Url;\n\n/*\n * This delay allows the thread to finish assigning its on* methods\n * before invoking the delay callback. This is purely a timing hack.\n * http://geekabyte.blogspot.com/2014/01/javascript-effect-of-setting-settimeout.html\n *\n * @param {callback: function} the callback which will be invoked after the timeout\n * @parma {context: object} the context in which to invoke the function\n */\nfunction delay(callback, context) {\n  setTimeout(function (timeoutContext) { return callback.call(timeoutContext); }, 4, context);\n}\n\nfunction log(method, message) {\n  /* eslint-disable no-console */\n  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'test') {\n    console[method].call(null, message);\n  }\n  /* eslint-enable no-console */\n}\n\nfunction reject(array, callback) {\n  var results = [];\n  array.forEach(function (itemInArray) {\n    if (!callback(itemInArray)) {\n      results.push(itemInArray);\n    }\n  });\n\n  return results;\n}\n\nfunction filter(array, callback) {\n  var results = [];\n  array.forEach(function (itemInArray) {\n    if (callback(itemInArray)) {\n      results.push(itemInArray);\n    }\n  });\n\n  return results;\n}\n\n/*\n * EventTarget is an interface implemented by objects that can\n * receive events and may have listeners for them.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n */\nvar EventTarget = function EventTarget() {\n  this.listeners = {};\n};\n\n/*\n * Ties a listener function to an event type which can later be invoked via the\n * dispatchEvent method.\n *\n * @param {string} type - the type of event (ie: 'open', 'message', etc.)\n * @param {function} listener - callback function to invoke when an event is dispatched matching the type\n * @param {boolean} useCapture - N/A TODO: implement useCapture functionality\n */\nEventTarget.prototype.addEventListener = function addEventListener (type, listener /* , useCapture */) {\n  if (typeof listener === 'function') {\n    if (!Array.isArray(this.listeners[type])) {\n      this.listeners[type] = [];\n    }\n\n    // Only add the same function once\n    if (filter(this.listeners[type], function (item) { return item === listener; }).length === 0) {\n      this.listeners[type].push(listener);\n    }\n  }\n};\n\n/*\n * Removes the listener so it will no longer be invoked via the dispatchEvent method.\n *\n * @param {string} type - the type of event (ie: 'open', 'message', etc.)\n * @param {function} listener - callback function to invoke when an event is dispatched matching the type\n * @param {boolean} useCapture - N/A TODO: implement useCapture functionality\n */\nEventTarget.prototype.removeEventListener = function removeEventListener (type, removingListener /* , useCapture */) {\n  var arrayOfListeners = this.listeners[type];\n  this.listeners[type] = reject(arrayOfListeners, function (listener) { return listener === removingListener; });\n};\n\n/*\n * Invokes all listener functions that are listening to the given event.type property. Each\n * listener will be passed the event as the first argument.\n *\n * @param {object} event - event object which will be passed to all listeners of the event.type property\n */\nEventTarget.prototype.dispatchEvent = function dispatchEvent (event) {\n    var this$1 = this;\n    var customArguments = [], len = arguments.length - 1;\n    while ( len-- > 0 ) customArguments[ len ] = arguments[ len + 1 ];\n\n  var eventName = event.type;\n  var listeners = this.listeners[eventName];\n\n  if (!Array.isArray(listeners)) {\n    return false;\n  }\n\n  listeners.forEach(function (listener) {\n    if (customArguments.length > 0) {\n      listener.apply(this$1, customArguments);\n    } else {\n      listener.call(this$1, event);\n    }\n  });\n\n  return true;\n};\n\nfunction trimQueryPartFromURL(url) {\n  var queryIndex = url.indexOf('?');\n  return queryIndex >= 0 ? url.slice(0, queryIndex) : url;\n}\n\n/*\n * The network bridge is a way for the mock websocket object to 'communicate' with\n * all available servers. This is a singleton object so it is important that you\n * clean up urlMap whenever you are finished.\n */\nvar NetworkBridge = function NetworkBridge() {\n  this.urlMap = {};\n};\n\n/*\n * Attaches a websocket object to the urlMap hash so that it can find the server\n * it is connected to and the server in turn can find it.\n *\n * @param {object} websocket - websocket object to add to the urlMap hash\n * @param {string} url\n */\nNetworkBridge.prototype.attachWebSocket = function attachWebSocket (websocket, url) {\n  var serverURL = trimQueryPartFromURL(url);\n  var connectionLookup = this.urlMap[serverURL];\n\n  if (connectionLookup && connectionLookup.server && connectionLookup.websockets.indexOf(websocket) === -1) {\n    connectionLookup.websockets.push(websocket);\n    return connectionLookup.server;\n  }\n};\n\n/*\n * Attaches a websocket to a room\n */\nNetworkBridge.prototype.addMembershipToRoom = function addMembershipToRoom (websocket, room) {\n  var connectionLookup = this.urlMap[trimQueryPartFromURL(websocket.url)];\n\n  if (connectionLookup && connectionLookup.server && connectionLookup.websockets.indexOf(websocket) !== -1) {\n    if (!connectionLookup.roomMemberships[room]) {\n      connectionLookup.roomMemberships[room] = [];\n    }\n\n    connectionLookup.roomMemberships[room].push(websocket);\n  }\n};\n\n/*\n * Attaches a server object to the urlMap hash so that it can find a websockets\n * which are connected to it and so that websockets can in turn can find it.\n *\n * @param {object} server - server object to add to the urlMap hash\n * @param {string} url\n */\nNetworkBridge.prototype.attachServer = function attachServer (server, url) {\n  var connectionLookup = this.urlMap[url];\n\n  if (!connectionLookup) {\n    this.urlMap[url] = {\n      server: server,\n      websockets: [],\n      roomMemberships: {}\n    };\n\n    return server;\n  }\n};\n\n/*\n * Finds the server which is 'running' on the given url.\n *\n * @param {string} url - the url to use to find which server is running on it\n */\nNetworkBridge.prototype.serverLookup = function serverLookup (url) {\n  var serverURL = trimQueryPartFromURL(url);\n  var connectionLookup = this.urlMap[serverURL];\n\n  if (connectionLookup) {\n    return connectionLookup.server;\n  }\n};\n\n/*\n * Finds all websockets which is 'listening' on the given url.\n *\n * @param {string} url - the url to use to find all websockets which are associated with it\n * @param {string} room - if a room is provided, will only return sockets in this room\n * @param {class} broadcaster - socket that is broadcasting and is to be excluded from the lookup\n */\nNetworkBridge.prototype.websocketsLookup = function websocketsLookup (url, room, broadcaster) {\n  var serverURL = trimQueryPartFromURL(url);\n  var websockets;\n  var connectionLookup = this.urlMap[serverURL];\n\n  websockets = connectionLookup ? connectionLookup.websockets : [];\n\n  if (room) {\n    var members = connectionLookup.roomMemberships[room];\n    websockets = members || [];\n  }\n\n  return broadcaster ? websockets.filter(function (websocket) { return websocket !== broadcaster; }) : websockets;\n};\n\n/*\n * Removes the entry associated with the url.\n *\n * @param {string} url\n */\nNetworkBridge.prototype.removeServer = function removeServer (url) {\n  delete this.urlMap[trimQueryPartFromURL(url)];\n};\n\n/*\n * Removes the individual websocket from the map of associated websockets.\n *\n * @param {object} websocket - websocket object to remove from the url map\n * @param {string} url\n */\nNetworkBridge.prototype.removeWebSocket = function removeWebSocket (websocket, url) {\n  var serverURL = trimQueryPartFromURL(url);\n  var connectionLookup = this.urlMap[serverURL];\n\n  if (connectionLookup) {\n    connectionLookup.websockets = reject(connectionLookup.websockets, function (socket) { return socket === websocket; });\n  }\n};\n\n/*\n * Removes a websocket from a room\n */\nNetworkBridge.prototype.removeMembershipFromRoom = function removeMembershipFromRoom (websocket, room) {\n  var connectionLookup = this.urlMap[trimQueryPartFromURL(websocket.url)];\n  var memberships = connectionLookup.roomMemberships[room];\n\n  if (connectionLookup && memberships !== null) {\n    connectionLookup.roomMemberships[room] = reject(memberships, function (socket) { return socket === websocket; });\n  }\n};\n\nvar networkBridge = new NetworkBridge(); // Note: this is a singleton\n\n/*\n * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n */\nvar CLOSE_CODES = {\n  CLOSE_NORMAL: 1000,\n  CLOSE_GOING_AWAY: 1001,\n  CLOSE_PROTOCOL_ERROR: 1002,\n  CLOSE_UNSUPPORTED: 1003,\n  CLOSE_NO_STATUS: 1005,\n  CLOSE_ABNORMAL: 1006,\n  UNSUPPORTED_DATA: 1007,\n  POLICY_VIOLATION: 1008,\n  CLOSE_TOO_LARGE: 1009,\n  MISSING_EXTENSION: 1010,\n  INTERNAL_ERROR: 1011,\n  SERVICE_RESTART: 1012,\n  TRY_AGAIN_LATER: 1013,\n  TLS_HANDSHAKE: 1015\n};\n\nvar ERROR_PREFIX = {\n  CONSTRUCTOR_ERROR: \"Failed to construct 'WebSocket':\",\n  CLOSE_ERROR: \"Failed to execute 'close' on 'WebSocket':\",\n  EVENT: {\n    CONSTRUCT: \"Failed to construct 'Event':\",\n    MESSAGE: \"Failed to construct 'MessageEvent':\",\n    CLOSE: \"Failed to construct 'CloseEvent':\"\n  }\n};\n\nvar EventPrototype = function EventPrototype () {};\n\nEventPrototype.prototype.stopPropagation = function stopPropagation () {};\nEventPrototype.prototype.stopImmediatePropagation = function stopImmediatePropagation () {};\n\n// if no arguments are passed then the type is set to \"undefined\" on\n// chrome and safari.\nEventPrototype.prototype.initEvent = function initEvent (type, bubbles, cancelable) {\n    if ( type === void 0 ) type = 'undefined';\n    if ( bubbles === void 0 ) bubbles = false;\n    if ( cancelable === void 0 ) cancelable = false;\n\n  this.type = \"\" + type;\n  this.bubbles = Boolean(bubbles);\n  this.cancelable = Boolean(cancelable);\n};\n\nvar Event = (function (EventPrototype$$1) {\n  function Event(type, eventInitConfig) {\n    if ( eventInitConfig === void 0 ) eventInitConfig = {};\n\n    EventPrototype$$1.call(this);\n\n    if (!type) {\n      throw new TypeError(((ERROR_PREFIX.EVENT_ERROR) + \" 1 argument required, but only 0 present.\"));\n    }\n\n    if (typeof eventInitConfig !== 'object') {\n      throw new TypeError(((ERROR_PREFIX.EVENT_ERROR) + \" parameter 2 ('eventInitDict') is not an object.\"));\n    }\n\n    var bubbles = eventInitConfig.bubbles;\n    var cancelable = eventInitConfig.cancelable;\n\n    this.type = \"\" + type;\n    this.timeStamp = Date.now();\n    this.target = null;\n    this.srcElement = null;\n    this.returnValue = true;\n    this.isTrusted = false;\n    this.eventPhase = 0;\n    this.defaultPrevented = false;\n    this.currentTarget = null;\n    this.cancelable = cancelable ? Boolean(cancelable) : false;\n    this.canncelBubble = false;\n    this.bubbles = bubbles ? Boolean(bubbles) : false;\n  }\n\n  if ( EventPrototype$$1 ) Event.__proto__ = EventPrototype$$1;\n  Event.prototype = Object.create( EventPrototype$$1 && EventPrototype$$1.prototype );\n  Event.prototype.constructor = Event;\n\n  return Event;\n}(EventPrototype));\n\nvar MessageEvent = (function (EventPrototype$$1) {\n  function MessageEvent(type, eventInitConfig) {\n    if ( eventInitConfig === void 0 ) eventInitConfig = {};\n\n    EventPrototype$$1.call(this);\n\n    if (!type) {\n      throw new TypeError(((ERROR_PREFIX.EVENT.MESSAGE) + \" 1 argument required, but only 0 present.\"));\n    }\n\n    if (typeof eventInitConfig !== 'object') {\n      throw new TypeError(((ERROR_PREFIX.EVENT.MESSAGE) + \" parameter 2 ('eventInitDict') is not an object\"));\n    }\n\n    var bubbles = eventInitConfig.bubbles;\n    var cancelable = eventInitConfig.cancelable;\n    var data = eventInitConfig.data;\n    var origin = eventInitConfig.origin;\n    var lastEventId = eventInitConfig.lastEventId;\n    var ports = eventInitConfig.ports;\n\n    this.type = \"\" + type;\n    this.timeStamp = Date.now();\n    this.target = null;\n    this.srcElement = null;\n    this.returnValue = true;\n    this.isTrusted = false;\n    this.eventPhase = 0;\n    this.defaultPrevented = false;\n    this.currentTarget = null;\n    this.cancelable = cancelable ? Boolean(cancelable) : false;\n    this.canncelBubble = false;\n    this.bubbles = bubbles ? Boolean(bubbles) : false;\n    this.origin = \"\" + origin;\n    this.ports = typeof ports === 'undefined' ? null : ports;\n    this.data = typeof data === 'undefined' ? null : data;\n    this.lastEventId = \"\" + (lastEventId || '');\n  }\n\n  if ( EventPrototype$$1 ) MessageEvent.__proto__ = EventPrototype$$1;\n  MessageEvent.prototype = Object.create( EventPrototype$$1 && EventPrototype$$1.prototype );\n  MessageEvent.prototype.constructor = MessageEvent;\n\n  return MessageEvent;\n}(EventPrototype));\n\nvar CloseEvent = (function (EventPrototype$$1) {\n  function CloseEvent(type, eventInitConfig) {\n    if ( eventInitConfig === void 0 ) eventInitConfig = {};\n\n    EventPrototype$$1.call(this);\n\n    if (!type) {\n      throw new TypeError(((ERROR_PREFIX.EVENT.CLOSE) + \" 1 argument required, but only 0 present.\"));\n    }\n\n    if (typeof eventInitConfig !== 'object') {\n      throw new TypeError(((ERROR_PREFIX.EVENT.CLOSE) + \" parameter 2 ('eventInitDict') is not an object\"));\n    }\n\n    var bubbles = eventInitConfig.bubbles;\n    var cancelable = eventInitConfig.cancelable;\n    var code = eventInitConfig.code;\n    var reason = eventInitConfig.reason;\n    var wasClean = eventInitConfig.wasClean;\n\n    this.type = \"\" + type;\n    this.timeStamp = Date.now();\n    this.target = null;\n    this.srcElement = null;\n    this.returnValue = true;\n    this.isTrusted = false;\n    this.eventPhase = 0;\n    this.defaultPrevented = false;\n    this.currentTarget = null;\n    this.cancelable = cancelable ? Boolean(cancelable) : false;\n    this.cancelBubble = false;\n    this.bubbles = bubbles ? Boolean(bubbles) : false;\n    this.code = typeof code === 'number' ? parseInt(code, 10) : 0;\n    this.reason = \"\" + (reason || '');\n    this.wasClean = wasClean ? Boolean(wasClean) : false;\n  }\n\n  if ( EventPrototype$$1 ) CloseEvent.__proto__ = EventPrototype$$1;\n  CloseEvent.prototype = Object.create( EventPrototype$$1 && EventPrototype$$1.prototype );\n  CloseEvent.prototype.constructor = CloseEvent;\n\n  return CloseEvent;\n}(EventPrototype));\n\n/*\n * Creates an Event object and extends it to allow full modification of\n * its properties.\n *\n * @param {object} config - within config you will need to pass type and optionally target\n */\nfunction createEvent(config) {\n  var type = config.type;\n  var target = config.target;\n  var eventObject = new Event(type);\n\n  if (target) {\n    eventObject.target = target;\n    eventObject.srcElement = target;\n    eventObject.currentTarget = target;\n  }\n\n  return eventObject;\n}\n\n/*\n * Creates a MessageEvent object and extends it to allow full modification of\n * its properties.\n *\n * @param {object} config - within config: type, origin, data and optionally target\n */\nfunction createMessageEvent(config) {\n  var type = config.type;\n  var origin = config.origin;\n  var data = config.data;\n  var target = config.target;\n  var messageEvent = new MessageEvent(type, {\n    data: data,\n    origin: origin\n  });\n\n  if (target) {\n    messageEvent.target = target;\n    messageEvent.srcElement = target;\n    messageEvent.currentTarget = target;\n  }\n\n  return messageEvent;\n}\n\n/*\n * Creates a CloseEvent object and extends it to allow full modification of\n * its properties.\n *\n * @param {object} config - within config: type and optionally target, code, and reason\n */\nfunction createCloseEvent(config) {\n  var code = config.code;\n  var reason = config.reason;\n  var type = config.type;\n  var target = config.target;\n  var wasClean = config.wasClean;\n\n  if (!wasClean) {\n    wasClean = code === 1000;\n  }\n\n  var closeEvent = new CloseEvent(type, {\n    code: code,\n    reason: reason,\n    wasClean: wasClean\n  });\n\n  if (target) {\n    closeEvent.target = target;\n    closeEvent.srcElement = target;\n    closeEvent.currentTarget = target;\n  }\n\n  return closeEvent;\n}\n\nfunction closeWebSocketConnection(context, code, reason) {\n  context.readyState = WebSocket$1.CLOSING;\n\n  var server = networkBridge.serverLookup(context.url);\n  var closeEvent = createCloseEvent({\n    type: 'close',\n    target: context,\n    code: code,\n    reason: reason\n  });\n\n  delay(function () {\n    networkBridge.removeWebSocket(context, context.url);\n\n    context.readyState = WebSocket$1.CLOSED;\n    context.dispatchEvent(closeEvent);\n\n    if (server) {\n      server.dispatchEvent(closeEvent, server);\n    }\n  }, context);\n}\n\nfunction failWebSocketConnection(context, code, reason) {\n  context.readyState = WebSocket$1.CLOSING;\n\n  var server = networkBridge.serverLookup(context.url);\n  var closeEvent = createCloseEvent({\n    type: 'close',\n    target: context,\n    code: code,\n    reason: reason,\n    wasClean: false\n  });\n\n  var errorEvent = createEvent({\n    type: 'error',\n    target: context\n  });\n\n  delay(function () {\n    networkBridge.removeWebSocket(context, context.url);\n\n    context.readyState = WebSocket$1.CLOSED;\n    context.dispatchEvent(errorEvent);\n    context.dispatchEvent(closeEvent);\n\n    if (server) {\n      server.dispatchEvent(closeEvent, server);\n    }\n  }, context);\n}\n\nfunction normalizeSendData(data) {\n  if (Object.prototype.toString.call(data) !== '[object Blob]' && !(data instanceof ArrayBuffer)) {\n    data = String(data);\n  }\n\n  return data;\n}\n\nfunction proxyFactory(target) {\n  var handler = {\n    get: function get(obj, prop) {\n      if (prop === 'close') {\n        return function close(options) {\n          if ( options === void 0 ) options = {};\n\n          var code = options.code || CLOSE_CODES.CLOSE_NORMAL;\n          var reason = options.reason || '';\n\n          closeWebSocketConnection(target, code, reason);\n        };\n      }\n\n      if (prop === 'send') {\n        return function send(data) {\n          data = normalizeSendData(data);\n\n          target.dispatchEvent(\n            createMessageEvent({\n              type: 'message',\n              data: data,\n              origin: this.url,\n              target: target\n            })\n          );\n        };\n      }\n\n      if (prop === 'on') {\n        return function onWrapper(type, cb) {\n          target.addEventListener((\"server::\" + type), cb);\n        };\n      }\n\n      return obj[prop];\n    }\n  };\n\n  var proxy = new Proxy(target, handler);\n  return proxy;\n}\n\nfunction lengthInUtf8Bytes(str) {\n  // Matches only the 10.. bytes that are non-initial characters in a multi-byte sequence.\n  var m = encodeURIComponent(str).match(/%[89ABab]/g);\n  return str.length + (m ? m.length : 0);\n}\n\nfunction urlVerification(url) {\n  var urlRecord = new urlParse(url);\n  var pathname = urlRecord.pathname;\n  var protocol = urlRecord.protocol;\n  var hash = urlRecord.hash;\n\n  if (!url) {\n    throw new TypeError(((ERROR_PREFIX.CONSTRUCTOR_ERROR) + \" 1 argument required, but only 0 present.\"));\n  }\n\n  if (!pathname) {\n    urlRecord.pathname = '/';\n  }\n\n  if (protocol === '') {\n    throw new SyntaxError(((ERROR_PREFIX.CONSTRUCTOR_ERROR) + \" The URL '\" + (urlRecord.toString()) + \"' is invalid.\"));\n  }\n\n  if (protocol !== 'ws:' && protocol !== 'wss:') {\n    throw new SyntaxError(\n      ((ERROR_PREFIX.CONSTRUCTOR_ERROR) + \" The URL's scheme must be either 'ws' or 'wss'. '\" + protocol + \"' is not allowed.\")\n    );\n  }\n\n  if (hash !== '') {\n    /* eslint-disable max-len */\n    throw new SyntaxError(\n      ((ERROR_PREFIX.CONSTRUCTOR_ERROR) + \" The URL contains a fragment identifier ('\" + hash + \"'). Fragment identifiers are not allowed in WebSocket URLs.\")\n    );\n    /* eslint-enable max-len */\n  }\n\n  return urlRecord.toString();\n}\n\nfunction protocolVerification(protocols) {\n  if ( protocols === void 0 ) protocols = [];\n\n  if (!Array.isArray(protocols) && typeof protocols !== 'string') {\n    throw new SyntaxError(((ERROR_PREFIX.CONSTRUCTOR_ERROR) + \" The subprotocol '\" + (protocols.toString()) + \"' is invalid.\"));\n  }\n\n  if (typeof protocols === 'string') {\n    protocols = [protocols];\n  }\n\n  var uniq = protocols\n    .map(function (p) { return ({ count: 1, protocol: p }); })\n    .reduce(function (a, b) {\n      a[b.protocol] = (a[b.protocol] || 0) + b.count;\n      return a;\n    }, {});\n\n  var duplicates = Object.keys(uniq).filter(function (a) { return uniq[a] > 1; });\n\n  if (duplicates.length > 0) {\n    throw new SyntaxError(((ERROR_PREFIX.CONSTRUCTOR_ERROR) + \" The subprotocol '\" + (duplicates[0]) + \"' is duplicated.\"));\n  }\n\n  return protocols;\n}\n\n/*\n * The main websocket class which is designed to mimick the native WebSocket class as close\n * as possible.\n *\n * https://html.spec.whatwg.org/multipage/web-sockets.html\n */\nvar WebSocket$1 = (function (EventTarget$$1) {\n  function WebSocket(url, protocols) {\n    EventTarget$$1.call(this);\n\n    this.url = urlVerification(url);\n    protocols = protocolVerification(protocols);\n    this.protocol = protocols[0] || '';\n\n    this.binaryType = 'blob';\n    this.readyState = WebSocket.CONNECTING;\n\n    var server = networkBridge.attachWebSocket(this, this.url);\n\n    /*\n     * This delay is needed so that we dont trigger an event before the callbacks have been\n     * setup. For example:\n     *\n     * var socket = new WebSocket('ws://localhost');\n     *\n     * If we dont have the delay then the event would be triggered right here and this is\n     * before the onopen had a chance to register itself.\n     *\n     * socket.onopen = () => { // this would never be called };\n     *\n     * and with the delay the event gets triggered here after all of the callbacks have been\n     * registered :-)\n     */\n    delay(function delayCallback() {\n      if (server) {\n        if (\n          server.options.verifyClient &&\n          typeof server.options.verifyClient === 'function' &&\n          !server.options.verifyClient()\n        ) {\n          this.readyState = WebSocket.CLOSED;\n\n          log(\n            'error',\n            (\"WebSocket connection to '\" + (this.url) + \"' failed: HTTP Authentication failed; no valid credentials available\")\n          );\n\n          networkBridge.removeWebSocket(this, this.url);\n          this.dispatchEvent(createEvent({ type: 'error', target: this }));\n          this.dispatchEvent(createCloseEvent({ type: 'close', target: this, code: CLOSE_CODES.CLOSE_NORMAL }));\n        } else {\n          if (server.options.selectProtocol && typeof server.options.selectProtocol === 'function') {\n            var selectedProtocol = server.options.selectProtocol(protocols);\n            var isFilled = selectedProtocol !== '';\n            var isRequested = protocols.indexOf(selectedProtocol) !== -1;\n            if (isFilled && !isRequested) {\n              this.readyState = WebSocket.CLOSED;\n\n              log('error', (\"WebSocket connection to '\" + (this.url) + \"' failed: Invalid Sub-Protocol\"));\n\n              networkBridge.removeWebSocket(this, this.url);\n              this.dispatchEvent(createEvent({ type: 'error', target: this }));\n              this.dispatchEvent(createCloseEvent({ type: 'close', target: this, code: CLOSE_CODES.CLOSE_NORMAL }));\n              return;\n            }\n            this.protocol = selectedProtocol;\n          }\n          this.readyState = WebSocket.OPEN;\n          this.dispatchEvent(createEvent({ type: 'open', target: this }));\n          server.dispatchEvent(createEvent({ type: 'connection' }), proxyFactory(this));\n        }\n      } else {\n        this.readyState = WebSocket.CLOSED;\n        this.dispatchEvent(createEvent({ type: 'error', target: this }));\n        this.dispatchEvent(createCloseEvent({ type: 'close', target: this, code: CLOSE_CODES.CLOSE_NORMAL }));\n\n        log('error', (\"WebSocket connection to '\" + (this.url) + \"' failed\"));\n      }\n    }, this);\n  }\n\n  if ( EventTarget$$1 ) WebSocket.__proto__ = EventTarget$$1;\n  WebSocket.prototype = Object.create( EventTarget$$1 && EventTarget$$1.prototype );\n  WebSocket.prototype.constructor = WebSocket;\n\n  var prototypeAccessors = { onopen: {},onmessage: {},onclose: {},onerror: {} };\n\n  prototypeAccessors.onopen.get = function () {\n    return this.listeners.open;\n  };\n\n  prototypeAccessors.onmessage.get = function () {\n    return this.listeners.message;\n  };\n\n  prototypeAccessors.onclose.get = function () {\n    return this.listeners.close;\n  };\n\n  prototypeAccessors.onerror.get = function () {\n    return this.listeners.error;\n  };\n\n  prototypeAccessors.onopen.set = function (listener) {\n    delete this.listeners.open;\n    this.addEventListener('open', listener);\n  };\n\n  prototypeAccessors.onmessage.set = function (listener) {\n    delete this.listeners.message;\n    this.addEventListener('message', listener);\n  };\n\n  prototypeAccessors.onclose.set = function (listener) {\n    delete this.listeners.close;\n    this.addEventListener('close', listener);\n  };\n\n  prototypeAccessors.onerror.set = function (listener) {\n    delete this.listeners.error;\n    this.addEventListener('error', listener);\n  };\n\n  WebSocket.prototype.send = function send (data) {\n    var this$1 = this;\n\n    if (this.readyState === WebSocket.CLOSING || this.readyState === WebSocket.CLOSED) {\n      throw new Error('WebSocket is already in CLOSING or CLOSED state');\n    }\n\n    // TODO: handle bufferedAmount\n\n    var messageEvent = createMessageEvent({\n      type: 'server::message',\n      origin: this.url,\n      data: normalizeSendData(data)\n    });\n\n    var server = networkBridge.serverLookup(this.url);\n\n    if (server) {\n      delay(function () {\n        this$1.dispatchEvent(messageEvent, data);\n      }, server);\n    }\n  };\n\n  WebSocket.prototype.close = function close (code, reason) {\n    if (code !== undefined) {\n      if (typeof code !== 'number' || (code !== 1000 && (code < 3000 || code > 4999))) {\n        throw new TypeError(\n          ((ERROR_PREFIX.CLOSE_ERROR) + \" The code must be either 1000, or between 3000 and 4999. \" + code + \" is neither.\")\n        );\n      }\n    }\n\n    if (reason !== undefined) {\n      var length = lengthInUtf8Bytes(reason);\n\n      if (length > 123) {\n        throw new SyntaxError(((ERROR_PREFIX.CLOSE_ERROR) + \" The message must not be greater than 123 bytes.\"));\n      }\n    }\n\n    if (this.readyState === WebSocket.CLOSING || this.readyState === WebSocket.CLOSED) {\n      return;\n    }\n\n    if (this.readyState === WebSocket.CONNECTING) {\n      failWebSocketConnection(this, code, reason);\n    } else {\n      closeWebSocketConnection(this, code, reason);\n    }\n  };\n\n  Object.defineProperties( WebSocket.prototype, prototypeAccessors );\n\n  return WebSocket;\n}(EventTarget));\n\nWebSocket$1.CONNECTING = 0;\nWebSocket$1.prototype.CONNECTING = WebSocket$1.CONNECTING;\nWebSocket$1.OPEN = 1;\nWebSocket$1.prototype.OPEN = WebSocket$1.OPEN;\nWebSocket$1.CLOSING = 2;\nWebSocket$1.prototype.CLOSING = WebSocket$1.CLOSING;\nWebSocket$1.CLOSED = 3;\nWebSocket$1.prototype.CLOSED = WebSocket$1.CLOSED;\n\nvar dedupe = function (arr) { return arr.reduce(function (deduped, b) {\n    if (deduped.indexOf(b) > -1) { return deduped; }\n    return deduped.concat(b);\n  }, []); };\n\nfunction retrieveGlobalObject() {\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  return typeof process === 'object' && typeof require === 'function' && typeof global === 'object' ? global : this;\n}\n\nvar Server$1 = (function (EventTarget$$1) {\n  function Server(url, options) {\n    if ( options === void 0 ) options = {};\n\n    EventTarget$$1.call(this);\n    var urlRecord = new urlParse(url);\n\n    if (!urlRecord.pathname) {\n      urlRecord.pathname = '/';\n    }\n\n    this.url = urlRecord.toString();\n\n    this.originalWebSocket = null;\n    var server = networkBridge.attachServer(this, this.url);\n\n    if (!server) {\n      this.dispatchEvent(createEvent({ type: 'error' }));\n      throw new Error('A mock server is already listening on this url');\n    }\n\n    if (typeof options.verifyClient === 'undefined') {\n      options.verifyClient = null;\n    }\n\n    if (typeof options.selectProtocol === 'undefined') {\n      options.selectProtocol = null;\n    }\n\n    this.options = options;\n    this.start();\n  }\n\n  if ( EventTarget$$1 ) Server.__proto__ = EventTarget$$1;\n  Server.prototype = Object.create( EventTarget$$1 && EventTarget$$1.prototype );\n  Server.prototype.constructor = Server;\n\n  /*\n   * Attaches the mock websocket object to the global object\n   */\n  Server.prototype.start = function start () {\n    var globalObj = retrieveGlobalObject();\n\n    if (globalObj.WebSocket) {\n      this.originalWebSocket = globalObj.WebSocket;\n    }\n\n    globalObj.WebSocket = WebSocket$1;\n  };\n\n  /*\n   * Removes the mock websocket object from the global object\n   */\n  Server.prototype.stop = function stop (callback) {\n    if ( callback === void 0 ) callback = function () {};\n\n    var globalObj = retrieveGlobalObject();\n\n    if (this.originalWebSocket) {\n      globalObj.WebSocket = this.originalWebSocket;\n    } else {\n      delete globalObj.WebSocket;\n    }\n\n    this.originalWebSocket = null;\n\n    networkBridge.removeServer(this.url);\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  };\n\n  /*\n   * This is the main function for the mock server to subscribe to the on events.\n   *\n   * ie: mockServer.on('connection', function() { console.log('a mock client connected'); });\n   *\n   * @param {string} type - The event key to subscribe to. Valid keys are: connection, message, and close.\n   * @param {function} callback - The callback which should be called when a certain event is fired.\n   */\n  Server.prototype.on = function on (type, callback) {\n    this.addEventListener(type, callback);\n  };\n\n  /*\n   * Closes the connection and triggers the onclose method of all listening\n   * websockets. After that it removes itself from the urlMap so another server\n   * could add itself to the url.\n   *\n   * @param {object} options\n   */\n  Server.prototype.close = function close (options) {\n    if ( options === void 0 ) options = {};\n\n    var code = options.code;\n    var reason = options.reason;\n    var wasClean = options.wasClean;\n    var listeners = networkBridge.websocketsLookup(this.url);\n\n    // Remove server before notifications to prevent immediate reconnects from\n    // socket onclose handlers\n    networkBridge.removeServer(this.url);\n\n    listeners.forEach(function (socket) {\n      socket.readyState = WebSocket$1.CLOSE;\n      socket.dispatchEvent(\n        createCloseEvent({\n          type: 'close',\n          target: socket,\n          code: code || CLOSE_CODES.CLOSE_NORMAL,\n          reason: reason || '',\n          wasClean: wasClean\n        })\n      );\n    });\n\n    this.dispatchEvent(createCloseEvent({ type: 'close' }), this);\n  };\n\n  /*\n   * Sends a generic message event to all mock clients.\n   */\n  Server.prototype.emit = function emit (event, data, options) {\n    var this$1 = this;\n    if ( options === void 0 ) options = {};\n\n    var websockets = options.websockets;\n\n    if (!websockets) {\n      websockets = networkBridge.websocketsLookup(this.url);\n    }\n\n    if (typeof options !== 'object' || arguments.length > 3) {\n      data = Array.prototype.slice.call(arguments, 1, arguments.length);\n      data = data.map(function (item) { return normalizeSendData(item); });\n    } else {\n      data = normalizeSendData(data);\n    }\n\n    websockets.forEach(function (socket) {\n      if (Array.isArray(data)) {\n        socket.dispatchEvent.apply(\n          socket, [ createMessageEvent({\n            type: event,\n            data: data,\n            origin: this$1.url,\n            target: socket\n          }) ].concat( data )\n        );\n      } else {\n        socket.dispatchEvent(\n          createMessageEvent({\n            type: event,\n            data: data,\n            origin: this$1.url,\n            target: socket\n          })\n        );\n      }\n    });\n  };\n\n  /*\n   * Returns an array of websockets which are listening to this server\n   * TOOD: this should return a set and not be a method\n   */\n  Server.prototype.clients = function clients () {\n    return networkBridge.websocketsLookup(this.url);\n  };\n\n  /*\n   * Prepares a method to submit an event to members of the room\n   *\n   * e.g. server.to('my-room').emit('hi!');\n   */\n  Server.prototype.to = function to (room, broadcaster, broadcastList) {\n    var this$1 = this;\n    if ( broadcastList === void 0 ) broadcastList = [];\n\n    var self = this;\n    var websockets = dedupe(broadcastList.concat(networkBridge.websocketsLookup(this.url, room, broadcaster)));\n\n    return {\n      to: function (chainedRoom, chainedBroadcaster) { return this$1.to.call(this$1, chainedRoom, chainedBroadcaster, websockets); },\n      emit: function emit(event, data) {\n        self.emit(event, data, { websockets: websockets });\n      }\n    };\n  };\n\n  /*\n   * Alias for Server.to\n   */\n  Server.prototype.in = function in$1 () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    return this.to.apply(null, args);\n  };\n\n  /*\n   * Simulate an event from the server to the clients. Useful for\n   * simulating errors.\n   */\n  Server.prototype.simulate = function simulate (event) {\n    var listeners = networkBridge.websocketsLookup(this.url);\n\n    if (event === 'error') {\n      listeners.forEach(function (socket) {\n        socket.readyState = WebSocket$1.CLOSE;\n        socket.dispatchEvent(createEvent({ type: 'error' }));\n      });\n    }\n  };\n\n  return Server;\n}(EventTarget));\n\n/*\n * Alternative constructor to support namespaces in socket.io\n *\n * http://socket.io/docs/rooms-and-namespaces/#custom-namespaces\n */\nServer$1.of = function of(url) {\n  return new Server$1(url);\n};\n\n/*\n * The socket-io class is designed to mimick the real API as closely as possible.\n *\n * http://socket.io/docs/\n */\nvar SocketIO$1 = (function (EventTarget$$1) {\n  function SocketIO(url, protocol) {\n    var this$1 = this;\n    if ( url === void 0 ) url = 'socket.io';\n    if ( protocol === void 0 ) protocol = '';\n\n    EventTarget$$1.call(this);\n\n    this.binaryType = 'blob';\n    var urlRecord = new urlParse(url);\n\n    if (!urlRecord.pathname) {\n      urlRecord.pathname = '/';\n    }\n\n    this.url = urlRecord.toString();\n    this.readyState = SocketIO.CONNECTING;\n    this.protocol = '';\n\n    if (typeof protocol === 'string' || (typeof protocol === 'object' && protocol !== null)) {\n      this.protocol = protocol;\n    } else if (Array.isArray(protocol) && protocol.length > 0) {\n      this.protocol = protocol[0];\n    }\n\n    var server = networkBridge.attachWebSocket(this, this.url);\n\n    /*\n     * Delay triggering the connection events so they can be defined in time.\n     */\n    delay(function delayCallback() {\n      if (server) {\n        this.readyState = SocketIO.OPEN;\n        server.dispatchEvent(createEvent({ type: 'connection' }), server, this);\n        server.dispatchEvent(createEvent({ type: 'connect' }), server, this); // alias\n        this.dispatchEvent(createEvent({ type: 'connect', target: this }));\n      } else {\n        this.readyState = SocketIO.CLOSED;\n        this.dispatchEvent(createEvent({ type: 'error', target: this }));\n        this.dispatchEvent(\n          createCloseEvent({\n            type: 'close',\n            target: this,\n            code: CLOSE_CODES.CLOSE_NORMAL\n          })\n        );\n\n        log('error', (\"Socket.io connection to '\" + (this.url) + \"' failed\"));\n      }\n    }, this);\n\n    /**\n      Add an aliased event listener for close / disconnect\n     */\n    this.addEventListener('close', function (event) {\n      this$1.dispatchEvent(\n        createCloseEvent({\n          type: 'disconnect',\n          target: event.target,\n          code: event.code\n        })\n      );\n    });\n  }\n\n  if ( EventTarget$$1 ) SocketIO.__proto__ = EventTarget$$1;\n  SocketIO.prototype = Object.create( EventTarget$$1 && EventTarget$$1.prototype );\n  SocketIO.prototype.constructor = SocketIO;\n\n  var prototypeAccessors = { broadcast: {} };\n\n  /*\n   * Closes the SocketIO connection or connection attempt, if any.\n   * If the connection is already CLOSED, this method does nothing.\n   */\n  SocketIO.prototype.close = function close () {\n    if (this.readyState !== SocketIO.OPEN) {\n      return undefined;\n    }\n\n    var server = networkBridge.serverLookup(this.url);\n    networkBridge.removeWebSocket(this, this.url);\n\n    this.readyState = SocketIO.CLOSED;\n    this.dispatchEvent(\n      createCloseEvent({\n        type: 'close',\n        target: this,\n        code: CLOSE_CODES.CLOSE_NORMAL\n      })\n    );\n\n    if (server) {\n      server.dispatchEvent(\n        createCloseEvent({\n          type: 'disconnect',\n          target: this,\n          code: CLOSE_CODES.CLOSE_NORMAL\n        }),\n        server\n      );\n    }\n\n    return this;\n  };\n\n  /*\n   * Alias for Socket#close\n   *\n   * https://github.com/socketio/socket.io-client/blob/master/lib/socket.js#L383\n   */\n  SocketIO.prototype.disconnect = function disconnect () {\n    return this.close();\n  };\n\n  /*\n   * Submits an event to the server with a payload\n   */\n  SocketIO.prototype.emit = function emit (event) {\n    var data = [], len = arguments.length - 1;\n    while ( len-- > 0 ) data[ len ] = arguments[ len + 1 ];\n\n    if (this.readyState !== SocketIO.OPEN) {\n      throw new Error('SocketIO is already in CLOSING or CLOSED state');\n    }\n\n    var messageEvent = createMessageEvent({\n      type: event,\n      origin: this.url,\n      data: data\n    });\n\n    var server = networkBridge.serverLookup(this.url);\n\n    if (server) {\n      server.dispatchEvent.apply(server, [ messageEvent ].concat( data ));\n    }\n\n    return this;\n  };\n\n  /*\n   * Submits a 'message' event to the server.\n   *\n   * Should behave exactly like WebSocket#send\n   *\n   * https://github.com/socketio/socket.io-client/blob/master/lib/socket.js#L113\n   */\n  SocketIO.prototype.send = function send (data) {\n    this.emit('message', data);\n    return this;\n  };\n\n  /*\n   * For broadcasting events to other connected sockets.\n   *\n   * e.g. socket.broadcast.emit('hi!');\n   * e.g. socket.broadcast.to('my-room').emit('hi!');\n   */\n  prototypeAccessors.broadcast.get = function () {\n    if (this.readyState !== SocketIO.OPEN) {\n      throw new Error('SocketIO is already in CLOSING or CLOSED state');\n    }\n\n    var self = this;\n    var server = networkBridge.serverLookup(this.url);\n    if (!server) {\n      throw new Error((\"SocketIO can not find a server at the specified URL (\" + (this.url) + \")\"));\n    }\n\n    return {\n      emit: function emit(event, data) {\n        server.emit(event, data, { websockets: networkBridge.websocketsLookup(self.url, null, self) });\n        return self;\n      },\n      to: function to(room) {\n        return server.to(room, self);\n      },\n      in: function in$1(room) {\n        return server.in(room, self);\n      }\n    };\n  };\n\n  /*\n   * For registering events to be received from the server\n   */\n  SocketIO.prototype.on = function on (type, callback) {\n    this.addEventListener(type, callback);\n    return this;\n  };\n\n  /*\n   * Remove event listener\n   *\n   * https://socket.io/docs/client-api/#socket-on-eventname-callback\n   */\n  SocketIO.prototype.off = function off (type) {\n    this.removeEventListener(type);\n  };\n\n  /*\n   * Join a room on a server\n   *\n   * http://socket.io/docs/rooms-and-namespaces/#joining-and-leaving\n   */\n  SocketIO.prototype.join = function join (room) {\n    networkBridge.addMembershipToRoom(this, room);\n  };\n\n  /*\n   * Get the websocket to leave the room\n   *\n   * http://socket.io/docs/rooms-and-namespaces/#joining-and-leaving\n   */\n  SocketIO.prototype.leave = function leave (room) {\n    networkBridge.removeMembershipFromRoom(this, room);\n  };\n\n  SocketIO.prototype.to = function to (room) {\n    return this.broadcast.to(room);\n  };\n\n  SocketIO.prototype.in = function in$1 () {\n    return this.to.apply(null, arguments);\n  };\n\n  /*\n   * Invokes all listener functions that are listening to the given event.type property. Each\n   * listener will be passed the event as the first argument.\n   *\n   * @param {object} event - event object which will be passed to all listeners of the event.type property\n   */\n  SocketIO.prototype.dispatchEvent = function dispatchEvent (event) {\n    var this$1 = this;\n    var customArguments = [], len = arguments.length - 1;\n    while ( len-- > 0 ) customArguments[ len ] = arguments[ len + 1 ];\n\n    var eventName = event.type;\n    var listeners = this.listeners[eventName];\n\n    if (!Array.isArray(listeners)) {\n      return false;\n    }\n\n    listeners.forEach(function (listener) {\n      if (customArguments.length > 0) {\n        listener.apply(this$1, customArguments);\n      } else {\n        // Regular WebSockets expect a MessageEvent but Socketio.io just wants raw data\n        //  payload instanceof MessageEvent works, but you can't isntance of NodeEvent\n        //  for now we detect if the output has data defined on it\n        listener.call(this$1, event.data ? event.data : event);\n      }\n    });\n  };\n\n  Object.defineProperties( SocketIO.prototype, prototypeAccessors );\n\n  return SocketIO;\n}(EventTarget));\n\nSocketIO$1.CONNECTING = 0;\nSocketIO$1.OPEN = 1;\nSocketIO$1.CLOSING = 2;\nSocketIO$1.CLOSED = 3;\n\n/*\n * Static constructor methods for the IO Socket\n */\nvar IO = function ioConstructor(url, protocol) {\n  return new SocketIO$1(url, protocol);\n};\n\n/*\n * Alias the raw IO() constructor\n */\nIO.connect = function ioConnect(url, protocol) {\n  /* eslint-disable new-cap */\n  return IO(url, protocol);\n  /* eslint-enable new-cap */\n};\n\nvar Server = Server$1;\nvar WebSocket = WebSocket$1;\nvar SocketIO = IO;\n\nexports.Server = Server;\nexports.WebSocket = WebSocket;\nexports.SocketIO = SocketIO;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"sourceRoot":""}