{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/iframe-extension/lib/index.js"],"names":["MIME_TYPE","RenderedIFrame","Widget","constructor","super","this","_ready","PromiseDelegate","addClass","_iframe","document","createElement","width","height","onload","resolve","node","appendChild","model","_a","_b","promise","data","contentWindow","metadata","write","dispose","remove","rendererFactory","safe","mimeTypes","defaultRank","createRenderer","options","id","dataType","documentWidgetFactoryOptions","name","primaryFileType","fileTypes","defaultFor"],"mappings":"iOAOA,MAAMA,EAAY,sBAIX,MAAMC,UAAuB,EAAAC,OAChCC,cACIC,QACAC,KAAKC,OAAS,IAAI,EAAAC,gBAClBF,KAAKG,SAAS,sBACdH,KAAKI,QAAUC,SAASC,cAAc,UAEtCN,KAAKI,QAAQG,MAAQ,OACrBP,KAAKI,QAAQI,OAAS,QACtBR,KAAKI,QAAQK,OAAS,KAClBT,KAAKC,OAAOS,aAAQ,IAExBV,KAAKW,KAAKC,YAAYZ,KAAKI,SAK/B,kBAAkBS,GACd,IAAIC,EAAIC,QACFf,KAAKC,OAAOe,QAClB,MAAMC,EAAOJ,EAAMI,KAAKtB,GACxB,IAAKsB,IAASjB,KAAKI,QAAQc,cACvB,OAEJ,MAAMC,EAAWN,EAAMM,SAASxB,GAChCK,KAAKI,QAAQG,MAAsF,QAA7EO,EAAKK,aAA2C,EAASA,EAASZ,aAA0B,IAAPO,EAAgBA,EAAKd,KAAKI,QAAQG,MAC7IP,KAAKI,QAAQI,OAAwF,QAA9EO,EAAKI,aAA2C,EAASA,EAASX,cAA2B,IAAPO,EAAgBA,EAAKf,KAAKI,QAAQI,OAC/IR,KAAKI,QAAQc,cAAcb,SAASe,MAAMH,GAK9CI,UACIrB,KAAKI,QAAQkB,SACbvB,MAAMsB,WAMP,MAAME,EAAkB,CAC3BC,MAAM,EACNC,UAAW,CAAC9B,GACZ+B,YAAa,IACbC,eAAgBC,GAAW,IAAIhC,GAenC,EAbmB,CACf,CACIiC,GAAI,wCACJN,kBACAO,SAAU,SACVC,6BAA8B,CAC1BC,KAAM,SACNC,gBAAiB,SACjBC,UAAW,CAAC,UACZC,WAAY,CAAC","file":"89.aeb8e274ecdf6f856f55.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\n/**\n * The MIME type for IFrame.\n */\nconst MIME_TYPE = 'text/html-sandboxed';\n/**\n * A class for rendering an IFrame document.\n */\nexport class RenderedIFrame extends Widget {\n    constructor() {\n        super();\n        this._ready = new PromiseDelegate();\n        this.addClass('jp-IFrameContainer');\n        this._iframe = document.createElement('iframe');\n        // Provide default dimensions\n        this._iframe.width = '100%';\n        this._iframe.height = '400px';\n        this._iframe.onload = () => {\n            this._ready.resolve(void 0);\n        };\n        this.node.appendChild(this._iframe);\n    }\n    /**\n     * Render the IFrame into this widget's node.\n     */\n    async renderModel(model) {\n        var _a, _b;\n        await this._ready.promise;\n        const data = model.data[MIME_TYPE];\n        if (!data || !this._iframe.contentWindow) {\n            return;\n        }\n        const metadata = model.metadata[MIME_TYPE];\n        this._iframe.width = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.width) !== null && _a !== void 0 ? _a : this._iframe.width;\n        this._iframe.height = (_b = metadata === null || metadata === void 0 ? void 0 : metadata.height) !== null && _b !== void 0 ? _b : this._iframe.height;\n        this._iframe.contentWindow.document.write(data);\n    }\n    /**\n     * Dispose of the resources held by the iframe widget.\n     */\n    dispose() {\n        this._iframe.remove();\n        super.dispose();\n    }\n}\n/**\n * A mime renderer factory for IFrame data.\n */\nexport const rendererFactory = {\n    safe: false,\n    mimeTypes: [MIME_TYPE],\n    defaultRank: 100,\n    createRenderer: options => new RenderedIFrame()\n};\nconst extensions = [\n    {\n        id: '@jupyterlite/iframe-extension:factory',\n        rendererFactory,\n        dataType: 'string',\n        documentWidgetFactoryOptions: {\n            name: 'IFrame',\n            primaryFileType: 'IFrame',\n            fileTypes: ['IFrame'],\n            defaultFor: ['IFrame']\n        }\n    }\n];\nexport default extensions;\n"],"sourceRoot":""}