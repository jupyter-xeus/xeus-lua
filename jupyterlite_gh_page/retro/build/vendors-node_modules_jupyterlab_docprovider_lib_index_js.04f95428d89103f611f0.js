(self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] = self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] || []).push([["vendors-node_modules_jupyterlab_docprovider_lib_index_js"],{

/***/ 46319:
/*!*******************************************************************!*\
  !*** ../../node_modules/@jupyterlab/docprovider/lib/awareness.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "moonsOfJupyter": () => (/* binding */ moonsOfJupyter),
/* harmony export */   "getAnonymousUserName": () => (/* binding */ getAnonymousUserName),
/* harmony export */   "userColors": () => (/* binding */ userColors),
/* harmony export */   "getRandomColor": () => (/* binding */ getRandomColor)
/* harmony export */ });
// From https://en.wikipedia.org/wiki/Moons_of_Jupiter
const moonsOfJupyter = [
    'Metis',
    'Adrastea',
    'Amalthea',
    'Thebe',
    'Io',
    'Europa',
    'Ganymede',
    'Callisto',
    'Themisto',
    'Leda',
    'Ersa',
    'Pandia',
    'Himalia',
    'Lysithea',
    'Elara',
    'Dia',
    'Carpo',
    'Valetudo',
    'Euporie',
    'Eupheme',
    // 'S/2003 J 18',
    // 'S/2010 J 2',
    'Helike',
    // 'S/2003 J 16',
    // 'S/2003 J 2',
    'Euanthe',
    // 'S/2017 J 7',
    'Hermippe',
    'Praxidike',
    'Thyone',
    'Thelxinoe',
    // 'S/2017 J 3',
    'Ananke',
    'Mneme',
    // 'S/2016 J 1',
    'Orthosie',
    'Harpalyke',
    'Iocaste',
    // 'S/2017 J 9',
    // 'S/2003 J 12',
    // 'S/2003 J 4',
    'Erinome',
    'Aitne',
    'Herse',
    'Taygete',
    // 'S/2017 J 2',
    // 'S/2017 J 6',
    'Eukelade',
    'Carme',
    // 'S/2003 J 19',
    'Isonoe',
    // 'S/2003 J 10',
    'Autonoe',
    'Philophrosyne',
    'Cyllene',
    'Pasithee',
    // 'S/2010 J 1',
    'Pasiphae',
    'Sponde',
    // 'S/2017 J 8',
    'Eurydome',
    // 'S/2017 J 5',
    'Kalyke',
    'Hegemone',
    'Kale',
    'Kallichore',
    // 'S/2011 J 1',
    // 'S/2017 J 1',
    'Chaldene',
    'Arche',
    'Eirene',
    'Kore',
    // 'S/2011 J 2',
    // 'S/2003 J 9',
    'Megaclite',
    'Aoede',
    // 'S/2003 J 23',
    'Callirrhoe',
    'Sinope'
];
/**
 * Get a random user-name based on the moons of Jupyter.
 * This function returns names like "Anonymous Io" or "Anonymous Metis".
 */
const getAnonymousUserName = () => 'Anonymous ' +
    moonsOfJupyter[Math.floor(Math.random() * moonsOfJupyter.length)];
const userColors = [
    '#12A0D3',
    '#17AB30',
    '#CC8500',
    '#A79011',
    '#ee6352',
    '#609DA9',
    '#4BA749',
    '#00A1B3'
];
const getRandomColor = () => userColors[Math.floor(Math.random() * userColors.length)];
//# sourceMappingURL=awareness.js.map

/***/ }),

/***/ 68565:
/*!***************************************************************!*\
  !*** ../../node_modules/@jupyterlab/docprovider/lib/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAnonymousUserName": () => (/* reexport safe */ _awareness__WEBPACK_IMPORTED_MODULE_0__.getAnonymousUserName),
/* harmony export */   "getRandomColor": () => (/* reexport safe */ _awareness__WEBPACK_IMPORTED_MODULE_0__.getRandomColor),
/* harmony export */   "moonsOfJupyter": () => (/* reexport safe */ _awareness__WEBPACK_IMPORTED_MODULE_0__.moonsOfJupyter),
/* harmony export */   "userColors": () => (/* reexport safe */ _awareness__WEBPACK_IMPORTED_MODULE_0__.userColors),
/* harmony export */   "ProviderMock": () => (/* reexport safe */ _mock__WEBPACK_IMPORTED_MODULE_1__.ProviderMock),
/* harmony export */   "IDocumentProviderFactory": () => (/* reexport safe */ _tokens__WEBPACK_IMPORTED_MODULE_2__.IDocumentProviderFactory),
/* harmony export */   "WebSocketProviderWithLocks": () => (/* reexport safe */ _yprovider__WEBPACK_IMPORTED_MODULE_3__.WebSocketProviderWithLocks)
/* harmony export */ });
/* harmony import */ var _awareness__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./awareness */ 46319);
/* harmony import */ var _mock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mock */ 5671);
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tokens */ 65695);
/* harmony import */ var _yprovider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./yprovider */ 34222);
/* -----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/
/**
 * @packageDocumentation
 * @module docprovider
 */




//# sourceMappingURL=index.js.map

/***/ }),

/***/ 5671:
/*!**************************************************************!*\
  !*** ../../node_modules/@jupyterlab/docprovider/lib/mock.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProviderMock": () => (/* binding */ ProviderMock)
/* harmony export */ });
class ProviderMock {
    requestInitialContent() {
        return Promise.resolve(false);
    }
    putInitializedState() {
        /* nop */
    }
    acquireLock() {
        return Promise.resolve(0);
    }
    releaseLock(lock) {
        /* nop */
    }
    destroy() {
        /* nop */
    }
    setPath(path) {
        /* nop */
    }
}
//# sourceMappingURL=mock.js.map

/***/ }),

/***/ 65695:
/*!****************************************************************!*\
  !*** ../../node_modules/@jupyterlab/docprovider/lib/tokens.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IDocumentProviderFactory": () => (/* binding */ IDocumentProviderFactory)
/* harmony export */ });
/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lumino/coreutils */ 66065);
/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__);

/**
 * The default document provider token.
 */
const IDocumentProviderFactory = new _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__.Token('@jupyterlab/docprovider:IDocumentProviderFactory');
//# sourceMappingURL=tokens.js.map

/***/ }),

/***/ 34222:
/*!*******************************************************************!*\
  !*** ../../node_modules/@jupyterlab/docprovider/lib/yprovider.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebSocketProviderWithLocks": () => (/* binding */ WebSocketProviderWithLocks)
/* harmony export */ });
/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lumino/coreutils */ 66065);
/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lib0_decoding__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lib0/decoding */ 94072);
/* harmony import */ var lib0_encoding__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lib0/encoding */ 69476);
/* harmony import */ var y_websocket__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! y-websocket */ 41972);
/* harmony import */ var yjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! yjs */ 76961);
/* harmony import */ var _awareness__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./awareness */ 46319);
/* harmony import */ var lib0_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lib0/environment */ 92588);
/* -----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/







/**
 * A class to provide Yjs synchronization over WebSocket.
 *
 * The user can specify their own user-name and user-color by adding url parameters:
 *   ?username=Alice&usercolor=007007
 * where usercolor must be a six-digit hexadecimal encoded RGB value without the hash token.
 *
 * We specify custom messages that the server can interpret. For reference please look in yjs_ws_server.
 *
 */
class WebSocketProviderWithLocks extends y_websocket__WEBPACK_IMPORTED_MODULE_1__.WebsocketProvider {
    /**
     * Construct a new WebSocketProviderWithLocks
     *
     * @param options The instantiation options for a WebSocketProviderWithLocks
     */
    constructor(options) {
        super(options.url, options.contentType + ':' + options.path, options.ymodel.ydoc, {
            awareness: options.ymodel.awareness
        });
        this._currentLockRequest = null;
        this._initialContentRequest = null;
        this._path = options.path;
        this._contentType = options.contentType;
        this._serverUrl = options.url;
        const color = '#' + lib0_environment__WEBPACK_IMPORTED_MODULE_2__.getParam('--usercolor', (0,_awareness__WEBPACK_IMPORTED_MODULE_3__.getRandomColor)().slice(1));
        const name = lib0_environment__WEBPACK_IMPORTED_MODULE_2__.getParam('--username', (0,_awareness__WEBPACK_IMPORTED_MODULE_3__.getAnonymousUserName)());
        const awareness = options.ymodel.awareness;
        const currState = awareness.getLocalState();
        // only set if this was not already set by another plugin
        if (currState && currState.name == null) {
            options.ymodel.awareness.setLocalStateField('user', {
                name,
                color
            });
        }
        // Message handler that confirms when a lock has been acquired
        this.messageHandlers[127] = (encoder, decoder, provider, emitSynced, messageType) => {
            // acquired lock
            const timestamp = lib0_decoding__WEBPACK_IMPORTED_MODULE_4__.readUint32(decoder);
            const lockRequest = this._currentLockRequest;
            this._currentLockRequest = null;
            if (lockRequest) {
                lockRequest.resolve(timestamp);
            }
        };
        // Message handler that receives the initial content
        this.messageHandlers[125] = (encoder, decoder, provider, emitSynced, messageType) => {
            // received initial content
            const initialContent = lib0_decoding__WEBPACK_IMPORTED_MODULE_4__.readTailAsUint8Array(decoder);
            // Apply data from server
            if (initialContent.byteLength > 0) {
                setTimeout(() => {
                    yjs__WEBPACK_IMPORTED_MODULE_5__.applyUpdate(this.doc, initialContent);
                }, 0);
            }
            const initialContentRequest = this._initialContentRequest;
            this._initialContentRequest = null;
            if (initialContentRequest) {
                initialContentRequest.resolve(initialContent.byteLength > 0);
            }
        };
        this._isInitialized = false;
        this._onConnectionStatus = this._onConnectionStatus.bind(this);
        this.on('status', this._onConnectionStatus);
    }
    setPath(newPath) {
        if (newPath !== this._path) {
            this._path = newPath;
            // The next time the provider connects, we should connect through a different server url
            this.bcChannel =
                this._serverUrl + '/' + this._contentType + ':' + this._path;
            this.url = this.bcChannel;
            const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_6__.createEncoder();
            lib0_encoding__WEBPACK_IMPORTED_MODULE_6__.write(encoder, 123);
            // writing a utf8 string to the encoder
            const escapedPath = unescape(encodeURIComponent(this._contentType + ':' + newPath));
            for (let i = 0; i < escapedPath.length; i++) {
                lib0_encoding__WEBPACK_IMPORTED_MODULE_6__.write(encoder, 
                /** @type {number} */ escapedPath.codePointAt(i));
            }
            this._sendMessage(lib0_encoding__WEBPACK_IMPORTED_MODULE_6__.toUint8Array(encoder));
        }
    }
    /**
     * Resolves to true if the initial content has been initialized on the server. false otherwise.
     */
    requestInitialContent() {
        if (this._initialContentRequest) {
            return this._initialContentRequest.promise;
        }
        this._initialContentRequest = new _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__.PromiseDelegate();
        this._sendMessage(new Uint8Array([125]));
        // Resolve with true if the server doesn't respond for some reason.
        // In case of a connection problem, we don't want the user to re-initialize the window.
        // Instead wait for y-websocket to connect to the server.
        // @todo maybe we should reload instead..
        setTimeout(() => { var _a; return (_a = this._initialContentRequest) === null || _a === void 0 ? void 0 : _a.resolve(false); }, 1000);
        return this._initialContentRequest.promise;
    }
    /**
     * Put the initialized state.
     */
    putInitializedState() {
        const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_6__.createEncoder();
        lib0_encoding__WEBPACK_IMPORTED_MODULE_6__.writeVarUint(encoder, 124);
        lib0_encoding__WEBPACK_IMPORTED_MODULE_6__.writeUint8Array(encoder, yjs__WEBPACK_IMPORTED_MODULE_5__.encodeStateAsUpdate(this.doc));
        this._sendMessage(lib0_encoding__WEBPACK_IMPORTED_MODULE_6__.toUint8Array(encoder));
        this._isInitialized = true;
    }
    /**
     * Acquire a lock.
     * Returns a Promise that resolves to the lock number.
     */
    acquireLock() {
        if (this._currentLockRequest) {
            return this._currentLockRequest.promise;
        }
        this._sendMessage(new Uint8Array([127]));
        // try to acquire lock in regular interval
        const intervalID = setInterval(() => {
            if (this.wsconnected) {
                // try to acquire lock
                this._sendMessage(new Uint8Array([127]));
            }
        }, 500);
        let resolve, reject;
        const promise = new Promise((_resolve, _reject) => {
            resolve = _resolve;
            reject = _reject;
        });
        this._currentLockRequest = { promise, resolve, reject };
        const _finally = () => {
            clearInterval(intervalID);
        };
        promise.then(_finally, _finally);
        return promise;
    }
    /**
     * Release a lock.
     *
     * @param lock The lock to release.
     */
    releaseLock(lock) {
        const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_6__.createEncoder();
        // reply with release lock
        lib0_encoding__WEBPACK_IMPORTED_MODULE_6__.writeVarUint(encoder, 126);
        lib0_encoding__WEBPACK_IMPORTED_MODULE_6__.writeUint32(encoder, lock);
        // releasing lock
        this._sendMessage(lib0_encoding__WEBPACK_IMPORTED_MODULE_6__.toUint8Array(encoder));
    }
    /**
     * Send a new message to WebSocket server.
     *
     * @param message The message to send
     */
    _sendMessage(message) {
        // send once connected
        const send = () => {
            setTimeout(() => {
                if (this.wsconnected) {
                    this.ws.send(message);
                }
                else {
                    this.once('status', send);
                }
            }, 0);
        };
        send();
    }
    /**
     * Handle a change to the connection status.
     *
     * @param status The connection status.
     */
    async _onConnectionStatus(status) {
        if (this._isInitialized && status.status === 'connected') {
            const lock = await this.acquireLock();
            const contentIsInitialized = await this.requestInitialContent();
            if (!contentIsInitialized) {
                this.putInitializedState();
            }
            this.releaseLock(lock);
        }
    }
}
//# sourceMappingURL=yprovider.js.map

/***/ }),

/***/ 29849:
/*!**************************************!*\
  !*** ../../node_modules/lib0/url.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decodeQueryParams": () => (/* binding */ decodeQueryParams),
/* harmony export */   "encodeQueryParams": () => (/* binding */ encodeQueryParams)
/* harmony export */ });
/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./object.js */ 69600);
/**
 * Utility module to work with urls.
 *
 * @module url
 */



/**
 * Parse query parameters from an url.
 *
 * @param {string} url
 * @return {Object<string,string>}
 */
const decodeQueryParams = url => {
  /**
   * @type {Object<string,string>}
   */
  const query = {}
  const urlQuerySplit = url.split('?')
  const pairs = urlQuerySplit[urlQuerySplit.length - 1].split('&')
  for (var i = 0; i < pairs.length; i++) {
    const item = pairs[i]
    if (item.length > 0) {
      const pair = item.split('=')
      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '')
    }
  }
  return query
}

/**
 * @param {Object<string,string>} params
 * @return {string}
 */
const encodeQueryParams = params =>
  _object_js__WEBPACK_IMPORTED_MODULE_0__.map(params, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join('&')


/***/ }),

/***/ 65831:
/*!**********************************************!*\
  !*** ../../node_modules/y-protocols/auth.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "messagePermissionDenied": () => (/* binding */ messagePermissionDenied),
/* harmony export */   "writePermissionDenied": () => (/* binding */ writePermissionDenied),
/* harmony export */   "readAuthMessage": () => (/* binding */ readAuthMessage)
/* harmony export */ });
/* harmony import */ var lib0_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lib0/encoding */ 69476);
/* harmony import */ var lib0_decoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lib0/decoding */ 94072);

 // eslint-disable-line



const messagePermissionDenied = 0

/**
 * @param {encoding.Encoder} encoder
 * @param {string} reason
 */
const writePermissionDenied = (encoder, reason) => {
  lib0_encoding__WEBPACK_IMPORTED_MODULE_0__.writeVarUint(encoder, messagePermissionDenied)
  lib0_encoding__WEBPACK_IMPORTED_MODULE_0__.writeVarString(encoder, reason)
}

/**
 * @callback PermissionDeniedHandler
 * @param {any} y
 * @param {string} reason
 */

/**
 *
 * @param {decoding.Decoder} decoder
 * @param {Y.Doc} y
 * @param {PermissionDeniedHandler} permissionDeniedHandler
 */
const readAuthMessage = (decoder, y, permissionDeniedHandler) => {
  switch (lib0_decoding__WEBPACK_IMPORTED_MODULE_1__.readVarUint(decoder)) {
    case messagePermissionDenied: permissionDeniedHandler(y, lib0_decoding__WEBPACK_IMPORTED_MODULE_1__.readVarString(decoder))
  }
}


/***/ }),

/***/ 41972:
/*!*********************************************************!*\
  !*** ../../node_modules/y-websocket/src/y-websocket.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebsocketProvider": () => (/* binding */ WebsocketProvider)
/* harmony export */ });
/* harmony import */ var lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lib0/broadcastchannel */ 62538);
/* harmony import */ var lib0_time__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lib0/time */ 40870);
/* harmony import */ var lib0_encoding__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lib0/encoding */ 69476);
/* harmony import */ var lib0_decoding__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lib0/decoding */ 94072);
/* harmony import */ var y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! y-protocols/sync */ 68078);
/* harmony import */ var y_protocols_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! y-protocols/auth */ 65831);
/* harmony import */ var y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! y-protocols/awareness */ 6493);
/* harmony import */ var lib0_mutex__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lib0/mutex */ 31955);
/* harmony import */ var lib0_observable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lib0/observable */ 75736);
/* harmony import */ var lib0_math__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lib0/math */ 21332);
/* harmony import */ var lib0_url__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lib0/url */ 29849);
/* provided dependency */ var process = __webpack_require__(/*! process/browser */ 34406);
/*
Unlike stated in the LICENSE file, it is not necessary to include the copyright notice and permission notice when you copy code from this file.
*/

/**
 * @module provider/websocket
 */

/* eslint-env browser */

 // eslint-disable-line












const messageSync = 0
const messageQueryAwareness = 3
const messageAwareness = 1
const messageAuth = 2

/**
 *                       encoder,          decoder,          provider,          emitSynced, messageType
 * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}
 */
const messageHandlers = []

messageHandlers[messageSync] = (encoder, decoder, provider, emitSynced, messageType) => {
  lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageSync)
  const syncMessageType = y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.readSyncMessage(decoder, encoder, provider.doc, provider)
  if (emitSynced && syncMessageType === y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.messageYjsSyncStep2 && !provider.synced) {
    provider.synced = true
  }
}

messageHandlers[messageQueryAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {
  lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageAwareness)
  lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint8Array(encoder, y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.encodeAwarenessUpdate(provider.awareness, Array.from(provider.awareness.getStates().keys())))
}

messageHandlers[messageAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {
  y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.applyAwarenessUpdate(provider.awareness, lib0_decoding__WEBPACK_IMPORTED_MODULE_4__.readVarUint8Array(decoder), provider)
}

messageHandlers[messageAuth] = (encoder, decoder, provider, emitSynced, messageType) => {
  y_protocols_auth__WEBPACK_IMPORTED_MODULE_1__.readAuthMessage(decoder, provider.doc, permissionDeniedHandler)
}

const reconnectTimeoutBase = 1200
const maxReconnectTimeout = 2500
// @todo - this should depend on awareness.outdatedTime
const messageReconnectTimeout = 30000

/**
 * @param {WebsocketProvider} provider
 * @param {string} reason
 */
const permissionDeniedHandler = (provider, reason) => console.warn(`Permission denied to access ${provider.url}.\n${reason}`)

/**
 * @param {WebsocketProvider} provider
 * @param {Uint8Array} buf
 * @param {boolean} emitSynced
 * @return {encoding.Encoder}
 */
const readMessage = (provider, buf, emitSynced) => {
  const decoder = lib0_decoding__WEBPACK_IMPORTED_MODULE_4__.createDecoder(buf)
  const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder()
  const messageType = lib0_decoding__WEBPACK_IMPORTED_MODULE_4__.readVarUint(decoder)
  const messageHandler = provider.messageHandlers[messageType]
  if (/** @type {any} */ (messageHandler)) {
    messageHandler(encoder, decoder, provider, emitSynced, messageType)
  } else {
    console.error('Unable to compute message')
  }
  return encoder
}

/**
 * @param {WebsocketProvider} provider
 */
const setupWS = provider => {
  if (provider.shouldConnect && provider.ws === null) {
    const websocket = new provider._WS(provider.url)
    websocket.binaryType = 'arraybuffer'
    provider.ws = websocket
    provider.wsconnecting = true
    provider.wsconnected = false
    provider.synced = false

    websocket.onmessage = event => {
      provider.wsLastMessageReceived = lib0_time__WEBPACK_IMPORTED_MODULE_5__.getUnixTime()
      const encoder = readMessage(provider, new Uint8Array(event.data), true)
      if (lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.length(encoder) > 1) {
        websocket.send(lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder))
      }
    }
    websocket.onclose = () => {
      provider.ws = null
      provider.wsconnecting = false
      if (provider.wsconnected) {
        provider.wsconnected = false
        provider.synced = false
        // update awareness (all users except local left)
        y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.removeAwarenessStates(provider.awareness, Array.from(provider.awareness.getStates().keys()).filter(client => client !== provider.doc.clientID), provider)
        provider.emit('status', [{
          status: 'disconnected'
        }])
      } else {
        provider.wsUnsuccessfulReconnects++
      }
      // Start with no reconnect timeout and increase timeout by
      // log10(wsUnsuccessfulReconnects).
      // The idea is to increase reconnect timeout slowly and have no reconnect
      // timeout at the beginning (log(1) = 0)
      setTimeout(setupWS, lib0_math__WEBPACK_IMPORTED_MODULE_6__.min(lib0_math__WEBPACK_IMPORTED_MODULE_6__.log10(provider.wsUnsuccessfulReconnects + 1) * reconnectTimeoutBase, maxReconnectTimeout), provider)
    }
    websocket.onopen = () => {
      provider.wsLastMessageReceived = lib0_time__WEBPACK_IMPORTED_MODULE_5__.getUnixTime()
      provider.wsconnecting = false
      provider.wsconnected = true
      provider.wsUnsuccessfulReconnects = 0
      provider.emit('status', [{
        status: 'connected'
      }])
      // always send sync step 1 when connected
      const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder()
      lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageSync)
      y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.writeSyncStep1(encoder, provider.doc)
      websocket.send(lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder))
      // broadcast local awareness state
      if (provider.awareness.getLocalState() !== null) {
        const encoderAwarenessState = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder()
        lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoderAwarenessState, messageAwareness)
        lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint8Array(encoderAwarenessState, y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.encodeAwarenessUpdate(provider.awareness, [provider.doc.clientID]))
        websocket.send(lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoderAwarenessState))
      }
    }

    provider.emit('status', [{
      status: 'connecting'
    }])
  }
}

/**
 * @param {WebsocketProvider} provider
 * @param {ArrayBuffer} buf
 */
const broadcastMessage = (provider, buf) => {
  if (provider.wsconnected) {
    /** @type {WebSocket} */ (provider.ws).send(buf)
  }
  if (provider.bcconnected) {
    provider.mux(() => {
      lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.publish(provider.bcChannel, buf)
    })
  }
}

/**
 * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.
 * The document name is attached to the provided url. I.e. the following example
 * creates a websocket connection to http://localhost:1234/my-document-name
 *
 * @example
 *   import * as Y from 'yjs'
 *   import { WebsocketProvider } from 'y-websocket'
 *   const doc = new Y.Doc()
 *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)
 *
 * @extends {Observable<string>}
 */
class WebsocketProvider extends lib0_observable__WEBPACK_IMPORTED_MODULE_8__.Observable {
  /**
   * @param {string} serverUrl
   * @param {string} roomname
   * @param {Y.Doc} doc
   * @param {object} [opts]
   * @param {boolean} [opts.connect]
   * @param {awarenessProtocol.Awareness} [opts.awareness]
   * @param {Object<string,string>} [opts.params]
   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill
   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds
   */
  constructor (serverUrl, roomname, doc, { connect = true, awareness = new y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.Awareness(doc), params = {}, WebSocketPolyfill = WebSocket, resyncInterval = -1 } = {}) {
    super()
    // ensure that url is always ends with /
    while (serverUrl[serverUrl.length - 1] === '/') {
      serverUrl = serverUrl.slice(0, serverUrl.length - 1)
    }
    const encodedParams = lib0_url__WEBPACK_IMPORTED_MODULE_9__.encodeQueryParams(params)
    this.bcChannel = serverUrl + '/' + roomname
    this.url = serverUrl + '/' + roomname + (encodedParams.length === 0 ? '' : '?' + encodedParams)
    this.roomname = roomname
    this.doc = doc
    this._WS = WebSocketPolyfill
    this.awareness = awareness
    this.wsconnected = false
    this.wsconnecting = false
    this.bcconnected = false
    this.wsUnsuccessfulReconnects = 0
    this.messageHandlers = messageHandlers.slice()
    this.mux = lib0_mutex__WEBPACK_IMPORTED_MODULE_10__.createMutex()
    /**
     * @type {boolean}
     */
    this._synced = false
    /**
     * @type {WebSocket?}
     */
    this.ws = null
    this.wsLastMessageReceived = 0
    /**
     * Whether to connect to other peers or not
     * @type {boolean}
     */
    this.shouldConnect = connect

    /**
     * @type {number}
     */
    this._resyncInterval = 0
    if (resyncInterval > 0) {
      this._resyncInterval = /** @type {any} */ (setInterval(() => {
        if (this.ws) {
          // resend sync step 1
          const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder()
          lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageSync)
          y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.writeSyncStep1(encoder, doc)
          this.ws.send(lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder))
        }
      }, resyncInterval))
    }

    /**
     * @param {ArrayBuffer} data
     */
    this._bcSubscriber = data => {
      this.mux(() => {
        const encoder = readMessage(this, new Uint8Array(data), false)
        if (lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.length(encoder) > 1) {
          lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.publish(this.bcChannel, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder))
        }
      })
    }
    /**
     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)
     * @param {Uint8Array} update
     * @param {any} origin
     */
    this._updateHandler = (update, origin) => {
      if (origin !== this) {
        const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder()
        lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageSync)
        y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.writeUpdate(encoder, update)
        broadcastMessage(this, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder))
      }
    }
    this.doc.on('update', this._updateHandler)
    /**
     * @param {any} changed
     * @param {any} origin
     */
    this._awarenessUpdateHandler = ({ added, updated, removed }, origin) => {
      const changedClients = added.concat(updated).concat(removed)
      const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder()
      lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageAwareness)
      lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint8Array(encoder, y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.encodeAwarenessUpdate(awareness, changedClients))
      broadcastMessage(this, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder))
    }
    this._beforeUnloadHandler = () => {
      y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.removeAwarenessStates(this.awareness, [doc.clientID], 'window unload')
    }
    if (typeof window !== 'undefined') {
      window.addEventListener('beforeunload', this._beforeUnloadHandler)
    } else if (true) {
      process.on('exit', () => this._beforeUnloadHandler)
    }
    awareness.on('update', this._awarenessUpdateHandler)
    this._checkInterval = /** @type {any} */ (setInterval(() => {
      if (this.wsconnected && messageReconnectTimeout < lib0_time__WEBPACK_IMPORTED_MODULE_5__.getUnixTime() - this.wsLastMessageReceived) {
        // no message received in a long time - not even your own awareness
        // updates (which are updated every 15 seconds)
        /** @type {WebSocket} */ (this.ws).close()
      }
    }, messageReconnectTimeout / 10))
    if (connect) {
      this.connect()
    }
  }

  /**
   * @type {boolean}
   */
  get synced () {
    return this._synced
  }

  set synced (state) {
    if (this._synced !== state) {
      this._synced = state
      this.emit('synced', [state])
      this.emit('sync', [state])
    }
  }

  destroy () {
    if (this._resyncInterval !== 0) {
      clearInterval(this._resyncInterval)
    }
    clearInterval(this._checkInterval)
    this.disconnect()
    if (typeof window !== 'undefined') {
      window.removeEventListener('beforeunload', this._beforeUnloadHandler)
    } else if (true) {
      process.off('exit', () => this._beforeUnloadHandler)
    }
    this.awareness.off('update', this._awarenessUpdateHandler)
    this.doc.off('update', this._updateHandler)
    super.destroy()
  }

  connectBc () {
    if (!this.bcconnected) {
      lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.subscribe(this.bcChannel, this._bcSubscriber)
      this.bcconnected = true
    }
    // send sync step1 to bc
    this.mux(() => {
      // write sync step 1
      const encoderSync = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder()
      lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoderSync, messageSync)
      y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.writeSyncStep1(encoderSync, this.doc)
      lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.publish(this.bcChannel, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoderSync))
      // broadcast local state
      const encoderState = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder()
      lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoderState, messageSync)
      y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.writeSyncStep2(encoderState, this.doc)
      lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.publish(this.bcChannel, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoderState))
      // write queryAwareness
      const encoderAwarenessQuery = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder()
      lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)
      lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.publish(this.bcChannel, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoderAwarenessQuery))
      // broadcast local awareness state
      const encoderAwarenessState = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder()
      lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoderAwarenessState, messageAwareness)
      lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint8Array(encoderAwarenessState, y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.encodeAwarenessUpdate(this.awareness, [this.doc.clientID]))
      lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.publish(this.bcChannel, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoderAwarenessState))
    })
  }

  disconnectBc () {
    // broadcast message with local awareness state set to null (indicating disconnect)
    const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder()
    lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageAwareness)
    lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint8Array(encoder, y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.encodeAwarenessUpdate(this.awareness, [this.doc.clientID], new Map()))
    broadcastMessage(this, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder))
    if (this.bcconnected) {
      lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.unsubscribe(this.bcChannel, this._bcSubscriber)
      this.bcconnected = false
    }
  }

  disconnect () {
    this.shouldConnect = false
    this.disconnectBc()
    if (this.ws !== null) {
      this.ws.close()
    }
  }

  connect () {
    this.shouldConnect = true
    if (!this.wsconnected && this.ws === null) {
      setupWS(this)
      this.connectBc()
    }
  }
}


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_jupyterlab_docprovider_lib_index_js.04f95428d89103f611f0.js.map