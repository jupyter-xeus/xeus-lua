{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/rendermime-extension/lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkD;AACQ;AACoE;AACxE;AACtD;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW;AAC1B,eAAe,oEAAgB,EAAE,oEAAgB,EAAE,4DAAU;AAC7D,cAAc,uEAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,eAAe,sEAAkB;AACjC,0BAA0B,6EAAyB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA,iC","file":"node_modules_jupyterlab_rendermime-extension_lib_index_js.12eb10be13e2d842601f.js","sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module rendermime-extension\n */\nimport { ISanitizer } from '@jupyterlab/apputils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { ILatexTypesetter, IRenderMimeRegistry, RenderMimeRegistry, standardRendererFactories } from '@jupyterlab/rendermime';\nimport { ITranslator } from '@jupyterlab/translation';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.handleLink = 'rendermime:handle-local-link';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A plugin providing a rendermime registry.\n */\nconst plugin = {\n    id: '@jupyterlab/rendermime-extension:plugin',\n    requires: [ITranslator],\n    optional: [IDocumentManager, ILatexTypesetter, ISanitizer],\n    provides: IRenderMimeRegistry,\n    activate: activate,\n    autoStart: true\n};\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n/**\n * Activate the rendermine plugin.\n */\nfunction activate(app, translator, docManager, latexTypesetter, sanitizer) {\n    const trans = translator.load('jupyterlab');\n    if (docManager) {\n        app.commands.addCommand(CommandIDs.handleLink, {\n            label: trans.__('Handle Local Link'),\n            execute: args => {\n                const path = args['path'];\n                const id = args['id'];\n                if (!path) {\n                    return;\n                }\n                // First check if the path exists on the server.\n                return docManager.services.contents\n                    .get(path, { content: false })\n                    .then(() => {\n                    // Open the link with the default rendered widget factory,\n                    // if applicable.\n                    const factory = docManager.registry.defaultRenderedWidgetFactory(path);\n                    const widget = docManager.openOrReveal(path, factory.name);\n                    // Handle the hash if one has been provided.\n                    if (widget && id) {\n                        widget.setFragment(id);\n                    }\n                });\n            }\n        });\n    }\n    return new RenderMimeRegistry({\n        initialFactories: standardRendererFactories,\n        linkHandler: !docManager\n            ? undefined\n            : {\n                handleLink: (node, path, id) => {\n                    // If node has the download attribute explicitly set, use the\n                    // default browser downloading behavior.\n                    if (node.tagName === 'A' && node.hasAttribute('download')) {\n                        return;\n                    }\n                    app.commandLinker.connectNode(node, CommandIDs.handleLink, {\n                        path,\n                        id\n                    });\n                }\n            },\n        latexTypesetter: latexTypesetter !== null && latexTypesetter !== void 0 ? latexTypesetter : undefined,\n        translator: translator,\n        sanitizer: sanitizer !== null && sanitizer !== void 0 ? sanitizer : undefined\n    });\n}\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}