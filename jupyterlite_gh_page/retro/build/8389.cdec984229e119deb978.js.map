{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/nboutput.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/index.js"],"names":["logNotebookOutput","activate","app","nbtracker","loggerRegistry","registerNB","nb","logOutput","msg","levelNormal","levelError","KernelMessage","logger","getLogger","context","path","rendermime","content","data","Object","assign","output_type","header","msg_type","level","name","log","type","sessionContext","iopubMessage","connect","_","unhandledMessage","forEach","widgetAdded","id","requires","INotebookTracker","optional","ILoggerRegistry","autoStart","CommandIDs","createNew","interrupt","restart","restartClear","restartAndRunToSelected","restartRunAll","reconnectToKernel","changeKernel","createConsole","createOutputView","clearAllOutputs","closeAndShutdown","trust","exportToFormat","run","runAndAdvance","runAndInsert","runInConsole","runAll","runAllAbove","runAllBelow","renderAllMarkdown","toCode","toMarkdown","toRaw","cut","copy","pasteAbove","pasteBelow","pasteAndReplace","moveUp","moveDown","clearOutputs","deleteCell","insertAbove","insertBelow","selectAbove","selectBelow","extendAbove","extendTop","extendBelow","extendBottom","selectAll","deselectAll","editMode","merge","mergeAbove","mergeBelow","split","commandMode","toggleAllLines","undoCellAction","redoCellAction","markdown1","markdown2","markdown3","markdown4","markdown5","markdown6","hideCode","showCode","hideAllCode","showAllCode","hideOutput","showOutput","hideAllOutputs","showAllOutputs","enableOutputScrolling","disableOutputScrolling","selectLastRunCell","replaceSelection","autoClosingBrackets","toggleCollapseCmd","collapseAllCmd","expandAllCmd","copyToClipboard","FACTORY","FORMAT_EXCLUDE","trackerPlugin","provides","INotebookWidgetFactory","ITranslator","ICommandPalette","IFileBrowserFactory","ILauncher","ILayoutRestorer","IMainMenu","ISettingRegistry","ISessionContextDialogs","factory","translator","palette","browserFactory","launcher","restorer","mainMenu","settingRegistry","sessionDialogs","trans","load","services","serviceManager","commands","tracker","NotebookTracker","namespace","fetchSettings","Promise","reject","Error","then","settings","updateConfig","changed","addCommand","execute","args","_a","codeConfig","get","composite","markdownConfig","rawConfig","anyToggled","toggled","set","label","__","isToggled","some","x","catch","reason","console","warn","message","updateTracker","editorConfig","notebookConfig","kernelShutdown","shutdownOnClose","restore","command","panel","when","ready","docRegistry","addModelFactory","NotebookModelFactory","shell","sessionContextDialogs","isEnabled","Private","isEnabledAndSingleSelected","currentChanged","sender","_b","model","cells","list","cell","widgets","newIndex","MarkdownCell","toggleCollapsedSignal","newCell","collapsing","NotebookActions","notebook","headingCollapsed","activeCell","refreshCellCollapsed","activeCellChanged","current","getCurrent","currentWidget","activeCellIndex","length","fileName","title","showDialog","body","buttons","Dialog","result","button","accept","shutdown","dispose","save","restarted","executed","kernel","session","mode","selectKernel","reconnect","text","isEnabledAndHeadingSelected","addCommands","category","addItem","isPalette","populatePalette","ft","getFileType","options","widget","setConfig","code","StaticNotebook","markdown","raw","scrollPastEnd","defaultCell","recordTiming","numberCellsToRenderDirectly","renderCellOnIdle","observedTopMargin","observedBottomMargin","maxNumberOutputs","widgetCreated","icon","iconClass","iconLabel","pathChanged","add","editMenu","undoers","undo","editor","redo","clearers","clearCurrentLabel","n","clearAllLabel","clearCurrent","clearAll","fileMenu","closeAndCleaners","closeAndCleanupLabel","closeAndCleanup","kernelMenu","kernelUsers","interruptKernel","resolve","restartKernelAndClearLabel","restartKernel","restartKernelAndClear","shutdownKernel","consoleCreators","createConsoleLabel","viewMenu","editorViewers","toggleLineNumbers","lineNumbersToggled","config","lineNumbers","runMenu","codeRunners","runLabel","runAllLabel","restartAndRunAllLabel","restartAndRunAll","helpMenu","getKernel","populateMenus","_c","kernelName","kernelspecs","specs","display_name","caption","undefined","notebookIcon","cwd","defaultBrowser","disposables","onSpecsChanged","DisposableSet","baseUrl","PageConfig","rank","default","Infinity","spec","kernelIconUrl","resources","index","indexOf","URLExt","slice","isLauncher","metadata","JSONExt","specsChanged","NotebookPanel","IEditorServices","editorServices","editorFactory","factoryService","newInlineEditor","tools","state","inspectorProvider","notebookTools","NotebookTools","activeCellTool","slideShow","cellMetadataEditor","collapsed","notebookMetadataEditor","nbconvert","getExportFormats","response","rawFormatExclude","optionValueArray","formatList","keys","formatLabels","getFormatLabels","key","altOption","toUpperCase","substr","option","mimeTypeValue","output_mimetype","push","nbConvert","tool","section","buildIcon","MessageLoop","open","remove","register","render","INotebookTools","IStateDB","IPropertyInspectorProvider","commandEditItem","IStatusBar","statusBar","item","CommandEditStatus","registerStatusItem","align","isActive","exportPlugin","exportTo","formatLabel","url","format","download","child","window","opener","dirty","readOnly","location","items","find","submenu","capCaseKey","labelStr","notebookTrustItem","tranlator","NotebookTrustStatus","widgetFactoryPlugin","IRenderMimeRegistry","contentFactory","NotebookWidgetFactory","fileTypes","modelName","defaultFor","preferKernel","canStartKernel","mimeTypeService","addWidgetFactory","clonedOutputsPlugin","IDocumentManager","docManager","notebookTracker","clonedOutputs","WidgetTracker","restored","async","findWidget","ClonedOutputArea","MainAreaWidget","addSibling","ref","updateCloned","disposed","disconnect","codeConsolePlugin","toJSON","selection","getSelection","start","end","column","line","getOffsetAt","value","substring","cursor","getCursorPosition","srcLines","curLine","lineCount","replace","fromFirst","firstLine","lastLine","join","reply","requestIsComplete","status","setCursorPosition","insertMode","copyOutputPlugin","output","outputArea","outputTracker","outputAreaAreas","node","getElementsByClassName","e","sel","savedRanges","i","rangeCount","getRangeAt","cloneRange","range","document","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","r","copyElement","contextMenu","selector","activateById","preferredLanguage","defaultKernelLanguage","isSelected","nullTranslator","html","latex","pdf","rst","script","slides","Panel","constructor","super","this","_cell","_notebook","_index","UUID","addClass","clone","cloneOutputArea","addWidget","ArrayExt","c"],"mappings":"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","file":"8389.cdec984229e119deb978.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILoggerRegistry } from '@jupyterlab/logconsole';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { KernelMessage } from '@jupyterlab/services';\n/**\n * The Log Console extension.\n */\nexport const logNotebookOutput = {\n    activate: activateNBOutput,\n    id: '@jupyterlab/notebook-extension:log-output',\n    requires: [INotebookTracker],\n    optional: [ILoggerRegistry],\n    autoStart: true\n};\nfunction activateNBOutput(app, nbtracker, loggerRegistry) {\n    if (!loggerRegistry) {\n        // Automatically disable if logconsole is missing\n        return;\n    }\n    function registerNB(nb) {\n        function logOutput(msg, levelNormal, levelError) {\n            if (KernelMessage.isDisplayDataMsg(msg) ||\n                KernelMessage.isStreamMsg(msg) ||\n                KernelMessage.isErrorMsg(msg) ||\n                KernelMessage.isExecuteResultMsg(msg)) {\n                const logger = loggerRegistry.getLogger(nb.context.path);\n                logger.rendermime = nb.content.rendermime;\n                const data = Object.assign(Object.assign({}, msg.content), { output_type: msg.header.msg_type });\n                let level = levelNormal;\n                if (KernelMessage.isErrorMsg(msg) ||\n                    (KernelMessage.isStreamMsg(msg) && msg.content.name === 'stderr')) {\n                    level = levelError;\n                }\n                logger.log({ type: 'output', data, level });\n            }\n        }\n        // There is overlap here since unhandled messages are also emitted in the\n        // iopubMessage signal. However, unhandled messages warrant a higher log\n        // severity, so we'll accept that they are logged twice.\n        nb.context.sessionContext.iopubMessage.connect((_, msg) => logOutput(msg, 'info', 'info'));\n        nb.context.sessionContext.unhandledMessage.connect((_, msg) => logOutput(msg, 'warning', 'error'));\n    }\n    nbtracker.forEach(nb => registerNB(nb));\n    nbtracker.widgetAdded.connect((_, nb) => registerNB(nb));\n}\n//# sourceMappingURL=nboutput.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module notebook-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { Dialog, ICommandPalette, ISessionContextDialogs, MainAreaWidget, sessionContextDialogs, showDialog, WidgetTracker } from '@jupyterlab/apputils';\nimport { MarkdownCell } from '@jupyterlab/cells';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { CommandEditStatus, INotebookTools, INotebookTracker, INotebookWidgetFactory, NotebookActions, NotebookModelFactory, NotebookPanel, NotebookTools, NotebookTracker, NotebookTrustStatus, NotebookWidgetFactory, StaticNotebook } from '@jupyterlab/notebook';\nimport { IPropertyInspectorProvider } from '@jupyterlab/property-inspector';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { buildIcon, notebookIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { JSONExt, UUID } from '@lumino/coreutils';\nimport { DisposableSet } from '@lumino/disposable';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Panel } from '@lumino/widgets';\nimport { logNotebookOutput } from './nboutput';\n/**\n * The command IDs used by the notebook plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.createNew = 'notebook:create-new';\n    CommandIDs.interrupt = 'notebook:interrupt-kernel';\n    CommandIDs.restart = 'notebook:restart-kernel';\n    CommandIDs.restartClear = 'notebook:restart-clear-output';\n    CommandIDs.restartAndRunToSelected = 'notebook:restart-and-run-to-selected';\n    CommandIDs.restartRunAll = 'notebook:restart-run-all';\n    CommandIDs.reconnectToKernel = 'notebook:reconnect-to-kernel';\n    CommandIDs.changeKernel = 'notebook:change-kernel';\n    CommandIDs.createConsole = 'notebook:create-console';\n    CommandIDs.createOutputView = 'notebook:create-output-view';\n    CommandIDs.clearAllOutputs = 'notebook:clear-all-cell-outputs';\n    CommandIDs.closeAndShutdown = 'notebook:close-and-shutdown';\n    CommandIDs.trust = 'notebook:trust';\n    CommandIDs.exportToFormat = 'notebook:export-to-format';\n    CommandIDs.run = 'notebook:run-cell';\n    CommandIDs.runAndAdvance = 'notebook:run-cell-and-select-next';\n    CommandIDs.runAndInsert = 'notebook:run-cell-and-insert-below';\n    CommandIDs.runInConsole = 'notebook:run-in-console';\n    CommandIDs.runAll = 'notebook:run-all-cells';\n    CommandIDs.runAllAbove = 'notebook:run-all-above';\n    CommandIDs.runAllBelow = 'notebook:run-all-below';\n    CommandIDs.renderAllMarkdown = 'notebook:render-all-markdown';\n    CommandIDs.toCode = 'notebook:change-cell-to-code';\n    CommandIDs.toMarkdown = 'notebook:change-cell-to-markdown';\n    CommandIDs.toRaw = 'notebook:change-cell-to-raw';\n    CommandIDs.cut = 'notebook:cut-cell';\n    CommandIDs.copy = 'notebook:copy-cell';\n    CommandIDs.pasteAbove = 'notebook:paste-cell-above';\n    CommandIDs.pasteBelow = 'notebook:paste-cell-below';\n    CommandIDs.pasteAndReplace = 'notebook:paste-and-replace-cell';\n    CommandIDs.moveUp = 'notebook:move-cell-up';\n    CommandIDs.moveDown = 'notebook:move-cell-down';\n    CommandIDs.clearOutputs = 'notebook:clear-cell-output';\n    CommandIDs.deleteCell = 'notebook:delete-cell';\n    CommandIDs.insertAbove = 'notebook:insert-cell-above';\n    CommandIDs.insertBelow = 'notebook:insert-cell-below';\n    CommandIDs.selectAbove = 'notebook:move-cursor-up';\n    CommandIDs.selectBelow = 'notebook:move-cursor-down';\n    CommandIDs.extendAbove = 'notebook:extend-marked-cells-above';\n    CommandIDs.extendTop = 'notebook:extend-marked-cells-top';\n    CommandIDs.extendBelow = 'notebook:extend-marked-cells-below';\n    CommandIDs.extendBottom = 'notebook:extend-marked-cells-bottom';\n    CommandIDs.selectAll = 'notebook:select-all';\n    CommandIDs.deselectAll = 'notebook:deselect-all';\n    CommandIDs.editMode = 'notebook:enter-edit-mode';\n    CommandIDs.merge = 'notebook:merge-cells';\n    CommandIDs.mergeAbove = 'notebook:merge-cell-above';\n    CommandIDs.mergeBelow = 'notebook:merge-cell-below';\n    CommandIDs.split = 'notebook:split-cell-at-cursor';\n    CommandIDs.commandMode = 'notebook:enter-command-mode';\n    CommandIDs.toggleAllLines = 'notebook:toggle-all-cell-line-numbers';\n    CommandIDs.undoCellAction = 'notebook:undo-cell-action';\n    CommandIDs.redoCellAction = 'notebook:redo-cell-action';\n    CommandIDs.markdown1 = 'notebook:change-cell-to-heading-1';\n    CommandIDs.markdown2 = 'notebook:change-cell-to-heading-2';\n    CommandIDs.markdown3 = 'notebook:change-cell-to-heading-3';\n    CommandIDs.markdown4 = 'notebook:change-cell-to-heading-4';\n    CommandIDs.markdown5 = 'notebook:change-cell-to-heading-5';\n    CommandIDs.markdown6 = 'notebook:change-cell-to-heading-6';\n    CommandIDs.hideCode = 'notebook:hide-cell-code';\n    CommandIDs.showCode = 'notebook:show-cell-code';\n    CommandIDs.hideAllCode = 'notebook:hide-all-cell-code';\n    CommandIDs.showAllCode = 'notebook:show-all-cell-code';\n    CommandIDs.hideOutput = 'notebook:hide-cell-outputs';\n    CommandIDs.showOutput = 'notebook:show-cell-outputs';\n    CommandIDs.hideAllOutputs = 'notebook:hide-all-cell-outputs';\n    CommandIDs.showAllOutputs = 'notebook:show-all-cell-outputs';\n    CommandIDs.enableOutputScrolling = 'notebook:enable-output-scrolling';\n    CommandIDs.disableOutputScrolling = 'notebook:disable-output-scrolling';\n    CommandIDs.selectLastRunCell = 'notebook:select-last-run-cell';\n    CommandIDs.replaceSelection = 'notebook:replace-selection';\n    CommandIDs.autoClosingBrackets = 'notebook:toggle-autoclosing-brackets';\n    CommandIDs.toggleCollapseCmd = 'Collapsible_Headings:Toggle_Collapse';\n    CommandIDs.collapseAllCmd = 'Collapsible_Headings:Collapse_All';\n    CommandIDs.expandAllCmd = 'Collapsible_Headings:Expand_All';\n    CommandIDs.copyToClipboard = 'notebook:copy-to-clipboard';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the factory that creates notebooks.\n */\nconst FACTORY = 'Notebook';\n/**\n * The excluded Export To ...\n * (returned from nbconvert's export list)\n */\nconst FORMAT_EXCLUDE = ['notebook', 'python', 'custom'];\n/**\n * The notebook widget tracker provider.\n */\nconst trackerPlugin = {\n    id: '@jupyterlab/notebook-extension:tracker',\n    provides: INotebookTracker,\n    requires: [INotebookWidgetFactory, ITranslator],\n    optional: [\n        ICommandPalette,\n        IFileBrowserFactory,\n        ILauncher,\n        ILayoutRestorer,\n        IMainMenu,\n        ISettingRegistry,\n        ISessionContextDialogs\n    ],\n    activate: activateNotebookHandler,\n    autoStart: true\n};\n/**\n * The notebook cell factory provider.\n */\nconst factory = {\n    id: '@jupyterlab/notebook-extension:factory',\n    provides: NotebookPanel.IContentFactory,\n    requires: [IEditorServices],\n    autoStart: true,\n    activate: (app, editorServices) => {\n        const editorFactory = editorServices.factoryService.newInlineEditor;\n        return new NotebookPanel.ContentFactory({ editorFactory });\n    }\n};\n/**\n * The notebook tools extension.\n */\nconst tools = {\n    activate: activateNotebookTools,\n    provides: INotebookTools,\n    id: '@jupyterlab/notebook-extension:tools',\n    autoStart: true,\n    requires: [INotebookTracker, IEditorServices, IStateDB, ITranslator],\n    optional: [IPropertyInspectorProvider]\n};\n/**\n * A plugin providing a CommandEdit status item.\n */\nexport const commandEditItem = {\n    id: '@jupyterlab/notebook-extension:mode-status',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new CommandEditStatus(translator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:mode-status', {\n            item,\n            align: 'right',\n            rank: 4,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * A plugin providing export commands in the main menu and command palette\n */\nexport const exportPlugin = {\n    id: '@jupyterlab/notebook-extension:export',\n    autoStart: true,\n    requires: [ITranslator, INotebookTracker],\n    optional: [IMainMenu, ICommandPalette],\n    activate: (app, translator, tracker, mainMenu, palette) => {\n        var _a;\n        const trans = translator.load('jupyterlab');\n        const { commands, shell } = app;\n        const services = app.serviceManager;\n        const isEnabled = () => {\n            return Private.isEnabled(shell, tracker);\n        };\n        commands.addCommand(CommandIDs.exportToFormat, {\n            label: args => {\n                const formatLabel = args['label'];\n                return args['isPalette']\n                    ? trans.__('Export Notebook: %1', formatLabel)\n                    : formatLabel;\n            },\n            execute: args => {\n                const current = getCurrent(tracker, shell, args);\n                if (!current) {\n                    return;\n                }\n                const url = PageConfig.getNBConvertURL({\n                    format: args['format'],\n                    download: true,\n                    path: current.context.path\n                });\n                const child = window.open('', '_blank');\n                const { context } = current;\n                if (child) {\n                    child.opener = null;\n                }\n                if (context.model.dirty && !context.model.readOnly) {\n                    return context.save().then(() => {\n                        child === null || child === void 0 ? void 0 : child.location.assign(url);\n                    });\n                }\n                return new Promise(resolve => {\n                    child === null || child === void 0 ? void 0 : child.location.assign(url);\n                    resolve(undefined);\n                });\n            },\n            isEnabled\n        });\n        // Add a notebook group to the File menu.\n        let exportTo;\n        if (mainMenu) {\n            exportTo = (_a = mainMenu.fileMenu.items.find(item => {\n                var _a;\n                return item.type === 'submenu' &&\n                    ((_a = item.submenu) === null || _a === void 0 ? void 0 : _a.id) === 'jp-mainmenu-file-notebookexport';\n            })) === null || _a === void 0 ? void 0 : _a.submenu;\n        }\n        void services.nbconvert.getExportFormats().then(response => {\n            if (response) {\n                const formatLabels = Private.getFormatLabels(translator);\n                // Convert export list to palette and menu items.\n                const formatList = Object.keys(response);\n                formatList.forEach(function (key) {\n                    const capCaseKey = trans.__(key[0].toUpperCase() + key.substr(1));\n                    const labelStr = formatLabels[key] ? formatLabels[key] : capCaseKey;\n                    let args = {\n                        format: key,\n                        label: labelStr,\n                        isPalette: false\n                    };\n                    if (FORMAT_EXCLUDE.indexOf(key) === -1) {\n                        if (exportTo) {\n                            exportTo.addItem({\n                                command: CommandIDs.exportToFormat,\n                                args: args\n                            });\n                        }\n                        if (palette) {\n                            args = {\n                                format: key,\n                                label: labelStr,\n                                isPalette: true\n                            };\n                            const category = trans.__('Notebook Operations');\n                            palette.addItem({\n                                command: CommandIDs.exportToFormat,\n                                category,\n                                args\n                            });\n                        }\n                    }\n                });\n            }\n        });\n    }\n};\n/**\n * A plugin that adds a notebook trust status item to the status bar.\n */\nexport const notebookTrustItem = {\n    id: '@jupyterlab/notebook-extension:trust-status',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, tranlator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new NotebookTrustStatus(tranlator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:trust-status', {\n            item,\n            align: 'right',\n            rank: 3,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * The notebook widget factory provider.\n */\nconst widgetFactoryPlugin = {\n    id: '@jupyterlab/notebook-extension:widget-factory',\n    provides: INotebookWidgetFactory,\n    requires: [\n        NotebookPanel.IContentFactory,\n        IEditorServices,\n        IRenderMimeRegistry,\n        ISessionContextDialogs,\n        ITranslator\n    ],\n    activate: activateWidgetFactory,\n    autoStart: true\n};\n/**\n * The cloned output provider.\n */\nconst clonedOutputsPlugin = {\n    id: '@jupyterlab/notebook-extension:cloned-outputs',\n    requires: [IDocumentManager, INotebookTracker, ITranslator],\n    optional: [ILayoutRestorer],\n    activate: activateClonedOutputs,\n    autoStart: true\n};\n/**\n * A plugin for code consoles functionalities.\n */\nconst codeConsolePlugin = {\n    id: '@jupyterlab/notebook-extension:code-console',\n    requires: [INotebookTracker, ITranslator],\n    activate: activateCodeConsole,\n    autoStart: true\n};\n/**\n * A plugin to copy CodeCell outputs.\n */\nconst copyOutputPlugin = {\n    id: '@jupyterlab/notebook-extensions:copy-output',\n    activate: activateCopyOutput,\n    requires: [ITranslator, INotebookTracker],\n    autoStart: true\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    factory,\n    trackerPlugin,\n    exportPlugin,\n    tools,\n    commandEditItem,\n    notebookTrustItem,\n    widgetFactoryPlugin,\n    logNotebookOutput,\n    clonedOutputsPlugin,\n    codeConsolePlugin,\n    copyOutputPlugin\n];\nexport default plugins;\n/**\n * Activate the notebook tools extension.\n */\nfunction activateNotebookTools(app, tracker, editorServices, state, translator, inspectorProvider) {\n    const trans = translator.load('jupyterlab');\n    const id = 'notebook-tools';\n    const notebookTools = new NotebookTools({ tracker, translator });\n    const activeCellTool = new NotebookTools.ActiveCellTool();\n    const slideShow = NotebookTools.createSlideShowSelector(translator);\n    const editorFactory = editorServices.factoryService.newInlineEditor;\n    const cellMetadataEditor = new NotebookTools.CellMetadataEditorTool({\n        editorFactory,\n        collapsed: false,\n        translator\n    });\n    const notebookMetadataEditor = new NotebookTools.NotebookMetadataEditorTool({\n        editorFactory,\n        translator\n    });\n    const services = app.serviceManager;\n    // Create message hook for triggers to save to the database.\n    const hook = (sender, message) => {\n        switch (message.type) {\n            case 'activate-request':\n                void state.save(id, { open: true });\n                break;\n            case 'after-hide':\n            case 'close-request':\n                void state.remove(id);\n                break;\n            default:\n                break;\n        }\n        return true;\n    };\n    const optionsMap = {};\n    optionsMap.None = null;\n    void services.nbconvert.getExportFormats().then(response => {\n        if (response) {\n            /**\n             * The excluded Cell Inspector Raw NbConvert Formats\n             * (returned from nbconvert's export list)\n             */\n            const rawFormatExclude = [\n                'pdf',\n                'slides',\n                'script',\n                'notebook',\n                'custom'\n            ];\n            let optionValueArray = [\n                [trans.__('PDF'), 'pdf'],\n                [trans.__('Slides'), 'slides'],\n                [trans.__('Script'), 'script'],\n                [trans.__('Notebook'), 'notebook'],\n                [trans.__('Custom'), 'custom']\n            ];\n            // convert exportList to palette and menu items\n            const formatList = Object.keys(response);\n            const formatLabels = Private.getFormatLabels(translator);\n            formatList.forEach(function (key) {\n                if (rawFormatExclude.indexOf(key) === -1) {\n                    const altOption = trans.__(key[0].toUpperCase() + key.substr(1));\n                    const option = formatLabels[key] ? formatLabels[key] : altOption;\n                    const mimeTypeValue = response[key].output_mimetype;\n                    optionValueArray.push([option, mimeTypeValue]);\n                }\n            });\n            const nbConvert = NotebookTools.createNBConvertSelector(optionValueArray, translator);\n            notebookTools.addItem({ tool: nbConvert, section: 'common', rank: 3 });\n        }\n    });\n    notebookTools.title.icon = buildIcon;\n    notebookTools.title.caption = trans.__('Notebook Tools');\n    notebookTools.id = id;\n    notebookTools.addItem({ tool: activeCellTool, section: 'common', rank: 1 });\n    notebookTools.addItem({ tool: slideShow, section: 'common', rank: 2 });\n    notebookTools.addItem({\n        tool: cellMetadataEditor,\n        section: 'advanced',\n        rank: 1\n    });\n    notebookTools.addItem({\n        tool: notebookMetadataEditor,\n        section: 'advanced',\n        rank: 2\n    });\n    MessageLoop.installMessageHook(notebookTools, hook);\n    if (inspectorProvider) {\n        tracker.widgetAdded.connect((sender, panel) => {\n            const inspector = inspectorProvider.register(panel);\n            inspector.render(notebookTools);\n        });\n    }\n    return notebookTools;\n}\n/**\n * Activate the notebook widget factory.\n */\nfunction activateWidgetFactory(app, contentFactory, editorServices, rendermime, sessionContextDialogs, translator) {\n    const factory = new NotebookWidgetFactory({\n        name: FACTORY,\n        fileTypes: ['notebook'],\n        modelName: 'notebook',\n        defaultFor: ['notebook'],\n        preferKernel: true,\n        canStartKernel: true,\n        rendermime: rendermime,\n        contentFactory,\n        editorConfig: StaticNotebook.defaultEditorConfig,\n        notebookConfig: StaticNotebook.defaultNotebookConfig,\n        mimeTypeService: editorServices.mimeTypeService,\n        sessionDialogs: sessionContextDialogs,\n        translator: translator\n    });\n    app.docRegistry.addWidgetFactory(factory);\n    return factory;\n}\n/**\n * Activate the plugin to create and track cloned outputs.\n */\nfunction activateClonedOutputs(app, docManager, notebookTracker, translator, restorer) {\n    const trans = translator.load('jupyterlab');\n    const clonedOutputs = new WidgetTracker({\n        namespace: 'cloned-outputs'\n    });\n    if (restorer) {\n        void restorer.restore(clonedOutputs, {\n            command: CommandIDs.createOutputView,\n            args: widget => ({\n                path: widget.content.path,\n                index: widget.content.index\n            }),\n            name: widget => `${widget.content.path}:${widget.content.index}`,\n            when: notebookTracker.restored // After the notebook widgets (but not contents).\n        });\n    }\n    const { commands, shell } = app;\n    const isEnabledAndSingleSelected = () => {\n        return Private.isEnabledAndSingleSelected(shell, notebookTracker);\n    };\n    commands.addCommand(CommandIDs.createOutputView, {\n        label: trans.__('Create New View for Output'),\n        execute: async (args) => {\n            var _a;\n            let cell;\n            let current;\n            // If we are given a notebook path and cell index, then\n            // use that, otherwise use the current active cell.\n            const path = args.path;\n            let index = args.index;\n            if (path && index !== undefined && index !== null) {\n                current = docManager.findWidget(path, FACTORY);\n                if (!current) {\n                    return;\n                }\n            }\n            else {\n                current = notebookTracker.currentWidget;\n                if (!current) {\n                    return;\n                }\n                cell = current.content.activeCell;\n                index = current.content.activeCellIndex;\n            }\n            // Create a MainAreaWidget\n            const content = new Private.ClonedOutputArea({\n                notebook: current,\n                cell,\n                index,\n                translator\n            });\n            const widget = new MainAreaWidget({ content });\n            current.context.addSibling(widget, {\n                ref: current.id,\n                mode: 'split-bottom'\n            });\n            const updateCloned = () => {\n                void clonedOutputs.save(widget);\n            };\n            current.context.pathChanged.connect(updateCloned);\n            (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.connect(updateCloned);\n            // Add the cloned output to the output widget tracker.\n            void clonedOutputs.add(widget);\n            // Remove the output view if the parent notebook is closed.\n            current.content.disposed.connect(() => {\n                var _a;\n                current.context.pathChanged.disconnect(updateCloned);\n                (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.disconnect(updateCloned);\n                widget.dispose();\n            });\n        },\n        isEnabled: isEnabledAndSingleSelected\n    });\n}\n/**\n * Activate the plugin to add code console functionalities\n */\nfunction activateCodeConsole(app, tracker, translator) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const isEnabled = () => Private.isEnabled(shell, tracker);\n    commands.addCommand(CommandIDs.createConsole, {\n        label: trans.__('New Console for Notebook'),\n        execute: args => {\n            const current = tracker.currentWidget;\n            if (!current) {\n                return;\n            }\n            return Private.createConsole(commands, current, args['activate']);\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runInConsole, {\n        label: trans.__('Run Selected Text or Current Line in Console'),\n        execute: async (args) => {\n            var _a, _b;\n            // Default to not activating the notebook (thereby putting the notebook\n            // into command mode)\n            const current = tracker.currentWidget;\n            if (!current) {\n                return;\n            }\n            const { context, content } = current;\n            const cell = content.activeCell;\n            const metadata = cell === null || cell === void 0 ? void 0 : cell.model.metadata.toJSON();\n            const path = context.path;\n            // ignore action in non-code cell\n            if (!cell || cell.model.type !== 'code') {\n                return;\n            }\n            let code;\n            const editor = cell.editor;\n            const selection = editor.getSelection();\n            const { start, end } = selection;\n            const selected = start.column !== end.column || start.line !== end.line;\n            if (selected) {\n                // Get the selected code from the editor.\n                const start = editor.getOffsetAt(selection.start);\n                const end = editor.getOffsetAt(selection.end);\n                code = editor.model.value.text.substring(start, end);\n            }\n            else {\n                // no selection, find the complete statement around the current line\n                const cursor = editor.getCursorPosition();\n                const srcLines = editor.model.value.text.split('\\n');\n                let curLine = selection.start.line;\n                while (curLine < editor.lineCount &&\n                    !srcLines[curLine].replace(/\\s/g, '').length) {\n                    curLine += 1;\n                }\n                // if curLine > 0, we first do a search from beginning\n                let fromFirst = curLine > 0;\n                let firstLine = 0;\n                let lastLine = firstLine + 1;\n                // eslint-disable-next-line\n                while (true) {\n                    code = srcLines.slice(firstLine, lastLine).join('\\n');\n                    const reply = await ((_b = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.requestIsComplete({\n                        // ipython needs an empty line at the end to correctly identify completeness of indented code\n                        code: code + '\\n\\n'\n                    }));\n                    if ((reply === null || reply === void 0 ? void 0 : reply.content.status) === 'complete') {\n                        if (curLine < lastLine) {\n                            // we find a block of complete statement containing the current line, great!\n                            while (lastLine < editor.lineCount &&\n                                !srcLines[lastLine].replace(/\\s/g, '').length) {\n                                lastLine += 1;\n                            }\n                            editor.setCursorPosition({\n                                line: lastLine,\n                                column: cursor.column\n                            });\n                            break;\n                        }\n                        else {\n                            // discard the complete statement before the current line and continue\n                            firstLine = lastLine;\n                            lastLine = firstLine + 1;\n                        }\n                    }\n                    else if (lastLine < editor.lineCount) {\n                        // if incomplete and there are more lines, add the line and check again\n                        lastLine += 1;\n                    }\n                    else if (fromFirst) {\n                        // we search from the first line and failed, we search again from current line\n                        firstLine = curLine;\n                        lastLine = curLine + 1;\n                        fromFirst = false;\n                    }\n                    else {\n                        // if we have searched both from first line and from current line and we\n                        // cannot find anything, we submit the current line.\n                        code = srcLines[curLine];\n                        while (curLine + 1 < editor.lineCount &&\n                            !srcLines[curLine + 1].replace(/\\s/g, '').length) {\n                            curLine += 1;\n                        }\n                        editor.setCursorPosition({\n                            line: curLine + 1,\n                            column: cursor.column\n                        });\n                        break;\n                    }\n                }\n            }\n            if (!code) {\n                return;\n            }\n            await commands.execute('console:open', {\n                activate: false,\n                insertMode: 'split-bottom',\n                path\n            });\n            await commands.execute('console:inject', {\n                activate: false,\n                code,\n                path,\n                metadata\n            });\n        },\n        isEnabled\n    });\n}\n/**\n * Activate the output copying extension\n */\nfunction activateCopyOutput(app, translator, tracker) {\n    const trans = translator.load('jupyterlab');\n    /**\n     * Copy the contents of an HTMLElement to the system clipboard\n     */\n    function copyElement(e) {\n        const sel = window.getSelection();\n        if (sel == null) {\n            return;\n        }\n        // Save the current selection.\n        const savedRanges = [];\n        for (let i = 0; i < sel.rangeCount; ++i) {\n            savedRanges[i] = sel.getRangeAt(i).cloneRange();\n        }\n        const range = document.createRange();\n        range.selectNodeContents(e);\n        sel.removeAllRanges();\n        sel.addRange(range);\n        document.execCommand('copy');\n        // Restore the saved selection.\n        sel.removeAllRanges();\n        savedRanges.forEach(r => sel.addRange(r));\n    }\n    app.commands.addCommand(CommandIDs.copyToClipboard, {\n        label: trans.__('Copy Output to Clipboard'),\n        execute: args => {\n            var _a;\n            const cell = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.activeCell;\n            if (cell == null) {\n                return;\n            }\n            const output = cell.outputArea.outputTracker.currentWidget;\n            if (output == null) {\n                return;\n            }\n            const outputAreaAreas = output.node.getElementsByClassName('jp-OutputArea-output');\n            if (outputAreaAreas.length > 0) {\n                const area = outputAreaAreas[0];\n                copyElement(area);\n            }\n        }\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copyToClipboard,\n        selector: '.jp-OutputArea-child',\n        rank: 0\n    });\n}\n/**\n * Activate the notebook handler extension.\n */\nfunction activateNotebookHandler(app, factory, translator, palette, browserFactory, launcher, restorer, mainMenu, settingRegistry, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const services = app.serviceManager;\n    const { commands } = app;\n    const tracker = new NotebookTracker({ namespace: 'notebook' });\n    // Fetch settings if possible.\n    const fetchSettings = settingRegistry\n        ? settingRegistry.load(trackerPlugin.id)\n        : Promise.reject(new Error(`No setting registry for ${trackerPlugin.id}`));\n    // Handle state restoration.\n    if (restorer) {\n        fetchSettings\n            .then(settings => {\n            updateConfig(settings);\n            settings.changed.connect(() => {\n                updateConfig(settings);\n            });\n            commands.addCommand(CommandIDs.autoClosingBrackets, {\n                execute: args => {\n                    var _a;\n                    const codeConfig = settings.get('codeCellConfig')\n                        .composite;\n                    const markdownConfig = settings.get('markdownCellConfig')\n                        .composite;\n                    const rawConfig = settings.get('rawCellConfig')\n                        .composite;\n                    const anyToggled = codeConfig.autoClosingBrackets ||\n                        markdownConfig.autoClosingBrackets ||\n                        rawConfig.autoClosingBrackets;\n                    const toggled = !!((_a = args['force']) !== null && _a !== void 0 ? _a : !anyToggled);\n                    [\n                        codeConfig.autoClosingBrackets,\n                        markdownConfig.autoClosingBrackets,\n                        rawConfig.autoClosingBrackets\n                    ] = [toggled, toggled, toggled];\n                    void settings.set('codeCellConfig', codeConfig);\n                    void settings.set('markdownCellConfig', markdownConfig);\n                    void settings.set('rawCellConfig', rawConfig);\n                },\n                label: trans.__('Auto Close Brackets for All Notebook Cell Types'),\n                isToggled: () => ['codeCellConfig', 'markdownCellConfig', 'rawCellConfig'].some(x => settings.get(x).composite.autoClosingBrackets)\n            });\n        })\n            .catch((reason) => {\n            console.warn(reason.message);\n            updateTracker({\n                editorConfig: factory.editorConfig,\n                notebookConfig: factory.notebookConfig,\n                kernelShutdown: factory.shutdownOnClose\n            });\n        });\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: panel => ({ path: panel.context.path, factory: FACTORY }),\n            name: panel => panel.context.path,\n            when: services.ready\n        });\n    }\n    const registry = app.docRegistry;\n    registry.addModelFactory(new NotebookModelFactory({}));\n    addCommands(app, tracker, translator, sessionDialogs);\n    if (palette) {\n        populatePalette(palette, translator);\n    }\n    let id = 0; // The ID counter for notebook panels.\n    const ft = app.docRegistry.getFileType('notebook');\n    factory.widgetCreated.connect((sender, widget) => {\n        var _a, _b;\n        // If the notebook panel does not have an ID, assign it one.\n        widget.id = widget.id || `notebook-${++id}`;\n        // Set up the title icon\n        widget.title.icon = ft === null || ft === void 0 ? void 0 : ft.icon;\n        widget.title.iconClass = (_a = ft === null || ft === void 0 ? void 0 : ft.iconClass) !== null && _a !== void 0 ? _a : '';\n        widget.title.iconLabel = (_b = ft === null || ft === void 0 ? void 0 : ft.iconLabel) !== null && _b !== void 0 ? _b : '';\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        // Add the notebook panel to the tracker.\n        void tracker.add(widget);\n    });\n    /**\n     * Update the settings of the current tracker.\n     */\n    function updateTracker(options) {\n        tracker.forEach(widget => {\n            widget.setConfig(options);\n        });\n    }\n    /**\n     * Update the setting values.\n     */\n    function updateConfig(settings) {\n        const code = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.code), settings.get('codeCellConfig').composite);\n        const markdown = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.markdown), settings.get('markdownCellConfig').composite);\n        const raw = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.raw), settings.get('rawCellConfig').composite);\n        factory.editorConfig = { code, markdown, raw };\n        factory.notebookConfig = {\n            scrollPastEnd: settings.get('scrollPastEnd').composite,\n            defaultCell: settings.get('defaultCell').composite,\n            recordTiming: settings.get('recordTiming').composite,\n            numberCellsToRenderDirectly: settings.get('numberCellsToRenderDirectly')\n                .composite,\n            renderCellOnIdle: settings.get('renderCellOnIdle').composite,\n            observedTopMargin: settings.get('observedTopMargin').composite,\n            observedBottomMargin: settings.get('observedBottomMargin')\n                .composite,\n            maxNumberOutputs: settings.get('maxNumberOutputs').composite\n        };\n        factory.shutdownOnClose = settings.get('kernelShutdown')\n            .composite;\n        updateTracker({\n            editorConfig: factory.editorConfig,\n            notebookConfig: factory.notebookConfig,\n            kernelShutdown: factory.shutdownOnClose\n        });\n    }\n    // Add main menu notebook menu.\n    if (mainMenu) {\n        populateMenus(app, mainMenu, tracker, translator, sessionDialogs);\n    }\n    // Utility function to create a new notebook.\n    const createNew = (cwd, kernelName) => {\n        return commands\n            .execute('docmanager:new-untitled', { path: cwd, type: 'notebook' })\n            .then(model => {\n            if (model != undefined) {\n                return commands.execute('docmanager:open', {\n                    path: model.path,\n                    factory: FACTORY,\n                    kernel: { name: kernelName }\n                });\n            }\n        });\n    };\n    // Add a command for creating a new notebook.\n    commands.addCommand(CommandIDs.createNew, {\n        label: args => {\n            var _a, _b, _c;\n            const kernelName = args['kernelName'] || '';\n            if (args['isLauncher'] && args['kernelName'] && services.kernelspecs) {\n                return ((_c = (_b = (_a = services.kernelspecs.specs) === null || _a === void 0 ? void 0 : _a.kernelspecs[kernelName]) === null || _b === void 0 ? void 0 : _b.display_name) !== null && _c !== void 0 ? _c : '');\n            }\n            if (args['isPalette']) {\n                return trans.__('New Notebook');\n            }\n            return trans.__('Notebook');\n        },\n        caption: trans.__('Create a new notebook'),\n        icon: args => (args['isPalette'] ? undefined : notebookIcon),\n        execute: args => {\n            const cwd = args['cwd'] ||\n                (browserFactory ? browserFactory.defaultBrowser.model.path : '');\n            const kernelName = args['kernelName'] || '';\n            return createNew(cwd, kernelName);\n        }\n    });\n    // Add a launcher item if the launcher is available.\n    if (launcher) {\n        void services.ready.then(() => {\n            let disposables = null;\n            const onSpecsChanged = () => {\n                if (disposables) {\n                    disposables.dispose();\n                    disposables = null;\n                }\n                const specs = services.kernelspecs.specs;\n                if (!specs) {\n                    return;\n                }\n                disposables = new DisposableSet();\n                const baseUrl = PageConfig.getBaseUrl();\n                for (const name in specs.kernelspecs) {\n                    const rank = name === specs.default ? 0 : Infinity;\n                    const spec = specs.kernelspecs[name];\n                    let kernelIconUrl = spec.resources['logo-64x64'];\n                    if (kernelIconUrl) {\n                        const index = kernelIconUrl.indexOf('kernelspecs');\n                        kernelIconUrl = URLExt.join(baseUrl, kernelIconUrl.slice(index));\n                    }\n                    disposables.add(launcher.add({\n                        command: CommandIDs.createNew,\n                        args: { isLauncher: true, kernelName: name },\n                        category: trans.__('Notebook'),\n                        rank,\n                        kernelIconUrl,\n                        metadata: {\n                            kernel: JSONExt.deepCopy(spec.metadata || {})\n                        }\n                    }));\n                }\n            };\n            onSpecsChanged();\n            services.kernelspecs.specsChanged.connect(onSpecsChanged);\n        });\n    }\n    return tracker;\n}\n// Get the current widget and activate unless the args specify otherwise.\nfunction getCurrent(tracker, shell, args) {\n    const widget = tracker.currentWidget;\n    const activate = args['activate'] !== false;\n    if (activate && widget) {\n        shell.activateById(widget.id);\n    }\n    return widget;\n}\n/**\n * Add the notebook commands to the application's command registry.\n */\nfunction addCommands(app, tracker, translator, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    sessionDialogs = sessionDialogs !== null && sessionDialogs !== void 0 ? sessionDialogs : sessionContextDialogs;\n    const isEnabled = () => {\n        return Private.isEnabled(shell, tracker);\n    };\n    const isEnabledAndSingleSelected = () => {\n        return Private.isEnabledAndSingleSelected(shell, tracker);\n    };\n    const refreshCellCollapsed = (notebook) => {\n        var _a, _b;\n        for (const cell of notebook.widgets) {\n            if (cell instanceof MarkdownCell && cell.headingCollapsed) {\n                NotebookActions.setHeadingCollapse(cell, true, notebook);\n            }\n            if (cell.model.id === ((_b = (_a = notebook.activeCell) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.id)) {\n                NotebookActions.expandParent(cell, notebook);\n            }\n        }\n    };\n    const isEnabledAndHeadingSelected = () => {\n        return Private.isEnabledAndHeadingSelected(shell, tracker);\n    };\n    // Set up collapse signal for each header cell in a notebook\n    tracker.currentChanged.connect((sender, panel) => {\n        var _a, _b;\n        if (!((_b = (_a = panel === null || panel === void 0 ? void 0 : panel.content) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.cells)) {\n            return;\n        }\n        panel.content.model.cells.changed.connect((list, args) => {\n            const cell = panel.content.widgets[args.newIndex];\n            if (cell instanceof MarkdownCell &&\n                (args.type === 'add' || args.type === 'set')) {\n                cell.toggleCollapsedSignal.connect((newCell, collapsing) => {\n                    NotebookActions.setHeadingCollapse(newCell, collapsing, panel.content);\n                });\n            }\n            // Might be overkill to refresh this every time, but\n            // it helps to keep the collapse state consistent.\n            refreshCellCollapsed(panel.content);\n        });\n        panel.content.activeCellChanged.connect((notebook, cell) => {\n            NotebookActions.expandParent(cell, notebook);\n        });\n    });\n    commands.addCommand(CommandIDs.runAndAdvance, {\n        label: trans.__('Run Selected Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndAdvance(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.run, {\n        label: trans.__(\"Run Selected Cells and Don't Advance\"),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.run(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAndInsert, {\n        label: trans.__('Run Selected Cells and Insert Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndInsert(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAll, {\n        label: trans.__('Run All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAll(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAllAbove, {\n        label: trans.__('Run All Above Selected Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllAbove(content, context.sessionContext);\n            }\n        },\n        isEnabled: () => {\n            // Can't run above if there are multiple cells selected,\n            // or if we are at the top of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !== 0);\n        }\n    });\n    commands.addCommand(CommandIDs.runAllBelow, {\n        label: trans.__('Run Selected Cell and All Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllBelow(content, context.sessionContext);\n            }\n        },\n        isEnabled: () => {\n            // Can't run below if there are multiple cells selected,\n            // or if we are at the bottom of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !==\n                    tracker.currentWidget.content.widgets.length - 1);\n        }\n    });\n    commands.addCommand(CommandIDs.renderAllMarkdown, {\n        label: trans.__('Render All Markdown Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.renderAllMarkdown(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restart, {\n        label: trans.__('Restart Kernel…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return sessionDialogs.restart(current.sessionContext, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.closeAndShutdown, {\n        label: trans.__('Close and Shut Down'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const fileName = current.title.label;\n            return showDialog({\n                title: trans.__('Shut down the notebook?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', fileName),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.context.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                    });\n                }\n            });\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.trust, {\n        label: () => trans.__('Trust Notebook'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.trust(content).then(() => context.save());\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartClear, {\n        label: trans.__('Restart Kernel and Clear All Outputs…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { content, sessionContext } = current;\n                return sessionDialogs.restart(sessionContext, translator).then(() => {\n                    NotebookActions.clearAllOutputs(content);\n                });\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartAndRunToSelected, {\n        label: trans.__('Restart Kernel and Run up to Selected Cell…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return sessionDialogs\n                    .restart(current.sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAllAbove(content, context.sessionContext).then(executed => {\n                            if (executed || content.activeCellIndex === 0) {\n                                void NotebookActions.run(content, context.sessionContext);\n                            }\n                        });\n                    }\n                });\n            }\n        },\n        isEnabled: isEnabledAndSingleSelected\n    });\n    commands.addCommand(CommandIDs.restartRunAll, {\n        label: trans.__('Restart Kernel and Run All Cells…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content, sessionContext } = current;\n                return sessionDialogs\n                    .restart(sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAll(content, context.sessionContext);\n                    }\n                    return restarted;\n                });\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.clearAllOutputs, {\n        label: trans.__('Clear All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.clearAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.clearOutputs, {\n        label: trans.__('Clear Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.clearOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.interrupt, {\n        label: trans.__('Interrupt Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toCode, {\n        label: trans.__('Change to Code Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'code');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toMarkdown, {\n        label: trans.__('Change to Markdown Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'markdown');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toRaw, {\n        label: trans.__('Change to Raw Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'raw');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.cut, {\n        label: trans.__('Cut Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.cut(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.copy, {\n        label: trans.__('Copy Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.copy(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteBelow, {\n        label: trans.__('Paste Cells Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'below');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteAbove, {\n        label: trans.__('Paste Cells Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'above');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteAndReplace, {\n        label: trans.__('Paste Cells and Replace'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'replace');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deleteCell, {\n        label: trans.__('Delete Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.deleteCells(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.split, {\n        label: trans.__('Split Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.splitCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.merge, {\n        label: trans.__('Merge Selected Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.mergeAbove, {\n        label: trans.__('Merge Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.mergeBelow, {\n        label: trans.__('Merge Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content, false);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertAbove, {\n        label: trans.__('Insert Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertBelow, {\n        label: trans.__('Insert Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectAbove, {\n        label: trans.__('Select Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectBelow, {\n        label: trans.__('Select Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendAbove, {\n        label: trans.__('Extend Selection Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendTop, {\n        label: trans.__('Extend Selection to Top'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBelow, {\n        label: trans.__('Extend Selection Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBottom, {\n        label: trans.__('Extend Selection to Bottom'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectAll, {\n        label: trans.__('Select All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deselectAll, {\n        label: trans.__('Deselect All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.deselectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.moveUp, {\n        label: trans.__('Move Cells Up'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.moveUp(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.moveDown, {\n        label: trans.__('Move Cells Down'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.moveDown(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleAllLines, {\n        label: trans.__('Toggle All Line Numbers'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.toggleAllLineNumbers(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.commandMode, {\n        label: trans.__('Enter Command Mode'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                current.content.mode = 'command';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.editMode, {\n        label: trans.__('Enter Edit Mode'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                current.content.mode = 'edit';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.undoCellAction, {\n        label: trans.__('Undo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.undo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.redoCellAction, {\n        label: trans.__('Redo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.redo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.changeKernel, {\n        label: trans.__('Change Kernel…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return sessionDialogs.selectKernel(current.context.sessionContext, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.reconnectToKernel, {\n        label: trans.__('Reconnect To Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.reconnect();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown1, {\n        label: trans.__('Change to Heading 1'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 1);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown2, {\n        label: trans.__('Change to Heading 2'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 2);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown3, {\n        label: trans.__('Change to Heading 3'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 3);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown4, {\n        label: trans.__('Change to Heading 4'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 4);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown5, {\n        label: trans.__('Change to Heading 5'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 5);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown6, {\n        label: trans.__('Change to Heading 6'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 6);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideCode, {\n        label: trans.__('Collapse Selected Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showCode, {\n        label: trans.__('Expand Selected Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllCode, {\n        label: trans.__('Collapse All Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showAllCode, {\n        label: trans.__('Expand All Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideOutput, {\n        label: trans.__('Collapse Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showOutput, {\n        label: trans.__('Expand Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllOutputs, {\n        label: trans.__('Collapse All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showAllOutputs, {\n        label: trans.__('Expand All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.enableOutputScrolling, {\n        label: trans.__('Enable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.enableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.disableOutputScrolling, {\n        label: trans.__('Disable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.disableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectLastRunCell, {\n        label: trans.__('Select current running or last run cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectLastRunCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.replaceSelection, {\n        label: trans.__('Replace Selection in Notebook Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            const text = args['text'] || '';\n            if (current) {\n                return NotebookActions.replaceSelection(current.content, text);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleCollapseCmd, {\n        label: 'Toggle Collapse Notebook Heading',\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.toggleCurrentHeadingCollapse(current.content);\n            }\n        },\n        isEnabled: isEnabledAndHeadingSelected\n    });\n    commands.addCommand(CommandIDs.collapseAllCmd, {\n        label: 'Collapse All Cells',\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.collapseAll(current.content);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.expandAllCmd, {\n        label: 'Expand All Headings',\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.expandAllHeadings(current.content);\n            }\n        }\n    });\n}\n/**\n * Populate the application's command palette with notebook commands.\n */\nfunction populatePalette(palette, translator) {\n    const trans = translator.load('jupyterlab');\n    let category = trans.__('Notebook Operations');\n    [\n        CommandIDs.interrupt,\n        CommandIDs.restart,\n        CommandIDs.restartClear,\n        CommandIDs.restartRunAll,\n        CommandIDs.runAll,\n        CommandIDs.renderAllMarkdown,\n        CommandIDs.runAllAbove,\n        CommandIDs.runAllBelow,\n        CommandIDs.restartAndRunToSelected,\n        CommandIDs.selectAll,\n        CommandIDs.deselectAll,\n        CommandIDs.clearAllOutputs,\n        CommandIDs.toggleAllLines,\n        CommandIDs.editMode,\n        CommandIDs.commandMode,\n        CommandIDs.changeKernel,\n        CommandIDs.reconnectToKernel,\n        CommandIDs.createConsole,\n        CommandIDs.closeAndShutdown,\n        CommandIDs.trust,\n        CommandIDs.toggleCollapseCmd,\n        CommandIDs.collapseAllCmd,\n        CommandIDs.expandAllCmd\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n    palette.addItem({\n        command: CommandIDs.createNew,\n        category,\n        args: { isPalette: true }\n    });\n    category = trans.__('Notebook Cell Operations');\n    [\n        CommandIDs.run,\n        CommandIDs.runAndAdvance,\n        CommandIDs.runAndInsert,\n        CommandIDs.runInConsole,\n        CommandIDs.clearOutputs,\n        CommandIDs.toCode,\n        CommandIDs.toMarkdown,\n        CommandIDs.toRaw,\n        CommandIDs.cut,\n        CommandIDs.copy,\n        CommandIDs.pasteBelow,\n        CommandIDs.pasteAbove,\n        CommandIDs.pasteAndReplace,\n        CommandIDs.deleteCell,\n        CommandIDs.split,\n        CommandIDs.merge,\n        CommandIDs.mergeAbove,\n        CommandIDs.mergeBelow,\n        CommandIDs.insertAbove,\n        CommandIDs.insertBelow,\n        CommandIDs.selectAbove,\n        CommandIDs.selectBelow,\n        CommandIDs.extendAbove,\n        CommandIDs.extendTop,\n        CommandIDs.extendBelow,\n        CommandIDs.extendBottom,\n        CommandIDs.moveDown,\n        CommandIDs.moveUp,\n        CommandIDs.undoCellAction,\n        CommandIDs.redoCellAction,\n        CommandIDs.markdown1,\n        CommandIDs.markdown2,\n        CommandIDs.markdown3,\n        CommandIDs.markdown4,\n        CommandIDs.markdown5,\n        CommandIDs.markdown6,\n        CommandIDs.hideCode,\n        CommandIDs.showCode,\n        CommandIDs.hideAllCode,\n        CommandIDs.showAllCode,\n        CommandIDs.hideOutput,\n        CommandIDs.showOutput,\n        CommandIDs.hideAllOutputs,\n        CommandIDs.showAllOutputs,\n        CommandIDs.enableOutputScrolling,\n        CommandIDs.disableOutputScrolling\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n}\n/**\n * Populates the application menus for the notebook.\n */\nfunction populateMenus(app, mainMenu, tracker, translator, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const { commands } = app;\n    sessionDialogs = sessionDialogs || sessionContextDialogs;\n    // Add undo/redo hooks to the edit menu.\n    mainMenu.editMenu.undoers.add({\n        tracker,\n        undo: widget => {\n            var _a;\n            (_a = widget.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor.undo();\n        },\n        redo: widget => {\n            var _a;\n            (_a = widget.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor.redo();\n        }\n    });\n    // Add a clearer to the edit menu\n    mainMenu.editMenu.clearers.add({\n        tracker,\n        clearCurrentLabel: (n) => trans.__('Clear Output'),\n        clearAllLabel: (n) => {\n            return trans.__('Clear All Outputs');\n        },\n        clearCurrent: (current) => {\n            return NotebookActions.clearOutputs(current.content);\n        },\n        clearAll: (current) => {\n            return NotebookActions.clearAllOutputs(current.content);\n        }\n    });\n    // Add a close and shutdown command to the file menu.\n    mainMenu.fileMenu.closeAndCleaners.add({\n        tracker,\n        closeAndCleanupLabel: (n) => trans.__('Close and Shutdown Notebook'),\n        closeAndCleanup: (current) => {\n            const fileName = current.title.label;\n            return showDialog({\n                title: trans.__('Shut down the Notebook?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', fileName),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.context.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                    });\n                }\n            });\n        }\n    });\n    // Add a kernel user to the Kernel menu\n    mainMenu.kernelMenu.kernelUsers.add({\n        tracker,\n        interruptKernel: current => {\n            var _a;\n            const kernel = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n            return Promise.resolve(void 0);\n        },\n        reconnectToKernel: current => {\n            var _a;\n            const kernel = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.reconnect();\n            }\n            return Promise.resolve(void 0);\n        },\n        restartKernelAndClearLabel: (n) => trans.__('Restart Kernel and Clear All Outputs…'),\n        restartKernel: current => sessionDialogs.restart(current.sessionContext, translator),\n        restartKernelAndClear: current => {\n            return sessionDialogs\n                .restart(current.sessionContext, translator)\n                .then(restarted => {\n                if (restarted) {\n                    NotebookActions.clearAllOutputs(current.content);\n                }\n                return restarted;\n            });\n        },\n        changeKernel: current => sessionDialogs.selectKernel(current.sessionContext, translator),\n        shutdownKernel: current => current.sessionContext.shutdown()\n    });\n    // Add a console creator the the Kernel menu\n    mainMenu.fileMenu.consoleCreators.add({\n        tracker,\n        createConsoleLabel: (n) => trans.__('New Console for Notebook'),\n        createConsole: current => Private.createConsole(commands, current, true)\n    });\n    // Add an IEditorViewer to the application view menu\n    mainMenu.viewMenu.editorViewers.add({\n        tracker,\n        toggleLineNumbers: widget => {\n            NotebookActions.toggleAllLineNumbers(widget.content);\n        },\n        lineNumbersToggled: widget => {\n            const config = widget.content.editorConfig;\n            return !!(config.code.lineNumbers &&\n                config.markdown.lineNumbers &&\n                config.raw.lineNumbers);\n        }\n    });\n    // Add an ICodeRunner to the application run menu\n    mainMenu.runMenu.codeRunners.add({\n        tracker,\n        runLabel: (n) => trans.__('Run Selected Cells'),\n        runAllLabel: (n) => trans.__('Run All Cells'),\n        restartAndRunAllLabel: (n) => trans.__('Restart Kernel and Run All Cells…'),\n        run: current => {\n            const { context, content } = current;\n            return NotebookActions.runAndAdvance(content, context.sessionContext).then(() => void 0);\n        },\n        runAll: current => {\n            const { context, content } = current;\n            return NotebookActions.runAll(content, context.sessionContext).then(() => void 0);\n        },\n        restartAndRunAll: current => {\n            const { context, content } = current;\n            return sessionDialogs\n                .restart(context.sessionContext, translator)\n                .then(restarted => {\n                if (restarted) {\n                    void NotebookActions.runAll(content, context.sessionContext);\n                }\n                return restarted;\n            });\n        }\n    });\n    // Add kernel information to the application help menu.\n    mainMenu.helpMenu.kernelUsers.add({\n        tracker,\n        getKernel: current => { var _a; return (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel; }\n    });\n}\n/**\n * A namespace for module private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create a console connected with a notebook kernel\n     *\n     * @param commands Commands registry\n     * @param widget Notebook panel\n     * @param activate Should the console be activated\n     */\n    function createConsole(commands, widget, activate) {\n        const options = {\n            path: widget.context.path,\n            preferredLanguage: widget.context.model.defaultKernelLanguage,\n            activate: activate,\n            ref: widget.id,\n            insertMode: 'split-bottom'\n        };\n        return commands.execute('console:create', options);\n    }\n    Private.createConsole = createConsole;\n    /**\n     * Whether there is an active notebook.\n     */\n    function isEnabled(shell, tracker) {\n        return (tracker.currentWidget !== null &&\n            tracker.currentWidget === shell.currentWidget);\n    }\n    Private.isEnabled = isEnabled;\n    /**\n     * Whether there is an notebook active, with a single selected cell.\n     */\n    function isEnabledAndSingleSelected(shell, tracker) {\n        if (!Private.isEnabled(shell, tracker)) {\n            return false;\n        }\n        const { content } = tracker.currentWidget;\n        const index = content.activeCellIndex;\n        // If there are selections that are not the active cell,\n        // this command is confusing, so disable it.\n        for (let i = 0; i < content.widgets.length; ++i) {\n            if (content.isSelected(content.widgets[i]) && i !== index) {\n                return false;\n            }\n        }\n        return true;\n    }\n    Private.isEnabledAndSingleSelected = isEnabledAndSingleSelected;\n    /**\n     * Whether there is an notebook active, with a single selected cell.\n     */\n    function isEnabledAndHeadingSelected(shell, tracker) {\n        if (!Private.isEnabled(shell, tracker)) {\n            return false;\n        }\n        const { content } = tracker.currentWidget;\n        const index = content.activeCellIndex;\n        if (!(content.activeCell instanceof MarkdownCell)) {\n            return false;\n        }\n        // If there are selections that are not the active cell,\n        // this command is confusing, so disable it.\n        for (let i = 0; i < content.widgets.length; ++i) {\n            if (content.isSelected(content.widgets[i]) && i !== index) {\n                return false;\n            }\n        }\n        return true;\n    }\n    Private.isEnabledAndHeadingSelected = isEnabledAndHeadingSelected;\n    /**\n     * The default Export To ... formats and their human readable labels.\n     */\n    function getFormatLabels(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return {\n            html: trans.__('HTML'),\n            latex: trans.__('LaTeX'),\n            markdown: trans.__('Markdown'),\n            pdf: trans.__('PDF'),\n            rst: trans.__('ReStructured Text'),\n            script: trans.__('Executable Script'),\n            slides: trans.__('Reveal.js Slides')\n        };\n    }\n    Private.getFormatLabels = getFormatLabels;\n    /**\n     * A widget hosting a cloned output area.\n     */\n    class ClonedOutputArea extends Panel {\n        constructor(options) {\n            super();\n            this._cell = null;\n            const trans = (options.translator || nullTranslator).load('jupyterlab');\n            this._notebook = options.notebook;\n            this._index = options.index !== undefined ? options.index : -1;\n            this._cell = options.cell || null;\n            this.id = `LinkedOutputView-${UUID.uuid4()}`;\n            this.title.label = 'Output View';\n            this.title.icon = notebookIcon;\n            this.title.caption = this._notebook.title.label\n                ? trans.__('For Notebook: %1', this._notebook.title.label)\n                : trans.__('For Notebook:');\n            this.addClass('jp-LinkedOutputView');\n            // Wait for the notebook to be loaded before\n            // cloning the output area.\n            void this._notebook.context.ready.then(() => {\n                if (!this._cell) {\n                    this._cell = this._notebook.content.widgets[this._index];\n                }\n                if (!this._cell || this._cell.model.type !== 'code') {\n                    this.dispose();\n                    return;\n                }\n                const clone = this._cell.cloneOutputArea();\n                this.addWidget(clone);\n            });\n        }\n        /**\n         * The index of the cell in the notebook.\n         */\n        get index() {\n            return this._cell\n                ? ArrayExt.findFirstIndex(this._notebook.content.widgets, c => c === this._cell)\n                : this._index;\n        }\n        /**\n         * The path of the notebook for the cloned output area.\n         */\n        get path() {\n            return this._notebook.context.path;\n        }\n    }\n    Private.ClonedOutputArea = ClonedOutputArea;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}