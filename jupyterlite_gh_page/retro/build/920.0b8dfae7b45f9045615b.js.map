{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/connectionlost.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/frontend.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/shell.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/lab.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/router.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/treepathupdater.js"],"names":["ConnectionLost","async","manager","err","translator","trans","nullTranslator","load","title","__","networkMsg","showErrorMessage","message","Private","JupyterFrontEndContextMenu","JupyterFrontEnd","Application","constructor","options","super","this","_formatChanged","Signal","contextMenu","ContextMenuSvg","commands","renderer","contextMenuRenderer","restored","Promise","resolve","requestAnimationFrame","commandLinker","CommandLinker","docRegistry","DocumentRegistry","started","then","catch","serviceManager","ServiceManager","_format","format","document","body","dataset","emit","contextMenuHitTest","fn","_contextMenuEvent","target","Node","node","HTMLElement","parentNode","evtContextMenu","event","shiftKey","suppressContextMenu","open","items","menu","length","command","close","preventDefault","stopPropagation","inDocMode","path","paths","docPattern","RegExp","urls","doc","match","IPaths","Token","ITreeResolver","element","closest","SIDEBAR_CLASS","DEFAULT_RANK","ACTIVITY_CLASS","ILabShell","LabShell","Widget","_dockChildHook","handler","msg","type","child","addClass","_tracker","add","removeClass","remove","_activeChanged","_cachedLayout","_currentChanged","_currentPath","_currentPathChanged","_modeChanged","_isRestored","_layoutModified","_layoutDebouncer","Debouncer","undefined","_restored","PromiseDelegate","FocusTracker","_mainOptionsCache","Map","_sideOptionsCache","id","headerPanel","_headerPanel","BoxPanel","menuHandler","_menuHandler","PanelHandler","panel","setAttribute","topHandler","_topHandler","bottomPanel","_bottomPanel","hboxPanel","vsplitPanel","_vsplitPanel","RestorableSplitPanel","dockPanel","_dockPanel","DockPanelSvg","MessageLoop","hsplitPanel","_hsplitPanel","downPanel","_downPanel","TabPanelSvg","tabsMovable","leftHandler","_leftHandler","SideBarHandler","rightHandler","_rightHandler","rootLayout","BoxLayout","sideBar","contentNode","stackedPanel","spacing","direction","orientation","SplitPanel","addWidget","setRelativeSizes","hide","layout","currentChanged","connect","_onCurrentChanged","activeChanged","_onActiveChanged","layoutModified","_onLayoutModified","updated","tabBar","tabMoved","_onTabPanelChanged","widgetRemoved","titleHandler","_titleHandler","TitleHandler","rank","mode","insertWidget","skipLinkWidget","_skipLinkWidget","SkipLinkWidget","show","sender","args","newValue","oldValue","changed","disconnect","_updateTitlePanelTitle","DocumentWidget","context","pathChanged","_updateCurrentPath","activeWidget","currentWidget","currentTitle","hasClass","value","toggleClass","dock","applicationCurrentWidget","saveLayout","activateWidget","widgets","toArray","normalizeAreaConfig","main","restoreLayout","forEach","widget","parent","_addToMainArea","Object","assign","get","activate","clear","shellMode","fit","promise","activateById","has","tabIndex","titles","findIndex","owner","currentIndex","find","activateNextTab","current","_currentTabBar","ci","nextBar","_adjacentBar","activatePreviousTab","prevBar","len","activateNextTabBar","activatePreviousTabBar","area","_addToBottomArea","_addToDownArea","_addToHeaderArea","_addToLeftArea","_addToMenuArea","_addToRightArea","_addToTopArea","Error","collapseLeft","collapse","collapseRight","dispose","isDisposed","expandLeft","expand","expandRight","closeAll","isEmpty","_a","_b","mainArea","downArea","leftArea","rightArea","relativeSizes","size","widgetIds","map","filter","includes","titleIds","ArrayExt","index","position","insertTab","rehydrate","dehydrate","iter","t","children","onAfterAttach","inputElement","label","caption","console","error","set","ref","icon","LabIcon","bindprops","stylesheet","iconClass","classes","isHidden","bars","tabBars","indexOf","bar","className","replace","invoke","itemCmp","first","second","_panelChildHook","_items","v","push","Array","_panel","Panel","item","_sideBar","TabBar","insertBehavior","removeBehavior","allowDeselect","_stackedPanel","StackedPanel","_lastCurrent","tabActivateRequested","_onTabActivateRequested","_onWidgetRemoved","previous","_findWidgetByID","_findInsertIndex","_refreshVisibility","collapsed","data","_findWidgetIndex","i","_findWidgetByTitle","setHidden","oldWidget","previousTitle","newWidget","removeTab","shell","_shell","_createSkipLink","handleEvent","_focusLeftSideBar","addEventListener","onBeforeDetach","removeEventListener","skipLinkText","skipLink","createElement","href","text","appendChild","_selected","_evtKeyUp","_evtClick","key","oldName","newName","blur","button","selectEnd","select","setSelectionRange","onUpdateRequest","JupyterLab","name","PageConfig","namespace","registerPluginErrors","status","version","info","keys","defaultInfo","reduce","acc","val","JSON","parse","stringify","_info","defaultURLs","defaultPaths","defaultDirs","directories","optionURLs","optionDirs","_paths","devMode","addModelFactory","Base64ModelFactory","mimeExtensions","plugin","registerPlugin","registerPluginModule","mod","default","hasOwnProperty","isArray","registerPluginModules","mods","IInfo","toLowerCase","deferred","patterns","matches","disabled","filesCached","base","notFound","app","static","settings","themes","translations","hubHost","hubPrefix","hubUser","hubServerName","appSettings","schemas","templates","userSettings","serverRoot","workspaces","Router","stop","_routed","_rules","parsed","URLExt","window","location","search","hash","pathname","request","navigate","history","hard","old","url","reload","pushState","skipRouting","route","register","pattern","rules","DisposableDelegate","delete","routed","rule","queue","sort","a","b","done","next","pop","execute","debug","reason","warn","IConnectionLost","IRouter","ITreePathUpdater"],"mappings":"ihBAOO,MAAMA,EAAiBC,eAAgBC,EAASC,EAAKC,GAExD,MAAMC,GADND,EAAaA,GAAc,EAAAE,gBACFC,KAAK,cACxBC,EAAQH,EAAMI,GAAG,2BACjBC,EAAaL,EAAMI,GAAG,iLAG5B,OAAO,IAAAE,kBAAiBH,EAAO,CAAEI,QAASF,K,ICuJ1CG,EAaOC,E,kEA9JJ,MAAMC,UAAwB,EAAAC,YAIjCC,YAAYC,GACRC,MAAMD,GACNE,KAAKC,eAAiB,IAAI,EAAAC,OAAOF,MAEjCA,KAAKG,YAAc,IAAI,EAAAC,eAAe,CAClCC,SAAUL,KAAKK,SACfC,SAAUR,EAAQS,sBAGtB,MAAMC,EAAW,IAAIC,SAAQC,IACzBC,uBAAsB,KAClBD,UAGRV,KAAKY,cACDd,EAAQc,eAAiB,IAAI,EAAAC,cAAc,CAAER,SAAUL,KAAKK,WAChEL,KAAKc,YAAchB,EAAQgB,aAAe,IAAI,EAAAC,iBAC9Cf,KAAKQ,SACDV,EAAQU,UACJR,KAAKgB,QAAQC,MAAK,IAAMT,IAAUU,OAAM,IAAMV,IACtDR,KAAKmB,eAAiBrB,EAAQqB,gBAAkB,IAAI,EAAAC,eAKxD,aACI,OAAOpB,KAAKqB,QAEhB,WAAWC,GACHtB,KAAKqB,UAAYC,IACjBtB,KAAKqB,QAAUC,EACfC,SAASC,KAAKC,QAAgB,OAAIH,EAClCtB,KAAKC,eAAeyB,KAAKJ,IAMjC,oBACI,OAAOtB,KAAKC,eAYhB0B,mBAAmBC,GACf,KAAK5B,KAAK6B,mBACJ7B,KAAK6B,kBAAkBC,kBAAkBC,MAC3C,OAEJ,IAAIC,EAAOhC,KAAK6B,kBAAkBC,OAClC,EAAG,CACC,GAAIE,aAAgBC,aAAeL,EAAGI,GAClC,OAAOA,EAEXA,EAAOA,EAAKE,iBACPF,GAAQA,EAAKE,YAAcF,IAASA,EAAKE,YAkBtDC,eAAeC,GAEX,GADApC,KAAK6B,kBAAoBO,GACrBA,EAAMC,WACN5C,EAAQ6C,oBAAoBF,EAAMN,SAGvB9B,KAAKG,YAAYoC,KAAKH,GACzB,CACR,MAAMI,EAAQxC,KAAKG,YAAYsC,KAAKD,MAIpC,GAAqB,IAAjBA,EAAME,QACNF,EAAM,GAAGG,UAAYjD,EAA2BS,YAEhD,YADAH,KAAKG,YAAYsC,KAAKG,QAI1BR,EAAMS,iBACNT,EAAMU,qBAOlB,SAAWnD,GAiBPA,EAAgBoD,UAVhB,SAAmBC,EAAMC,GACrB,MAAMC,EAAa,IAAIC,OAAO,IAAIF,EAAMG,KAAKC,OAE7C,QADcL,EAAKM,MAAMJ,IAY7BvD,EAAgB4D,OAAS,IAAI,EAAAC,MAAM,kCASnC7D,EAAgB8D,cAAgB,IAAI,EAAAD,MAAM,yCA9B9C,CA+BG7D,IAAoBA,EAAkB,KAKzC,SAAWF,GAOPA,EAAQ6C,oBAHR,SAA6BoB,GACzB,OAA8D,OAAvDA,EAAQC,QAAQ,oCAL/B,CAQGlE,IAAYA,EAAU,KAKzB,SAAWC,GAIPA,EAA2BS,YAAc,+BAJ7C,CAKGT,IAA+BA,EAA6B,K,sEC1K/D,MAIMkE,EAAgB,aAYhBC,EAAe,IACfC,EAAiB,cAIVC,EAAY,IAAI,EAAAP,MAAM,qCAI5B,MAAMQ,UAAiB,EAAAC,OAI1BpE,YAAYC,GACRC,QAIAC,KAAKkE,eAAiB,CAACC,EAASC,KAC5B,OAAQA,EAAIC,MACR,IAAK,cACDD,EAAIE,MAAMC,SAAST,GACnB9D,KAAKwE,SAASC,IAAIL,EAAIE,OACtB,MACJ,IAAK,gBACDF,EAAIE,MAAMI,YAAYZ,GACtB9D,KAAKwE,SAASG,OAAOP,EAAIE,OAKjC,OAAO,GAEXtE,KAAK4E,eAAiB,IAAI,EAAA1E,OAAOF,MACjCA,KAAK6E,cAAgB,KACrB7E,KAAK8E,gBAAkB,IAAI,EAAA5E,OAAOF,MAClCA,KAAK+E,aAAe,GACpB/E,KAAKgF,oBAAsB,IAAI,EAAA9E,OAAOF,MACtCA,KAAKiF,aAAe,IAAI,EAAA/E,OAAOF,MAC/BA,KAAKkF,aAAc,EACnBlF,KAAKmF,gBAAkB,IAAI,EAAAjF,OAAOF,MAClCA,KAAKoF,iBAAmB,IAAI,EAAAC,WAAU,KAClCrF,KAAKmF,gBAAgBzD,UAAK4D,KAC3B,GACHtF,KAAKuF,UAAY,IAAI,EAAAC,gBACrBxF,KAAKwE,SAAW,IAAI,EAAAiB,aACpBzF,KAAK0F,kBAAoB,IAAIC,IAC7B3F,KAAK4F,kBAAoB,IAAID,IAC7B3F,KAAKuE,SAhEmB,eAiExBvE,KAAK6F,GAAK,OACV,MAAM5G,GAAUa,GAAWA,EAAQd,YAAe,EAAAE,gBAAgBC,KAAK,cACjE2G,EAAe9F,KAAK+F,aAAe,IAAI,EAAAC,SACvCC,EAAejG,KAAKkG,aAAe,IAAI,EAAQC,aACrDF,EAAYG,MAAMpE,KAAKqE,aAAa,OAAQ,cAC5CJ,EAAYG,MAAMpE,KAAKqE,aAAa,aAAcpH,EAAMI,GAAG,SAC3D,MAAMiH,EAActG,KAAKuG,YAAc,IAAI,EAAQJ,aACnDG,EAAWF,MAAMpE,KAAKqE,aAAa,OAAQ,UAC3C,MAAMG,EAAexG,KAAKyG,aAAe,IAAI,EAAAT,SAC7CQ,EAAYxE,KAAKqE,aAAa,OAAQ,eACtC,MAAMK,EAAY,IAAI,EAAAV,SAChBW,EAAe3G,KAAK4G,aAAe,IAAI,EAAQC,qBAC/CC,EAAa9G,KAAK+G,WAAa,IAAI,EAAAC,aACzC,EAAAC,YAAA,mBAA+BH,EAAW9G,KAAKkE,gBAC/C,MAAMgD,EAAelH,KAAKmH,aAAe,IAAI,EAAQN,qBAC/CO,EAAapH,KAAKqH,WAAa,IAAI,EAAAC,YAAY,CACjDC,aAAa,IAEXC,EAAexH,KAAKyH,aAAe,IAAI,EAAQC,eAC/CC,EAAgB3H,KAAK4H,cAAgB,IAAI,EAAQF,eACjDG,EAAa,IAAI,EAAAC,UACvBhC,EAAYD,GAAK,kBACjBI,EAAYG,MAAMP,GAAK,gBACvBS,EAAWF,MAAMP,GAAK,eACtBW,EAAYX,GAAK,kBACjBa,EAAUb,GAAK,wBACfc,EAAYd,GAAK,uBACjBiB,EAAUjB,GAAK,qBACfqB,EAAYrB,GAAK,sBACjBuB,EAAUvB,GAAK,gBACf2B,EAAYO,QAAQxD,SAASX,GAC7B4D,EAAYO,QAAQxD,SAAS,eAC7BiD,EAAYO,QAAQ/F,KAAKqE,aAAa,aAAcpH,EAAMI,GAAG,iBAC7DmI,EAAYO,QAAQC,YAAY3B,aAAa,aAAcpH,EAAMI,GAAG,iBACpEmI,EAAYO,QAAQ/F,KAAKqE,aAAa,OAAQ,iBAC9CmB,EAAYS,aAAapC,GAAK,gBAC9B8B,EAAaI,QAAQxD,SAASX,GAC9B+D,EAAaI,QAAQxD,SAAS,gBAC9BoD,EAAaI,QAAQ/F,KAAKqE,aAAa,aAAcpH,EAAMI,GAAG,sBAC9DsI,EAAaI,QAAQC,YAAY3B,aAAa,aAAcpH,EAAMI,GAAG,sBACrEsI,EAAaI,QAAQ/F,KAAKqE,aAAa,OAAQ,iBAC/CsB,EAAaM,aAAapC,GAAK,iBAC/BiB,EAAU9E,KAAKqE,aAAa,OAAQ,QACpCK,EAAUwB,QAAU,EACpBvB,EAAYuB,QAAU,EACtBpB,EAAUoB,QAAU,EACpBhB,EAAYgB,QAAU,EACtBpC,EAAYqC,UAAY,gBACxBxB,EAAYyB,YAAc,WAC1B1B,EAAUyB,UAAY,gBACtBjB,EAAYkB,YAAc,aAC1B5B,EAAY2B,UAAY,gBACxB,EAAAE,WAAA,WAAsBb,EAAYS,aAAc,GAChD,EAAAI,WAAA,WAAsBjB,EAAW,GACjC,EAAAiB,WAAA,WAAsBvB,EAAW,GACjC,EAAAuB,WAAA,WAAsBV,EAAaM,aAAc,GACjD,EAAAjC,SAAA,WAAoBwB,EAAYO,QAAS,GACzC,EAAA/B,SAAA,WAAoBkB,EAAa,GACjC,EAAAlB,SAAA,WAAoB2B,EAAaI,QAAS,GAC1C,EAAAM,WAAA,WAAsB1B,EAAa,GACnCO,EAAYoB,UAAUd,EAAYS,cAClCf,EAAYoB,UAAUxB,GACtBI,EAAYoB,UAAUX,EAAaM,cACnCtB,EAAY2B,UAAUpB,GACtBP,EAAY2B,UAAUlB,GACtBV,EAAU4B,UAAUd,EAAYO,SAChCrB,EAAU4B,UAAU3B,GACpBD,EAAU4B,UAAUX,EAAaI,SACjCF,EAAWM,UAAY,gBACvBN,EAAWK,QAAU,EAIrBvB,EAAY4B,iBAAiB,CAAC,EAAG,IACjCrB,EAAYqB,iBAAiB,CAAC,EAAG,IAAK,IACtC,EAAAT,UAAA,WAAqBhC,EAAa,GAClC,EAAAgC,UAAA,WAAqB7B,EAAYG,MAAO,GACxC,EAAA0B,UAAA,WAAqBxB,EAAWF,MAAO,GACvC,EAAA0B,UAAA,WAAqBpB,EAAW,GAChC,EAAAoB,UAAA,WAAqBtB,EAAa,GAClCqB,EAAWS,UAAUxC,GACrB+B,EAAWS,UAAUhC,EAAWF,OAChCyB,EAAWS,UAAU5B,GACrBmB,EAAWS,UAAU9B,GAErBxG,KAAK+F,aAAayC,OAClBxI,KAAKyG,aAAa+B,OAClBxI,KAAKqH,WAAWmB,OAChBxI,KAAKyI,OAASZ,EAEd7H,KAAKwE,SAASkE,eAAeC,QAAQ3I,KAAK4I,kBAAmB5I,MAC7DA,KAAKwE,SAASqE,cAAcF,QAAQ3I,KAAK8I,iBAAkB9I,MAE3DA,KAAK+G,WAAWgC,eAAeJ,QAAQ3I,KAAKgJ,kBAAmBhJ,MAE/DA,KAAK4G,aAAaqC,QAAQN,QAAQ3I,KAAKgJ,kBAAmBhJ,MAE1DA,KAAKqH,WAAWqB,eAAeC,QAAQ3I,KAAKgJ,kBAAmBhJ,MAC/DA,KAAKqH,WAAW6B,OAAOC,SAASR,QAAQ3I,KAAKoJ,mBAAoBpJ,MACjEA,KAAKqH,WAAWY,aAAaoB,cAAcV,QAAQ3I,KAAKoJ,mBAAoBpJ,MAE5EA,KAAKyH,aAAaM,QAAQW,eAAeC,QAAQ3I,KAAKgJ,kBAAmBhJ,MACzEA,KAAK4H,cAAcG,QAAQW,eAAeC,QAAQ3I,KAAKgJ,kBAAmBhJ,MAE1EA,KAAKmH,aAAa8B,QAAQN,QAAQ3I,KAAKgJ,kBAAmBhJ,MAE1D,MAAMsJ,EAAgBtJ,KAAKuJ,cAAgB,IAAI,EAAQC,aAAaxJ,MACpEA,KAAKyE,IAAI6E,EAAc,MAAO,CAAEG,KAAM,MACT,sBAAzBzJ,KAAK+G,WAAW2C,MAChB1J,KAAKuG,YAAY+B,UAAUtI,KAAKkG,aAAaE,MAAO,KACpDkD,EAAad,QAGbX,EAAW8B,aAAa,EAAG3J,KAAKkG,aAAaE,OAGjD,MAAMwD,EAAkB5J,KAAK6J,gBAAkB,IAAI,EAAQC,eAAe9J,MAC1EA,KAAKyE,IAAImF,EAAgB,MAAO,CAAEH,KAAM,IACxCzJ,KAAK6J,gBAAgBE,OAGrB/J,KAAK0I,eAAeC,SAAQ,CAACqB,EAAQC,KACjC,IAAIC,EAAWD,EAAKC,SAChBC,EAAWF,EAAKE,SAEhBA,GACAA,EAAS/K,MAAMgL,QAAQC,WAAWrK,KAAKsK,uBAAwBtK,MAG/DkK,IACAA,EAAS9K,MAAMgL,QAAQzB,QAAQ3I,KAAKsK,uBAAwBtK,MAC5DA,KAAKsK,0BAELJ,GAAYA,aAAoB,EAAAK,gBAChCL,EAASM,QAAQC,YAAY9B,QAAQ3I,KAAK0K,mBAAoB1K,MAElEA,KAAK0K,wBAMb,oBACI,OAAO1K,KAAK4E,eAKhB,mBACI,OAAO5E,KAAKwE,SAASmG,aAKzB,qBACI,OAAO3K,KAAK8E,gBAKhB,kBACI,OAAO9E,KAAKiF,aAOhB,yBACI,OAAOjF,KAAKgF,oBAKhB,oBACI,OAAOhF,KAAKwE,SAASoG,cAKzB,qBACI,OAAO5K,KAAKmF,gBAKhB,oBACI,OAAQnF,KAAKyH,aAAaM,QAAQ8C,aAKtC,qBACI,OAAQ7K,KAAK4H,cAAcG,QAAQ8C,aAMvC,uBACI,OAAO7K,KAAK8K,SAAS,2BAMzB,qBAAqBC,GACjB/K,KAAKgL,YAAY,0BAA2BD,GAKhD,WACI,OAAO/K,KAAK+G,WAAW2C,KAE3B,SAASA,GACL,MAAMuB,EAAOjL,KAAK+G,WAClB,GAAI2C,IAASuB,EAAKvB,KACd,OAEJ,MAAMwB,EAA2BlL,KAAK4K,cAGtC,GADAK,EAAKvB,KAAOA,EACC,oBAATA,EACA1J,KAAK6E,cAAgBoG,EAAKE,aAGtBnL,KAAK4K,eACLK,EAAKG,eAAepL,KAAK4K,eAG7B5K,KAAKyI,OAAOkB,aAAa,EAAG3J,KAAKkG,aAAaE,OAC9CpG,KAAKuJ,cAAcQ,OACnB/J,KAAKsK,6BAEJ,CAED,MAAMe,GAAU,IAAAC,SAAQL,EAAKI,WAEzBrL,KAAK6E,gBAEL,EAAQ0G,oBAAoBN,EAAMjL,KAAK6E,cAAc2G,MACrDP,EAAKQ,cAAczL,KAAK6E,eACxB7E,KAAK6E,cAAgB,MAOzBwG,EAAQK,SAAQC,IACPA,EAAOC,QACR5L,KAAK6L,eAAeF,EAAQG,OAAOC,OAAOD,OAAOC,OAAO,GAAI/L,KAAK0F,kBAAkBsG,IAAIL,IAAU,CAAEM,UAAU,QAGrHjM,KAAK0F,kBAAkBwG,QAGnBhB,GACAD,EAAKG,eAAeF,GAGxBlL,KAAKyE,IAAIzE,KAAKkG,aAAaE,MAAO,MAAO,CAAEqD,KAAM,MAEjDzJ,KAAKuJ,cAAcf,OAGvBxI,KAAKgC,KAAKP,QAAQ0K,UAAYzC,EAC9B1J,KAAKqH,WAAW+E,MAEhBpM,KAAKiF,aAAavD,KAAKgI,GAM3B,eACI,OAAO1J,KAAKuF,UAAU8G,QAK1BC,aAAazG,GACT,GAAI7F,KAAKyH,aAAa8E,IAAI1G,GAEtB,YADA7F,KAAKyH,aAAawE,SAASpG,GAG/B,GAAI7F,KAAK4H,cAAc2E,IAAI1G,GAEvB,YADA7F,KAAK4H,cAAcqE,SAASpG,GAGhC,MAAM2G,EAAWxM,KAAKqH,WAAW6B,OAAOuD,OAAOC,WAAUtN,GAASA,EAAMuN,MAAM9G,KAAOA,IACrF,GAAI2G,GAAY,EAEZ,YADAxM,KAAKqH,WAAWuF,aAAeJ,GAGnC,MAAMvB,EAAOjL,KAAK+G,WACZ4E,GAAS,IAAAkB,MAAK5B,EAAKI,WAAWN,GAASA,EAAMlF,KAAOA,IACtD8F,GACAV,EAAKG,eAAeO,GAM5BmB,kBACI,MAAMC,EAAU/M,KAAKgN,iBACrB,IAAKD,EACD,OAEJ,MAAME,EAAKF,EAAQH,aACnB,IAAY,IAARK,EAAJ,CAGA,GAAIA,EAAKF,EAAQN,OAAO/J,OAAS,EAK7B,OAJAqK,EAAQH,cAAgB,OACpBG,EAAQlC,cACRkC,EAAQlC,aAAa8B,MAAMV,YAInC,GAAIgB,IAAOF,EAAQN,OAAO/J,OAAS,EAAG,CAClC,MAAMwK,EAAUlN,KAAKmN,aAAa,QAC9BD,IACAA,EAAQN,aAAe,EACnBM,EAAQrC,cACRqC,EAAQrC,aAAa8B,MAAMV,cAQ3CmB,sBACI,MAAML,EAAU/M,KAAKgN,iBACrB,IAAKD,EACD,OAEJ,MAAME,EAAKF,EAAQH,aACnB,IAAY,IAARK,EAAJ,CAGA,GAAIA,EAAK,EAKL,OAJAF,EAAQH,cAAgB,OACpBG,EAAQlC,cACRkC,EAAQlC,aAAa8B,MAAMV,YAInC,GAAW,IAAPgB,EAAU,CACV,MAAMI,EAAUrN,KAAKmN,aAAa,YAClC,GAAIE,EAAS,CACT,MAAMC,EAAMD,EAAQZ,OAAO/J,OAC3B2K,EAAQT,aAAeU,EAAM,EACzBD,EAAQxC,cACRwC,EAAQxC,aAAa8B,MAAMV,cAQ3CsB,qBACI,MAAML,EAAUlN,KAAKmN,aAAa,QAC9BD,GACIA,EAAQrC,cACRqC,EAAQrC,aAAa8B,MAAMV,WAOvCuB,yBACI,MAAMN,EAAUlN,KAAKmN,aAAa,YAC9BD,GACIA,EAAQrC,cACRqC,EAAQrC,aAAa8B,MAAMV,WAIvCxH,IAAIkH,EAAQ8B,EAAO,OAAQ3N,GACvB,OAAQ2N,GAAQ,QACZ,IAAK,SACD,OAAOzN,KAAK0N,iBAAiB/B,EAAQ7L,GACzC,IAAK,OACD,OAAOE,KAAK2N,eAAehC,EAAQ7L,GACvC,IAAK,SACD,OAAOE,KAAK4N,iBAAiBjC,EAAQ7L,GACzC,IAAK,OACD,OAAOE,KAAK6N,eAAelC,EAAQ7L,GACvC,IAAK,OACD,OAAOE,KAAK6L,eAAeF,EAAQ7L,GACvC,IAAK,OACD,OAAOE,KAAK8N,eAAenC,EAAQ7L,GACvC,IAAK,QACD,OAAOE,KAAK+N,gBAAgBpC,EAAQ7L,GACxC,IAAK,MACD,OAAOE,KAAKgO,cAAcrC,EAAQ7L,GACtC,QACI,MAAM,IAAImO,MAAM,iBAAiBR,MAM7CS,eACIlO,KAAKyH,aAAa0G,WAClBnO,KAAKgJ,oBAKToF,gBACIpO,KAAK4H,cAAcuG,WACnBnO,KAAKgJ,oBAKTqF,UACQrO,KAAKsO,aAGTtO,KAAKoF,iBAAiBiJ,UACtBtO,MAAMsO,WASVE,aACIvO,KAAKyH,aAAa+G,SAClBxO,KAAKgJ,oBASTyF,cACIzO,KAAK4H,cAAc4G,SACnBxO,KAAKgJ,oBAKT0F,YAII,IAAApD,SAAQtL,KAAK+G,WAAWsE,WAAWK,SAAQC,GAAUA,EAAO/I,UAC5D5C,KAAKqH,WAAWY,aAAaoD,QAAQK,SAAQC,GAAUA,EAAO/I,UAKlE+L,QAAQlB,GACJ,OAAQA,GACJ,IAAK,SACD,OAA4C,IAArCzN,KAAKyG,aAAa4E,QAAQ3I,OACrC,IAAK,OACD,OAAuD,IAAhD1C,KAAKqH,WAAWY,aAAaoD,QAAQ3I,OAChD,IAAK,SACD,OAA4C,IAArC1C,KAAK+F,aAAasF,QAAQ3I,OACrC,IAAK,OACD,OAAyD,IAAlD1C,KAAKyH,aAAaQ,aAAaoD,QAAQ3I,OAClD,IAAK,OACD,OAAO1C,KAAK+G,WAAW4H,QAC3B,IAAK,OACD,OAAkD,IAA3C3O,KAAKkG,aAAaE,MAAMiF,QAAQ3I,OAC3C,IAAK,QACD,OAA0D,IAAnD1C,KAAK4H,cAAcK,aAAaoD,QAAQ3I,OACnD,IAAK,MACD,OAAiD,IAA1C1C,KAAKuG,YAAYH,MAAMiF,QAAQ3I,OAC1C,QACI,OAAO,GAMnB+I,cAAc/B,EAAMjB,GAChB,IAAImG,EAAIC,EACR,MAAM,SAAEC,EAAQ,SAAEC,EAAQ,SAAEC,EAAQ,UAAEC,EAAS,cAAEC,GAAkBzG,EAEnE,GAAIqG,EAAU,CACV,MAAM,cAAElE,EAAa,KAAEK,GAAS6D,EAC5B7D,GACAjL,KAAK+G,WAAW0E,cAAcR,GAE9BvB,IACA1J,KAAK0J,KAAOA,GAEZkB,GACA5K,KAAKsM,aAAa1B,EAAc/E,SAKhC6D,IACA1J,KAAK0J,KAAOA,GAIpB,GAAIqF,EAAU,CACV,MAAM,cAAEnE,EAAa,QAAES,EAAO,KAAE8D,GAASJ,EACnCK,EAA0G,QAA7FR,EAAKvD,aAAyC,EAASA,EAAQgE,KAAI1D,GAAUA,EAAO9F,YAAwB,IAAP+I,EAAgBA,EAAK,GAE7I5O,KAAKqH,WAAW6B,OAAOuD,OAClB6C,QAAOlQ,IAAUgQ,EAAUG,SAASnQ,EAAMuN,MAAM9G,MAChDwJ,KAAIjQ,GAASA,EAAMuN,MAAM/J,UAE9B,MAAM4M,EAAWxP,KAAKqH,WAAW6B,OAAOuD,OAAO4C,KAAIjQ,GAASA,EAAMuN,MAAM9G,KAGxE,IAFAwF,SAAkDA,EAAQiE,QAAO3D,IAAW6D,EAASD,SAAS5D,EAAO9F,MAAKwJ,KAAI1D,GAAU3L,KAAKqH,WAAWiB,UAAUqD,MAE1I,EAAA8D,SAAA,aAAsBL,EAAWpP,KAAKqH,WAAW6B,OAAOuD,OAAO4C,KAAIjQ,GAASA,EAAMuN,MAAM9G,OAC5F7F,KAAKqH,WAAW6B,OAAOuD,OAAOf,SAAQ,CAACtM,EAAOsQ,KAC1C,MAAMC,EAAWP,EAAU1C,WAAU7G,GAAMzG,EAAMuN,MAAM9G,IAAMA,IACzD8J,GAAY,GAAKA,GAAYD,GAC7B1P,KAAKqH,WAAW6B,OAAO0G,UAAUD,EAAUvQ,MAIvD,GAAIwL,EAAe,CACf,MAAM8E,EAAQ1P,KAAKqH,WAAWY,aAAaoD,QAAQqB,WAAUf,GAAUA,EAAO9F,KAAO+E,EAAc/E,KAC/F6J,IACA1P,KAAKqH,WAAWuF,aAAe8C,EACU,QAAxCb,EAAK7O,KAAKqH,WAAWuD,qBAAkC,IAAPiE,GAAyBA,EAAG5C,YAGjFkD,GAAQA,EAAO,EACfnP,KAAK4G,aAAa2B,iBAAiB,CAAC,EAAM4G,EAAMA,KAIhDnP,KAAKqH,WAAWY,aAAaoD,QAAQK,SAAQC,GAAUA,EAAO/I,UAC9D5C,KAAKqH,WAAWmB,QAIpBwG,EACAhP,KAAKyH,aAAaoI,UAAUb,GAGf,oBAATtF,GACA1J,KAAKkO,eAITe,EACAjP,KAAK4H,cAAciI,UAAUZ,GAGhB,oBAATvF,GACA1J,KAAKoO,gBAITc,GACAlP,KAAKmH,aAAaoB,iBAAiB2G,GAElClP,KAAKkF,cAIN,EAAA+B,YAAA,QACAjH,KAAKuF,UAAU7E,QAAQ+H,IAM/B0C,aAmBI,MAhBe,CACX2D,SAAU,CACNlE,cAAe5K,KAAKwE,SAASoG,cAC7BK,KAAoB,oBAAdjL,KAAK0J,MACL1J,KAAK6E,eACL7E,KAAK+G,WAAWoE,cAE1B4D,SAAU,CACNnE,cAAe5K,KAAKqH,WAAWuD,cAC/BS,SAAS,IAAAC,SAAQtL,KAAKqH,WAAWY,aAAaoD,SAC9C8D,KAAMnP,KAAK4G,aAAasI,gBAAgB,IAE5CF,SAAUhP,KAAKyH,aAAaqI,YAC5Bb,UAAWjP,KAAK4H,cAAckI,YAC9BZ,cAAelP,KAAKmH,aAAa+H,iBAOzC7D,QAAQoC,GACJ,OAAQA,QAAmCA,EAAO,QAC9C,IAAK,OACD,OAAOzN,KAAK+G,WAAWsE,UAC3B,IAAK,OACD,OAAO,IAAA0E,MAAK/P,KAAKyH,aAAaM,QAAQ0E,OAAO4C,KAAIW,GAAKA,EAAErD,SAC5D,IAAK,QACD,OAAO,IAAAoD,MAAK/P,KAAK4H,cAAcG,QAAQ0E,OAAO4C,KAAIW,GAAKA,EAAErD,SAC7D,IAAK,SACD,OAAO3M,KAAK+F,aAAakK,WAC7B,IAAK,MACD,OAAOjQ,KAAKuG,YAAYH,MAAM6J,WAClC,IAAK,OACD,OAAOjQ,KAAKkG,aAAaE,MAAM6J,WACnC,IAAK,SACD,OAAOjQ,KAAKyG,aAAawJ,WAC7B,QACI,MAAM,IAAIhC,MAAM,iBAAiBR,MAM7CyC,cAAc9L,GACVpE,KAAKgC,KAAKP,QAAQ0K,UAAYnM,KAAK0J,KAKvCY,yBACI,IAAIyC,EAAU/M,KAAK4K,cACnB,MAAMuF,EAAenQ,KAAKuJ,cAAc4G,aACxCA,EAAapF,MAAQgC,EAAUA,EAAQ3N,MAAMgR,MAAQ,GACrDD,EAAa/Q,MAAQ2N,EAAUA,EAAQ3N,MAAMiR,QAAU,GAK3D3F,qBACI,IAAIqC,EAAU/M,KAAK4K,cACfV,EAAW,GACX6C,GAAWA,aAAmB,EAAAxC,iBAC9BL,EAAW6C,EAAQvC,QAAQxH,MAE/BhD,KAAKgF,oBAAoBtD,KAAK,CAC1BwI,SAAUA,EACVC,SAAUnK,KAAK+E,eAEnB/E,KAAK+E,aAAemF,EAQxB2D,eAAelC,EAAQ7L,GACnB,IAAK6L,EAAO9F,GAER,YADAyK,QAAQC,MAAM,4DAGlBzQ,EAAUA,GAAWE,KAAK4F,kBAAkBoG,IAAIL,IAAW,GAC3D3L,KAAK4F,kBAAkB4K,IAAI7E,EAAQ7L,GACnC,MAAM2J,EAAO,SAAU3J,EAAUA,EAAQ2J,KAAO5F,EAChD7D,KAAKyH,aAAaa,UAAUqD,EAAQlC,GACpCzJ,KAAKgJ,oBAaT6C,eAAeF,EAAQ7L,GACnB,IAAK6L,EAAO9F,GAER,YADAyK,QAAQC,MAAM,4DAGlBzQ,EAAUA,GAAW,GACrB,MAAMmL,EAAOjL,KAAK+G,WACZ2C,EAAO5J,EAAQ4J,MAAQ,YAC7B,IAAI+G,EAAMzQ,KAAK4K,cACX9K,EAAQ2Q,MACRA,GAAM,IAAA5D,MAAK5B,EAAKI,WAAWN,GAASA,EAAMlF,KAAO/F,EAAQ2Q,OAAQ,MAErE,MAAM,MAAErR,GAAUuM,EAGlBvM,EAAMqC,QAAUqK,OAAOC,OAAOD,OAAOC,OAAO,GAAI3M,EAAMqC,SAAU,CAAEoE,GAAI8F,EAAO9F,KACzEzG,EAAMsR,gBAAgB,EAAAC,QAEtBvR,EAAMsR,KAAOtR,EAAMsR,KAAKE,UAAU,CAC9BC,WAAY,gBAGW,iBAAfzR,EAAMsR,MAAsBtR,EAAMsR,OAE9CtR,EAAM0R,WAAY,IAAAC,SAAQ3R,EAAM0R,UAAW,YAE/C7F,EAAK3C,UAAUqD,EAAQ,CAAEjC,OAAM+G,QAKb,oBAAdxF,EAAKvB,MACL1J,KAAK0F,kBAAkB8K,IAAI7E,EAAQ7L,IAEd,IAArBA,EAAQmM,UACRhB,EAAKG,eAAeO,GAS5BoC,gBAAgBpC,EAAQ7L,GACpB,IAAK6L,EAAO9F,GAER,YADAyK,QAAQC,MAAM,4DAIlB,MAAM9G,EAAO,SADb3J,EAAUA,GAAWE,KAAK4F,kBAAkBoG,IAAIL,IAAW,IAC1B7L,EAAQ2J,KAAO5F,EAChD7D,KAAK4F,kBAAkB4K,IAAI7E,EAAQ7L,GACnCE,KAAK4H,cAAcU,UAAUqD,EAAQlC,GACrCzJ,KAAKgJ,oBAQTgF,cAAcrC,EAAQ7L,GAClB,IAAI8O,EACJ,IAAKjD,EAAO9F,GAER,YADAyK,QAAQC,MAAM,4DAIlB,MAAM9G,EAA+B,QAAvBmF,GADd9O,EAAUA,GAAW,IACM2J,YAAyB,IAAPmF,EAAgBA,EAAK/K,EAClE7D,KAAKuG,YAAY+B,UAAUqD,EAAQlC,GACnCzJ,KAAKgJ,oBACDhJ,KAAKuG,YAAYH,MAAM4K,UACvBhR,KAAKuG,YAAYH,MAAM2D,OAS/B+D,eAAenC,EAAQ7L,GACnB,IAAI8O,EACJ,IAAKjD,EAAO9F,GAER,YADAyK,QAAQC,MAAM,4DAIlB,MAAM9G,EAA+B,QAAvBmF,GADd9O,EAAUA,GAAW,IACM2J,YAAyB,IAAPmF,EAAgBA,EAAK/K,EAClE7D,KAAKkG,aAAaoC,UAAUqD,EAAQlC,GACpCzJ,KAAKgJ,oBACDhJ,KAAKkG,aAAaE,MAAM4K,UACxBhR,KAAKkG,aAAaE,MAAM2D,OAShC6D,iBAAiBjC,EAAQ7L,GAChB6L,EAAO9F,IAKZ7F,KAAK+F,aAAauC,UAAUqD,GAC5B3L,KAAKgJ,oBACDhJ,KAAK+F,aAAaiL,UAClBhR,KAAK+F,aAAagE,QAPlBuG,QAAQC,MAAM,4DAgBtB7C,iBAAiB/B,EAAQ7L,GAChB6L,EAAO9F,IAKZ7F,KAAKyG,aAAa6B,UAAUqD,GAC5B3L,KAAKgJ,oBACDhJ,KAAKyG,aAAauK,UAClBhR,KAAKyG,aAAasD,QAPlBuG,QAAQC,MAAM,4DAUtB5C,eAAehC,EAAQ7L,GACnB,IAAK6L,EAAO9F,GAER,YADAyK,QAAQC,MAAM,4DAGlBzQ,EAAUA,GAAW,GACrB,MAAM,MAAEV,GAAUuM,EAGlBvM,EAAMqC,QAAUqK,OAAOC,OAAOD,OAAOC,OAAO,GAAI3M,EAAMqC,SAAU,CAAEoE,GAAI8F,EAAO9F,KACzEzG,EAAMsR,gBAAgB,EAAAC,QAEtBvR,EAAMsR,KAAOtR,EAAMsR,KAAKE,UAAU,CAC9BC,WAAY,gBAGW,iBAAfzR,EAAMsR,MAAsBtR,EAAMsR,OAE9CtR,EAAM0R,WAAY,IAAAC,SAAQ3R,EAAM0R,UAAW,YAE/C9Q,KAAKqH,WAAWiB,UAAUqD,GAC1B3L,KAAKgJ,oBACDhJ,KAAKqH,WAAW2J,UAChBhR,KAAKqH,WAAW0C,OAMxBoD,aAAahF,GACT,MAAM4E,EAAU/M,KAAKgN,iBACrB,IAAKD,EACD,OAAO,KAEX,MAAMkE,GAAO,IAAA3F,SAAQtL,KAAK+G,WAAWmK,WAC/B5D,EAAM2D,EAAKvO,OACXgN,EAAQuB,EAAKE,QAAQpE,GAC3B,MAAkB,aAAd5E,EACOuH,EAAQ,EAAIuB,EAAKvB,EAAQ,GAAe,IAAVA,EAAcuB,EAAK3D,EAAM,GAAK,KAGhEoC,EAAQpC,EAAM,EACf2D,EAAKvB,EAAQ,GACbA,IAAUpC,EAAM,EACZ2D,EAAK,GACL,KAKdjE,iBACI,MAAMD,EAAU/M,KAAKwE,SAASoG,cAC9B,IAAKmC,EACD,OAAO,KAEX,MAAM3N,EAAQ2N,EAAQ3N,MAChB6R,EAAOjR,KAAK+G,WAAWmK,UAC7B,OAAO,IAAArE,MAAKoE,GAAMG,GAAOA,EAAI3E,OAAO0E,QAAQ/R,IAAU,KAAM,KAKhE0J,iBAAiBkB,EAAQC,GACjBA,EAAKC,WACLD,EAAKC,SAAS9K,MAAMiS,WAAa,kBAEjCpH,EAAKE,WACLF,EAAKE,SAAS/K,MAAMiS,UAAYpH,EAAKE,SAAS/K,MAAMiS,UAAUC,QAr6BrD,gBAq6B2E,KAExFtR,KAAK4E,eAAelD,KAAKuI,GAK7BrB,kBAAkBoB,EAAQC,GAClBA,EAAKC,WACLD,EAAKC,SAAS9K,MAAMiS,WAAa,mBAEjCpH,EAAKE,WACLF,EAAKE,SAAS/K,MAAMiS,UAAYpH,EAAKE,SAAS/K,MAAMiS,UAAUC,QAr7BpD,iBAq7B2E,KAEzFtR,KAAK8E,gBAAgBpD,KAAKuI,GAC1BjK,KAAKgJ,oBAKTI,qBACwD,IAAhDpJ,KAAKqH,WAAWY,aAAaoD,QAAQ3I,QACrC1C,KAAKqH,WAAWmB,OAEpBxI,KAAKgJ,oBAKTA,oBACShJ,KAAKoF,iBAAiBmM,UAGnC,IAAI,GACJ,SAAW9R,GAOPA,EAAQ+R,QAHR,SAAiBC,EAAOC,GACpB,OAAOD,EAAMhI,KAAOiI,EAAOjI,MAkB/BhK,EAAQ8L,oBAZR,SAASA,EAAoBK,EAAQ6B,GAC5BA,IAGa,aAAdA,EAAKpJ,KAIToJ,EAAKwC,SAASvE,SAAQpH,IAClBiH,EAAoBK,EAAQtH,MAJ5BmJ,EAAKpC,QAAUoC,EAAKpC,QAAQiE,QAAO3D,IAAWA,EAAO2C,YAAc3C,EAAOC,SAAWA,MAgE7FnM,EAAQ0G,aArDR,MACItG,cAIIG,KAAK2R,gBAAkB,CAACxN,EAASC,KAC7B,OAAQA,EAAIC,MACR,IAAK,cACD,CACI,MAAMsH,EAASvH,EAAIE,MAEnB,GAAItE,KAAK4R,OAAO/E,MAAKgF,GAAKA,EAAElG,SAAWA,IACnC,MAGJ,MAAMlC,EAAOzJ,KAAK4R,OAAO5R,KAAK4R,OAAOlP,OAAS,GAAG+G,KACjDzJ,KAAK4R,OAAOE,KAAK,CAAEnG,SAAQlC,SAE/B,MACJ,IAAK,gBACD,CACI,MAAMkC,EAASvH,EAAIE,MACnB,EAAAmL,SAAA,iBAA0BzP,KAAK4R,QAAQC,GAAKA,EAAElG,SAAWA,KAMrE,OAAO,GAEX3L,KAAK4R,OAAS,IAAIG,MAClB/R,KAAKgS,OAAS,IAAI,EAAAC,MAClB,EAAAhL,YAAA,mBAA+BjH,KAAKgS,OAAQhS,KAAK2R,iBAKrD,YACI,OAAO3R,KAAKgS,OAOhB1J,UAAUqD,EAAQlC,GACdkC,EAAOC,OAAS,KAChB,MAAMsG,EAAO,CAAEvG,SAAQlC,QACjBiG,EAAQ,EAAAD,SAAA,WAAoBzP,KAAK4R,OAAQM,EAAMzS,EAAQ+R,SAC7D,EAAA/B,SAAA,OAAgBzP,KAAK4R,OAAQlC,EAAOwC,GACpClS,KAAKgS,OAAOrI,aAAa+F,EAAO/D,KAkMxClM,EAAQiI,eA3LR,MAII7H,cACIG,KAAK4R,OAAS,IAAIG,MAClB/R,KAAKmS,SAAW,IAAI,EAAAC,OAAO,CACvBC,eAAgB,OAChBC,eAAgB,OAChBC,eAAe,EACfnK,YAAa,aAEjBpI,KAAKwS,cAAgB,IAAI,EAAAC,aACzBzS,KAAKmS,SAAS3J,OACdxI,KAAKwS,cAAchK,OACnBxI,KAAK0S,aAAe,KACpB1S,KAAKmS,SAASzJ,eAAeC,QAAQ3I,KAAK4I,kBAAmB5I,MAC7DA,KAAKmS,SAASQ,qBAAqBhK,QAAQ3I,KAAK4S,wBAAyB5S,MACzEA,KAAKwS,cAAcnJ,cAAcV,QAAQ3I,KAAK6S,iBAAkB7S,MAKpE,cACI,OAAOA,KAAKmS,SAKhB,mBACI,OAAOnS,KAAKwS,cAShBhE,SACI,MAAMsE,EAAW9S,KAAK0S,cAAiB1S,KAAK4R,OAAOlP,OAAS,GAAK1C,KAAK4R,OAAO,GAAGjG,OAC5EmH,GACA9S,KAAKiM,SAAS6G,EAASjN,IAQ/BoG,SAASpG,GACL,MAAM8F,EAAS3L,KAAK+S,gBAAgBlN,GAChC8F,IACA3L,KAAKmS,SAAStH,aAAec,EAAOvM,MACpCuM,EAAOM,YAMfM,IAAI1G,GACA,OAAoC,OAA7B7F,KAAK+S,gBAAgBlN,GAKhCsI,WACInO,KAAKmS,SAAStH,aAAe,KAOjCvC,UAAUqD,EAAQlC,GACdkC,EAAOC,OAAS,KAChBD,EAAOnD,OACP,MAAM0J,EAAO,CAAEvG,SAAQlC,QACjBiG,EAAQ1P,KAAKgT,iBAAiBd,GACpC,EAAAzC,SAAA,OAAgBzP,KAAK4R,OAAQlC,EAAOwC,GACpClS,KAAKwS,cAAc7I,aAAa+F,EAAO/D,GACvC,MAAMvM,EAAQY,KAAKmS,SAASvC,UAAUF,EAAO/D,EAAOvM,OAGpDA,EAAMqC,QAAU,CAAEoE,GAAI8F,EAAO9F,IACzBzG,EAAMsR,gBAAgB,EAAAC,QAEtBvR,EAAMsR,KAAOtR,EAAMsR,KAAKE,UAAU,CAC9BC,WAAY,YAGW,iBAAfzR,EAAMsR,MAAsBtR,EAAMsR,OAE9CtR,EAAM0R,WAAY,IAAAC,SAAQ3R,EAAM0R,UAAW,UAAW,eAE1D9Q,KAAKiT,qBAKTnD,YACI,MAAMoD,EAA2C,OAA/BlT,KAAKmS,SAAStH,aAC1BQ,GAAU,IAAAC,SAAQtL,KAAKwS,cAAcnH,SAE3C,MAAO,CAAE6H,YAAWtI,cADES,EAAQrL,KAAKmS,SAASvF,cACTvB,WAKvCwE,UAAUsD,GACFA,EAAKvI,eACL5K,KAAKiM,SAASkH,EAAKvI,cAAc/E,IAEjCsN,EAAKD,WACLlT,KAAKmO,WAMb6E,iBAAiBd,GACb,OAAO,EAAAzC,SAAA,WAAoBzP,KAAK4R,OAAQM,EAAMzS,EAAQ+R,SAK1D4B,iBAAiBzH,GACb,OAAO,EAAA8D,SAAA,eAAwBzP,KAAK4R,QAAQyB,GAAKA,EAAE1H,SAAWA,IAKlE2H,mBAAmBlU,GACf,MAAM8S,GAAO,IAAArF,MAAK7M,KAAK4R,QAAQ7G,GAASA,EAAMY,OAAOvM,QAAUA,IAC/D,OAAO8S,EAAOA,EAAKvG,OAAS,KAKhCoH,gBAAgBlN,GACZ,MAAMqM,GAAO,IAAArF,MAAK7M,KAAK4R,QAAQ7G,GAASA,EAAMY,OAAO9F,KAAOA,IAC5D,OAAOqM,EAAOA,EAAKvG,OAAS,KAKhCsH,qBACIjT,KAAKmS,SAASoB,UAA0C,IAAhCvT,KAAKmS,SAAS1F,OAAO/J,QAC7C1C,KAAKwS,cAAce,UAAyC,OAA/BvT,KAAKmS,SAAStH,cAK/CjC,kBAAkBoB,EAAQC,GACtB,MAAMuJ,EAAYvJ,EAAKwJ,cACjBzT,KAAKsT,mBAAmBrJ,EAAKwJ,eAC7B,KACAC,EAAYzJ,EAAKY,aACjB7K,KAAKsT,mBAAmBrJ,EAAKY,cAC7B,KACF2I,GACAA,EAAUhL,OAEVkL,GACAA,EAAU3J,OAEd/J,KAAK0S,aAAegB,GAAaF,EACjCxT,KAAKiT,qBAKTL,wBAAwB5I,EAAQC,GAC5BA,EAAK7K,MAAMuN,MAAMV,WAKrB4G,iBAAiB7I,EAAQ2B,GACjBA,IAAW3L,KAAK0S,eAChB1S,KAAK0S,aAAe,MAExB,EAAAjD,SAAA,SAAkBzP,KAAK4R,OAAQ5R,KAAKoT,iBAAiBzH,IACrD3L,KAAKmS,SAASwB,UAAUhI,EAAOvM,OAC/BY,KAAKiT,uBAIb,MAAMnJ,UAAuB,EAAA7F,OAIzBpE,YAAY+T,GACR7T,QACAC,KAAKuE,SAAS,eACdvE,KAAK6F,GAAK,cACV7F,KAAK6T,OAASD,EACd5T,KAAK8T,gBAAgB,yBAEzBC,YAAY3R,GACR,OAAQA,EAAMiC,MACV,IAAK,QACDrE,KAAKgU,qBAOjB9D,cAAc9L,GACVrE,MAAMmQ,cAAc9L,GACpBpE,KAAKgC,KAAKiS,iBAAiB,QAASjU,MAMxCkU,eAAe9P,GACXpE,KAAKgC,KAAKmS,oBAAoB,QAASnU,MACvCD,MAAMmU,eAAe9P,GAEzB4P,oBACIhU,KAAK6T,OAAOtF,aAEhBuF,gBAAgBM,GACZ,MAAMC,EAAW9S,SAAS+S,cAAc,KACxCD,EAASE,KAAO,IAChBF,EAAS7H,SAAW,EACpB6H,EAASG,KAAOJ,EAChBC,EAAShD,UAAY,YACrBrR,KAAKgC,KAAKyS,YAAYJ,IAG9B5U,EAAQqK,eAAiBA,EACzB,MAAMN,UAAqB,EAAAvF,OAIvBpE,YAAY+T,GACR7T,QACAC,KAAK0U,WAAY,EACjB,MAAMvE,EAAe5O,SAAS+S,cAAc,SAC5CnE,EAAa9L,KAAO,OACpBrE,KAAKgC,KAAKyS,YAAYtE,GACtBnQ,KAAK6T,OAASD,EACd5T,KAAK6F,GAAK,uBAKdqK,cAAc9L,GACVrE,MAAMmQ,cAAc9L,GACpBpE,KAAKmQ,aAAa8D,iBAAiB,QAASjU,MAC5CA,KAAKmQ,aAAa8D,iBAAiB,QAASjU,MAC5CA,KAAKmQ,aAAa8D,iBAAiB,OAAQjU,MAK/CkU,eAAe9P,GACXrE,MAAMmU,eAAe9P,GACrBpE,KAAKmQ,aAAagE,oBAAoB,QAASnU,MAC/CA,KAAKmQ,aAAagE,oBAAoB,QAASnU,MAC/CA,KAAKmQ,aAAagE,oBAAoB,OAAQnU,MAElD+T,YAAY3R,GACR,OAAQA,EAAMiC,MACV,IAAK,QACIrE,KAAK2U,UAAUvS,GACpB,MACJ,IAAK,QACDpC,KAAK4U,UAAUxS,GACf,MACJ,IAAK,OACDpC,KAAK0U,WAAY,GAO7B,gBAAgBtS,GACZ,GAAiB,SAAbA,EAAMyS,IAAgB,CACtB,MAAMlJ,EAAS3L,KAAK6T,OAAOjJ,cAC3B,GAAc,MAAVe,EACA,OAEJ,MAAMmJ,EAAUnJ,EAAOvM,MAAMgR,MACvBD,EAAenQ,KAAKmQ,aACpB4E,EAAU5E,EAAapF,MAC7BoF,EAAa6E,OACTD,IAAYD,EACZnJ,EAAOvM,MAAMgR,MAAQ2E,EAGrB5E,EAAapF,MAAQ+J,GAOjCF,UAAUxS,GAEN,GAAqB,IAAjBA,EAAM6S,QAAgBjV,KAAK0U,UAC3B,OAEJ,MAAMvE,EAAenQ,KAAKmQ,aAC1B/N,EAAMS,iBACNT,EAAMU,kBACN9C,KAAK0U,WAAY,EACjB,MAAMQ,EAAY/E,EAAapF,MAAMoG,QAAQ,MAC1B,IAAf+D,EACA/E,EAAagF,SAGbhF,EAAaiF,kBAAkB,EAAGF,GAM1C,mBACI,OAAOlV,KAAKgC,KAAKiO,SAAS,IAGlCxQ,EAAQ+J,aAAeA,EACvB,MAAM3C,UAA6B,EAAAwB,WAC/BxI,YAAYC,EAAU,IAClBC,MAAMD,GACNE,KAAKiJ,QAAU,IAAI,EAAA/I,OAAOF,MAK9BqV,gBAAgBjR,GACZrE,MAAMsV,gBAAgBjR,GACtBpE,KAAKiJ,QAAQvH,QAGrBjC,EAAQoH,qBAAuBA,EAxanC,CAyaG,IAAY,EAAU,K,aC93ClB,MAAMyO,UAAmB3V,EAI5BE,YAAYC,EAAU,CAAE8T,MAAO,IAAI5P,IAC/BjE,MAAM+L,OAAOC,OAAOD,OAAOC,OAAO,GAAIjM,GAAU,CAAE8T,MAAO9T,EAAQ8T,OAAS,IAAI5P,KAI9EhE,KAAKuV,KAAO,EAAAC,WAAA,UAAqB,YAAc,aAI/CxV,KAAKyV,UAAY,EAAAD,WAAA,UAAqB,iBAAmBxV,KAAKuV,KAI9DvV,KAAK0V,qBAAuB,GAI5B1V,KAAK2V,OAAS,IAAI,IAAU3V,MAI5BA,KAAK4V,QAAU,EAAAJ,WAAA,UAAqB,eAAiB,UACrDxV,KAAKQ,SAAWR,KAAK4T,MAAMpT,SACtBS,MAAK,SACLC,OAAM,SAEX,MAAM2U,EAAO/J,OAAOgK,KAAKR,EAAWS,aAAaC,QAAO,CAACC,EAAKC,KACtDA,KAAOpW,IACPmW,EAAIC,GAAOC,KAAKC,MAAMD,KAAKE,UAAUvW,EAAQoW,MAE1CD,IACR,IAEHjW,KAAKsW,MAAQxK,OAAOC,OAAOD,OAAOC,OAAO,GAAIuJ,EAAWS,aAAcF,GAEtE,MAAMU,EAAcjB,EAAWkB,aAAapT,KACtCqT,EAAcnB,EAAWkB,aAAaE,YACtCC,EAAc7W,EAAQmD,OAASnD,EAAQmD,MAAMG,MAAS,GACtDwT,EAAc9W,EAAQmD,OAASnD,EAAQmD,MAAMyT,aAAgB,GA4BnE,GA3BA1W,KAAK6W,OAAS,CACVzT,KAAM0I,OAAOgK,KAAKS,GAAaP,QAAO,CAACC,EAAKpB,KACxC,GAAIA,KAAO8B,EAAY,CACnB,MAAM5L,EAAQ4L,EAAW9B,GACzBoB,EAAIpB,GAAO9J,OAGXkL,EAAIpB,GAAO0B,EAAY1B,GAE3B,OAAOoB,IACR,IACHS,YAAa5K,OAAOgK,KAAKR,EAAWkB,aAAaE,aAAaV,QAAO,CAACC,EAAKpB,KACvE,GAAIA,KAAO+B,EAAY,CACnB,MAAM7L,EAAQ6L,EAAW/B,GACzBoB,EAAIpB,GAAO9J,OAGXkL,EAAIpB,GAAO4B,EAAY5B,GAE3B,OAAOoB,IACR,KAEHjW,KAAKsW,MAAMQ,SACX9W,KAAK4T,MAAMrP,SAAS,kBAGxBvE,KAAKc,YAAYiW,gBAAgB,IAAI,EAAAC,oBACjClX,EAAQmX,eACR,IAAK,MAAMC,KAAU,QAAwBpX,EAAQmX,gBACjDjX,KAAKmX,eAAeD,GAOhC,WACI,OAAOlX,KAAKsW,MAKhB,YACI,OAAOtW,KAAK6W,OAOhBO,qBAAqBC,GACjB,IAAIlE,EAAOkE,EAAIC,QAEVD,EAAIE,eAAe,gBACpBpE,EAAOkE,GAENtF,MAAMyF,QAAQrE,KACfA,EAAO,CAACA,IAEZA,EAAKzH,SAAQwG,IACT,IACIlS,KAAKmX,eAAejF,GAExB,MAAO3B,GACHvQ,KAAK0V,qBAAqB5D,KAAKvB,OAS3CkH,sBAAsBC,GAClBA,EAAKhM,SAAQ2L,IACTrX,KAAKoX,qBAAqBC,QAOtC,SAAW/B,GAIPA,EAAWqC,MAAQ,IAAI,EAAAnU,MAAM,iCAI7B8R,EAAWS,YAAc,CACrBe,QAA2D,SAAlD,EAAAtB,WAAA,UAAqB,WAAWoC,cACzCC,SAAU,CAAEC,SAAU,GAAIC,QAAS,IACnCC,SAAU,CAAEF,SAAU,GAAIC,QAAS,IACnCd,eAAgB,GAChBgB,YAAkE,SAArD,EAAAzC,WAAA,UAAqB,cAAcoC,eAKpDtC,EAAWkB,aAAe,CACtBpT,KAAM,CACF8U,KAAM,EAAA1C,WAAA,UAAqB,WAC3B2C,SAAU,EAAA3C,WAAA,UAAqB,eAC/B4C,IAAK,EAAA5C,WAAA,UAAqB,UAC1BnS,IAAK,EAAAmS,WAAA,UAAqB,UAC1B6C,OAAQ,EAAA7C,WAAA,UAAqB,aAC7B8C,SAAU,EAAA9C,WAAA,UAAqB,eAC/B+C,OAAQ,EAAA/C,WAAA,UAAqB,aAC7BgD,aAAc,EAAAhD,WAAA,UAAqB,sBACnCiD,QAAS,EAAAjD,WAAA,UAAqB,iBAAclQ,EAC5CoT,UAAW,EAAAlD,WAAA,UAAqB,mBAAgBlQ,EAChDqT,QAAS,EAAAnD,WAAA,UAAqB,iBAAclQ,EAC5CsT,cAAe,EAAApD,WAAA,UAAqB,uBAAoBlQ,GAE5DoR,YAAa,CACTmC,YAAa,EAAArD,WAAA,UAAqB,kBAClCsD,QAAS,EAAAtD,WAAA,UAAqB,cAC9B6C,OAAQ,EAAA7C,WAAA,UAAqB,aAC7BuD,UAAW,EAAAvD,WAAA,UAAqB,gBAChC+C,OAAQ,EAAA/C,WAAA,UAAqB,aAC7BwD,aAAc,EAAAxD,WAAA,UAAqB,mBACnCyD,WAAY,EAAAzD,WAAA,UAAqB,cACjC0D,WAAY,EAAA1D,WAAA,UAAqB,mBAzC7C,CA4CGF,IAAeA,EAAa,K,0BC1KxB,MAAM6D,EAITtZ,YAAYC,GAKRE,KAAKoZ,KAAO,IAAI,EAAA5V,MAAM,uCACtBxD,KAAKqZ,QAAU,IAAI,EAAAnZ,OAAOF,MAC1BA,KAAKsZ,OAAS,IAAI3T,IAClB3F,KAAKkY,KAAOpY,EAAQoY,KACpBlY,KAAKK,SAAWP,EAAQO,SAK5B,cACI,IAAIuO,EAAIC,EACR,MAAM,KAAEqJ,GAASlY,KACXuZ,EAAS,EAAAC,OAAA,MAAaC,OAAOC,SAASnF,OACtC,OAAEoF,EAAM,KAAEC,GAASL,EACnBvW,EAAoG,QAA5F6L,EAAgC,QAA1BD,EAAK2K,EAAOM,gBAA6B,IAAPjL,OAAgB,EAASA,EAAG0C,QAAQ4G,EAAM,YAAyB,IAAPrJ,EAAgBA,EAAK,GAEvI,MAAO,CAAE+K,OAAM5W,OAAM8W,QADL9W,EAAO2W,EAASC,EACFD,UAKlC,aACI,OAAO3Z,KAAKqZ,QAShBU,SAAS/W,EAAMlD,EAAU,IACrB,MAAM,KAAEoY,GAASlY,MACX,QAAEga,GAAYP,QACd,KAAEQ,GAASna,EACXoa,EAAM3Y,SAASmY,SAASnF,KACxB4F,EAAMnX,GAA+B,IAAvBA,EAAKmO,QAAQ+G,GAAclV,EAAO,EAAAwW,OAAA,KAAYtB,EAAMlV,GACxE,OAAImX,IAAQD,EACDD,EAAOja,KAAKoa,cAAW9U,GAElC0U,EAAQK,UAAU,GAAI,GAAIF,GACtBF,EACOja,KAAKoa,cAEXta,EAAQwa,aAGT3Z,uBAAsB,KACbX,KAAKua,aAWtBC,SAAS1a,GACL,IAAI8O,EACJ,MAAM,QAAEjM,EAAO,QAAE8X,GAAY3a,EACvB2J,EAA+B,QAAvBmF,EAAK9O,EAAQ2J,YAAyB,IAAPmF,EAAgBA,EAAK,IAC5D8L,EAAQ1a,KAAKsZ,OAEnB,OADAoB,EAAMlK,IAAIiK,EAAS,CAAE9X,UAAS8G,SACvB,IAAI,EAAAkR,oBAAmB,KAC1BD,EAAME,OAAOH,MAMrBL,SACIX,OAAOC,SAASU,SASpBG,QACI,MAAM,SAAEla,EAAQ,QAAE0M,EAAO,KAAEqM,GAASpZ,MAC9B,QAAE8Z,GAAY/M,EACd8N,EAAS7a,KAAKqZ,QACdqB,EAAQ1a,KAAKsZ,OACbvB,EAAU,GAEhB2C,EAAMhP,SAAQ,CAACoP,EAAML,MACbX,aAAyC,EAASA,EAAQxW,MAAMmX,KAChE1C,EAAQjG,KAAKgJ,MAIrB,MAAMC,EAAQhD,EAAQiD,MAAK,CAACC,EAAGC,IAAMA,EAAEzR,KAAOwR,EAAExR,OAC1C0R,EAAO,IAAI,EAAA3V,gBAGX4V,EAAOvc,UACT,IAAKkc,EAAMrY,OAGP,OAFAmY,EAAOnZ,KAAKqL,QACZoO,EAAKza,aAAQ4E,GAGjB,MAAM,QAAE3C,GAAYoY,EAAMM,MAC1B,IACI,MAAMvB,EAAU9Z,KAAK+M,QAAQ+M,cACRzZ,EAASib,QAAQ3Y,EAASoK,KAChCqM,IACX2B,EAAMrY,OAAS,EACf4N,QAAQiL,MAAM,WAAWzB,4BAAkCnX,MAGnE,MAAO6Y,GACHlL,QAAQmL,KAAK,WAAW3B,QAAcnX,WAAkB6Y,GAEvDJ,KAGT,OADKA,IACED,EAAK9O,SCrIb,MAAMqP,EAAkB,IAAI,EAAAlY,MAAM,wCAI5BmY,EAAU,IAAI,EAAAnY,MAAM,mCCHpBoY,EAAmB,IAAI,EAAApY,MAAM","file":"920.0b8dfae7b45f9045615b.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * A default connection lost handler, which brings up an error dialog.\n */\nexport const ConnectionLost = async function (manager, err, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const title = trans.__('Server Connection Error');\n    const networkMsg = trans.__('A connection to the Jupyter server could not be established.\\n' +\n        'JupyterLab will continue trying to reconnect.\\n' +\n        'Check your network connection or Jupyter server configuration.\\n');\n    return showErrorMessage(title, { message: networkMsg });\n};\n//# sourceMappingURL=connectionlost.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandLinker } from '@jupyterlab/apputils';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { ServiceManager } from '@jupyterlab/services';\nimport { ContextMenuSvg } from '@jupyterlab/ui-components';\nimport { Application } from '@lumino/application';\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The base Jupyter front-end application class.\n *\n * @typeparam `T` - The `shell` type. Defaults to `JupyterFrontEnd.IShell`.\n *\n * @typeparam `U` - The type for supported format names. Defaults to `string`.\n *\n * #### Notes\n * This type is useful as a generic application against which front-end plugins\n * can be authored. It inherits from the Lumino `Application`.\n */\nexport class JupyterFrontEnd extends Application {\n    /**\n     * Construct a new JupyterFrontEnd object.\n     */\n    constructor(options) {\n        super(options);\n        this._formatChanged = new Signal(this);\n        // render context menu/submenus with inline svg icon tweaks\n        this.contextMenu = new ContextMenuSvg({\n            commands: this.commands,\n            renderer: options.contextMenuRenderer\n        });\n        // The default restored promise if one does not exist in the options.\n        const restored = new Promise(resolve => {\n            requestAnimationFrame(() => {\n                resolve();\n            });\n        });\n        this.commandLinker =\n            options.commandLinker || new CommandLinker({ commands: this.commands });\n        this.docRegistry = options.docRegistry || new DocumentRegistry();\n        this.restored =\n            options.restored ||\n                this.started.then(() => restored).catch(() => restored);\n        this.serviceManager = options.serviceManager || new ServiceManager();\n    }\n    /**\n     * The application form factor, e.g., `desktop` or `mobile`.\n     */\n    get format() {\n        return this._format;\n    }\n    set format(format) {\n        if (this._format !== format) {\n            this._format = format;\n            document.body.dataset['format'] = format;\n            this._formatChanged.emit(format);\n        }\n    }\n    /**\n     * A signal that emits when the application form factor changes.\n     */\n    get formatChanged() {\n        return this._formatChanged;\n    }\n    /**\n     * Walks up the DOM hierarchy of the target of the active `contextmenu`\n     * event, testing each HTMLElement ancestor for a user-supplied function. This can\n     * be used to find an HTMLElement on which to operate, given a context menu click.\n     *\n     * @param fn - a function that takes an `HTMLElement` and returns a\n     *   boolean for whether it is the element the requester is seeking.\n     *\n     * @returns an HTMLElement or undefined, if none is found.\n     */\n    contextMenuHitTest(fn) {\n        if (!this._contextMenuEvent ||\n            !(this._contextMenuEvent.target instanceof Node)) {\n            return undefined;\n        }\n        let node = this._contextMenuEvent.target;\n        do {\n            if (node instanceof HTMLElement && fn(node)) {\n                return node;\n            }\n            node = node.parentNode;\n        } while (node && node.parentNode && node !== node.parentNode);\n        return undefined;\n        // TODO: we should be able to use .composedPath() to simplify this function\n        // down to something like the below, but it seems like composedPath is\n        // sometimes returning an empty list.\n        /*\n        if (this._contextMenuEvent) {\n          this._contextMenuEvent\n            .composedPath()\n            .filter(x => x instanceof HTMLElement)\n            .find(test);\n        }\n        return undefined;\n        */\n    }\n    /**\n     * A method invoked on a document `'contextmenu'` event.\n     */\n    evtContextMenu(event) {\n        this._contextMenuEvent = event;\n        if (event.shiftKey ||\n            Private.suppressContextMenu(event.target)) {\n            return;\n        }\n        const opened = this.contextMenu.open(event);\n        if (opened) {\n            const items = this.contextMenu.menu.items;\n            // If only the context menu information will be shown,\n            // with no real commands, close the context menu and\n            // allow the native one to open.\n            if (items.length === 1 &&\n                items[0].command === JupyterFrontEndContextMenu.contextMenu) {\n                this.contextMenu.menu.close();\n                return;\n            }\n            // Stop propagation and allow the application context menu to show.\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n}\n/**\n * The namespace for `JupyterFrontEnd` class statics.\n */\n(function (JupyterFrontEnd) {\n    /**\n     * Is JupyterLab in document mode?\n     *\n     * @param path - Full URL of JupyterLab\n     * @param paths - The current IPaths object hydrated from PageConfig.\n     */\n    function inDocMode(path, paths) {\n        const docPattern = new RegExp(`^${paths.urls.doc}`);\n        const match = path.match(docPattern);\n        if (match) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    JupyterFrontEnd.inDocMode = inDocMode;\n    /**\n     * The application paths dictionary token.\n     */\n    JupyterFrontEnd.IPaths = new Token('@jupyterlab/application:IPaths');\n    /**\n     * The application tree resolver token.\n     *\n     * #### Notes\n     * Not all Jupyter front-end applications will have a tree resolver\n     * implemented on the client-side. This token should not be required as a\n     * dependency if it is possible to make it an optional dependency.\n     */\n    JupyterFrontEnd.ITreeResolver = new Token('@jupyterlab/application:ITreeResolver');\n})(JupyterFrontEnd || (JupyterFrontEnd = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Returns whether the element is itself, or a child of, an element with the `jp-suppress-context-menu` data attribute.\n     */\n    function suppressContextMenu(element) {\n        return element.closest('[data-jp-suppress-context-menu]') !== null;\n    }\n    Private.suppressContextMenu = suppressContextMenu;\n})(Private || (Private = {}));\n/**\n * A namespace for the context menu override.\n */\nexport var JupyterFrontEndContextMenu;\n(function (JupyterFrontEndContextMenu) {\n    /**\n     * An id for a private context-menu-info ersatz command.\n     */\n    JupyterFrontEndContextMenu.contextMenu = '__internal:context-menu-info';\n})(JupyterFrontEndContextMenu || (JupyterFrontEndContextMenu = {}));\n//# sourceMappingURL=frontend.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { classes, DockPanelSvg, LabIcon, TabPanelSvg } from '@jupyterlab/ui-components';\nimport { ArrayExt, find, iter, toArray } from '@lumino/algorithm';\nimport { PromiseDelegate, Token } from '@lumino/coreutils';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Debouncer } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\nimport { BoxLayout, BoxPanel, FocusTracker, Panel, SplitPanel, StackedPanel, TabBar, Widget } from '@lumino/widgets';\n/**\n * The class name added to AppShell instances.\n */\nconst APPLICATION_SHELL_CLASS = 'jp-LabShell';\n/**\n * The class name added to side bar instances.\n */\nconst SIDEBAR_CLASS = 'jp-SideBar';\n/**\n * The class name added to the current widget's title.\n */\nconst CURRENT_CLASS = 'jp-mod-current';\n/**\n * The class name added to the active widget's title.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The default rank of items added to a sidebar.\n */\nconst DEFAULT_RANK = 900;\nconst ACTIVITY_CLASS = 'jp-Activity';\n/**\n * The JupyterLab application shell token.\n */\nexport const ILabShell = new Token('@jupyterlab/application:ILabShell');\n/**\n * The application shell for JupyterLab.\n */\nexport class LabShell extends Widget {\n    /**\n     * Construct a new application shell.\n     */\n    constructor(options) {\n        super();\n        /**\n         * A message hook for child add/remove messages on the main area dock panel.\n         */\n        this._dockChildHook = (handler, msg) => {\n            switch (msg.type) {\n                case 'child-added':\n                    msg.child.addClass(ACTIVITY_CLASS);\n                    this._tracker.add(msg.child);\n                    break;\n                case 'child-removed':\n                    msg.child.removeClass(ACTIVITY_CLASS);\n                    this._tracker.remove(msg.child);\n                    break;\n                default:\n                    break;\n            }\n            return true;\n        };\n        this._activeChanged = new Signal(this);\n        this._cachedLayout = null;\n        this._currentChanged = new Signal(this);\n        this._currentPath = '';\n        this._currentPathChanged = new Signal(this);\n        this._modeChanged = new Signal(this);\n        this._isRestored = false;\n        this._layoutModified = new Signal(this);\n        this._layoutDebouncer = new Debouncer(() => {\n            this._layoutModified.emit(undefined);\n        }, 0);\n        this._restored = new PromiseDelegate();\n        this._tracker = new FocusTracker();\n        this._mainOptionsCache = new Map();\n        this._sideOptionsCache = new Map();\n        this.addClass(APPLICATION_SHELL_CLASS);\n        this.id = 'main';\n        const trans = ((options && options.translator) || nullTranslator).load('jupyterlab');\n        const headerPanel = (this._headerPanel = new BoxPanel());\n        const menuHandler = (this._menuHandler = new Private.PanelHandler());\n        menuHandler.panel.node.setAttribute('role', 'navigation');\n        menuHandler.panel.node.setAttribute('aria-label', trans.__('main'));\n        const topHandler = (this._topHandler = new Private.PanelHandler());\n        topHandler.panel.node.setAttribute('role', 'banner');\n        const bottomPanel = (this._bottomPanel = new BoxPanel());\n        bottomPanel.node.setAttribute('role', 'contentinfo');\n        const hboxPanel = new BoxPanel();\n        const vsplitPanel = (this._vsplitPanel = new Private.RestorableSplitPanel());\n        const dockPanel = (this._dockPanel = new DockPanelSvg());\n        MessageLoop.installMessageHook(dockPanel, this._dockChildHook);\n        const hsplitPanel = (this._hsplitPanel = new Private.RestorableSplitPanel());\n        const downPanel = (this._downPanel = new TabPanelSvg({\n            tabsMovable: true\n        }));\n        const leftHandler = (this._leftHandler = new Private.SideBarHandler());\n        const rightHandler = (this._rightHandler = new Private.SideBarHandler());\n        const rootLayout = new BoxLayout();\n        headerPanel.id = 'jp-header-panel';\n        menuHandler.panel.id = 'jp-menu-panel';\n        topHandler.panel.id = 'jp-top-panel';\n        bottomPanel.id = 'jp-bottom-panel';\n        hboxPanel.id = 'jp-main-content-panel';\n        vsplitPanel.id = 'jp-main-vsplit-panel';\n        dockPanel.id = 'jp-main-dock-panel';\n        hsplitPanel.id = 'jp-main-split-panel';\n        downPanel.id = 'jp-down-stack';\n        leftHandler.sideBar.addClass(SIDEBAR_CLASS);\n        leftHandler.sideBar.addClass('jp-mod-left');\n        leftHandler.sideBar.node.setAttribute('aria-label', trans.__('main sidebar'));\n        leftHandler.sideBar.contentNode.setAttribute('aria-label', trans.__('main sidebar'));\n        leftHandler.sideBar.node.setAttribute('role', 'complementary');\n        leftHandler.stackedPanel.id = 'jp-left-stack';\n        rightHandler.sideBar.addClass(SIDEBAR_CLASS);\n        rightHandler.sideBar.addClass('jp-mod-right');\n        rightHandler.sideBar.node.setAttribute('aria-label', trans.__('alternate sidebar'));\n        rightHandler.sideBar.contentNode.setAttribute('aria-label', trans.__('alternate sidebar'));\n        rightHandler.sideBar.node.setAttribute('role', 'complementary');\n        rightHandler.stackedPanel.id = 'jp-right-stack';\n        dockPanel.node.setAttribute('role', 'main');\n        hboxPanel.spacing = 0;\n        vsplitPanel.spacing = 1;\n        dockPanel.spacing = 5;\n        hsplitPanel.spacing = 1;\n        headerPanel.direction = 'top-to-bottom';\n        vsplitPanel.orientation = 'vertical';\n        hboxPanel.direction = 'left-to-right';\n        hsplitPanel.orientation = 'horizontal';\n        bottomPanel.direction = 'bottom-to-top';\n        SplitPanel.setStretch(leftHandler.stackedPanel, 0);\n        SplitPanel.setStretch(downPanel, 0);\n        SplitPanel.setStretch(dockPanel, 1);\n        SplitPanel.setStretch(rightHandler.stackedPanel, 0);\n        BoxPanel.setStretch(leftHandler.sideBar, 0);\n        BoxPanel.setStretch(hsplitPanel, 1);\n        BoxPanel.setStretch(rightHandler.sideBar, 0);\n        SplitPanel.setStretch(vsplitPanel, 1);\n        hsplitPanel.addWidget(leftHandler.stackedPanel);\n        hsplitPanel.addWidget(dockPanel);\n        hsplitPanel.addWidget(rightHandler.stackedPanel);\n        vsplitPanel.addWidget(hsplitPanel);\n        vsplitPanel.addWidget(downPanel);\n        hboxPanel.addWidget(leftHandler.sideBar);\n        hboxPanel.addWidget(vsplitPanel);\n        hboxPanel.addWidget(rightHandler.sideBar);\n        rootLayout.direction = 'top-to-bottom';\n        rootLayout.spacing = 0; // TODO make this configurable?\n        // Use relative sizing to set the width of the side panels.\n        // This will still respect the min-size of children widget in the stacked\n        // panel. The default sizes will be overwritten during layout restoration.\n        vsplitPanel.setRelativeSizes([3, 1]);\n        hsplitPanel.setRelativeSizes([1, 2.5, 1]);\n        BoxLayout.setStretch(headerPanel, 0);\n        BoxLayout.setStretch(menuHandler.panel, 0);\n        BoxLayout.setStretch(topHandler.panel, 0);\n        BoxLayout.setStretch(hboxPanel, 1);\n        BoxLayout.setStretch(bottomPanel, 0);\n        rootLayout.addWidget(headerPanel);\n        rootLayout.addWidget(topHandler.panel);\n        rootLayout.addWidget(hboxPanel);\n        rootLayout.addWidget(bottomPanel);\n        // initially hiding header and bottom panel when no elements inside,\n        this._headerPanel.hide();\n        this._bottomPanel.hide();\n        this._downPanel.hide();\n        this.layout = rootLayout;\n        // Connect change listeners.\n        this._tracker.currentChanged.connect(this._onCurrentChanged, this);\n        this._tracker.activeChanged.connect(this._onActiveChanged, this);\n        // Connect main layout change listener.\n        this._dockPanel.layoutModified.connect(this._onLayoutModified, this);\n        // Connect vsplit layout change listener\n        this._vsplitPanel.updated.connect(this._onLayoutModified, this);\n        // Connect down panel change listeners\n        this._downPanel.currentChanged.connect(this._onLayoutModified, this);\n        this._downPanel.tabBar.tabMoved.connect(this._onTabPanelChanged, this);\n        this._downPanel.stackedPanel.widgetRemoved.connect(this._onTabPanelChanged, this);\n        // Catch current changed events on the side handlers.\n        this._leftHandler.sideBar.currentChanged.connect(this._onLayoutModified, this);\n        this._rightHandler.sideBar.currentChanged.connect(this._onLayoutModified, this);\n        // Catch update events on the horizontal split panel\n        this._hsplitPanel.updated.connect(this._onLayoutModified, this);\n        // Setup single-document-mode title bar\n        const titleHandler = (this._titleHandler = new Private.TitleHandler(this));\n        this.add(titleHandler, 'top', { rank: 100 });\n        if (this._dockPanel.mode === 'multiple-document') {\n            this._topHandler.addWidget(this._menuHandler.panel, 100);\n            titleHandler.hide();\n        }\n        else {\n            rootLayout.insertWidget(2, this._menuHandler.panel);\n        }\n        // Skip Links\n        const skipLinkWidget = (this._skipLinkWidget = new Private.SkipLinkWidget(this));\n        this.add(skipLinkWidget, 'top', { rank: 0 });\n        this._skipLinkWidget.show();\n        // Wire up signals to update the title panel of the simple interface mode to\n        // follow the title of this.currentWidget\n        this.currentChanged.connect((sender, args) => {\n            let newValue = args.newValue;\n            let oldValue = args.oldValue;\n            // Stop watching the title of the previously current widget\n            if (oldValue) {\n                oldValue.title.changed.disconnect(this._updateTitlePanelTitle, this);\n            }\n            // Start watching the title of the new current widget\n            if (newValue) {\n                newValue.title.changed.connect(this._updateTitlePanelTitle, this);\n                this._updateTitlePanelTitle();\n            }\n            if (newValue && newValue instanceof DocumentWidget) {\n                newValue.context.pathChanged.connect(this._updateCurrentPath, this);\n            }\n            this._updateCurrentPath();\n        });\n    }\n    /**\n     * A signal emitted when main area's active focus changes.\n     */\n    get activeChanged() {\n        return this._activeChanged;\n    }\n    /**\n     * The active widget in the shell's main area.\n     */\n    get activeWidget() {\n        return this._tracker.activeWidget;\n    }\n    /**\n     * A signal emitted when main area's current focus changes.\n     */\n    get currentChanged() {\n        return this._currentChanged;\n    }\n    /**\n     * A signal emitted when the shell/dock panel change modes (single/multiple document).\n     */\n    get modeChanged() {\n        return this._modeChanged;\n    }\n    /**\n     * A signal emitted when the path of the current document changes.\n     *\n     * This also fires when the current document itself changes.\n     */\n    get currentPathChanged() {\n        return this._currentPathChanged;\n    }\n    /**\n     * The current widget in the shell's main area.\n     */\n    get currentWidget() {\n        return this._tracker.currentWidget;\n    }\n    /**\n     * A signal emitted when the main area's layout is modified.\n     */\n    get layoutModified() {\n        return this._layoutModified;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get leftCollapsed() {\n        return !this._leftHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get rightCollapsed() {\n        return !this._rightHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether JupyterLab is in presentation mode with the\n     * `jp-mod-presentationMode` CSS class.\n     */\n    get presentationMode() {\n        return this.hasClass('jp-mod-presentationMode');\n    }\n    /**\n     * Enable/disable presentation mode (`jp-mod-presentationMode` CSS class) with\n     * a boolean.\n     */\n    set presentationMode(value) {\n        this.toggleClass('jp-mod-presentationMode', value);\n    }\n    /**\n     * The main dock area's user interface mode.\n     */\n    get mode() {\n        return this._dockPanel.mode;\n    }\n    set mode(mode) {\n        const dock = this._dockPanel;\n        if (mode === dock.mode) {\n            return;\n        }\n        const applicationCurrentWidget = this.currentWidget;\n        // Toggle back to multiple document mode.\n        dock.mode = mode;\n        if (mode === 'single-document') {\n            this._cachedLayout = dock.saveLayout();\n            // In case the active widget in the dock panel is *not* the active widget\n            // of the application, defer to the application.\n            if (this.currentWidget) {\n                dock.activateWidget(this.currentWidget);\n            }\n            // Adjust menu and title\n            this.layout.insertWidget(2, this._menuHandler.panel);\n            this._titleHandler.show();\n            this._updateTitlePanelTitle();\n        }\n        else {\n            // Cache a reference to every widget currently in the dock panel.\n            const widgets = toArray(dock.widgets());\n            // Restore the original layout.\n            if (this._cachedLayout) {\n                // Remove any disposed widgets in the cached layout and restore.\n                Private.normalizeAreaConfig(dock, this._cachedLayout.main);\n                dock.restoreLayout(this._cachedLayout);\n                this._cachedLayout = null;\n            }\n            // Add any widgets created during single document mode, which have\n            // subsequently been removed from the dock panel after the multiple document\n            // layout has been restored. If the widget has add options cached for\n            // the widget (i.e., if it has been placed with respect to another widget),\n            // then take that into account.\n            widgets.forEach(widget => {\n                if (!widget.parent) {\n                    this._addToMainArea(widget, Object.assign(Object.assign({}, this._mainOptionsCache.get(widget)), { activate: false }));\n                }\n            });\n            this._mainOptionsCache.clear();\n            // In case the active widget in the dock panel is *not* the active widget\n            // of the application, defer to the application.\n            if (applicationCurrentWidget) {\n                dock.activateWidget(applicationCurrentWidget);\n            }\n            // Adjust menu and title\n            this.add(this._menuHandler.panel, 'top', { rank: 100 });\n            // this._topHandler.addWidget(this._menuHandler.panel, 100)\n            this._titleHandler.hide();\n        }\n        // Set the mode data attribute on the applications shell node.\n        this.node.dataset.shellMode = mode;\n        this._downPanel.fit();\n        // Emit the mode changed signal\n        this._modeChanged.emit(mode);\n    }\n    /**\n     * Promise that resolves when state is first restored, returning layout\n     * description.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Activate a widget in its area.\n     */\n    activateById(id) {\n        if (this._leftHandler.has(id)) {\n            this._leftHandler.activate(id);\n            return;\n        }\n        if (this._rightHandler.has(id)) {\n            this._rightHandler.activate(id);\n            return;\n        }\n        const tabIndex = this._downPanel.tabBar.titles.findIndex(title => title.owner.id === id);\n        if (tabIndex >= 0) {\n            this._downPanel.currentIndex = tabIndex;\n            return;\n        }\n        const dock = this._dockPanel;\n        const widget = find(dock.widgets(), value => value.id === id);\n        if (widget) {\n            dock.activateWidget(widget);\n        }\n    }\n    /*\n     * Activate the next Tab in the active TabBar.\n     */\n    activateNextTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci < current.titles.length - 1) {\n            current.currentIndex += 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === current.titles.length - 1) {\n            const nextBar = this._adjacentBar('next');\n            if (nextBar) {\n                nextBar.currentIndex = 0;\n                if (nextBar.currentTitle) {\n                    nextBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /*\n     * Activate the previous Tab in the active TabBar.\n     */\n    activatePreviousTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci > 0) {\n            current.currentIndex -= 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === 0) {\n            const prevBar = this._adjacentBar('previous');\n            if (prevBar) {\n                const len = prevBar.titles.length;\n                prevBar.currentIndex = len - 1;\n                if (prevBar.currentTitle) {\n                    prevBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /*\n     * Activate the next TabBar.\n     */\n    activateNextTabBar() {\n        const nextBar = this._adjacentBar('next');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    /*\n     * Activate the next TabBar.\n     */\n    activatePreviousTabBar() {\n        const nextBar = this._adjacentBar('previous');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    add(widget, area = 'main', options) {\n        switch (area || 'main') {\n            case 'bottom':\n                return this._addToBottomArea(widget, options);\n            case 'down':\n                return this._addToDownArea(widget, options);\n            case 'header':\n                return this._addToHeaderArea(widget, options);\n            case 'left':\n                return this._addToLeftArea(widget, options);\n            case 'main':\n                return this._addToMainArea(widget, options);\n            case 'menu':\n                return this._addToMenuArea(widget, options);\n            case 'right':\n                return this._addToRightArea(widget, options);\n            case 'top':\n                return this._addToTopArea(widget, options);\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Collapse the left area.\n     */\n    collapseLeft() {\n        this._leftHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Collapse the right area.\n     */\n    collapseRight() {\n        this._rightHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Dispose the shell.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._layoutDebouncer.dispose();\n        super.dispose();\n    }\n    /**\n     * Expand the left area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandLeft() {\n        this._leftHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Expand the right area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandRight() {\n        this._rightHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Close all widgets in the main and down area.\n     */\n    closeAll() {\n        // Make a copy of all the widget in the dock panel (using `toArray()`)\n        // before removing them because removing them while iterating through them\n        // modifies the underlying data of the iterator.\n        toArray(this._dockPanel.widgets()).forEach(widget => widget.close());\n        this._downPanel.stackedPanel.widgets.forEach(widget => widget.close());\n    }\n    /**\n     * True if the given area is empty.\n     */\n    isEmpty(area) {\n        switch (area) {\n            case 'bottom':\n                return this._bottomPanel.widgets.length === 0;\n            case 'down':\n                return this._downPanel.stackedPanel.widgets.length === 0;\n            case 'header':\n                return this._headerPanel.widgets.length === 0;\n            case 'left':\n                return this._leftHandler.stackedPanel.widgets.length === 0;\n            case 'main':\n                return this._dockPanel.isEmpty;\n            case 'menu':\n                return this._menuHandler.panel.widgets.length === 0;\n            case 'right':\n                return this._rightHandler.stackedPanel.widgets.length === 0;\n            case 'top':\n                return this._topHandler.panel.widgets.length === 0;\n            default:\n                return true;\n        }\n    }\n    /**\n     * Restore the layout state for the application shell.\n     */\n    restoreLayout(mode, layout) {\n        var _a, _b;\n        const { mainArea, downArea, leftArea, rightArea, relativeSizes } = layout;\n        // Rehydrate the main area.\n        if (mainArea) {\n            const { currentWidget, dock } = mainArea;\n            if (dock) {\n                this._dockPanel.restoreLayout(dock);\n            }\n            if (mode) {\n                this.mode = mode;\n            }\n            if (currentWidget) {\n                this.activateById(currentWidget.id);\n            }\n        }\n        else {\n            // This is needed when loading in an empty workspace in single doc mode\n            if (mode) {\n                this.mode = mode;\n            }\n        }\n        // Rehydrate the down area\n        if (downArea) {\n            const { currentWidget, widgets, size } = downArea;\n            const widgetIds = (_a = widgets === null || widgets === void 0 ? void 0 : widgets.map(widget => widget.id)) !== null && _a !== void 0 ? _a : [];\n            // Remove absent widgets\n            this._downPanel.tabBar.titles\n                .filter(title => !widgetIds.includes(title.owner.id))\n                .map(title => title.owner.close());\n            // Add new widgets\n            const titleIds = this._downPanel.tabBar.titles.map(title => title.owner.id);\n            widgets === null || widgets === void 0 ? void 0 : widgets.filter(widget => !titleIds.includes(widget.id)).map(widget => this._downPanel.addWidget(widget));\n            // Reorder tabs\n            while (!ArrayExt.shallowEqual(widgetIds, this._downPanel.tabBar.titles.map(title => title.owner.id))) {\n                this._downPanel.tabBar.titles.forEach((title, index) => {\n                    const position = widgetIds.findIndex(id => title.owner.id == id);\n                    if (position >= 0 && position != index) {\n                        this._downPanel.tabBar.insertTab(position, title);\n                    }\n                });\n            }\n            if (currentWidget) {\n                const index = this._downPanel.stackedPanel.widgets.findIndex(widget => widget.id === currentWidget.id);\n                if (index) {\n                    this._downPanel.currentIndex = index;\n                    (_b = this._downPanel.currentWidget) === null || _b === void 0 ? void 0 : _b.activate();\n                }\n            }\n            if (size && size > 0.0) {\n                this._vsplitPanel.setRelativeSizes([1.0 - size, size]);\n            }\n            else {\n                // Close all tabs and hide the panel\n                this._downPanel.stackedPanel.widgets.forEach(widget => widget.close());\n                this._downPanel.hide();\n            }\n        }\n        // Rehydrate the left area.\n        if (leftArea) {\n            this._leftHandler.rehydrate(leftArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseLeft();\n            }\n        }\n        // Rehydrate the right area.\n        if (rightArea) {\n            this._rightHandler.rehydrate(rightArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseRight();\n            }\n        }\n        // Restore the relative sizes.\n        if (relativeSizes) {\n            this._hsplitPanel.setRelativeSizes(relativeSizes);\n        }\n        if (!this._isRestored) {\n            // Make sure all messages in the queue are finished before notifying\n            // any extensions that are waiting for the promise that guarantees the\n            // application state has been restored.\n            MessageLoop.flush();\n            this._restored.resolve(layout);\n        }\n    }\n    /**\n     * Save the dehydrated state of the application shell.\n     */\n    saveLayout() {\n        // If the application is in single document mode, use the cached layout if\n        // available. Otherwise, default to querying the dock panel for layout.\n        const layout = {\n            mainArea: {\n                currentWidget: this._tracker.currentWidget,\n                dock: this.mode === 'single-document'\n                    ? this._cachedLayout || this._dockPanel.saveLayout()\n                    : this._dockPanel.saveLayout()\n            },\n            downArea: {\n                currentWidget: this._downPanel.currentWidget,\n                widgets: toArray(this._downPanel.stackedPanel.widgets),\n                size: this._vsplitPanel.relativeSizes()[1]\n            },\n            leftArea: this._leftHandler.dehydrate(),\n            rightArea: this._rightHandler.dehydrate(),\n            relativeSizes: this._hsplitPanel.relativeSizes()\n        };\n        return layout;\n    }\n    /**\n     * Returns the widgets for an application area.\n     */\n    widgets(area) {\n        switch (area !== null && area !== void 0 ? area : 'main') {\n            case 'main':\n                return this._dockPanel.widgets();\n            case 'left':\n                return iter(this._leftHandler.sideBar.titles.map(t => t.owner));\n            case 'right':\n                return iter(this._rightHandler.sideBar.titles.map(t => t.owner));\n            case 'header':\n                return this._headerPanel.children();\n            case 'top':\n                return this._topHandler.panel.children();\n            case 'menu':\n                return this._menuHandler.panel.children();\n            case 'bottom':\n                return this._bottomPanel.children();\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the application shell.\n     */\n    onAfterAttach(msg) {\n        this.node.dataset.shellMode = this.mode;\n    }\n    /**\n     * Update the title panel title based on the title of the current widget.\n     */\n    _updateTitlePanelTitle() {\n        let current = this.currentWidget;\n        const inputElement = this._titleHandler.inputElement;\n        inputElement.value = current ? current.title.label : '';\n        inputElement.title = current ? current.title.caption : '';\n    }\n    /**\n     * The path of the current widget changed, fire the _currentPathChanged signal.\n     */\n    _updateCurrentPath() {\n        let current = this.currentWidget;\n        let newValue = '';\n        if (current && current instanceof DocumentWidget) {\n            newValue = current.context.path;\n        }\n        this._currentPathChanged.emit({\n            newValue: newValue,\n            oldValue: this._currentPath\n        });\n        this._currentPath = newValue;\n    }\n    /**\n     * Add a widget to the left content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToLeftArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        this._sideOptionsCache.set(widget, options);\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._leftHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the main content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     * All widgets added to the main area should be disposed after removal\n     * (disposal before removal will remove the widget automatically).\n     *\n     * In the options, `ref` defaults to `null`, `mode` defaults to `'tab-after'`,\n     * and `activate` defaults to `true`.\n     */\n    _addToMainArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const dock = this._dockPanel;\n        const mode = options.mode || 'tab-after';\n        let ref = this.currentWidget;\n        if (options.ref) {\n            ref = find(dock.widgets(), value => value.id === options.ref) || null;\n        }\n        const { title } = widget;\n        // Add widget ID to tab so that we can get a handle on the tab's widget\n        // (for context menu support)\n        title.dataset = Object.assign(Object.assign({}, title.dataset), { id: widget.id });\n        if (title.icon instanceof LabIcon) {\n            // bind an appropriate style to the icon\n            title.icon = title.icon.bindprops({\n                stylesheet: 'mainAreaTab'\n            });\n        }\n        else if (typeof title.icon === 'string' || !title.icon) {\n            // add some classes to help with displaying css background imgs\n            title.iconClass = classes(title.iconClass, 'jp-Icon');\n        }\n        dock.addWidget(widget, { mode, ref });\n        // The dock panel doesn't account for placement information while\n        // in single document mode, so upon rehydrating any widgets that were\n        // added will not be in the correct place. Cache the placement information\n        // here so that we can later rehydrate correctly.\n        if (dock.mode === 'single-document') {\n            this._mainOptionsCache.set(widget, options);\n        }\n        if (options.activate !== false) {\n            dock.activateWidget(widget);\n        }\n    }\n    /**\n     * Add a widget to the right content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToRightArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._sideOptionsCache.set(widget, options);\n        this._rightHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the top content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToTopArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._topHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._topHandler.panel.isHidden) {\n            this._topHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the title content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToMenuArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._menuHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._menuHandler.panel.isHidden) {\n            this._menuHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the header content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToHeaderArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._headerPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._headerPanel.isHidden) {\n            this._headerPanel.show();\n        }\n    }\n    /**\n     * Add a widget to the bottom content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToBottomArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._bottomPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._bottomPanel.isHidden) {\n            this._bottomPanel.show();\n        }\n    }\n    _addToDownArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const { title } = widget;\n        // Add widget ID to tab so that we can get a handle on the tab's widget\n        // (for context menu support)\n        title.dataset = Object.assign(Object.assign({}, title.dataset), { id: widget.id });\n        if (title.icon instanceof LabIcon) {\n            // bind an appropriate style to the icon\n            title.icon = title.icon.bindprops({\n                stylesheet: 'mainAreaTab'\n            });\n        }\n        else if (typeof title.icon === 'string' || !title.icon) {\n            // add some classes to help with displaying css background imgs\n            title.iconClass = classes(title.iconClass, 'jp-Icon');\n        }\n        this._downPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._downPanel.isHidden) {\n            this._downPanel.show();\n        }\n    }\n    /*\n     * Return the tab bar adjacent to the current TabBar or `null`.\n     */\n    _adjacentBar(direction) {\n        const current = this._currentTabBar();\n        if (!current) {\n            return null;\n        }\n        const bars = toArray(this._dockPanel.tabBars());\n        const len = bars.length;\n        const index = bars.indexOf(current);\n        if (direction === 'previous') {\n            return index > 0 ? bars[index - 1] : index === 0 ? bars[len - 1] : null;\n        }\n        // Otherwise, direction is 'next'.\n        return index < len - 1\n            ? bars[index + 1]\n            : index === len - 1\n                ? bars[0]\n                : null;\n    }\n    /*\n     * Return the TabBar that has the currently active Widget or null.\n     */\n    _currentTabBar() {\n        const current = this._tracker.currentWidget;\n        if (!current) {\n            return null;\n        }\n        const title = current.title;\n        const bars = this._dockPanel.tabBars();\n        return find(bars, bar => bar.titles.indexOf(title) > -1) || null;\n    }\n    /**\n     * Handle a change to the dock area active widget.\n     */\n    _onActiveChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${ACTIVE_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(ACTIVE_CLASS, '');\n        }\n        this._activeChanged.emit(args);\n    }\n    /**\n     * Handle a change to the dock area current widget.\n     */\n    _onCurrentChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${CURRENT_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(CURRENT_CLASS, '');\n        }\n        this._currentChanged.emit(args);\n        this._onLayoutModified();\n    }\n    /**\n     * Handle a change on the down panel widgets\n     */\n    _onTabPanelChanged() {\n        if (this._downPanel.stackedPanel.widgets.length === 0) {\n            this._downPanel.hide();\n        }\n        this._onLayoutModified();\n    }\n    /**\n     * Handle a change to the layout.\n     */\n    _onLayoutModified() {\n        void this._layoutDebouncer.invoke();\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * A less-than comparison function for side bar rank items.\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n    /**\n     * Removes widgets that have been disposed from an area config, mutates area.\n     */\n    function normalizeAreaConfig(parent, area) {\n        if (!area) {\n            return;\n        }\n        if (area.type === 'tab-area') {\n            area.widgets = area.widgets.filter(widget => !widget.isDisposed && widget.parent === parent);\n            return;\n        }\n        area.children.forEach(child => {\n            normalizeAreaConfig(parent, child);\n        });\n    }\n    Private.normalizeAreaConfig = normalizeAreaConfig;\n    /**\n     * A class which manages a panel and sorts its widgets by rank.\n     */\n    class PanelHandler {\n        constructor() {\n            /**\n             * A message hook for child add/remove messages on the main area dock panel.\n             */\n            this._panelChildHook = (handler, msg) => {\n                switch (msg.type) {\n                    case 'child-added':\n                        {\n                            const widget = msg.child;\n                            // If we already know about this widget, we're done\n                            if (this._items.find(v => v.widget === widget)) {\n                                break;\n                            }\n                            // Otherwise, add to the end by default\n                            const rank = this._items[this._items.length - 1].rank;\n                            this._items.push({ widget, rank });\n                        }\n                        break;\n                    case 'child-removed':\n                        {\n                            const widget = msg.child;\n                            ArrayExt.removeFirstWhere(this._items, v => v.widget === widget);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                return true;\n            };\n            this._items = new Array();\n            this._panel = new Panel();\n            MessageLoop.installMessageHook(this._panel, this._panelChildHook);\n        }\n        /**\n         * Get the panel managed by the handler.\n         */\n        get panel() {\n            return this._panel;\n        }\n        /**\n         * Add a widget to the panel.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            const item = { widget, rank };\n            const index = ArrayExt.upperBound(this._items, item, Private.itemCmp);\n            ArrayExt.insert(this._items, index, item);\n            this._panel.insertWidget(index, widget);\n        }\n    }\n    Private.PanelHandler = PanelHandler;\n    /**\n     * A class which manages a side bar and related stacked panel.\n     */\n    class SideBarHandler {\n        /**\n         * Construct a new side bar handler.\n         */\n        constructor() {\n            this._items = new Array();\n            this._sideBar = new TabBar({\n                insertBehavior: 'none',\n                removeBehavior: 'none',\n                allowDeselect: true,\n                orientation: 'vertical'\n            });\n            this._stackedPanel = new StackedPanel();\n            this._sideBar.hide();\n            this._stackedPanel.hide();\n            this._lastCurrent = null;\n            this._sideBar.currentChanged.connect(this._onCurrentChanged, this);\n            this._sideBar.tabActivateRequested.connect(this._onTabActivateRequested, this);\n            this._stackedPanel.widgetRemoved.connect(this._onWidgetRemoved, this);\n        }\n        /**\n         * Get the tab bar managed by the handler.\n         */\n        get sideBar() {\n            return this._sideBar;\n        }\n        /**\n         * Get the stacked panel managed by the handler\n         */\n        get stackedPanel() {\n            return this._stackedPanel;\n        }\n        /**\n         * Expand the sidebar.\n         *\n         * #### Notes\n         * This will open the most recently used tab, or the first tab\n         * if there is no most recently used.\n         */\n        expand() {\n            const previous = this._lastCurrent || (this._items.length > 0 && this._items[0].widget);\n            if (previous) {\n                this.activate(previous.id);\n            }\n        }\n        /**\n         * Activate a widget residing in the side bar by ID.\n         *\n         * @param id - The widget's unique ID.\n         */\n        activate(id) {\n            const widget = this._findWidgetByID(id);\n            if (widget) {\n                this._sideBar.currentTitle = widget.title;\n                widget.activate();\n            }\n        }\n        /**\n         * Test whether the sidebar has the given widget by id.\n         */\n        has(id) {\n            return this._findWidgetByID(id) !== null;\n        }\n        /**\n         * Collapse the sidebar so no items are expanded.\n         */\n        collapse() {\n            this._sideBar.currentTitle = null;\n        }\n        /**\n         * Add a widget and its title to the stacked panel and side bar.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            widget.hide();\n            const item = { widget, rank };\n            const index = this._findInsertIndex(item);\n            ArrayExt.insert(this._items, index, item);\n            this._stackedPanel.insertWidget(index, widget);\n            const title = this._sideBar.insertTab(index, widget.title);\n            // Store the parent id in the title dataset\n            // in order to dispatch click events to the right widget.\n            title.dataset = { id: widget.id };\n            if (title.icon instanceof LabIcon) {\n                // bind an appropriate style to the icon\n                title.icon = title.icon.bindprops({\n                    stylesheet: 'sideBar'\n                });\n            }\n            else if (typeof title.icon === 'string' || !title.icon) {\n                // add some classes to help with displaying css background imgs\n                title.iconClass = classes(title.iconClass, 'jp-Icon', 'jp-Icon-20');\n            }\n            this._refreshVisibility();\n        }\n        /**\n         * Dehydrate the side bar data.\n         */\n        dehydrate() {\n            const collapsed = this._sideBar.currentTitle === null;\n            const widgets = toArray(this._stackedPanel.widgets);\n            const currentWidget = widgets[this._sideBar.currentIndex];\n            return { collapsed, currentWidget, widgets };\n        }\n        /**\n         * Rehydrate the side bar.\n         */\n        rehydrate(data) {\n            if (data.currentWidget) {\n                this.activate(data.currentWidget.id);\n            }\n            if (data.collapsed) {\n                this.collapse();\n            }\n        }\n        /**\n         * Find the insertion index for a rank item.\n         */\n        _findInsertIndex(item) {\n            return ArrayExt.upperBound(this._items, item, Private.itemCmp);\n        }\n        /**\n         * Find the index of the item with the given widget, or `-1`.\n         */\n        _findWidgetIndex(widget) {\n            return ArrayExt.findFirstIndex(this._items, i => i.widget === widget);\n        }\n        /**\n         * Find the widget which owns the given title, or `null`.\n         */\n        _findWidgetByTitle(title) {\n            const item = find(this._items, value => value.widget.title === title);\n            return item ? item.widget : null;\n        }\n        /**\n         * Find the widget with the given id, or `null`.\n         */\n        _findWidgetByID(id) {\n            const item = find(this._items, value => value.widget.id === id);\n            return item ? item.widget : null;\n        }\n        /**\n         * Refresh the visibility of the side bar and stacked panel.\n         */\n        _refreshVisibility() {\n            this._sideBar.setHidden(this._sideBar.titles.length === 0);\n            this._stackedPanel.setHidden(this._sideBar.currentTitle === null);\n        }\n        /**\n         * Handle the `currentChanged` signal from the sidebar.\n         */\n        _onCurrentChanged(sender, args) {\n            const oldWidget = args.previousTitle\n                ? this._findWidgetByTitle(args.previousTitle)\n                : null;\n            const newWidget = args.currentTitle\n                ? this._findWidgetByTitle(args.currentTitle)\n                : null;\n            if (oldWidget) {\n                oldWidget.hide();\n            }\n            if (newWidget) {\n                newWidget.show();\n            }\n            this._lastCurrent = newWidget || oldWidget;\n            this._refreshVisibility();\n        }\n        /**\n         * Handle a `tabActivateRequest` signal from the sidebar.\n         */\n        _onTabActivateRequested(sender, args) {\n            args.title.owner.activate();\n        }\n        /*\n         * Handle the `widgetRemoved` signal from the stacked panel.\n         */\n        _onWidgetRemoved(sender, widget) {\n            if (widget === this._lastCurrent) {\n                this._lastCurrent = null;\n            }\n            ArrayExt.removeAt(this._items, this._findWidgetIndex(widget));\n            this._sideBar.removeTab(widget.title);\n            this._refreshVisibility();\n        }\n    }\n    Private.SideBarHandler = SideBarHandler;\n    class SkipLinkWidget extends Widget {\n        /**\n         * Construct a new skipLink widget.\n         */\n        constructor(shell) {\n            super();\n            this.addClass('jp-skiplink');\n            this.id = 'jp-skiplink';\n            this._shell = shell;\n            this._createSkipLink('Skip to left side bar');\n        }\n        handleEvent(event) {\n            switch (event.type) {\n                case 'click':\n                    this._focusLeftSideBar();\n                    break;\n            }\n        }\n        /**\n         * Handle `after-attach` messages for the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.node.addEventListener('click', this);\n        }\n        /**\n         * A message handler invoked on a `'before-detach'`\n         * message\n         */\n        onBeforeDetach(msg) {\n            this.node.removeEventListener('click', this);\n            super.onBeforeDetach(msg);\n        }\n        _focusLeftSideBar() {\n            this._shell.expandLeft();\n        }\n        _createSkipLink(skipLinkText) {\n            const skipLink = document.createElement('a');\n            skipLink.href = '#';\n            skipLink.tabIndex = 1;\n            skipLink.text = skipLinkText;\n            skipLink.className = 'skip-link';\n            this.node.appendChild(skipLink);\n        }\n    }\n    Private.SkipLinkWidget = SkipLinkWidget;\n    class TitleHandler extends Widget {\n        /**\n         * Construct a new title handler.\n         */\n        constructor(shell) {\n            super();\n            this._selected = false;\n            const inputElement = document.createElement('input');\n            inputElement.type = 'text';\n            this.node.appendChild(inputElement);\n            this._shell = shell;\n            this.id = 'jp-title-panel-title';\n        }\n        /**\n         * Handle `after-attach` messages for the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.inputElement.addEventListener('keyup', this);\n            this.inputElement.addEventListener('click', this);\n            this.inputElement.addEventListener('blur', this);\n        }\n        /**\n         * Handle `before-detach` messages for the widget.\n         */\n        onBeforeDetach(msg) {\n            super.onBeforeDetach(msg);\n            this.inputElement.removeEventListener('keyup', this);\n            this.inputElement.removeEventListener('click', this);\n            this.inputElement.removeEventListener('blur', this);\n        }\n        handleEvent(event) {\n            switch (event.type) {\n                case 'keyup':\n                    void this._evtKeyUp(event);\n                    break;\n                case 'click':\n                    this._evtClick(event);\n                    break;\n                case 'blur':\n                    this._selected = false;\n                    break;\n            }\n        }\n        /**\n         * Handle `keyup` events on the handler.\n         */\n        async _evtKeyUp(event) {\n            if (event.key == 'Enter') {\n                const widget = this._shell.currentWidget;\n                if (widget == null) {\n                    return;\n                }\n                const oldName = widget.title.label;\n                const inputElement = this.inputElement;\n                const newName = inputElement.value;\n                inputElement.blur();\n                if (newName !== oldName) {\n                    widget.title.label = newName;\n                }\n                else {\n                    inputElement.value = oldName;\n                }\n            }\n        }\n        /**\n         * Handle `click` events on the handler.\n         */\n        _evtClick(event) {\n            // only handle primary button clicks\n            if (event.button !== 0 || this._selected) {\n                return;\n            }\n            const inputElement = this.inputElement;\n            event.preventDefault();\n            event.stopPropagation();\n            this._selected = true;\n            const selectEnd = inputElement.value.indexOf('.');\n            if (selectEnd === -1) {\n                inputElement.select();\n            }\n            else {\n                inputElement.setSelectionRange(0, selectEnd);\n            }\n        }\n        /**\n         * The input element containing the parent widget's title.\n         */\n        get inputElement() {\n            return this.node.children[0];\n        }\n    }\n    Private.TitleHandler = TitleHandler;\n    class RestorableSplitPanel extends SplitPanel {\n        constructor(options = {}) {\n            super(options);\n            this.updated = new Signal(this);\n        }\n        /**\n         * Emit 'updated' signal on 'update' requests.\n         */\n        onUpdateRequest(msg) {\n            super.onUpdateRequest(msg);\n            this.updated.emit();\n        }\n    }\n    Private.RestorableSplitPanel = RestorableSplitPanel;\n})(Private || (Private = {}));\n//# sourceMappingURL=shell.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Base64ModelFactory } from '@jupyterlab/docregistry';\nimport { Token } from '@lumino/coreutils';\nimport { JupyterFrontEnd } from './frontend';\nimport { createRendermimePlugins } from './mimerenderers';\nimport { LabShell } from './shell';\nimport { LabStatus } from './status';\n/**\n * JupyterLab is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLab extends JupyterFrontEnd {\n    /**\n     * Construct a new JupyterLab object.\n     */\n    constructor(options = { shell: new LabShell() }) {\n        super(Object.assign(Object.assign({}, options), { shell: options.shell || new LabShell() }));\n        /**\n         * The name of the JupyterLab application.\n         */\n        this.name = PageConfig.getOption('appName') || 'JupyterLab';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = PageConfig.getOption('appNamespace') || this.name;\n        /**\n         * A list of all errors encountered when registering plugins.\n         */\n        this.registerPluginErrors = [];\n        /**\n         * The application busy and dirty status signals and flags.\n         */\n        this.status = new LabStatus(this);\n        /**\n         * The version of the JupyterLab application.\n         */\n        this.version = PageConfig.getOption('appVersion') || 'unknown';\n        this.restored = this.shell.restored\n            .then(() => undefined)\n            .catch(() => undefined);\n        // Create an IInfo dictionary from the options to override the defaults.\n        const info = Object.keys(JupyterLab.defaultInfo).reduce((acc, val) => {\n            if (val in options) {\n                acc[val] = JSON.parse(JSON.stringify(options[val]));\n            }\n            return acc;\n        }, {});\n        // Populate application info.\n        this._info = Object.assign(Object.assign({}, JupyterLab.defaultInfo), info);\n        // Populate application paths override the defaults if necessary.\n        const defaultURLs = JupyterLab.defaultPaths.urls;\n        const defaultDirs = JupyterLab.defaultPaths.directories;\n        const optionURLs = (options.paths && options.paths.urls) || {};\n        const optionDirs = (options.paths && options.paths.directories) || {};\n        this._paths = {\n            urls: Object.keys(defaultURLs).reduce((acc, key) => {\n                if (key in optionURLs) {\n                    const value = optionURLs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultURLs[key];\n                }\n                return acc;\n            }, {}),\n            directories: Object.keys(JupyterLab.defaultPaths.directories).reduce((acc, key) => {\n                if (key in optionDirs) {\n                    const value = optionDirs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultDirs[key];\n                }\n                return acc;\n            }, {})\n        };\n        if (this._info.devMode) {\n            this.shell.addClass('jp-mod-devMode');\n        }\n        // Add initial model factory.\n        this.docRegistry.addModelFactory(new Base64ModelFactory());\n        if (options.mimeExtensions) {\n            for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n                this.registerPlugin(plugin);\n            }\n        }\n    }\n    /**\n     * The JupyterLab application information dictionary.\n     */\n    get info() {\n        return this._info;\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return this._paths;\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!mod.hasOwnProperty('__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                this.registerPluginErrors.push(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach(mod => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n/**\n * The namespace for `JupyterLab` class statics.\n */\n(function (JupyterLab) {\n    /**\n     * The layout restorer token.\n     */\n    JupyterLab.IInfo = new Token('@jupyterlab/application:IInfo');\n    /**\n     * The default JupyterLab application info.\n     */\n    JupyterLab.defaultInfo = {\n        devMode: PageConfig.getOption('devMode').toLowerCase() === 'true',\n        deferred: { patterns: [], matches: [] },\n        disabled: { patterns: [], matches: [] },\n        mimeExtensions: [],\n        filesCached: PageConfig.getOption('cacheFiles').toLowerCase() === 'true'\n    };\n    /**\n     * The default JupyterLab application paths.\n     */\n    JupyterLab.defaultPaths = {\n        urls: {\n            base: PageConfig.getOption('baseUrl'),\n            notFound: PageConfig.getOption('notFoundUrl'),\n            app: PageConfig.getOption('appUrl'),\n            doc: PageConfig.getOption('docUrl'),\n            static: PageConfig.getOption('staticUrl'),\n            settings: PageConfig.getOption('settingsUrl'),\n            themes: PageConfig.getOption('themesUrl'),\n            translations: PageConfig.getOption('translationsApiUrl'),\n            hubHost: PageConfig.getOption('hubHost') || undefined,\n            hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n            hubUser: PageConfig.getOption('hubUser') || undefined,\n            hubServerName: PageConfig.getOption('hubServerName') || undefined\n        },\n        directories: {\n            appSettings: PageConfig.getOption('appSettingsDir'),\n            schemas: PageConfig.getOption('schemasDir'),\n            static: PageConfig.getOption('staticDir'),\n            templates: PageConfig.getOption('templatesDir'),\n            themes: PageConfig.getOption('themesDir'),\n            userSettings: PageConfig.getOption('userSettingsDir'),\n            serverRoot: PageConfig.getOption('serverRoot'),\n            workspaces: PageConfig.getOption('workspacesDir')\n        }\n    };\n})(JupyterLab || (JupyterLab = {}));\n//# sourceMappingURL=lab.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { PromiseDelegate, Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\n/**\n * A static class that routes URLs within the application.\n */\nexport class Router {\n    /**\n     * Create a URL router.\n     */\n    constructor(options) {\n        /**\n         * If a matching rule's command resolves with the `stop` token during routing,\n         * no further matches will execute.\n         */\n        this.stop = new Token('@jupyterlab/application:Router#stop');\n        this._routed = new Signal(this);\n        this._rules = new Map();\n        this.base = options.base;\n        this.commands = options.commands;\n    }\n    /**\n     * Returns the parsed current URL of the application.\n     */\n    get current() {\n        var _a, _b;\n        const { base } = this;\n        const parsed = URLExt.parse(window.location.href);\n        const { search, hash } = parsed;\n        const path = (_b = (_a = parsed.pathname) === null || _a === void 0 ? void 0 : _a.replace(base, '/')) !== null && _b !== void 0 ? _b : '';\n        const request = path + search + hash;\n        return { hash, path, request, search };\n    }\n    /**\n     * A signal emitted when the router routes a route.\n     */\n    get routed() {\n        return this._routed;\n    }\n    /**\n     * Navigate to a new path within the application.\n     *\n     * @param path - The new path or empty string if redirecting to root.\n     *\n     * @param options - The navigation options.\n     */\n    navigate(path, options = {}) {\n        const { base } = this;\n        const { history } = window;\n        const { hard } = options;\n        const old = document.location.href;\n        const url = path && path.indexOf(base) === 0 ? path : URLExt.join(base, path);\n        if (url === old) {\n            return hard ? this.reload() : undefined;\n        }\n        history.pushState({}, '', url);\n        if (hard) {\n            return this.reload();\n        }\n        if (!options.skipRouting) {\n            // Because a `route()` call may still be in the stack after having received\n            // a `stop` token, wait for the next stack frame before calling `route()`.\n            requestAnimationFrame(() => {\n                void this.route();\n            });\n        }\n    }\n    /**\n     * Register to route a path pattern to a command.\n     *\n     * @param options - The route registration options.\n     *\n     * @returns A disposable that removes the registered rule from the router.\n     */\n    register(options) {\n        var _a;\n        const { command, pattern } = options;\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : 100;\n        const rules = this._rules;\n        rules.set(pattern, { command, rank });\n        return new DisposableDelegate(() => {\n            rules.delete(pattern);\n        });\n    }\n    /**\n     * Cause a hard reload of the document.\n     */\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Route a specific path to an action.\n     *\n     * #### Notes\n     * If a pattern is matched, its command will be invoked with arguments that\n     * match the `IRouter.ILocation` interface.\n     */\n    route() {\n        const { commands, current, stop } = this;\n        const { request } = current;\n        const routed = this._routed;\n        const rules = this._rules;\n        const matches = [];\n        // Collect all rules that match the URL.\n        rules.forEach((rule, pattern) => {\n            if (request === null || request === void 0 ? void 0 : request.match(pattern)) {\n                matches.push(rule);\n            }\n        });\n        // Order the matching rules by rank and enqueue them.\n        const queue = matches.sort((a, b) => b.rank - a.rank);\n        const done = new PromiseDelegate();\n        // Process each enqueued command sequentially and short-circuit if a promise\n        // resolves with the `stop` token.\n        const next = async () => {\n            if (!queue.length) {\n                routed.emit(current);\n                done.resolve(undefined);\n                return;\n            }\n            const { command } = queue.pop();\n            try {\n                const request = this.current.request;\n                const result = await commands.execute(command, current);\n                if (result === stop) {\n                    queue.length = 0;\n                    console.debug(`Routing ${request} was short-circuited by ${command}`);\n                }\n            }\n            catch (reason) {\n                console.warn(`Routing ${request} to ${command} failed`, reason);\n            }\n            void next();\n        };\n        void next();\n        return done.promise;\n    }\n}\n//# sourceMappingURL=router.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * A token for which a plugin can provide to respond to connection failures\n * to the application server.\n */\nexport const IConnectionLost = new Token('@jupyterlab/apputils:IConnectionLost');\n/**\n * The URL Router token.\n */\nexport const IRouter = new Token('@jupyterlab/application:IRouter');\n//# sourceMappingURL=tokens.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Token } from '@lumino/coreutils';\n/**\n * The tree path updater token.\n */\nexport const ITreePathUpdater = new Token('@jupyterlab/application:ITreePathUpdater');\n//# sourceMappingURL=treepathupdater.js.map"],"sourceRoot":""}