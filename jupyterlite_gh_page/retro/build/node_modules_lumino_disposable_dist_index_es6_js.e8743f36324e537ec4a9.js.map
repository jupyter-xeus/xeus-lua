{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@lumino/disposable/dist/index.es6.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAyC;AACE;;AAE3C;AACA;AACA,+DAA+D;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;;AAEA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qDAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAgB;AACxB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,gBAAgB,EAAE;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAI,yBAAyB,eAAe,EAAE;AACtD;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qDAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAgB;AACxB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAI,yBAAyB,eAAe,EAAE;AACtD;AACA;AACA;AACA,CAAC,0DAA0D;;AAEyC;AACpG","file":"node_modules_lumino_disposable_dist_index_es6_js.e8743f36324e537ec4a9.js","sourcesContent":["import { each } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * A disposable object which delegates to a callback function.\n */\nvar DisposableDelegate = /** @class */ (function () {\n    /**\n     * Construct a new disposable delegate.\n     *\n     * @param fn - The callback function to invoke on dispose.\n     */\n    function DisposableDelegate(fn) {\n        this._fn = fn;\n    }\n    Object.defineProperty(DisposableDelegate.prototype, \"isDisposed\", {\n        /**\n         * Test whether the delegate has been disposed.\n         */\n        get: function () {\n            return !this._fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dispose of the delegate and invoke the callback function.\n     */\n    DisposableDelegate.prototype.dispose = function () {\n        if (!this._fn) {\n            return;\n        }\n        var fn = this._fn;\n        this._fn = null;\n        fn();\n    };\n    return DisposableDelegate;\n}());\n/**\n * An observable disposable object which delegates to a callback function.\n */\nvar ObservableDisposableDelegate = /** @class */ (function (_super) {\n    __extends(ObservableDisposableDelegate, _super);\n    function ObservableDisposableDelegate() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._disposed = new Signal(_this);\n        return _this;\n    }\n    Object.defineProperty(ObservableDisposableDelegate.prototype, \"disposed\", {\n        /**\n         * A signal emitted when the delegate is disposed.\n         */\n        get: function () {\n            return this._disposed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dispose of the delegate and invoke the callback function.\n     */\n    ObservableDisposableDelegate.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        _super.prototype.dispose.call(this);\n        this._disposed.emit(undefined);\n        Signal.clearData(this);\n    };\n    return ObservableDisposableDelegate;\n}(DisposableDelegate));\n/**\n * An object which manages a collection of disposable items.\n */\nvar DisposableSet = /** @class */ (function () {\n    /**\n     * Construct a new disposable set.\n     */\n    function DisposableSet() {\n        this._isDisposed = false;\n        this._items = new Set();\n    }\n    Object.defineProperty(DisposableSet.prototype, \"isDisposed\", {\n        /**\n         * Test whether the set has been disposed.\n         */\n        get: function () {\n            return this._isDisposed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dispose of the set and the items it contains.\n     *\n     * #### Notes\n     * Items are disposed in the order they are added to the set.\n     */\n    DisposableSet.prototype.dispose = function () {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._items.forEach(function (item) { item.dispose(); });\n        this._items.clear();\n    };\n    /**\n     * Test whether the set contains a specific item.\n     *\n     * @param item - The item of interest.\n     *\n     * @returns `true` if the set contains the item, `false` otherwise.\n     */\n    DisposableSet.prototype.contains = function (item) {\n        return this._items.has(item);\n    };\n    /**\n     * Add a disposable item to the set.\n     *\n     * @param item - The item to add to the set.\n     *\n     * #### Notes\n     * If the item is already contained in the set, this is a no-op.\n     */\n    DisposableSet.prototype.add = function (item) {\n        this._items.add(item);\n    };\n    /**\n     * Remove a disposable item from the set.\n     *\n     * @param item - The item to remove from the set.\n     *\n     * #### Notes\n     * If the item is not contained in the set, this is a no-op.\n     */\n    DisposableSet.prototype.remove = function (item) {\n        this._items.delete(item);\n    };\n    /**\n     * Remove all items from the set.\n     */\n    DisposableSet.prototype.clear = function () {\n        this._items.clear();\n    };\n    return DisposableSet;\n}());\n/**\n * The namespace for the `DisposableSet` class statics.\n */\n(function (DisposableSet) {\n    /**\n     * Create a disposable set from an iterable of items.\n     *\n     * @param items - The iterable or array-like object of interest.\n     *\n     * @returns A new disposable initialized with the given items.\n     */\n    function from(items) {\n        var set = new DisposableSet();\n        each(items, function (item) { set.add(item); });\n        return set;\n    }\n    DisposableSet.from = from;\n})(DisposableSet || (DisposableSet = {}));\n/**\n * An observable object which manages a collection of disposable items.\n */\nvar ObservableDisposableSet = /** @class */ (function (_super) {\n    __extends(ObservableDisposableSet, _super);\n    function ObservableDisposableSet() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._disposed = new Signal(_this);\n        return _this;\n    }\n    Object.defineProperty(ObservableDisposableSet.prototype, \"disposed\", {\n        /**\n         * A signal emitted when the set is disposed.\n         */\n        get: function () {\n            return this._disposed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dispose of the set and the items it contains.\n     *\n     * #### Notes\n     * Items are disposed in the order they are added to the set.\n     */\n    ObservableDisposableSet.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        _super.prototype.dispose.call(this);\n        this._disposed.emit(undefined);\n        Signal.clearData(this);\n    };\n    return ObservableDisposableSet;\n}(DisposableSet));\n/**\n * The namespace for the `ObservableDisposableSet` class statics.\n */\n(function (ObservableDisposableSet) {\n    /**\n     * Create an observable disposable set from an iterable of items.\n     *\n     * @param items - The iterable or array-like object of interest.\n     *\n     * @returns A new disposable initialized with the given items.\n     */\n    function from(items) {\n        var set = new ObservableDisposableSet();\n        each(items, function (item) { set.add(item); });\n        return set;\n    }\n    ObservableDisposableSet.from = from;\n})(ObservableDisposableSet || (ObservableDisposableSet = {}));\n\nexport { DisposableDelegate, DisposableSet, ObservableDisposableDelegate, ObservableDisposableSet };\n//# sourceMappingURL=index.es6.js.map\n"],"sourceRoot":""}