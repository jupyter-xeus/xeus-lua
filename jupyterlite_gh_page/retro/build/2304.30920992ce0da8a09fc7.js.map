{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/lib/index.js"],"names":["TREE_PATTERN","RegExp","CommandIDs","toggleTop","toggleZen","openLab","openTree","dirty","id","autoStart","requires","ILabStatus","ITranslator","activate","app","status","translator","RetroApp","Error","message","load","__","window","addEventListener","event","isDirty","returnValue","logo","baseUrl","PageConfig","node","document","createElement","href","target","rel","Widget","retroInlineIcon","jupyterIcon","element","container","elementPosition","padding","height","width","shell","add","rank","opener","IRouter","IDocumentManager","router","docManager","commands","command","addCommand","execute","args","_a","matches","path","match","file","decodeURIComponent","ext","PathExt","restored","then","open","undefined","ref","register","pattern","noTabsMenu","IMainMenu","menu","tabsMenu","dispose","pages","optional","ICommandPalette","palette","label","forEach","addItem","category","viewMenu","addGroup","paths","provides","JupyterFrontEnd","base","urls","Router","started","route","sessionDialogs","ISessionContextDialogs","sessionContextDialogs","RetroShell","IRetroShell","spacer","top","DOMUtils","addClass","tabTitle","setTabTitle","current","currentWidget","DocumentWidget","update","basename","context","title","pathChanged","connect","currentChanged","widget","addTitle","async","children","length","h","textContent","appendChild","style","marginLeft","onclick","_b","result","renameDialog","newPath","encoded","encodeURIComponent","navigate","skipRouting","topVisibility","retroShell","setHidden","isVisible","isToggled","onChanged","format","expandTop","collapseTop","formatChanged","TranslationManager","zen","elem","documentElement","toggleOff","zenModeEnabled","exitFullscreen","requestFullscreen","fullscreenElement"],"mappings":"wRAeA,MAQMA,EAAe,IAAIC,OAAO,0BAIhC,IAAIC,GACJ,SAAWA,GAIPA,EAAWC,UAAY,yBAIvBD,EAAWE,UAAY,yBAIvBF,EAAWG,QAAU,uBAIrBH,EAAWI,SAAW,wBAhB1B,CAiBGJ,IAAeA,EAAa,KAI/B,MAAMK,EAAQ,CACVC,GAAI,wCACJC,WAAW,EACXC,SAAU,CAAC,EAAAC,WAAY,EAAAC,aACvBC,SAAU,CAACC,EAAKC,EAAQC,KACpB,KAAMF,aAAe,EAAAG,UACjB,MAAM,IAAIC,MAAM,GAAGX,EAAMC,qCAE7B,MACMW,EADQH,EAAWI,KAAK,cACRC,GAAG,gFACzBC,OAAOC,iBAAiB,gBAAgBC,IACpC,GAAIV,EAAIC,OAAOU,QACX,OAAQD,EAAME,YAAcP,OAQtCQ,EAAO,CACTnB,GAAI,uCACJC,WAAW,EACXI,SAAWC,IACP,MAAMc,EAAU,EAAAC,WAAA,aACVC,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAO,GAAGL,cACfE,EAAKI,OAAS,SACdJ,EAAKK,IAAM,sBACX,MAAMR,EAAO,IAAI,EAAAS,OAAO,CAAEN,UAC8B,SAAtC,EAAAD,WAAA,UAAqB,aACd,EAAAQ,gBAAkB,EAAAC,aACtCC,QAAQ,CACTC,UAAWV,EACXW,gBAAiB,SACjBC,QAAS,kBACTC,OAAQ,OACRC,MAAO,SAEXjB,EAAKnB,GAAK,eACVM,EAAI+B,MAAMC,IAAInB,EAAM,MAAO,CAAEoB,KAAM,MAMrCC,EAAS,CACXxC,GAAI,yCACJC,WAAW,EACXC,SAAU,CAAC,EAAAuC,QAAS,EAAAC,kBACpBrC,SAAU,CAACC,EAAKqC,EAAQC,KACpB,MAAM,SAAEC,GAAavC,EACfwC,EAAU,cAChBD,EAASE,WAAWD,EAAS,CACzBE,QAAUC,IACN,IAAIC,EACJ,MACMC,EAAqD,QAA1CD,EADFD,EACcG,KAAKC,MAAM7D,UAAkC,IAAP0D,EAAgBA,EAAK,IACjF,CAAE,CAAEE,GAAQD,EACnB,IAAKC,EACD,OAEJ,MAAME,EAAOC,mBAAmBH,GAC1BI,EAAM,EAAAC,QAAA,QAAgBH,GAC5BhD,EAAIoD,SAASC,MAAK,KAEF,WAARH,EACAZ,EAAWgB,KAAKN,EArGf,gBAqGuCO,EAAW,CAC/CC,IAAK,WAITlB,EAAWgB,KAAKN,EAtGjB,cAsGuCO,EAAW,CAC7CC,IAAK,iBAMzBnB,EAAOoB,SAAS,CAAEjB,UAASkB,QAASxE,MAMtCyE,EAAa,CACfjE,GAAI,+CACJE,SAAU,CAAC,EAAAgE,WACXjE,WAAW,EACXI,SAAU,CAACC,EAAK6D,KACZA,EAAKC,SAASC,YAMhBC,EAAQ,CACVtE,GAAI,wCACJC,WAAW,EACXsE,SAAU,CAAC,EAAAC,gBAAiB,EAAAN,WAC5B7D,SAAU,CAACC,EAAKmE,EAASN,KACrB,MAAM/C,EAAU,EAAAC,WAAA,aAChBf,EAAIuC,SAASE,WAAWrD,EAAWG,QAAS,CACxC6E,MAAO,kBACP1B,QAAS,KACLlC,OAAO8C,KAAK,GAAGxC,WAGvBd,EAAIuC,SAASE,WAAWrD,EAAWI,SAAU,CACzC4E,MAAO,aACP1B,QAAS,KACLlC,OAAO8C,KAAK,GAAGxC,kBAGnBqD,GACA,CAAC/E,EAAWG,QAASH,EAAWI,UAAU6E,SAAQ7B,IAC9C2B,EAAQG,QAAQ,CAAE9B,UAAS+B,SAAU,YAGzCV,GACAA,EAAKW,SAASC,SAAS,CAAC,CAAEjC,QAASpD,EAAWG,SAAW,CAAEiD,QAASpD,EAAWI,WAAa,KAOlGkF,EAAQ,CACVhF,GAAI,wCACJC,WAAW,EACXgF,SAAU,EAAAC,gBAAA,OACV7E,SAAWC,IACP,KAAMA,aAAe,EAAAG,UACjB,MAAM,IAAIC,MAAM,GAAGsE,EAAMhF,qCAE7B,OAAOM,EAAI0E,QAMbrC,EAAS,CACX3C,GAAI,yCACJC,WAAW,EACXgF,SAAU,EAAAxC,QACVvC,SAAU,CAAC,EAAAgF,gBAAA,QACX7E,SAAU,CAACC,EAAK0E,KACZ,MAAM,SAAEnC,GAAavC,EACf6E,EAAOH,EAAMI,KAAKD,KAClBxC,EAAS,IAAI,EAAA0C,OAAO,CAAEF,OAAMtC,aASlC,OARKvC,EAAIgF,QAAQ3B,MAAK,KAEbhB,EAAO4C,QAEZzE,OAAOC,iBAAiB,YAAY,KAC3B4B,EAAO4C,cAGb5C,IAMT6C,EAAiB,CACnBxF,GAAI,kDACJiF,SAAU,EAAAQ,uBACVxF,WAAW,EACXI,SAAU,IAAM,EAAAqF,uBAKdrD,EAAQ,CACVrC,GAAI,wCACJK,SAAWC,IACP,KAAMA,EAAI+B,iBAAiB,EAAAsD,YACvB,MAAM,IAAIjF,MAAM,GAAG2B,EAAMrC,0CAE7B,OAAOM,EAAI+B,OAEfpC,WAAW,EACXgF,SAAU,EAAAW,aAKRC,EAAS,CACX7F,GAAI,yCACJC,WAAW,EACXI,SAAWC,IACP,MAAMwF,EAAM,IAAI,EAAAlE,OAChBkE,EAAI9F,GAAK,EAAA+F,SAAA,cACTD,EAAIE,SAAS,kBACb1F,EAAI+B,MAAMC,IAAIwD,EAAK,MAAO,CAAEvD,KAAM,MAClC,MAAM4B,EAAO,IAAI,EAAAvC,OACjBuC,EAAKnE,GAAK,EAAA+F,SAAA,cACV5B,EAAK6B,SAAS,kBACd1F,EAAI+B,MAAMC,IAAI6B,EAAM,OAAQ,CAAE5B,KAAM,QAMtChC,EAAS,CACXP,GAAI,yCACJC,WAAW,EACXgF,SAAU,EAAA9E,WACVE,SAAWC,IACP,KAAMA,aAAe,EAAAG,UACjB,MAAM,IAAIC,MAAM,GAAGH,EAAOP,qCAE9B,OAAOM,EAAIC,SAMb0F,EAAW,CACbjG,GAAI,4CACJC,WAAW,EACXC,SAAU,CAAC,EAAA0F,aACXvF,SAAU,CAACC,EAAK+B,KACZ,MAAM6D,EAAc,KAChB,MAAMC,EAAU9D,EAAM+D,cACtB,KAAMD,aAAmB,EAAAE,gBACrB,OAEJ,MAAMC,EAAS,KACX,MAAMC,EAAW,EAAA9C,QAAA,SAAiB0C,EAAQK,QAAQpD,MAClD7B,SAASkF,MAAQF,GAErBJ,EAAQK,QAAQE,YAAYC,QAAQL,GACpCA,KAEJjE,EAAMuE,eAAeD,QAAQT,GAC7BA,MAMFO,EAAQ,CACVzG,GAAI,wCACJC,WAAW,EACXC,SAAU,CAAC,EAAA0F,aACXrB,SAAU,CAAC,EAAA7B,iBAAkB,EAAAD,SAC7BpC,SAAU,CAACC,EAAK+B,EAAOO,EAAYD,KAC/B,MAAMkE,EAAS,IAAI,EAAAjF,OACnBiF,EAAO7G,GAAK,WACZM,EAAI+B,MAAMC,IAAIuE,EAAQ,MAAO,CAAEtE,KAAM,KACrC,MAAMuE,EAAWC,UACb,MAAMZ,EAAU9D,EAAM+D,cACtB,KAAKD,GAAaA,aAAmB,EAAAE,gBACjC,OAEJ,GAAIQ,EAAOvF,KAAK0F,SAASC,OAAS,EAC9B,OAEJ,MAAMC,EAAI3F,SAASC,cAAc,MACjC0F,EAAEC,YAAchB,EAAQM,MAAM/B,MAC9BmC,EAAOvF,KAAK8F,YAAYF,GACxBL,EAAOvF,KAAK+F,MAAMC,WAAa,OAC1B1E,IAGLiE,EAAOvF,KAAKiG,QAAUR,UAClB,IAAI7D,EAAIsE,EACR,MAAMC,QAAe,IAAAC,cAAa9E,EAAYuD,EAAQK,QAAQpD,MAK9D,GAHI+C,GACAA,EAAQ9F,WAEG,OAAXoH,EACA,OAEJ,MAAME,EAA0C,QAA/BzE,EAAKiD,EAAQK,QAAQpD,YAAyB,IAAPF,EAAgBA,EAAKuE,EAAOrE,KAC9EmD,EAAW,EAAA9C,QAAA,SAAiBkE,GAElC,GADAT,EAAEC,YAAcZ,GACX5D,EACD,OAEJ,MAAMQ,EAA6D,QAAlDqE,EAAK7E,EAAOwD,QAAQ/C,KAAKC,MAAM7D,UAAkC,IAAPgI,EAAgBA,EAAK,IACzF,CAAEjC,EAAOnC,GAAQD,EACxB,IAAKoC,IAAUnC,EACX,OAEJ,MAAMwE,EAAUC,mBAAmBF,GACnChF,EAAOmF,SAAS,UAAUvC,KAASqC,IAAW,CAC1CG,aAAa,OAIzB1F,EAAMuE,eAAeD,QAAQG,GAC7BA,MAMFkB,EAAgB,CAClBhI,GAAI,sCACJE,SAAU,CAAC,EAAA0F,aACXrB,SAAU,CAAC,EAAAL,WACX7D,SAAU,CAACC,EAAK2H,EAAY9D,KACxB,MAAM2B,EAAMmC,EAAWnC,IACvBxF,EAAIuC,SAASE,WAAWrD,EAAWC,UAAW,CAC1C+E,MAAO,cACP1B,QAAS,KACL8C,EAAIoC,UAAUpC,EAAIqC,YAEtBC,UAAW,IAAMtC,EAAIqC,YAErBhE,GACAA,EAAKW,SAASC,SAAS,CAAC,CAAEjC,QAASpD,EAAWC,YAAc,GAEhE,MAAM0I,EAAY,KACK,YAAf/H,EAAIgI,OACJL,EAAWM,YAGXN,EAAWO,eAInBlI,EAAImI,cAAc9B,QAAQ0B,GAC1BA,KAEJpI,WAAW,GAKTO,EAAa,CACfR,GAAI,6CACJK,SAAWC,GACoB,IAAI,EAAAoI,mBAGnCzI,WAAW,EACXgF,SAAU,EAAA7E,aAKRuI,EAAM,CACR3I,GAAI,sCACJC,WAAW,EACXsE,SAAU,CAAC,EAAAC,gBAAiB,EAAAoB,YAAa,EAAA1B,WACzC7D,SAAU,CAACC,EAAKmE,EAASwD,EAAY9D,KACjC,MAAM,SAAEtB,GAAavC,EACfsI,EAAOrH,SAASsH,gBAMhBC,EAAY,KACdb,SAAwDA,EAAWM,YACnEN,SAAwDA,EAAW9D,KAAK+D,WAAU,GAClFa,GAAiB,GAErB,IAAIA,GAAiB,EACrBlG,EAASE,WAAWrD,EAAWE,UAAW,CACtC8E,MAAO,kBACP1B,QAAS,KACA+F,GAKDxH,SAASyH,iBACTF,MALAF,EAAKK,oBAdbhB,SAAwDA,EAAWO,cACnEP,SAAwDA,EAAW9D,KAAK+D,WAAU,GAClFa,GAAiB,MAqBrBxH,SAASR,iBAAiB,oBAAoB,KACrCQ,SAAS2H,mBACVJ,OAGJrE,GACAA,EAAQG,QAAQ,CAAE9B,QAASpD,EAAWE,UAAWiF,SAAU,SAE3DV,GACAA,EAAKW,SAASC,SAAS,CAAC,CAAEjC,QAASpD,EAAWE,YAAc,KAyBxE,EAlBgB,CACZG,EACAoB,EACA8C,EACAzB,EACA8B,EACAU,EACArC,EACA6C,EACAnD,EACAwD,EACAtF,EACA0F,EACAQ,EACAuB,EACAxH,EACAmI","file":"2304.30920992ce0da8a09fc7.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabStatus, IRouter, JupyterFrontEnd, Router } from '@jupyterlab/application';\nimport { sessionContextDialogs, ISessionContextDialogs, DOMUtils, ICommandPalette } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager, renameDialog } from '@jupyterlab/docmanager';\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ITranslator, TranslationManager } from '@jupyterlab/translation';\nimport { RetroApp, RetroShell, IRetroShell } from '@retrolab/application';\nimport { jupyterIcon, retroInlineIcon } from '@retrolab/ui-components';\nimport { Widget } from '@lumino/widgets';\n/**\n * The default notebook factory.\n */\nconst NOTEBOOK_FACTORY = 'Notebook';\n/**\n * The editor factory.\n */\nconst EDITOR_FACTORY = 'Editor';\n/**\n * A regular expression to match path to notebooks and documents\n */\nconst TREE_PATTERN = new RegExp('/(notebooks|edit)/(.*)');\n/**\n * The command IDs used by the application plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Toggle Top Bar visibility\n     */\n    CommandIDs.toggleTop = 'application:toggle-top';\n    /**\n     * Toggle the Zen mode\n     */\n    CommandIDs.toggleZen = 'application:toggle-zen';\n    /**\n     * Open JupyterLab\n     */\n    CommandIDs.openLab = 'application:open-lab';\n    /**\n     * Open the tree page.\n     */\n    CommandIDs.openTree = 'application:open-tree';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Check if the application is dirty before closing the browser tab.\n */\nconst dirty = {\n    id: '@retrolab/application-extension:dirty',\n    autoStart: true,\n    requires: [ILabStatus, ITranslator],\n    activate: (app, status, translator) => {\n        if (!(app instanceof RetroApp)) {\n            throw new Error(`${dirty.id} must be activated in RetroLab.`);\n        }\n        const trans = translator.load('jupyterlab');\n        const message = trans.__('Are you sure you want to exit RetroLab?\\n\\nAny unsaved changes will be lost.');\n        window.addEventListener('beforeunload', event => {\n            if (app.status.isDirty) {\n                return (event.returnValue = message);\n            }\n        });\n    }\n};\n/**\n * The logo plugin.\n */\nconst logo = {\n    id: '@retrolab/application-extension:logo',\n    autoStart: true,\n    activate: (app) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        const node = document.createElement('a');\n        node.href = `${baseUrl}retro/tree`;\n        node.target = '_blank';\n        node.rel = 'noopener noreferrer';\n        const logo = new Widget({ node });\n        const retroLogo = PageConfig.getOption('retroLogo') === 'true';\n        const icon = retroLogo ? retroInlineIcon : jupyterIcon;\n        icon.element({\n            container: node,\n            elementPosition: 'center',\n            padding: '2px 2px 2px 8px',\n            height: '28px',\n            width: 'auto'\n        });\n        logo.id = 'jp-RetroLogo';\n        app.shell.add(logo, 'top', { rank: 0 });\n    }\n};\n/**\n * A plugin to open documents in the main area.\n */\nconst opener = {\n    id: '@retrolab/application-extension:opener',\n    autoStart: true,\n    requires: [IRouter, IDocumentManager],\n    activate: (app, router, docManager) => {\n        const { commands } = app;\n        const command = 'router:tree';\n        commands.addCommand(command, {\n            execute: (args) => {\n                var _a;\n                const parsed = args;\n                const matches = (_a = parsed.path.match(TREE_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                const [, , path] = matches;\n                if (!path) {\n                    return;\n                }\n                const file = decodeURIComponent(path);\n                const ext = PathExt.extname(file);\n                app.restored.then(() => {\n                    // TODO: get factory from file type instead?\n                    if (ext === '.ipynb') {\n                        docManager.open(file, NOTEBOOK_FACTORY, undefined, {\n                            ref: '_noref'\n                        });\n                    }\n                    else {\n                        docManager.open(file, EDITOR_FACTORY, undefined, {\n                            ref: '_noref'\n                        });\n                    }\n                });\n            }\n        });\n        router.register({ command, pattern: TREE_PATTERN });\n    }\n};\n/**\n * A plugin to dispose the Tabs menu\n */\nconst noTabsMenu = {\n    id: '@retrolab/application-extension:no-tabs-menu',\n    requires: [IMainMenu],\n    autoStart: true,\n    activate: (app, menu) => {\n        menu.tabsMenu.dispose();\n    }\n};\n/**\n * Add commands to open the tree and running pages.\n */\nconst pages = {\n    id: '@retrolab/application-extension:pages',\n    autoStart: true,\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, palette, menu) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        app.commands.addCommand(CommandIDs.openLab, {\n            label: 'Open JupyterLab',\n            execute: () => {\n                window.open(`${baseUrl}lab`);\n            }\n        });\n        app.commands.addCommand(CommandIDs.openTree, {\n            label: 'Open Files',\n            execute: () => {\n                window.open(`${baseUrl}retro/tree`);\n            }\n        });\n        if (palette) {\n            [CommandIDs.openLab, CommandIDs.openTree].forEach(command => {\n                palette.addItem({ command, category: 'View' });\n            });\n        }\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: CommandIDs.openLab }, { command: CommandIDs.openTree }], 0);\n        }\n    }\n};\n/**\n * The default paths for a RetroLab app.\n */\nconst paths = {\n    id: '@retrolab/application-extension:paths',\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths,\n    activate: (app) => {\n        if (!(app instanceof RetroApp)) {\n            throw new Error(`${paths.id} must be activated in RetroLab.`);\n        }\n        return app.paths;\n    }\n};\n/**\n * The default URL router provider.\n */\nconst router = {\n    id: '@retrolab/application-extension:router',\n    autoStart: true,\n    provides: IRouter,\n    requires: [JupyterFrontEnd.IPaths],\n    activate: (app, paths) => {\n        const { commands } = app;\n        const base = paths.urls.base;\n        const router = new Router({ base, commands });\n        void app.started.then(() => {\n            // Route the very first request on load.\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n        });\n        return router;\n    }\n};\n/**\n * The default session dialogs plugin\n */\nconst sessionDialogs = {\n    id: '@retrolab/application-extension:session-dialogs',\n    provides: ISessionContextDialogs,\n    autoStart: true,\n    activate: () => sessionContextDialogs\n};\n/**\n * The default RetroLab application shell.\n */\nconst shell = {\n    id: '@retrolab/application-extension:shell',\n    activate: (app) => {\n        if (!(app.shell instanceof RetroShell)) {\n            throw new Error(`${shell.id} did not find a RetroShell instance.`);\n        }\n        return app.shell;\n    },\n    autoStart: true,\n    provides: IRetroShell\n};\n/**\n * A plugin to provide a spacer at rank 10000 for flex panels\n */\nconst spacer = {\n    id: '@retrolab/application-extension:spacer',\n    autoStart: true,\n    activate: (app) => {\n        const top = new Widget();\n        top.id = DOMUtils.createDomID();\n        top.addClass('jp-RetroSpacer');\n        app.shell.add(top, 'top', { rank: 10000 });\n        const menu = new Widget();\n        menu.id = DOMUtils.createDomID();\n        menu.addClass('jp-RetroSpacer');\n        app.shell.add(menu, 'menu', { rank: 10000 });\n    }\n};\n/**\n * The default JupyterLab application status provider.\n */\nconst status = {\n    id: '@retrolab/application-extension:status',\n    autoStart: true,\n    provides: ILabStatus,\n    activate: (app) => {\n        if (!(app instanceof RetroApp)) {\n            throw new Error(`${status.id} must be activated in RetroLab.`);\n        }\n        return app.status;\n    }\n};\n/**\n * A plugin to display the document title in the browser tab title\n */\nconst tabTitle = {\n    id: '@retrolab/application-extension:tab-title',\n    autoStart: true,\n    requires: [IRetroShell],\n    activate: (app, shell) => {\n        const setTabTitle = () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof DocumentWidget)) {\n                return;\n            }\n            const update = () => {\n                const basename = PathExt.basename(current.context.path);\n                document.title = basename;\n            };\n            current.context.pathChanged.connect(update);\n            update();\n        };\n        shell.currentChanged.connect(setTabTitle);\n        setTabTitle();\n    }\n};\n/**\n * A plugin to display and rename the title of a file\n */\nconst title = {\n    id: '@retrolab/application-extension:title',\n    autoStart: true,\n    requires: [IRetroShell],\n    optional: [IDocumentManager, IRouter],\n    activate: (app, shell, docManager, router) => {\n        const widget = new Widget();\n        widget.id = 'jp-title';\n        app.shell.add(widget, 'top', { rank: 10 });\n        const addTitle = async () => {\n            const current = shell.currentWidget;\n            if (!current || !(current instanceof DocumentWidget)) {\n                return;\n            }\n            if (widget.node.children.length > 0) {\n                return;\n            }\n            const h = document.createElement('h1');\n            h.textContent = current.title.label;\n            widget.node.appendChild(h);\n            widget.node.style.marginLeft = '10px';\n            if (!docManager) {\n                return;\n            }\n            widget.node.onclick = async () => {\n                var _a, _b;\n                const result = await renameDialog(docManager, current.context.path);\n                // activate the current widget to bring the focus\n                if (current) {\n                    current.activate();\n                }\n                if (result === null) {\n                    return;\n                }\n                const newPath = (_a = current.context.path) !== null && _a !== void 0 ? _a : result.path;\n                const basename = PathExt.basename(newPath);\n                h.textContent = basename;\n                if (!router) {\n                    return;\n                }\n                const matches = (_b = router.current.path.match(TREE_PATTERN)) !== null && _b !== void 0 ? _b : [];\n                const [, route, path] = matches;\n                if (!route || !path) {\n                    return;\n                }\n                const encoded = encodeURIComponent(newPath);\n                router.navigate(`/retro/${route}/${encoded}`, {\n                    skipRouting: true\n                });\n            };\n        };\n        shell.currentChanged.connect(addTitle);\n        addTitle();\n    }\n};\n/**\n * Plugin to toggle the top header visibility.\n */\nconst topVisibility = {\n    id: '@retrolab/application-extension:top',\n    requires: [IRetroShell],\n    optional: [IMainMenu],\n    activate: (app, retroShell, menu) => {\n        const top = retroShell.top;\n        app.commands.addCommand(CommandIDs.toggleTop, {\n            label: 'Show Header',\n            execute: () => {\n                top.setHidden(top.isVisible);\n            },\n            isToggled: () => top.isVisible\n        });\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: CommandIDs.toggleTop }], 2);\n        }\n        const onChanged = () => {\n            if (app.format === 'desktop') {\n                retroShell.expandTop();\n            }\n            else {\n                retroShell.collapseTop();\n            }\n        };\n        // listen on format change (mobile and desktop) to make the view more compact\n        app.formatChanged.connect(onChanged);\n        onChanged();\n    },\n    autoStart: true\n};\n/**\n * A simplified Translator\n */\nconst translator = {\n    id: '@retrolab/application-extension:translator',\n    activate: (app) => {\n        const translationManager = new TranslationManager();\n        return translationManager;\n    },\n    autoStart: true,\n    provides: ITranslator\n};\n/**\n * Zen mode plugin\n */\nconst zen = {\n    id: '@retrolab/application-extension:zen',\n    autoStart: true,\n    optional: [ICommandPalette, IRetroShell, IMainMenu],\n    activate: (app, palette, retroShell, menu) => {\n        const { commands } = app;\n        const elem = document.documentElement;\n        const toggleOn = () => {\n            retroShell === null || retroShell === void 0 ? void 0 : retroShell.collapseTop();\n            retroShell === null || retroShell === void 0 ? void 0 : retroShell.menu.setHidden(true);\n            zenModeEnabled = true;\n        };\n        const toggleOff = () => {\n            retroShell === null || retroShell === void 0 ? void 0 : retroShell.expandTop();\n            retroShell === null || retroShell === void 0 ? void 0 : retroShell.menu.setHidden(false);\n            zenModeEnabled = false;\n        };\n        let zenModeEnabled = false;\n        commands.addCommand(CommandIDs.toggleZen, {\n            label: 'Toggle Zen Mode',\n            execute: () => {\n                if (!zenModeEnabled) {\n                    elem.requestFullscreen();\n                    toggleOn();\n                }\n                else {\n                    document.exitFullscreen();\n                    toggleOff();\n                }\n            }\n        });\n        document.addEventListener('fullscreenchange', () => {\n            if (!document.fullscreenElement) {\n                toggleOff();\n            }\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.toggleZen, category: 'Mode' });\n        }\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: CommandIDs.toggleZen }], 3);\n        }\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    dirty,\n    logo,\n    noTabsMenu,\n    opener,\n    pages,\n    paths,\n    router,\n    sessionDialogs,\n    shell,\n    spacer,\n    status,\n    tabTitle,\n    title,\n    topVisibility,\n    translator,\n    zen\n];\nexport default plugins;\n"],"sourceRoot":""}