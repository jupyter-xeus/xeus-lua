{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/application-extension/lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACoD;AACuB;AACxB;AACO;AAC6D;AACzD;AACb;AACyB;AACjB;AACW;AACxB;AACc;AACjB;AACG;AACF;AAChB;AAC1B,6BAA6B,qDAAc;AAC3C;AACA,iBAAiB,aAAa,EAAE,aAAa;AAC7C;AACA;AACA,0BAA0B,2DAAQ,gBAAgB,uEAAc,aAAa;AAC7E,qBAAqB,2DAAQ,eAAe,6EAAoB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAe;AAClD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW;AAC1B,eAAe,iEAAe,EAAE,2DAAS;AACzC;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,2DAAmB,UAAU,qCAAqC;AACvG,oBAAoB,2DAAmB,UAAU,gCAAgC;AACjF,+BAA+B,2DAAmB,UAAU,+BAA+B;AAC3F,oBAAoB,2DAAmB,SAAS,oCAAoC;AACpF,wBAAwB,2DAAmB,CAAC,0EAAkB,GAAG,iCAAiC;AAClG;AACA;AACA;AACA;AACA,uCAAuC,2DAAmB,UAAU,sCAAsC;AAC1G,oBAAoB,2DAAmB,OAAO,mGAAmG;AACjJ,oBAAoB,2DAAmB,OAAO,kGAAkG;AAChJ,mCAAmC,2DAAmB,UAAU,kCAAkC;AAClG,8BAA8B,2DAAmB,SAAS,6BAA6B;AACvF;AACA;AACA,uBAAuB,gEAAU;AACjC;AACA;AACA;AACA,wBAAwB,qEAAmB;AAC3C;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,6BAA6B,sCAAsC;AACnE;AACA;AACA,qCAAqC,4BAA4B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6EAAwB;AACtC;AACA,yBAAyB,2DAAQ;AACjC;AACA;AACA,8BAA8B,uEAAoB;AAClD;AACA,wBAAwB,KAAK,GAAG,YAAY,0DAAU,GAAG;AACzD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,sBAAsB,iEAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW,EAAE,oEAAgB;AAC5C,eAAe,iEAAe,EAAE,wEAAmB,EAAE,2DAAS;AAC9D;AACA;AACA,eAAe,+CAA+C;AAC9D;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB,4BAA4B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gEAAU;AACrC;AACA;AACA,kCAAkC,iEAAe,EAAE,wBAAwB;AAC3E,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,6BAA6B,mDAAmD;AAChF;AACA;AACA,yCAAyC,yCAAyC;AAClF;AACA;AACA,mBAAmB,UAAU;AAC7B,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,2DAAO;AAC5C;AACA;AACA;AACA;AACA,oEAAoE,gBAAgB;AACpF;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,sBAAsB,6EAAsB,EAAE,yBAAyB;AACvE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAS;AACxB;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAM;AAC/B,QAAQ,wEAAgB;AACxB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,uEAAkB;AACzD;AACA,KAAK;AACL;AACA,cAAc,gEAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC","file":"packages_application-extension_lib_index_js.4454694b18cdc925a51d.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabShell } from '@jupyterlab/application';\nimport { ICommandPalette, Dialog, showDialog } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IDocumentProviderFactory, ProviderMock, getAnonymousUserName, getRandomColor } from '@jupyterlab/docprovider';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ITranslator, TranslationManager } from '@jupyterlab/translation';\nimport { downloadIcon } from '@jupyterlab/ui-components';\nimport { liteIcon, liteWordmark } from '@jupyterlite/ui-components';\nimport { toArray } from '@lumino/algorithm';\nimport { UUID, PromiseDelegate } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\nimport { getParam } from 'lib0/environment';\nimport { WebrtcProvider } from 'y-webrtc';\nimport React from 'react';\nclass WebRtcProvider extends WebrtcProvider {\n    constructor(options) {\n        super(`${options.room}${options.path}`, options.ymodel.ydoc);\n        this._initialRequest = null;\n        this.awareness = options.ymodel.awareness;\n        const color = `#${getParam('--usercolor', getRandomColor().slice(1))}`;\n        const name = getParam('--username', getAnonymousUserName());\n        const currState = this.awareness.getLocalState();\n        // only set if this was not already set by another plugin\n        if (currState && !currState.name) {\n            this.awareness.setLocalStateField('user', {\n                name,\n                color\n            });\n        }\n    }\n    setPath() {\n        // TODO: this seems super useful\n    }\n    requestInitialContent() {\n        if (this._initialRequest) {\n            return this._initialRequest.promise;\n        }\n        let resolved = false;\n        this._initialRequest = new PromiseDelegate();\n        this.on('synced', (event) => {\n            if (this._initialRequest) {\n                this._initialRequest.resolve(event.synced);\n                resolved = true;\n            }\n        });\n        // similar logic as in the upstream plugin\n        setTimeout(() => {\n            if (!resolved && this._initialRequest) {\n                this._initialRequest.resolve(false);\n            }\n        }, 1000);\n        return this._initialRequest.promise;\n    }\n    putInitializedState() {\n        // no-op\n    }\n    acquireLock() {\n        return Promise.resolve(0);\n    }\n    releaseLock(lock) {\n        // no-op\n    }\n}\n/**\n * The command IDs used by the application extension.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.about = 'application:about';\n    CommandIDs.docmanagerDownload = 'docmanager:download';\n    CommandIDs.filebrowserDownload = 'filebrowser:download';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Add a command to show an About dialog.\n */\nconst about = {\n    id: '@jupyterlite/application-extension:about',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, translator, palette, menu) => {\n        const { commands } = app;\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Help');\n        commands.addCommand(CommandIDs.about, {\n            label: trans.__('About %1', app.name),\n            execute: () => {\n                const versionNumber = trans.__('Version %1', app.version);\n                const versionInfo = (React.createElement(\"span\", { className: \"jp-About-version-info\" },\n                    React.createElement(\"span\", { className: \"jp-About-version\" }, versionNumber)));\n                const title = (React.createElement(\"span\", { className: \"jp-About-header\" },\n                    React.createElement(\"div\", { className: \"jp-About-header-info\" },\n                        React.createElement(liteWordmark.react, { height: \"auto\", width: \"196px\" }),\n                        versionInfo)));\n                // Create the body of the about dialog\n                const jupyterliteURL = 'https://github.com/jupyterlite/jupyterlite';\n                const contributorsURL = 'https://github.com/jupyterlite/jupyterlite/graphs/contributors';\n                const externalLinks = (React.createElement(\"span\", { className: \"jp-About-externalLinks\" },\n                    React.createElement(\"a\", { href: contributorsURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('CONTRIBUTOR LIST')),\n                    React.createElement(\"a\", { href: jupyterliteURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('JUPYTERLITE ON GITHUB'))));\n                const copyright = (React.createElement(\"span\", { className: \"jp-About-copyright\" }, trans.__('Â© 2021 JupyterLite Contributors')));\n                const body = (React.createElement(\"div\", { className: \"jp-About-body\" },\n                    externalLinks,\n                    copyright));\n                return showDialog({\n                    title,\n                    body,\n                    buttons: [\n                        Dialog.createButton({\n                            label: trans.__('Dismiss'),\n                            className: 'jp-About-button jp-mod-reject jp-mod-styled'\n                        })\n                    ]\n                });\n            }\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.about, category });\n        }\n        if (menu) {\n            menu.helpMenu.addGroup([{ command: CommandIDs.about }], 0);\n        }\n    }\n};\n/**\n * An alternative document provider plugin\n */\nconst docProviderPlugin = {\n    id: '@jupyterlite/application-extension:docprovider',\n    provides: IDocumentProviderFactory,\n    activate: (app) => {\n        const roomName = getParam('--room', '').trim();\n        const host = window.location.host;\n        // enable if both the page config option (deployment wide) and the room name (user) are defined\n        const collaborative = PageConfig.getOption('collaborative') === 'true' && roomName;\n        // default to a random id to not collaborate with others by default\n        const room = `${host}-${roomName || UUID.uuid4()}`;\n        const factory = (options) => {\n            return collaborative\n                ? new WebRtcProvider({\n                    room,\n                    ...options\n                })\n                : new ProviderMock();\n        };\n        return factory;\n    }\n};\n/**\n * A plugin providing download commands in the file menu and command palette.\n */\nconst downloadPlugin = {\n    id: '@jupyterlite/application-extension:download',\n    autoStart: true,\n    requires: [ITranslator, IDocumentManager],\n    optional: [ICommandPalette, IFileBrowserFactory, IMainMenu],\n    activate: (app, translator, docManager, palette, factory, mainMenu) => {\n        const trans = translator.load('jupyterlab');\n        const { commands, contextMenu, serviceManager, shell } = app;\n        const isEnabled = () => {\n            const { currentWidget } = shell;\n            return !!(currentWidget && docManager.contextForWidget(currentWidget));\n        };\n        const downloadContent = (content, path) => {\n            const element = document.createElement('a');\n            element.href = `data:text/json;charset=utf-8,${encodeURIComponent(content)}`;\n            element.download = path;\n            document.body.appendChild(element);\n            element.click();\n            document.body.removeChild(element);\n        };\n        commands.addCommand(CommandIDs.docmanagerDownload, {\n            label: trans.__('Download'),\n            caption: trans.__('Download the file to your computer'),\n            isEnabled,\n            execute: () => {\n                // Checks that shell.currentWidget is valid:\n                const current = shell.currentWidget;\n                if (!isEnabled() || !current) {\n                    return;\n                }\n                const context = docManager.contextForWidget(current);\n                if (!context) {\n                    return showDialog({\n                        title: trans.__('Cannot Download'),\n                        body: trans.__('No context found for current widget!'),\n                        buttons: [Dialog.okButton({ label: trans.__('OK') })]\n                    });\n                }\n                downloadContent(context.model.toString(), context.path);\n            }\n        });\n        const category = trans.__('File Operations');\n        if (palette) {\n            palette.addItem({ command: CommandIDs.docmanagerDownload, category });\n        }\n        if (mainMenu) {\n            mainMenu.fileMenu.addGroup([{ command: CommandIDs.docmanagerDownload }], 6);\n        }\n        if (factory) {\n            const { tracker } = factory;\n            const { contents } = serviceManager;\n            commands.addCommand(CommandIDs.filebrowserDownload, {\n                execute: async () => {\n                    const widget = tracker.currentWidget;\n                    if (!widget) {\n                        return;\n                    }\n                    const selected = toArray(widget.selectedItems());\n                    selected.forEach(async (item) => {\n                        if (item.type === 'directory') {\n                            return;\n                        }\n                        const file = await contents.get(item.path, { content: true });\n                        const formatted = file.type === 'notebook' || file.mimetype.indexOf('json') !== -1\n                            ? JSON.stringify(file.content, null, 2)\n                            : file.content;\n                        downloadContent(formatted, item.name);\n                    });\n                },\n                icon: downloadIcon.bindprops({ stylesheet: 'menuItem' }),\n                label: trans.__('Download')\n            });\n            contextMenu.addItem({\n                command: CommandIDs.filebrowserDownload,\n                selector: '.jp-DirListing-item[data-isdir=\"false\"]',\n                rank: 9\n            });\n        }\n    }\n};\n/**\n * The main application icon.\n */\nconst liteLogo = {\n    id: '@jupyterlite/application-extension:logo',\n    // marking as optional to not throw errors in retro\n    optional: [ILabShell],\n    autoStart: true,\n    activate: (app, labShell) => {\n        if (!labShell) {\n            return;\n        }\n        const logo = new Widget();\n        liteIcon.element({\n            container: logo.node,\n            elementPosition: 'center',\n            margin: '2px 2px 2px 8px',\n            height: 'auto',\n            width: '16px'\n        });\n        logo.id = 'jp-MainLogo';\n        labShell.add(logo, 'top', { rank: 0 });\n    }\n};\n/**\n * A simplified Translator\n */\nconst translator = {\n    id: '@jupyterlite/application-extension:translator',\n    activate: (app) => {\n        const translationManager = new TranslationManager();\n        return translationManager;\n    },\n    autoStart: true,\n    provides: ITranslator\n};\nconst plugins = [\n    about,\n    docProviderPlugin,\n    downloadPlugin,\n    liteLogo,\n    translator\n];\nexport default plugins;\n"],"sourceRoot":""}