{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/notebook-extension/lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAC0D;AACV;AACe;AACL;AACL;AACqB;AACnC;AACE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAgB;AAC/B,eAAe,8DAAW;AAC1B;AACA,eAAe,QAAQ;AACvB,2BAA2B,mDAAM;AACjC,oBAAoB,sEAAoB;AACxC;AACA,sCAAsC,YAAY;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,mEAAgB,qCAAqC;AAC/G;AACA;AACA;AACA;AACA,YAAY,iDAAI;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAW;AAC1B;AACA,eAAe,iBAAiB;AAChC,wBAAwB,wEAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+DAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mDAAM,EAAE,OAAO;AACxC;AACA,0CAA0C,cAAc;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAW;AAC1B;AACA,2BAA2B,mDAAM;AACjC;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iEAAc,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+DAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2DAAQ;AACrC,+BAA+B,SAAS;AACxC;AACA;AACA,KAAK;AACL;AACA,cAAc,2EAAsB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6DAAU;AAC7C,+BAA+B,SAAS;AACxC;AACA;AACA,KAAK;AACL;AACA,cAAc,8DAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC","file":"node_modules_retrolab_notebook-extension_lib_index_js-_55db1.e53fbdc6f404f867d653.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { DOMUtils } from '@jupyterlab/apputils';\nimport { PageConfig, Text, Time } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { NotebookPanel } from '@jupyterlab/notebook';\nimport { RetroApp, RetroShell, IRetroShell } from '@retrolab/application';\nimport { Poll } from '@lumino/polling';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class for kernel status errors.\n */\nconst KERNEL_STATUS_ERROR_CLASS = 'jp-RetroKernelStatus-error';\n/**\n * The class for kernel status warnings.\n */\nconst KERNEL_STATUS_WARN_CLASS = 'jp-RetroKernelStatus-warn';\n/**\n * The class for kernel status infos.\n */\nconst KERNEL_STATUS_INFO_CLASS = 'jp-RetroKernelStatus-info';\n/**\n * The class to fade out the kernel status.\n */\nconst KERNEL_STATUS_FADE_OUT_CLASS = 'jp-RetroKernelStatus-fade';\n/**\n * A plugin for the checkpoint indicator\n */\nconst checkpoints = {\n    id: '@retrolab/application-extension:checkpoints',\n    autoStart: true,\n    requires: [IDocumentManager],\n    optional: [IRetroShell],\n    activate: (app, docManager, retroShell) => {\n        const { shell } = app;\n        const widget = new Widget();\n        widget.id = DOMUtils.createDomID();\n        widget.addClass('jp-RetroCheckpoint');\n        app.shell.add(widget, 'top', { rank: 100 });\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!current) {\n                return;\n            }\n            const context = docManager.contextForWidget(current);\n            context === null || context === void 0 ? void 0 : context.fileChanged.disconnect(onChange);\n            context === null || context === void 0 ? void 0 : context.fileChanged.connect(onChange);\n            const checkpoints = await (context === null || context === void 0 ? void 0 : context.listCheckpoints());\n            if (!checkpoints) {\n                return;\n            }\n            const checkpoint = checkpoints[checkpoints.length - 1];\n            widget.node.textContent = `Last Checkpoint: ${Time.formatHuman(new Date(checkpoint.last_modified))}`;\n        };\n        if (retroShell) {\n            retroShell.currentChanged.connect(onChange);\n        }\n        new Poll({\n            auto: true,\n            factory: () => onChange(),\n            frequency: {\n                interval: 2000,\n                backoff: false\n            },\n            standby: 'when-hidden'\n        });\n    }\n};\n/**\n * The kernel logo plugin.\n */\nconst kernelLogo = {\n    id: '@retrolab/application-extension:kernel-logo',\n    autoStart: true,\n    requires: [IRetroShell],\n    activate: (app, shell) => {\n        const { serviceManager } = app;\n        const baseUrl = PageConfig.getBaseUrl();\n        let widget;\n        const onChange = async () => {\n            var _a, _b, _c, _d, _e;\n            if (widget) {\n                widget.dispose();\n                widget.parent = null;\n            }\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            await current.sessionContext.ready;\n            current.sessionContext.kernelChanged.disconnect(onChange);\n            current.sessionContext.kernelChanged.connect(onChange);\n            const name = (_c = (_b = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : '';\n            const spec = (_e = (_d = serviceManager.kernelspecs) === null || _d === void 0 ? void 0 : _d.specs) === null || _e === void 0 ? void 0 : _e.kernelspecs[name];\n            if (!spec) {\n                return;\n            }\n            let kernelIconUrl = spec.resources['logo-64x64'];\n            if (!kernelIconUrl) {\n                return;\n            }\n            const index = kernelIconUrl.indexOf('kernelspecs');\n            kernelIconUrl = baseUrl + kernelIconUrl.slice(index);\n            const node = document.createElement('div');\n            const img = document.createElement('img');\n            img.src = kernelIconUrl;\n            img.title = spec.display_name;\n            node.appendChild(img);\n            widget = new Widget({ node });\n            widget.addClass('jp-RetroKernelLogo');\n            app.shell.add(widget, 'top', { rank: 10010 });\n        };\n        shell.currentChanged.connect(onChange);\n    }\n};\n/**\n * A plugin to display the kernel status;\n */\nconst kernelStatus = {\n    id: '@retrolab/application-extension:kernel-status',\n    autoStart: true,\n    requires: [IRetroShell],\n    activate: (app, shell) => {\n        const widget = new Widget();\n        widget.addClass('jp-RetroKernelStatus');\n        app.shell.add(widget, 'menu', { rank: 10010 });\n        const removeClasses = () => {\n            widget.removeClass(KERNEL_STATUS_ERROR_CLASS);\n            widget.removeClass(KERNEL_STATUS_WARN_CLASS);\n            widget.removeClass(KERNEL_STATUS_INFO_CLASS);\n            widget.removeClass(KERNEL_STATUS_FADE_OUT_CLASS);\n        };\n        const onStatusChanged = (sessionContext) => {\n            const status = sessionContext.kernelDisplayStatus;\n            let text = `Kernel ${Text.titleCase(status)}`;\n            removeClasses();\n            switch (status) {\n                case 'busy':\n                case 'idle':\n                    text = '';\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n                case 'dead':\n                case 'terminating':\n                    widget.addClass(KERNEL_STATUS_ERROR_CLASS);\n                    break;\n                case 'unknown':\n                    widget.addClass(KERNEL_STATUS_WARN_CLASS);\n                    break;\n                default:\n                    widget.addClass(KERNEL_STATUS_INFO_CLASS);\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n            }\n            widget.node.textContent = text;\n        };\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            const sessionContext = current.sessionContext;\n            sessionContext.statusChanged.connect(onStatusChanged);\n        };\n        shell.currentChanged.connect(onChange);\n    }\n};\n/**\n * The default paths for a RetroLab app.\n */\nconst paths = {\n    id: '@retrolab/application-extension:paths',\n    activate: (app) => {\n        if (!(app instanceof RetroApp)) {\n            throw new Error(`${paths.id} must be activated in RetroLab.`);\n        }\n        return app.paths;\n    },\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths\n};\n/**\n * The default RetroLab application shell.\n */\nconst shell = {\n    id: '@retrolab/application-extension:shell',\n    activate: (app) => {\n        if (!(app.shell instanceof RetroShell)) {\n            throw new Error(`${shell.id} did not find a RetroShell instance.`);\n        }\n        return app.shell;\n    },\n    autoStart: true,\n    provides: IRetroShell\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    checkpoints,\n    kernelLogo,\n    kernelStatus\n];\nexport default plugins;\n"],"sourceRoot":""}