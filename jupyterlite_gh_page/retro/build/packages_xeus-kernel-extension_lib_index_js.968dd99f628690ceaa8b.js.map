{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/xeus-kernel/lib/worker.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/xeus-kernel-extension/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/xeus-kernel/lib/kernel.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAe;AACf,oBAAoB,qBAAuB;AAC3C;;;;;;;;;;;;;;;;;;ACFA;AACA;AACmD;AACG;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,2BAA2B,gEAAU;AACrC;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;ACxC0B;AACG;AACpD;AACA,WAAW,gBAAgB;AACqB;AACzC,yBAAyB,2DAAU;AAC1C;AACA;AACA,oCAAoC,8DAAe;AACnD,2BAA2B,yDAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA,oFAAoF;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,SAAS,cAAc,eAAe;AACzH;AACA;AACA;AACA;AACA,mFAAmF,SAAS,cAAc,eAAe;AACzH;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA,mFAAmF,6BAA6B,cAAc;AAC9H;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACboCAAoC,8DAAe;AACnD,kCAAkC,kCAAkC;AACpE;AACA;AACA","file":"packages_xeus-kernel-extension_lib_index_js.968dd99f628690ceaa8b.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"bundle.worker.js\");\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IKernelSpecs } from '@jupyterlite/kernel';\nimport { XeusKernel } from '@jupyterlite/xeus-kernel';\n/**\n * A plugin to register the Xeus kernel.\n */\nconst kernel = {\n    id: '@jupyterlite/xeus-kernel-extension:kernel',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        kernelspecs.register({\n            spec: {\n                name: 'Xeus-Lua',\n                display_name: 'Xeus-Lua',\n                language: 'lua',\n                argv: [],\n                spec: {\n                    argv: [],\n                    env: {},\n                    display_name: 'Xeus-Lua',\n                    language: 'lua',\n                    interrupt_mode: 'message',\n                    metadata: {}\n                },\n                resources: {\n                    'logo-32x32': 'TODO',\n                    'logo-64x64': '/kernelspecs/xeus_small.svg'\n                }\n            },\n            create: async (options) => {\n                return new XeusKernel({\n                    ...options\n                });\n            }\n        });\n    }\n};\nconst plugins = [kernel];\nexport default plugins;\n","import { BaseKernel } from '@jupyterlite/kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\n// import createXeusModule from './xeus_dummy';\n// import {XeusInterpreter} from './xeus_interpreter';\nimport XeusWorker from \"worker-loader!./worker\";\nexport class XeusKernel extends BaseKernel {\n    constructor(options) {\n        super(options);\n        this._executeDelegate = new PromiseDelegate();\n        this._worker = new XeusWorker();\n        this._worker.onmessage = e => {\n            this._processWorkerMessage(e.data);\n        };\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    // get ready(): Promise<void> {\n    //   return this._ready.promise;\n    // }\n    /**\n      * Process a message coming from the pyodide web worker.\n      *\n      * @param msg The worker message to process.\n      */\n    _processWorkerMessage(msg) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        switch (msg.type) {\n            case 'stream': {\n                const bundle = (_a = msg.bundle) !== null && _a !== void 0 ? _a : { name: 'stdout', text: '' };\n                this.stream(bundle);\n                break;\n            }\n            case 'input_request': {\n                console.log(\"input-request\", msg.content);\n                const bundle = (_b = msg.content) !== null && _b !== void 0 ? _b : { prompt: '', password: false };\n                this.inputRequest(bundle);\n                break;\n            }\n            case 'reply': {\n                const bundle = msg.results;\n                this._executeDelegate.resolve(bundle);\n                break;\n            }\n            case 'display_data': {\n                const bundle = (_c = msg.bundle) !== null && _c !== void 0 ? _c : { data: {}, metadata: {}, transient: {} };\n                this.displayData(bundle);\n                break;\n            }\n            case 'update_display_data': {\n                const bundle = (_d = msg.bundle) !== null && _d !== void 0 ? _d : { data: {}, metadata: {}, transient: {} };\n                this.updateDisplayData(bundle);\n                break;\n            }\n            case 'clear_output': {\n                const bundle = (_e = msg.bundle) !== null && _e !== void 0 ? _e : { wait: false };\n                this.clearOutput(bundle);\n                break;\n            }\n            case 'execute_result': {\n                const bundle = (_f = msg.bundle) !== null && _f !== void 0 ? _f : { execution_count: 0, data: {}, metadata: {} };\n                this.publishExecuteResult(bundle);\n                break;\n            }\n            case 'execute_error': {\n                const bundle = (_g = msg.bundle) !== null && _g !== void 0 ? _g : { ename: '', evalue: '', traceback: [] };\n                this.publishExecuteError(bundle);\n                break;\n            }\n            case 'comm_msg':\n            case 'comm_open':\n            case 'comm_close': {\n                this.handleComm(msg.type, msg.content, msg.metadata, msg.buffers);\n                break;\n            }\n            default:\n                this._executeDelegate.resolve({\n                    data: {},\n                    metadata: {}\n                });\n                break;\n        }\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'xeus',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'lua',\n                    version: 3\n                },\n                file_extension: '.lua',\n                mimetype: 'text/x-lua',\n                name: 'lua',\n                nbconvert_exporter: 'lua',\n                pygments_lexer: 'lua',\n                version: '5.3'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'Xeus: A WebAssembly-powered dummy kernel backed by xeus',\n            help_links: [\n                {\n                    text: 'Lua (WASM) Kernel',\n                    url: 'https://xeus.org'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const result = await this._sendRequestMessageToWorker('execute-request', content);\n        return {\n            execution_count: this.executionCount,\n            ...result\n        };\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        return await this._sendRequestMessageToWorker('complete-request', content);\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        return await this._sendRequestMessageToWorker('inspect-request', content);\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        return await this._sendRequestMessageToWorker('is-complete-request', content);\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        return await this._sendRequestMessageToWorker('comm-info-request', content);\n    }\n    /**\n     * Send an `input_reply` message.\n     *\n     * @param content - The content of the reply.\n     */\n    inputReply(content) {\n        this._worker.postMessage({\n            type: 'input-reply',\n            data: content,\n            parent: this.parent\n        });\n    }\n    /**\n     * Send an `comm_open` message.\n     *\n     * @param msg - The comm_open message.\n     */\n    async commOpen(msg) {\n        return await this._sendRequestMessageToWorker('comm-open', msg);\n    }\n    /**\n     * Send an `comm_msg` message.\n     *\n     * @param msg - The comm_msg message.\n     */\n    async commMsg(msg) {\n        return await this._sendRequestMessageToWorker('comm-msg', msg);\n    }\n    /**\n     * Send an `comm_close` message.\n     *\n     * @param close - The comm_close message.\n     */\n    async commClose(msg) {\n        return await this._sendRequestMessageToWorker('comm-close', msg);\n    }\n    /**\n     * Send a message to the web worker\n     *\n     * @param type The message type to send to the worker.\n     * @param data The message to send to the worker.\n     */\n    async _sendRequestMessageToWorker(type, data) {\n        this._executeDelegate = new PromiseDelegate();\n        this._worker.postMessage({ type, data, parent: this.parent });\n        return await this._executeDelegate.promise;\n    }\n}\n"],"sourceRoot":""}