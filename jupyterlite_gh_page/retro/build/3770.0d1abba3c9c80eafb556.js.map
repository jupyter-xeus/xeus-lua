{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/contents/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/contents/lib/contents.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernels.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernelspecs.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/session/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/session/lib/sessions.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/settings/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/settings/lib/settings.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server-extension/lib/index.js"],"names":["IKernels","Token","IKernelSpecs","IContents","STORAGE_NAME","Contents","constructor","this","_serverContents","Map","_isDisposed","_fileChanged","Signal","_storage","name","description","storeName","version","_counters","_checkpoints","ServerConnection","dispose","Error","options","_a","_b","_c","path","type","created","Date","toISOString","prefix","file","_incrementCounter","last_modified","format","mimetype","content","size","undefined","writable","ext","Private","EMPTY_NB","JSON","stringify","length","key","setItem","toDir","PathExt","slice","get","base","replace","toPath","item","decodeURIComponent","getFolder","getItem","serverItem","getServerContents","model","contentMap","iterate","set","serverContents","Array","from","getServerDirectory","values","has","includes","apiURL","URLExt","PageConfig","response","fetch","json","parse","text","err","console","warn","fileUrl","ok","headers","indexOf","match","btoa","String","fromCharCode","Uint8Array","arrayBuffer","oldLocalPath","newLocalPath","modified","newFile","removeItem","child","rename","newUntitled","atob","nb","toDelete","startsWith","push","Promise","all","map","async","p","copies","filter","splice","id","toString","checkpointID","parseInt","addDrive","drive","localPath","normalize","resolvePath","root","driveName","getModelDBFactory","getDownloadUrl","counter","metadata","orig_nbformat","nbformat_minor","nbformat","cells","Kernels","_kernels","ObservableMap","_clients","_kernelClients","kernelspecs","_kernelspecs","factory","factories","mutex","hook","kernelId","clientId","socket","kernel","add","on","message","msg","ArrayBuffer","buffer","deserialize","header","msg_type","handleMessage","runExclusive","processMsg","removeClient","delete","disposed","connect","onclose","UUID","kernelUrl","WS_BASE_URL","runningKernel","sendMessage","session","serialize","channel","send","clients","forEach","ready","Set","wsServer","URL","url","searchParams","keys","readyState","WebSocket","close","startNew","KernelSpecs","_specs","_factories","default","Object","fromEntries","register","spec","create","ISessions","Sessions","_sessions","kernels","find","s","index","findIndex","patched","running","kernelName","shutdown","ArrayExt","ISettings","Settings","pluginId","found","getAll","settings","setting","_getFederated","settingsUrl","plugin","raw","override","packageName","schemaName","split","isFederated","labExtensionsUrl","schemaUrl","packageUrl","schema","packageJson","_overrides","federated","properties","prop","propDefault","entries","contents","autoStart","provides","activate","app","requires","kernelSpec","sessions","jupyterServer","JupyterServer","serviceManager","LiteServiceManager","server","registerServiceManager"],"mappings":"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","file":"3770.0d1abba3c9c80eafb556.js","sourcesContent":["import { Token } from '@lumino/coreutils';\n/**\n * The token for the kernels service.\n */\nexport const IKernels = new Token('@jupyterlite/kernel:IKernels');\n/**\n * The token for the kernel spec service.\n */\nexport const IKernelSpecs = new Token('@jupyterlite/kernelspec:IKernelSpecs');\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the settings service.\n */\nexport const IContents = new Token('@jupyterlite/contents:IContents');\n","import { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport localforage from 'localforage';\n/**\n * The name of the local storage.\n */\nconst STORAGE_NAME = 'JupyterLite Storage';\n/**\n * The number of checkpoints to save.\n */\nconst N_CHECKPOINTS = 5;\n/**\n * A class to handle requests to /api/contents\n */\nexport class Contents {\n    constructor() {\n        this._serverContents = new Map();\n        this._isDisposed = false;\n        this._fileChanged = new Signal(this);\n        this._storage = localforage.createInstance({\n            name: STORAGE_NAME,\n            description: 'Offline Storage for Notebooks and Files',\n            storeName: 'files',\n            version: 1\n        });\n        this._counters = localforage.createInstance({\n            name: STORAGE_NAME,\n            description: 'Store the current file suffix counters',\n            storeName: 'counters',\n            version: 1\n        });\n        this._checkpoints = localforage.createInstance({\n            name: STORAGE_NAME,\n            description: 'Offline Storage for Checkpoints',\n            storeName: 'checkpoints',\n            version: 1\n        });\n    }\n    /**\n     * A signal emitted when the file has changed.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Test whether the manager has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Return the server settings.\n     */\n    get serverSettings() {\n        // TODO: placeholder\n        return ServerConnection.makeSettings();\n    }\n    /**\n     * Dispose of the resources held by the manager.\n     */\n    dispose() {\n        throw new Error('Method not implemented.');\n    }\n    /**\n     * Create a new untitled file or directory in the specified directory path.\n     *\n     * @param options: The options used to create the file.\n     *\n     * @returns A promise which resolves with the created file content when the file is created.\n     */\n    async newUntitled(options) {\n        var _a, _b, _c;\n        const path = (_a = options === null || options === void 0 ? void 0 : options.path) !== null && _a !== void 0 ? _a : '';\n        const type = (_b = options === null || options === void 0 ? void 0 : options.type) !== null && _b !== void 0 ? _b : 'notebook';\n        const created = new Date().toISOString();\n        const prefix = path ? `${path}/` : '';\n        let file;\n        let name = '';\n        switch (type) {\n            case 'directory': {\n                const counter = await this._incrementCounter('directory');\n                name += `Untitled Folder${counter || ''}`;\n                file = {\n                    name,\n                    path: `${prefix}${name}`,\n                    last_modified: created,\n                    created,\n                    format: 'text',\n                    mimetype: '',\n                    content: null,\n                    size: undefined,\n                    writable: true,\n                    type: 'directory'\n                };\n                break;\n            }\n            case 'file': {\n                const ext = (_c = options === null || options === void 0 ? void 0 : options.ext) !== null && _c !== void 0 ? _c : '.txt';\n                const counter = await this._incrementCounter('file');\n                name += `untitled${counter || ''}${ext}`;\n                file = {\n                    name,\n                    path: `${prefix}${name}`,\n                    last_modified: created,\n                    created,\n                    format: 'text',\n                    // TODO: handle mimetypes\n                    mimetype: 'text/plain',\n                    content: '',\n                    size: 0,\n                    writable: true,\n                    type: 'file'\n                };\n                break;\n            }\n            default: {\n                const counter = await this._incrementCounter('notebook');\n                name += `Untitled${counter || ''}.ipynb`;\n                file = {\n                    name,\n                    path: `${prefix}${name}`,\n                    last_modified: created,\n                    created,\n                    format: 'json',\n                    mimetype: 'application/json',\n                    content: Private.EMPTY_NB,\n                    size: JSON.stringify(Private.EMPTY_NB).length,\n                    writable: true,\n                    type: 'notebook'\n                };\n                break;\n            }\n        }\n        const key = `${prefix}${name}`;\n        await this._storage.setItem(key, file);\n        return file;\n    }\n    /**\n     * Copy a file into a given directory.\n     *\n     * @param path - The original file path.\n     * @param toDir - The destination directory path.\n     *\n     * @returns A promise which resolves with the new contents model when the\n     *  file is copied.\n     *\n     * #### Notes\n     * The server will select the name of the copied file.\n     */\n    async copy(path, toDir) {\n        let name = PathExt.basename(path);\n        toDir = toDir === '' ? '' : `${toDir.slice(1)}/`;\n        // TODO: better handle naming collisions with existing files\n        while (await this.get(`${toDir}${name}`, { content: true })) {\n            const ext = PathExt.extname(name);\n            const base = name.replace(ext, '');\n            name = `${base} (copy)${ext}`;\n        }\n        const toPath = `${toDir}${name}`;\n        let item = await this.get(path, { content: true });\n        item = {\n            ...item,\n            name,\n            path: toPath\n        };\n        await this._storage.setItem(toPath, item);\n        return item;\n    }\n    /**\n     * Get a file or directory.\n     *\n     * @param path: The path to the file.\n     * @param options: The options used to fetch the file.\n     *\n     * @returns A promise which resolves with the file content.\n     */\n    async get(path, options) {\n        // remove leading slash\n        path = decodeURIComponent(path.replace(/^\\//, ''));\n        if (path === '') {\n            return await this.getFolder(path);\n        }\n        const item = await this._storage.getItem(path);\n        const serverItem = await this.getServerContents(path, options);\n        const model = (item || serverItem);\n        if (!model) {\n            throw Error(`Could not find file with path ${path}`);\n        }\n        if (!(options === null || options === void 0 ? void 0 : options.content)) {\n            return {\n                ...model,\n                content: null,\n                size: undefined\n            };\n        }\n        // for directories, find all files with the path as the prefix\n        if (model.type === 'directory') {\n            const contentMap = new Map();\n            await this._storage.iterate((item, key) => {\n                const file = item;\n                // use an additional slash to not include the directory itself\n                if (key === `${path}/${file.name}`) {\n                    contentMap.set(file.name, file);\n                }\n            });\n            const serverContents = serverItem\n                ? serverItem.content\n                : Array.from((await this.getServerDirectory(path)).values());\n            for (const file of serverContents) {\n                if (!contentMap.has(file.name)) {\n                    contentMap.set(file.name, file);\n                }\n            }\n            const content = [...contentMap.values()];\n            return {\n                name: PathExt.basename(path),\n                path,\n                last_modified: model.last_modified,\n                created: model.created,\n                format: 'json',\n                mimetype: 'application/json',\n                content,\n                size: undefined,\n                writable: true,\n                type: 'directory'\n            };\n        }\n        return model;\n    }\n    /**\n     * retrieve the contents for this path from the union of local storage and\n     * `api/contents/{path}/all.json`.\n     *\n     * @param path - The contents path to retrieve\n     *\n     * @returns A promise which resolves with a Map of contents, keyed by local file name\n     */\n    async getFolder(path) {\n        const content = new Map();\n        await this._storage.iterate((item, key) => {\n            if (key.includes('/')) {\n                return;\n            }\n            const file = item;\n            content.set(file.path, file);\n        });\n        // layer in contents that don't have local overwrites\n        for (const file of (await this.getServerDirectory(path)).values()) {\n            if (!content.has(file.path)) {\n                content.set(file.path, file);\n            }\n        }\n        return {\n            name: '',\n            path,\n            last_modified: new Date(0).toISOString(),\n            created: new Date(0).toISOString(),\n            format: 'json',\n            mimetype: 'application/json',\n            content: Array.from(content.values()),\n            size: undefined,\n            writable: true,\n            type: 'directory'\n        };\n    }\n    /**\n     * retrieve the contents for this path from `__index__.json` in the appropriate\n     * folder.\n     *\n     * @param newLocalPath - The new file path.\n     *\n     * @returns A promise which resolves with a Map of contents, keyed by local file name\n     */\n    async getServerDirectory(path) {\n        const content = this._serverContents.get(path) || new Map();\n        if (!this._serverContents.has(path)) {\n            const apiURL = URLExt.join(PageConfig.getBaseUrl(), 'api/contents', path, 'all.json');\n            try {\n                const response = await fetch(apiURL);\n                const json = JSON.parse(await response.text());\n                for (const file of json['content']) {\n                    content.set(file.name, file);\n                }\n            }\n            catch (err) {\n                console.warn(`don't worry, about ${err}... nothing's broken. if there had been a\n          file at ${apiURL}, you might see some more files.`);\n            }\n            this._serverContents.set(path, content);\n        }\n        return content;\n    }\n    /**\n     * Attempt to recover the model from `{:path}/__all__.json` file, fall back to\n     * deriving the model (including content) off the file in `/files/`. Otherwise\n     * return `null`.\n     */\n    async getServerContents(path, options) {\n        const name = PathExt.basename(path);\n        const parentContents = await this.getServerDirectory(URLExt.join(path, '..'));\n        let model = parentContents.get(name) || {\n            name,\n            path,\n            last_modified: new Date(0).toISOString(),\n            created: new Date(0).toISOString(),\n            format: 'text',\n            mimetype: 'text/plain',\n            type: 'file',\n            writable: true,\n            content: null\n        };\n        if (options === null || options === void 0 ? void 0 : options.content) {\n            if (model.type === 'directory') {\n                const serverContents = await this.getServerDirectory(path);\n                model = { ...model, content: Array.from(serverContents.values()) };\n            }\n            else {\n                const fileUrl = URLExt.join(PageConfig.getBaseUrl(), 'files', path);\n                const response = await fetch(fileUrl);\n                if (!response.ok) {\n                    return null;\n                }\n                const mimetype = model.mimetype || response.headers.get('Content-Type');\n                if (model.type === 'notebook' ||\n                    (mimetype === null || mimetype === void 0 ? void 0 : mimetype.indexOf('json')) !== -1 ||\n                    path.match(/\\.(ipynb|[^/]*json[^/]*)$/)) {\n                    model = {\n                        ...model,\n                        content: await response.json(),\n                        format: 'json',\n                        mimetype: model.mimetype || 'application/json'\n                    };\n                    // TODO: this is not great, need a better oracle\n                }\n                else if (mimetype === 'image/svg+xml' || mimetype.indexOf('text') !== -1) {\n                    model = {\n                        ...model,\n                        content: await response.text(),\n                        format: 'text',\n                        mimetype: mimetype || 'text/plain'\n                    };\n                }\n                else {\n                    model = {\n                        ...model,\n                        content: btoa(String.fromCharCode(...new Uint8Array(await response.arrayBuffer()))),\n                        format: 'base64',\n                        mimetype: mimetype || 'octet/stream'\n                    };\n                }\n            }\n        }\n        return model;\n    }\n    /**\n     * Rename a file or directory.\n     *\n     * @param oldLocalPath - The original file path.\n     * @param newLocalPath - The new file path.\n     *\n     * @returns A promise which resolves with the new file content model when the file is renamed.\n     */\n    async rename(oldLocalPath, newLocalPath) {\n        const path = decodeURIComponent(oldLocalPath);\n        const file = await this.get(path, { content: true });\n        if (!file) {\n            throw Error(`Could not find file with path ${path}`);\n        }\n        const modified = new Date().toISOString();\n        const name = PathExt.basename(newLocalPath);\n        const newFile = {\n            ...file,\n            name,\n            path: newLocalPath,\n            last_modified: modified\n        };\n        await this._storage.setItem(newLocalPath, newFile);\n        // remove the old file\n        await this._storage.removeItem(path);\n        // remove the corresponding checkpoint\n        await this._checkpoints.removeItem(path);\n        // if a directory, recurse through all children\n        if (file.type === 'directory') {\n            let child;\n            for (child of file.content) {\n                await this.rename(URLExt.join(oldLocalPath, child.name), URLExt.join(newLocalPath, child.name));\n            }\n        }\n        return newFile;\n    }\n    /**\n     * Save a file.\n     *\n     * @param path - The desired file path.\n     * @param options - Optional overrides to the model.\n     *\n     * @returns A promise which resolves with the file content model when the file is saved.\n     */\n    async save(path, options = {}) {\n        var _a;\n        let item = await this.get(path);\n        if (!item) {\n            item = await this.newUntitled({ path });\n        }\n        // override with the new values\n        const modified = new Date().toISOString();\n        item = {\n            ...item,\n            ...options,\n            last_modified: modified\n        };\n        // process the file if coming from an upload\n        const ext = PathExt.extname((_a = options.name) !== null && _a !== void 0 ? _a : '');\n        if (options.content && options.format === 'base64') {\n            // TODO: keep base64 if not a text file (image)\n            const content = atob(options.content);\n            const nb = ext === '.ipynb';\n            item = {\n                ...item,\n                content: nb ? JSON.parse(content) : content,\n                format: nb ? 'json' : 'text',\n                type: nb ? 'notebook' : 'file'\n            };\n        }\n        await this._storage.setItem(path, item);\n        return item;\n    }\n    /**\n     * Delete a file.\n     *\n     * @param path - The path to the file.\n     */\n    async delete(path) {\n        path = decodeURIComponent(path);\n        const toDelete = [];\n        // handle deleting directories recursively\n        await this._storage.iterate((item, key) => {\n            if (key === path || key.startsWith(`${path}/`)) {\n                toDelete.push(key);\n            }\n        });\n        await Promise.all(toDelete.map(async (p) => {\n            return Promise.all([\n                this._storage.removeItem(p),\n                this._checkpoints.removeItem(p)\n            ]);\n        }));\n    }\n    /**\n     * Create a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with the new checkpoint model when the\n     *   checkpoint is created.\n     */\n    async createCheckpoint(path) {\n        var _a;\n        const item = await this.get(path, { content: true });\n        const copies = ((_a = (await this._checkpoints.getItem(path))) !== null && _a !== void 0 ? _a : []).filter(item => !!item);\n        copies.push(item);\n        // keep only a certain amount of checkpoints per file\n        if (copies.length > N_CHECKPOINTS) {\n            copies.splice(0, copies.length - N_CHECKPOINTS);\n        }\n        await this._checkpoints.setItem(path, copies);\n        const id = `${copies.length - 1}`;\n        return {\n            id,\n            last_modified: item.last_modified\n        };\n    }\n    /**\n     * List available checkpoints for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with a list of checkpoint models for\n     *    the file.\n     */\n    async listCheckpoints(path) {\n        const copies = ((await this._checkpoints.getItem(path)) ||\n            []);\n        return copies\n            .filter(item => !!item)\n            .map((file, id) => {\n            return {\n                id: id.toString(),\n                last_modified: file.last_modified\n            };\n        });\n    }\n    /**\n     * Restore a file to a known checkpoint state.\n     *\n     * @param path - The path of the file.\n     * @param checkpointID - The id of the checkpoint to restore.\n     *\n     * @returns A promise which resolves when the checkpoint is restored.\n     */\n    async restoreCheckpoint(path, checkpointID) {\n        const copies = ((await this._checkpoints.getItem(path)) ||\n            []);\n        const id = parseInt(checkpointID);\n        const item = copies[id];\n        await this._storage.setItem(path, item);\n    }\n    /**\n     * Delete a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     * @param checkpointID - The id of the checkpoint to delete.\n     *\n     * @returns A promise which resolves when the checkpoint is deleted.\n     */\n    async deleteCheckpoint(path, checkpointID) {\n        const copies = ((await this._checkpoints.getItem(path)) ||\n            []);\n        const id = parseInt(checkpointID);\n        copies.splice(id, 1);\n        await this._checkpoints.setItem(path, copies);\n    }\n    /**\n     * Add an `IDrive` to the manager.\n     */\n    addDrive(drive) {\n        throw new Error('Method not implemented.');\n    }\n    /**\n     * Given a path of the form `drive:local/portion/of/it.txt`\n     * get the local part of it.\n     *\n     * @param path: the path.\n     *\n     * @returns The local part of the path.\n     */\n    localPath(path) {\n        throw new Error('Method not implemented.');\n    }\n    /**\n     * Normalize a global path. Reduces '..' and '.' parts, and removes\n     * leading slashes from the local part of the path, while retaining\n     * the drive name if it exists.\n     *\n     * @param path: the path.\n     *\n     * @returns The normalized path.\n     */\n    normalize(path) {\n        throw new Error('Method not implemented.');\n    }\n    /**\n     * Resolve a global path, starting from the root path. Behaves like\n     * posix-path.resolve, with 3 differences:\n     *  - will never prepend cwd\n     *  - if root has a drive name, the result is prefixed with \"<drive>:\"\n     *  - before adding drive name, leading slashes are removed\n     *\n     * @param path: the path.\n     *\n     * @returns The normalized path.\n     */\n    resolvePath(root, path) {\n        throw new Error('Method not implemented.');\n    }\n    /**\n     * Given a path of the form `drive:local/portion/of/it.txt`\n     * get the name of the drive. If the path is missing\n     * a drive portion, returns an empty string.\n     *\n     * @param path: the path.\n     *\n     * @returns The drive name for the path, or the empty string.\n     */\n    driveName(path) {\n        throw new Error('Method not implemented.');\n    }\n    /**\n     * Given a path, get a ModelDB.IFactory from the\n     * relevant backend. Returns `null` if the backend\n     * does not provide one.\n     */\n    getModelDBFactory(path) {\n        throw new Error('Method not implemented.');\n    }\n    /**\n     * Get an encoded download url given a file path.\n     *\n     * @param path - An absolute POSIX file path on the server.\n     *\n     * #### Notes\n     * It is expected that the path contains no relative paths.\n     *\n     * The returned URL may include a query parameter.\n     */\n    getDownloadUrl(path) {\n        throw new Error('Method not implemented.');\n    }\n    /**\n     * Increment the counter for a given file type.\n     * Used to avoid collisions when creating new untitled files.\n     *\n     * @param type The file type to increment the counter for.\n     */\n    async _incrementCounter(type) {\n        var _a;\n        const current = (_a = (await this._counters.getItem(type))) !== null && _a !== void 0 ? _a : -1;\n        const counter = current + 1;\n        await this._counters.setItem(type, counter);\n        return counter;\n    }\n}\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The content for an empty notebook.\n     */\n    Private.EMPTY_NB = {\n        metadata: {\n            orig_nbformat: 4\n        },\n        nbformat_minor: 4,\n        nbformat: 4,\n        cells: []\n    };\n})(Private || (Private = {}));\n","import { ObservableMap } from '@jupyterlab/observables';\nimport { deserialize, serialize } from '@jupyterlab/services/lib/kernel/serialize';\nimport { UUID } from '@lumino/coreutils';\nimport { Server as WebSocketServer, WebSocket } from 'mock-socket';\nimport { Mutex } from 'async-mutex';\nimport { PageConfig } from '@jupyterlab/coreutils';\n/**\n * A class to handle requests to /api/kernels\n */\nexport class Kernels {\n    /**\n     * Construct a new Kernels\n     *\n     * @param options The instantiation options\n     */\n    constructor(options) {\n        this._kernels = new ObservableMap();\n        this._clients = new ObservableMap();\n        this._kernelClients = new ObservableMap();\n        const { kernelspecs } = options;\n        this._kernelspecs = kernelspecs;\n    }\n    /**\n     * Start a new kernel.\n     *\n     * @param options The kernel start options.\n     */\n    async startNew(options) {\n        const { id, name } = options;\n        const factory = this._kernelspecs.factories.get(name);\n        // bail if there is no factory associated with the requested kernel\n        if (!factory) {\n            return { id, name };\n        }\n        // create a synchronization mechanism to allow only one message\n        // to be processed at a time\n        const mutex = new Mutex();\n        // hook a new client to a kernel\n        const hook = (kernelId, clientId, socket) => {\n            var _a;\n            const kernel = this._kernels.get(kernelId);\n            if (!kernel) {\n                throw Error(`No kernel ${kernelId}`);\n            }\n            this._clients.set(clientId, socket);\n            (_a = this._kernelClients.get(kernelId)) === null || _a === void 0 ? void 0 : _a.add(clientId);\n            const processMsg = async (msg) => {\n                await mutex.runExclusive(async () => {\n                    await kernel.handleMessage(msg);\n                });\n            };\n            socket.on('message', async (message) => {\n                let msg;\n                if (message instanceof ArrayBuffer) {\n                    message = new Uint8Array(message).buffer;\n                    msg = deserialize(message);\n                }\n                else if (typeof message === 'string') {\n                    msg = deserialize(message);\n                }\n                else {\n                    return;\n                }\n                // TODO Find a better solution for this?\n                // input-reply is asynchronous, must not be processed like other messages\n                if (msg.header.msg_type === 'input_reply') {\n                    kernel.handleMessage(msg);\n                }\n                else {\n                    void processMsg(msg);\n                }\n            });\n            const removeClient = () => {\n                var _a;\n                this._clients.delete(clientId);\n                (_a = this._kernelClients.get(kernelId)) === null || _a === void 0 ? void 0 : _a.delete(clientId);\n            };\n            kernel.disposed.connect(removeClient);\n            // TODO: check whether this is called\n            // https://github.com/thoov/mock-socket/issues/298\n            // https://github.com/jupyterlab/jupyterlab/blob/6bc884a7a8ed73c615ce72ba097bdb790482b5bf/packages/services/src/kernel/default.ts#L1245\n            socket.onclose = removeClient;\n        };\n        // ensure kernel id\n        const kernelId = id !== null && id !== void 0 ? id : UUID.uuid4();\n        // There is one server per kernel which handles multiple clients\n        const kernelUrl = `${Kernels.WS_BASE_URL}api/kernels/${kernelId}/channels`;\n        const runningKernel = this._kernels.get(kernelId);\n        if (runningKernel) {\n            return {\n                id: runningKernel.id,\n                name: runningKernel.name\n            };\n        }\n        // start the kernel\n        const sendMessage = (msg) => {\n            const clientId = msg.header.session;\n            const socket = this._clients.get(clientId);\n            if (!socket) {\n                console.warn(`Trying to send message on removed socket for kernel ${kernelId}`);\n                return;\n            }\n            const message = serialize(msg);\n            // process iopub messages\n            if (msg.channel === 'iopub') {\n                const clients = this._kernelClients.get(kernelId);\n                clients === null || clients === void 0 ? void 0 : clients.forEach(id => {\n                    var _a;\n                    (_a = this._clients.get(id)) === null || _a === void 0 ? void 0 : _a.send(message);\n                });\n                return;\n            }\n            socket.send(message);\n        };\n        const kernel = await factory({\n            id: kernelId,\n            sendMessage,\n            name\n        });\n        await kernel.ready;\n        this._kernels.set(kernelId, kernel);\n        this._kernelClients.set(kernelId, new Set());\n        // create the websocket server for the kernel\n        const wsServer = new WebSocketServer(kernelUrl);\n        wsServer.on('connection', (socket) => {\n            var _a;\n            const url = new URL(socket.url);\n            const clientId = (_a = url.searchParams.get('session_id')) !== null && _a !== void 0 ? _a : '';\n            hook(kernelId, clientId, socket);\n        });\n        // clean up closed connection\n        wsServer.on('close', () => {\n            this._clients.keys().forEach(clientId => {\n                var _a;\n                const socket = this._clients.get(clientId);\n                if ((socket === null || socket === void 0 ? void 0 : socket.readyState) === WebSocket.CLOSED) {\n                    this._clients.delete(clientId);\n                    (_a = this._kernelClients.get(kernelId)) === null || _a === void 0 ? void 0 : _a.delete(clientId);\n                }\n            });\n        });\n        // cleanup on kernel shutdown\n        kernel.disposed.connect(() => {\n            wsServer.close();\n            this._kernels.delete(kernelId);\n            this._kernelClients.delete(kernelId);\n        });\n        return {\n            id: kernel.id,\n            name: kernel.name\n        };\n    }\n    /**\n     * Restart a kernel.\n     *\n     * @param kernelId The kernel id.\n     */\n    async restart(kernelId) {\n        const kernel = this._kernels.get(kernelId);\n        if (!kernel) {\n            throw Error(`Kernel ${kernelId} does not exist`);\n        }\n        const { id, name } = kernel;\n        kernel.dispose();\n        return this.startNew({ id, name });\n    }\n    /**\n     * Shut down a kernel.\n     *\n     * @param id The kernel id.\n     */\n    async shutdown(id) {\n        var _a;\n        (_a = this._kernels.delete(id)) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n}\n/**\n * A namespace for Kernels statics.\n */\n(function (Kernels) {\n    /**\n     * The base url for the Kernels manager\n     */\n    Kernels.WS_BASE_URL = PageConfig.getBaseUrl().replace(/^http/, 'ws');\n})(Kernels || (Kernels = {}));\n","/**\n * A class to handle requests to /api/kernelspecs\n */\nexport class KernelSpecs {\n    /**\n     * Construct a new KernelSpecs.\n     *\n     * @param options The instantiation options.\n     */\n    constructor(options) {\n        this._specs = new Map();\n        this._factories = new Map();\n        // no-op\n    }\n    /**\n     * Get the kernel specs.\n     */\n    get specs() {\n        if (this._specs.size === 0) {\n            return null;\n        }\n        return {\n            default: 'python',\n            kernelspecs: Object.fromEntries(this._specs)\n        };\n    }\n    /**\n     * Get the kernel factories for the current kernels.\n     */\n    get factories() {\n        return this._factories;\n    }\n    /**\n     * Register a new kernel.\n     *\n     * @param options The options to register a new kernel.\n     */\n    register(options) {\n        const { spec, create } = options;\n        this._specs.set(spec.name, spec);\n        this._factories.set(spec.name, create);\n    }\n}\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the sessions service.\n */\nexport const ISessions = new Token('@jupyterlite/session:ISessions');\n","import { ArrayExt } from '@lumino/algorithm';\nimport { UUID } from '@lumino/coreutils';\n/**\n * A class to handle requests to /api/sessions\n */\nexport class Sessions {\n    /**\n     * Construct a new Sessions.\n     *\n     * @param options The instantiation options for a Sessions.\n     */\n    constructor(options) {\n        // TODO: offload to a database\n        this._sessions = [];\n        this._kernels = options.kernels;\n    }\n    /**\n     * Get a session by id.\n     *\n     * @param id The id of the session.\n     */\n    async get(id) {\n        const session = this._sessions.find(s => s.id === id);\n        if (!session) {\n            throw Error(`Session ${id} not found`);\n        }\n        return session;\n    }\n    /**\n     * List the running sessions\n     */\n    async list() {\n        return this._sessions;\n    }\n    /**\n     * Path an existing session.\n     * This can be used to rename a session.\n     * TODO: read path and name\n     *\n     * @param options The options to patch the session.\n     */\n    async patch(options) {\n        const { id, path, name } = options;\n        const index = this._sessions.findIndex(s => s.id === id);\n        const session = this._sessions[index];\n        if (!session) {\n            throw Error(`Session ${id} not found`);\n        }\n        const patched = {\n            ...session,\n            path: path !== null && path !== void 0 ? path : session.path,\n            name: name !== null && name !== void 0 ? name : session.name\n        };\n        this._sessions[index] = patched;\n        return patched;\n    }\n    /**\n     * Start a new session\n     * TODO: read path and name\n     *\n     * @param options The options to start a new session.\n     */\n    async startNew(options) {\n        var _a, _b, _c;\n        const { path, name } = options;\n        const running = this._sessions.find(s => s.name === name);\n        if (running) {\n            return running;\n        }\n        const kernelName = (_b = (_a = options.kernel) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : '';\n        const id = (_c = options.id) !== null && _c !== void 0 ? _c : UUID.uuid4();\n        const kernel = await this._kernels.startNew({ id, name: kernelName });\n        const session = {\n            id,\n            path,\n            name: name !== null && name !== void 0 ? name : path,\n            type: 'notebook',\n            kernel: {\n                id: kernel.id,\n                name: kernel.name\n            }\n        };\n        this._sessions.push(session);\n        return session;\n    }\n    /**\n     * Shut down a session.\n     *\n     * @param id The id of the session to shut down.\n     */\n    async shutdown(id) {\n        var _a;\n        const session = this._sessions.find(s => s.id === id);\n        if (!session) {\n            throw Error(`Session ${id} not found`);\n        }\n        const kernelId = (_a = session.kernel) === null || _a === void 0 ? void 0 : _a.id;\n        if (kernelId) {\n            await this._kernels.shutdown(kernelId);\n        }\n        ArrayExt.removeFirstOf(this._sessions, session);\n    }\n}\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the settings service.\n */\nexport const ISettings = new Token('@jupyterlite/settings:ISettings');\n","import { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport * as json5 from 'json5';\nimport localforage from 'localforage';\n/**\n * The name of the local storage.\n */\nconst STORAGE_NAME = 'JupyterLite Storage';\n/**\n * A class to handle requests to /api/settings\n */\nexport class Settings {\n    constructor() {\n        this._storage = localforage.createInstance({\n            name: STORAGE_NAME,\n            description: 'Offline Storage for Settings',\n            storeName: 'settings',\n            version: 1\n        });\n    }\n    /**\n     * Get settings by plugin id\n     *\n     * @param pluginId the id of the plugin\n     *\n     */\n    async get(pluginId) {\n        const all = await this.getAll();\n        const settings = all.settings;\n        let found = settings.find((setting) => {\n            return setting.id === pluginId;\n        });\n        if (!found) {\n            found = await this._getFederated(pluginId);\n        }\n        return found;\n    }\n    /**\n     * Get all the settings\n     */\n    async getAll() {\n        var _a;\n        const settingsUrl = (_a = PageConfig.getOption('settingsUrl')) !== null && _a !== void 0 ? _a : '/';\n        const all = (await (await fetch(URLExt.join(settingsUrl, 'all.json'))).json());\n        const settings = await Promise.all(all.map(async (plugin) => {\n            var _a;\n            const { id } = plugin;\n            const raw = (_a = (await this._storage.getItem(id))) !== null && _a !== void 0 ? _a : plugin.raw;\n            return {\n                ...Private.override(plugin),\n                raw,\n                settings: json5.parse(raw)\n            };\n        }));\n        return { settings };\n    }\n    /**\n     * Save settings for a given plugin id\n     *\n     * @param pluginId The id of the plugin\n     * @param raw The raw settings\n     *\n     */\n    async save(pluginId, raw) {\n        await this._storage.setItem(pluginId, raw);\n    }\n    /**\n     * Get the settings for a federated extension\n     *\n     * @param pluginId The id of a plugin\n     */\n    async _getFederated(pluginId) {\n        var _a;\n        const [packageName, schemaName] = pluginId.split(':');\n        if (!Private.isFederated(packageName)) {\n            return;\n        }\n        const labExtensionsUrl = PageConfig.getOption('fullLabextensionsUrl');\n        const schemaUrl = URLExt.join(labExtensionsUrl, packageName, 'schemas', packageName, `${schemaName}.json`);\n        const packageUrl = URLExt.join(labExtensionsUrl, packageName, 'package.json');\n        const schema = await (await fetch(schemaUrl)).json();\n        const packageJson = await (await fetch(packageUrl)).json();\n        const raw = (_a = (await this._storage.getItem(pluginId))) !== null && _a !== void 0 ? _a : '{}';\n        const settings = json5.parse(raw) || {};\n        return Private.override({\n            id: pluginId,\n            raw,\n            schema,\n            settings,\n            version: packageJson.version || '3.0.8'\n        });\n    }\n}\n/**\n * A namespace for private data\n */\nvar Private;\n(function (Private) {\n    const _overrides = JSON.parse(PageConfig.getOption('settingsOverrides') || '{}');\n    /**\n     * Test whether this package is configured in `federated_extensions` in this app\n     *\n     * @param packageName The npm name of a package\n     */\n    function isFederated(packageName) {\n        let federated;\n        try {\n            federated = JSON.parse(PageConfig.getOption('federated_extensions'));\n        }\n        catch {\n            return false;\n        }\n        for (const { name } of federated) {\n            if (name === packageName) {\n                return true;\n            }\n        }\n        return false;\n    }\n    Private.isFederated = isFederated;\n    /**\n     * Override the defaults of the schema with ones from PageConfig\n     *\n     * @see https://github.com/jupyterlab/jupyterlab_server/blob/v2.5.2/jupyterlab_server/settings_handler.py#L216-L227\n     */\n    function override(plugin) {\n        if (_overrides[plugin.id]) {\n            if (!plugin.schema.properties) {\n                // probably malformed, or only provides keyboard shortcuts, etc.\n                plugin.schema.properties = {};\n            }\n            for (const [prop, propDefault] of Object.entries(_overrides[plugin.id] || {})) {\n                plugin.schema.properties[prop].default = propDefault;\n            }\n        }\n        return plugin;\n    }\n    Private.override = override;\n})(Private || (Private = {}));\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Contents, IContents } from '@jupyterlite/contents';\nimport { IKernels, Kernels, IKernelSpecs, KernelSpecs } from '@jupyterlite/kernel';\nimport { JupyterServer, LiteServiceManager } from '@jupyterlite/server';\nimport { ISessions, Sessions } from '@jupyterlite/session';\nimport { ISettings, Settings } from '@jupyterlite/settings';\n/**\n * The contents service plugin.\n */\nconst contents = {\n    id: '@jupyterlite/server-extension:contents',\n    autoStart: true,\n    provides: IContents,\n    activate: (app) => {\n        return new Contents();\n    }\n};\n/**\n * The kernels service plugin.\n */\nconst kernels = {\n    id: '@jupyterlite/server-extension:kernels',\n    autoStart: true,\n    provides: IKernels,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        return new Kernels({ kernelspecs });\n    }\n};\n/**\n * The kernel spec service plugin.\n */\nconst kernelSpec = {\n    id: '@jupyterlite/server-extension:kernelspec',\n    autoStart: true,\n    provides: IKernelSpecs,\n    activate: (app) => {\n        return new KernelSpecs({});\n    }\n};\n/**\n * The sessions service plugin.\n */\nconst sessions = {\n    id: '@jupyterlite/server-extension:sessions',\n    autoStart: true,\n    provides: ISessions,\n    requires: [IKernels],\n    activate: (app, kernels) => {\n        return new Sessions({ kernels });\n    }\n};\n/**\n * The server plugin.\n */\nconst server = {\n    id: '@jupyterlite/server-extension:server',\n    autoStart: true,\n    requires: [IContents, IKernels, IKernelSpecs, ISessions, ISettings],\n    activate: (app, contents, kernels, kernelspecs, sessions, settings) => {\n        const jupyterServer = new JupyterServer({\n            contents,\n            kernels,\n            kernelspecs,\n            sessions,\n            settings\n        });\n        const serviceManager = new LiteServiceManager({ server: jupyterServer });\n        app.registerServiceManager(serviceManager);\n    }\n};\n/**\n * The settings service plugin.\n */\nconst settings = {\n    id: '@jupyterlite/server-extension:settings',\n    autoStart: true,\n    provides: ISettings,\n    activate: (app) => {\n        return new Settings();\n    }\n};\nconst plugins = [\n    contents,\n    kernels,\n    kernelSpec,\n    server,\n    sessions,\n    settings\n];\nexport default plugins;\n"],"sourceRoot":""}