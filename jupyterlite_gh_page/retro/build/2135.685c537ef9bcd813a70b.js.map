{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/lib/shell.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/lib/app.js"],"names":["IRetroShell","Token","RetroShell","Widget","constructor","super","this","_currentChanged","Signal","id","rootLayout","BoxLayout","_topHandler","Private","PanelHandler","_menuHandler","_main","Panel","panel","topWrapper","_topWrapper","addWidget","menuWrapper","_menuWrapper","_spacer","spacing","layout","_a","widgets","activateById","widget","find","w","activate","add","area","options","rank","undefined","length","update","emit","collapseTop","setHidden","expandTop","iter","Error","itemCmp","first","second","_panelChildHook","handler","msg","type","child","_items","v","push","ArrayExt","Array","_panel","MessageLoop","parent","item","index","insertWidget","RetroApp","JupyterFrontEnd","shell","_b","Object","assign","name","namespace","status","version","PageConfig","_formatter","Throttler","setFormat","mimeExtensions","plugin","registerPlugin","invoke","urls","base","notFound","app","static","settings","themes","doc","translations","hubHost","hubPrefix","hubUser","hubServerName","directories","appSettings","schemas","templates","userSettings","serverRoot","workspaces","handleEvent","event","registerPluginModule","mod","data","default","prototype","hasOwnProperty","call","isArray","forEach","error","console","registerPluginModules","mods","format","window","matchMedia","matches"],"mappings":"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","file":"2135.685c537ef9bcd813a70b.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt, find, iter } from '@lumino/algorithm';\nimport { Token } from '@lumino/coreutils';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, Widget, BoxLayout } from '@lumino/widgets';\n/**\n * The RetroLab application shell token.\n */\nexport const IRetroShell = new Token('@retrolab/application:IRetroShell');\n/**\n * The default rank for ranked panels.\n */\nconst DEFAULT_RANK = 900;\n/**\n * The application shell.\n */\nexport class RetroShell extends Widget {\n    constructor() {\n        super();\n        this._currentChanged = new Signal(this);\n        this.id = 'main';\n        const rootLayout = new BoxLayout();\n        this._topHandler = new Private.PanelHandler();\n        this._menuHandler = new Private.PanelHandler();\n        this._main = new Panel();\n        this._topHandler.panel.id = 'top-panel';\n        this._menuHandler.panel.id = 'menu-panel';\n        this._main.id = 'main-panel';\n        // create wrappers around the top and menu areas\n        const topWrapper = (this._topWrapper = new Panel());\n        topWrapper.id = 'top-panel-wrapper';\n        topWrapper.addWidget(this._topHandler.panel);\n        const menuWrapper = (this._menuWrapper = new Panel());\n        menuWrapper.id = 'menu-panel-wrapper';\n        menuWrapper.addWidget(this._menuHandler.panel);\n        BoxLayout.setStretch(topWrapper, 0);\n        BoxLayout.setStretch(menuWrapper, 0);\n        BoxLayout.setStretch(this._main, 1);\n        this._spacer = new Widget();\n        this._spacer.id = 'spacer-widget';\n        rootLayout.spacing = 0;\n        rootLayout.addWidget(topWrapper);\n        rootLayout.addWidget(menuWrapper);\n        rootLayout.addWidget(this._spacer);\n        rootLayout.addWidget(this._main);\n        this.layout = rootLayout;\n    }\n    /**\n     * A signal emitted when the current widget changes.\n     */\n    get currentChanged() {\n        return this._currentChanged;\n    }\n    /**\n     * The current widget in the shell's main area.\n     */\n    get currentWidget() {\n        var _a;\n        return (_a = this._main.widgets[0]) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Get the top area wrapper panel\n     */\n    get top() {\n        return this._topWrapper;\n    }\n    /**\n     * Get the menu area wrapper panel\n     */\n    get menu() {\n        return this._menuWrapper;\n    }\n    /**\n     * Activate a widget in its area.\n     */\n    activateById(id) {\n        const widget = find(this.widgets('main'), w => w.id === id);\n        if (widget) {\n            widget.activate();\n        }\n    }\n    /**\n     * Add a widget to the application shell.\n     *\n     * @param widget - The widget being added.\n     *\n     * @param area - Optional region in the shell into which the widget should\n     * be added.\n     *\n     * @param options - Optional open options.\n     *\n     */\n    add(widget, area, options) {\n        var _a;\n        const rank = (_a = options === null || options === void 0 ? void 0 : options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        if (area === 'top') {\n            return this._topHandler.addWidget(widget, rank);\n        }\n        if (area === 'menu') {\n            return this._menuHandler.addWidget(widget, rank);\n        }\n        if (area === 'main' || area === undefined) {\n            if (this._main.widgets.length > 0) {\n                // do not add the widget if there is already one\n                return;\n            }\n            this._main.addWidget(widget);\n            this._main.update();\n            this._currentChanged.emit(void 0);\n        }\n    }\n    /**\n     * Collapse the top area and the spacer to make the view more compact.\n     */\n    collapseTop() {\n        this._topWrapper.setHidden(true);\n        this._spacer.setHidden(true);\n    }\n    /**\n     * Expand the top area to show the header and the spacer.\n     */\n    expandTop() {\n        this._topWrapper.setHidden(false);\n        this._spacer.setHidden(false);\n    }\n    /**\n     * Return the list of widgets for the given area.\n     *\n     * @param area The area\n     */\n    widgets(area) {\n        switch (area !== null && area !== void 0 ? area : 'main') {\n            case 'top':\n                return iter(this._topHandler.panel.widgets);\n            case 'menu':\n                return iter(this._menuHandler.panel.widgets);\n            case 'main':\n                return iter(this._main.widgets);\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A less-than comparison function for side bar rank items.\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n    /**\n     * A class which manages a panel and sorts its widgets by rank.\n     */\n    class PanelHandler {\n        constructor() {\n            /**\n             * A message hook for child add/remove messages on the main area dock panel.\n             */\n            this._panelChildHook = (handler, msg) => {\n                switch (msg.type) {\n                    case 'child-added':\n                        {\n                            const widget = msg.child;\n                            // If we already know about this widget, we're done\n                            if (this._items.find(v => v.widget === widget)) {\n                                break;\n                            }\n                            // Otherwise, add to the end by default\n                            const rank = this._items[this._items.length - 1].rank;\n                            this._items.push({ widget, rank });\n                        }\n                        break;\n                    case 'child-removed':\n                        {\n                            const widget = msg.child;\n                            ArrayExt.removeFirstWhere(this._items, v => v.widget === widget);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                return true;\n            };\n            this._items = new Array();\n            this._panel = new Panel();\n            MessageLoop.installMessageHook(this._panel, this._panelChildHook);\n        }\n        /**\n         * Get the panel managed by the handler.\n         */\n        get panel() {\n            return this._panel;\n        }\n        /**\n         * Add a widget to the panel.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            const item = { widget, rank };\n            const index = ArrayExt.upperBound(this._items, item, Private.itemCmp);\n            ArrayExt.insert(this._items, index, item);\n            this._panel.insertWidget(index, widget);\n        }\n    }\n    Private.PanelHandler = PanelHandler;\n})(Private || (Private = {}));\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { createRendermimePlugins } from '@jupyterlab/application/lib/mimerenderers';\nimport { LabStatus } from '@jupyterlab/application/lib/status';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Throttler } from '@lumino/polling';\nimport { RetroShell } from './shell';\n/**\n * App is the main application class. It is instantiated once and shared.\n */\nexport class RetroApp extends JupyterFrontEnd {\n    /**\n     * Construct a new RetroApp object.\n     *\n     * @param options The instantiation options for an application.\n     */\n    constructor(options = { shell: new RetroShell() }) {\n        var _a, _b;\n        super(Object.assign(Object.assign({}, options), { shell: (_a = options.shell) !== null && _a !== void 0 ? _a : new RetroShell() }));\n        /**\n         * The name of the application.\n         */\n        this.name = 'RetroLab';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The application busy and dirty status signals and flags.\n         */\n        this.status = new LabStatus(this);\n        /**\n         * The version of the application.\n         */\n        this.version = (_b = PageConfig.getOption('appVersion')) !== null && _b !== void 0 ? _b : 'unknown';\n        this._formatter = new Throttler(() => {\n            Private.setFormat(this);\n        }, 250);\n        if (options.mimeExtensions) {\n            for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n                this.registerPlugin(plugin);\n            }\n        }\n        void this._formatter.invoke();\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return {\n            urls: {\n                base: PageConfig.getOption('baseUrl'),\n                notFound: PageConfig.getOption('notFoundUrl'),\n                app: PageConfig.getOption('appUrl'),\n                static: PageConfig.getOption('staticUrl'),\n                settings: PageConfig.getOption('settingsUrl'),\n                themes: PageConfig.getOption('themesUrl'),\n                doc: PageConfig.getOption('docUrl'),\n                translations: PageConfig.getOption('translationsApiUrl'),\n                hubHost: PageConfig.getOption('hubHost') || undefined,\n                hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n                hubUser: PageConfig.getOption('hubUser') || undefined,\n                hubServerName: PageConfig.getOption('hubServerName') || undefined\n            },\n            directories: {\n                appSettings: PageConfig.getOption('appSettingsDir'),\n                schemas: PageConfig.getOption('schemasDir'),\n                static: PageConfig.getOption('staticDir'),\n                templates: PageConfig.getOption('templatesDir'),\n                themes: PageConfig.getOption('themesDir'),\n                userSettings: PageConfig.getOption('userSettingsDir'),\n                serverRoot: PageConfig.getOption('serverRoot'),\n                workspaces: PageConfig.getOption('workspacesDir')\n            }\n        };\n    }\n    /**\n     * Handle the DOM events for the application.\n     *\n     * @param event - The DOM event sent to the application.\n     */\n    handleEvent(event) {\n        super.handleEvent(event);\n        if (event.type === 'resize') {\n            void this._formatter.invoke();\n        }\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach(mod => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Media query for mobile devices.\n     */\n    const MOBILE_QUERY = 'only screen and (max-width: 760px)';\n    /**\n     * Sets the `format` of a Jupyter front-end application.\n     *\n     * @param app The front-end application whose format is set.\n     */\n    function setFormat(app) {\n        app.format = window.matchMedia(MOBILE_QUERY).matches ? 'mobile' : 'desktop';\n    }\n    Private.setFormat = setFormat;\n})(Private || (Private = {}));\n"],"sourceRoot":""}