{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/app.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/router.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/server.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/service.js"],"names":["JupyterLiteServer","Application","constructor","options","super","this","name","namespace","version","_serviceManager","attachShell","id","evtResize","event","registerPluginModule","mod","data","default","Object","prototype","hasOwnProperty","call","Array","isArray","forEach","item","registerPlugin","error","console","registerPluginModules","mods","registerServiceManager","serviceManager","Router","_routes","get","pattern","callback","_add","put","post","patch","delete","req","url","URL","method","pathname","r","match","matches","slice","body","JSON","parse","text","undefined","query","fromEntries","searchParams","Error","RegExp","push","JupyterServer","_router","contents","kernels","kernelspecs","sessions","settings","_contents","_kernels","_kernelspecs","_sessions","_settings","_addRoutes","init","Request","route","app","async","filename","res","listCheckpoints","Response","stringify","checkpoint","restoreCheckpoint","status","createCheckpoint","deleteCheckpoint","_a","content","nb","path","copyFrom","copy_from","file","copy","newUntitled","_b","newPath","rename","save","kernelId","restart","shutdown","specs","session","list","startNew","pluginPattern","pluginId","raw","plugins","getAll","LiteServiceManager","ServiceManager","server","serverSettings","ServerConnection","WebSocket","fetch","bind","_server"],"mappings":"uOAMO,MAAMA,UAA0B,EAAAC,YAMnCC,YAAYC,GACRC,MAAMD,GAINE,KAAKC,KAAO,qBAIZD,KAAKE,UAAYF,KAAKC,KAItBD,KAAKG,QAAU,UACfH,KAAKI,gBAAkB,KAK3B,qBACI,OAAOJ,KAAKI,gBAUhBC,YAAYC,IASZC,UAAUC,IAQVC,qBAAqBC,GACjB,IAAIC,EAAOD,EAAIE,QAEVC,OAAOC,UAAUC,eAAeC,KAAKN,EAAK,gBAC3CC,EAAOD,GAENO,MAAMC,QAAQP,KACfA,EAAO,CAACA,IAEZA,EAAKQ,SAAQC,IACT,IACIpB,KAAKqB,eAAeD,GAExB,MAAOE,GACHC,QAAQD,MAAMA,OAS1BE,sBAAsBC,GAClBA,EAAKN,SAAQT,IACTV,KAAKS,qBAAqBC,MAQlCgB,uBAAuBC,GACnB3B,KAAKI,gBAAkBuB,GC1FxB,MAAMC,EACT/B,cACIG,KAAK6B,QAAU,GASnBC,IAAIC,EAASC,GACThC,KAAKiC,KAAK,MAAOF,EAASC,GAS9BE,IAAIH,EAASC,GACThC,KAAKiC,KAAK,MAAOF,EAASC,GAS9BG,KAAKJ,EAASC,GACVhC,KAAKiC,KAAK,OAAQF,EAASC,GAS/BI,MAAML,EAASC,GACXhC,KAAKiC,KAAK,QAASF,EAASC,GAShCK,OAAON,EAASC,GACZhC,KAAKiC,KAAK,SAAUF,EAASC,GAOjC,YAAYM,GACR,MAAMC,EAAM,IAAIC,IAAIF,EAAIC,MAClB,OAAEE,GAAWH,GACb,SAAEI,GAAaH,EACrB,IAAK,MAAMI,KAAK3C,KAAK6B,QAAS,CAC1B,GAAIc,EAAEF,SAAWA,EACb,SAEJ,MAAMG,EAAQF,EAASE,MAAMD,EAAEZ,SAC/B,IAAKa,EACD,SAEJ,MAAMC,EAAUD,EAAME,MAAM,GAC5B,IAAIC,EACJ,GAAiB,UAAbJ,EAAEF,QAAmC,QAAbE,EAAEF,QAAiC,SAAbE,EAAEF,OAChD,IACIM,EAAOC,KAAKC,YAAYX,EAAIY,QAEhC,MACIH,OAAOI,EAGf,OAAOR,EAAEX,SAAShB,KAAK,KAAM,CACzB0B,WACAK,OACAK,MAAOvC,OAAOwC,YAAYd,EAAIe,kBAC5BT,GAEV,MAAM,IAAIU,MAAM,gBAAkBjB,EAAIG,OAAS,IAAMH,EAAIC,KAS7DN,KAAKQ,EAAQV,EAASC,GACK,iBAAZD,IACPA,EAAU,IAAIyB,OAAOzB,IAEzB/B,KAAK6B,QAAQ4B,KAAK,CACdhB,SACAV,UACAC,cCtGL,MAAM0B,EAIT7D,YAAYC,GACRE,KAAK2D,QAAU,IAAI/B,EACnB,MAAM,SAAEgC,EAAQ,QAAEC,EAAO,YAAEC,EAAW,SAAEC,EAAQ,SAAEC,GAAalE,EAC/DE,KAAKiE,UAAYL,EACjB5D,KAAKkE,SAAWL,EAChB7D,KAAKmE,aAAeL,EACpB9D,KAAKoE,UAAYL,EACjB/D,KAAKqE,UAAYL,EACjBhE,KAAKsE,aAQT,YAAYhC,EAAKiC,GACb,KAAMjC,aAAekC,SACjB,MAAMjB,MAAM,iCAEhB,OAAOvD,KAAK2D,QAAQc,MAAMnC,GAK9BgC,aACI,MAAMI,EAAM1E,KAAK2D,QAEjBe,EAAI5C,IAAI,kCAAkC6C,MAAOrC,EAAKsC,KAClD,MAAMC,QAAY7E,KAAKiE,UAAUa,gBAAgBF,GACjD,OAAO,IAAIG,SAAS/B,KAAKgC,UAAUH,OAGvCH,EAAIvC,KAAK,uCAAuCwC,MAAOrC,EAAKsC,EAAUK,KAClE,MAAMJ,QAAY7E,KAAKiE,UAAUiB,kBAAkBN,EAAUK,GAC7D,OAAO,IAAIF,SAAS/B,KAAKgC,UAAUH,GAAM,CAAEM,OAAQ,SAGvDT,EAAIvC,KAAK,kCAAkCwC,MAAOrC,EAAKsC,KACnD,MAAMC,QAAY7E,KAAKiE,UAAUmB,iBAAiBR,GAClD,OAAO,IAAIG,SAAS/B,KAAKgC,UAAUH,GAAM,CAAEM,OAAQ,SAGvDT,EAAIrC,OAAO,uCAAuCsC,MAAOrC,EAAKsC,EAAUK,KACpE,MAAMJ,QAAY7E,KAAKiE,UAAUoB,iBAAiBT,EAAUK,GAC5D,OAAO,IAAIF,SAAS/B,KAAKgC,UAAUH,GAAM,CAAEM,OAAQ,SAGvDT,EAAI5C,IAAI,qBAAqB6C,MAAOrC,EAAKsC,KACrC,IAAIU,EACJ,MAAMxF,EAAU,CACZyF,QAAgF,OAAjD,QAApBD,EAAKhD,EAAIc,aAA0B,IAAPkC,OAAgB,EAASA,EAAGC,UAEjEC,QAAWxF,KAAKiE,UAAUnC,IAAI8C,EAAU9E,GAC9C,OAAO,IAAIiF,SAAS/B,KAAKgC,UAAUQ,OAGvCd,EAAIvC,KAAK,qBAAqBwC,MAAOrC,EAAKmD,KACtC,MAAM3F,EAAUwC,EAAIS,KACd2C,EAAW5F,aAAyC,EAASA,EAAQ6F,UAC3E,IAAIC,EAOJ,OALIA,EADAF,QACa1F,KAAKiE,UAAU4B,KAAKH,EAAUD,SAG9BzF,KAAKiE,UAAU6B,YAAYhG,GAErC,IAAIiF,SAAS/B,KAAKgC,UAAUY,GAAO,CAAET,OAAQ,SAGxDT,EAAItC,MAAM,qBAAqBuC,MAAOrC,EAAKsC,KACvC,IAAIU,EAAIS,EACR,MAAMC,EAAkF,QAAvED,EAAyB,QAAnBT,EAAKhD,EAAIS,YAAyB,IAAPuC,OAAgB,EAASA,EAAGG,YAAyB,IAAPM,EAAgBA,EAAK,GACrHnB,EAA2B,MAAhBA,EAAS,GAAaA,EAAS9B,MAAM,GAAK8B,EACrD,MAAMY,QAAWxF,KAAKiE,UAAUgC,OAAOrB,EAAUoB,GACjD,OAAO,IAAIjB,SAAS/B,KAAKgC,UAAUQ,OAGvCd,EAAIxC,IAAI,sBAAsByC,MAAOrC,EAAKsC,KACtC,MAAM7B,EAAOT,EAAIS,KACXyC,QAAWxF,KAAKiE,UAAUiC,KAAKtB,EAAU7B,GAC/C,OAAO,IAAIgC,SAAS/B,KAAKgC,UAAUQ,OAGvCd,EAAIrC,OAAO,sBAAsBsC,MAAOrC,EAAKsC,WACnC5E,KAAKiE,UAAU5B,OAAOuC,GACrB,IAAIG,SAAS,KAAM,CAAEI,OAAQ,SAGxCT,EAAIvC,KAAK,6BAA6BwC,MAAOrC,EAAK6D,KAC9C,MAAMtB,QAAY7E,KAAKkE,SAASkC,QAAQD,GACxC,OAAO,IAAIpB,SAAS/B,KAAKgC,UAAUH,OAGvCH,EAAIrC,OAAO,qBAAqBsC,MAAOrC,EAAK6D,KACxC,MAAMtB,QAAY7E,KAAKkE,SAASmC,SAASF,GACzC,OAAO,IAAIpB,SAAS/B,KAAKgC,UAAUH,GAAM,CAAEM,OAAQ,SAGvDT,EAAI5C,IAAI,oBAAoB6C,MAAOrC,IAC/B,MAAMuC,EAAM7E,KAAKmE,aAAamC,MAC9B,OAAO,IAAIvB,SAAS/B,KAAKgC,UAAUH,OAGvCH,EAAI5C,IAAI,kBAAkB6C,MAAOrC,GACtB,IAAIyC,SAAS/B,KAAKgC,UAAU,OAGvCN,EAAI5C,IAAI,sBAAsB6C,MAAOrC,EAAKhC,KACtC,MAAMiG,QAAgBvG,KAAKoE,UAAUtC,IAAIxB,GACzC,OAAO,IAAIyE,SAAS/B,KAAKgC,UAAUuB,GAAU,CAAEpB,OAAQ,SAG3DT,EAAI5C,IAAI,iBAAiB6C,MAAOrC,IAC5B,MAAMyB,QAAiB/D,KAAKoE,UAAUoC,OACtC,OAAO,IAAIzB,SAAS/B,KAAKgC,UAAUjB,GAAW,CAAEoB,OAAQ,SAG5DT,EAAItC,MAAM,qBAAqBuC,MAAOrC,EAAKhC,KACvC,MAAMR,EAAUwC,EAAIS,KACdwD,QAAgBvG,KAAKoE,UAAUhC,MAAMtC,GAC3C,OAAO,IAAIiF,SAAS/B,KAAKgC,UAAUuB,GAAU,CAAEpB,OAAQ,SAG3DT,EAAIrC,OAAO,sBAAsBsC,MAAOrC,EAAKhC,WACnCN,KAAKoE,UAAUiC,SAAS/F,GACvB,IAAIyE,SAAS,KAAM,CAAEI,OAAQ,SAGxCT,EAAIvC,KAAK,iBAAiBwC,MAAOrC,IAC7B,MAAMxC,EAAUwC,EAAIS,KACdwD,QAAgBvG,KAAKoE,UAAUqC,SAAS3G,GAC9C,OAAO,IAAIiF,SAAS/B,KAAKgC,UAAUuB,GAAU,CAAEpB,OAAQ,SAK3D,MAAMuB,EAAgB,qDACtBhC,EAAI5C,IAAI4E,GAAe/B,MAAOrC,EAAKqE,KAC/B,MAAM3C,QAAiBhE,KAAKqE,UAAUvC,IAAI6E,GAC1C,OAAO,IAAI5B,SAAS/B,KAAKgC,UAAUhB,OAEvCU,EAAIxC,IAAIwE,GAAe/B,MAAOrC,EAAKqE,KAC/B,MAAM5D,EAAOT,EAAIS,MACX,IAAE6D,GAAQ7D,EAEhB,aADM/C,KAAKqE,UAAU6B,KAAKS,EAAUC,GAC7B,IAAI7B,SAAS,KAAM,CAAEI,OAAQ,SAExCT,EAAI5C,IAAI,iBAAiB6C,MAAOrC,IAC5B,MAAMuE,QAAgB7G,KAAKqE,UAAUyC,SACrC,OAAO,IAAI/B,SAAS/B,KAAKgC,UAAU6B,Q,0BCzJxC,MAAME,UAA2B,EAAAC,eAMpCnH,YAAYC,GACR,IAAIwF,EACJ,MAAM2B,EAASnH,EAAQmH,OACvBlH,MAAM,IACCD,EACHoH,eAAgB,IACT,EAAAC,iBAAA,eACHC,UAAS,YACTC,MAA4C,QAApC/B,EAAK2B,EAAOI,MAAMC,KAAKL,UAA4B,IAAP3B,EAAgBA,OAAKnC,KAGjFnD,KAAKuH,QAAUN,EAKnB,aACI,OAAOjH,KAAKuH","file":"9148.f029ffc64df9a71f2a0a.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Application } from '@lumino/application';\n/**\n * Server is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLiteServer extends Application {\n    /**\n     * Construct a new JupyterLite object.\n     *\n     * @param options The instantiation options for a JupyterLiteServer application.\n     */\n    constructor(options) {\n        super(options);\n        /**\n         * The name of the application.\n         */\n        this.name = 'JupyterLite Server';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The version of the application.\n         */\n        this.version = 'unknown';\n        this._serviceManager = null;\n    }\n    /**\n     * Get the underlying lite service manager for this app.\n     */\n    get serviceManager() {\n        return this._serviceManager;\n    }\n    /**\n     * Attach the application shell to the DOM.\n     *\n     * @param id - The id of the host node for the shell, or `''`.\n     *\n     * #### Notes\n     * For this server application there is no shell to attach\n     */\n    attachShell(id) {\n        // no-op\n    }\n    /**\n     * A method invoked on a window `'resize'` event.\n     *\n     * #### Notes\n     * For this server application there is no shell to update\n     */\n    evtResize(event) {\n        // no-op\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach(mod => {\n            this.registerPluginModule(mod);\n        });\n    }\n    /**\n     * Register the underlying lite service manager for this app.\n     *\n     * @param serviceManager The Service Manager for the app.\n     */\n    registerServiceManager(serviceManager) {\n        this._serviceManager = serviceManager;\n    }\n}\n","/**\n * A simple router.\n */\nexport class Router {\n    constructor() {\n        this._routes = [];\n    }\n    /**\n     * Add a new GET route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    get(pattern, callback) {\n        this._add('GET', pattern, callback);\n    }\n    /**\n     * Add a new PUT route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    put(pattern, callback) {\n        this._add('PUT', pattern, callback);\n    }\n    /**\n     * Add a new POST route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    post(pattern, callback) {\n        this._add('POST', pattern, callback);\n    }\n    /**\n     * Add a new PATCH route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    patch(pattern, callback) {\n        this._add('PATCH', pattern, callback);\n    }\n    /**\n     * Add a new DELETE route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    delete(pattern, callback) {\n        this._add('DELETE', pattern, callback);\n    }\n    /**\n     * Route a request.\n     *\n     * @param req The request to route.\n     */\n    async route(req) {\n        const url = new URL(req.url);\n        const { method } = req;\n        const { pathname } = url;\n        for (const r of this._routes) {\n            if (r.method !== method) {\n                continue;\n            }\n            const match = pathname.match(r.pattern);\n            if (!match) {\n                continue;\n            }\n            const matches = match.slice(1);\n            let body;\n            if (r.method === 'PATCH' || r.method === 'PUT' || r.method === 'POST') {\n                try {\n                    body = JSON.parse(await req.text());\n                }\n                catch {\n                    body = undefined;\n                }\n            }\n            return r.callback.call(null, {\n                pathname,\n                body,\n                query: Object.fromEntries(url.searchParams)\n            }, ...matches);\n        }\n        throw new Error('Cannot route ' + req.method + ' ' + req.url);\n    }\n    /**\n     * Add a new route.\n     *\n     * @param method The method\n     * @param pattern The pattern\n     * @param callback The callback\n     */\n    _add(method, pattern, callback) {\n        if (typeof pattern === 'string') {\n            pattern = new RegExp(pattern);\n        }\n        this._routes.push({\n            method,\n            pattern,\n            callback\n        });\n    }\n}\n","import { Router } from './router';\n/**\n * A (very, very) simplified Jupyter Server running in the browser.\n */\nexport class JupyterServer {\n    /**\n     * Construct a new JupyterServer.\n     */\n    constructor(options) {\n        this._router = new Router();\n        const { contents, kernels, kernelspecs, sessions, settings } = options;\n        this._contents = contents;\n        this._kernels = kernels;\n        this._kernelspecs = kernelspecs;\n        this._sessions = sessions;\n        this._settings = settings;\n        this._addRoutes();\n    }\n    /**\n     * Handle an incoming request from the client.\n     *\n     * @param req The incoming request\n     * @param init The optional init request\n     */\n    async fetch(req, init) {\n        if (!(req instanceof Request)) {\n            throw Error('Request info is not a Request');\n        }\n        return this._router.route(req);\n    }\n    /**\n     * Add the routes.\n     */\n    _addRoutes() {\n        const app = this._router;\n        // GET /api/contents/{path}/checkpoints - Get a list of checkpoints for a file\n        app.get('/api/contents/(.+)/checkpoints', async (req, filename) => {\n            const res = await this._contents.listCheckpoints(filename);\n            return new Response(JSON.stringify(res));\n        });\n        // POST /api/contents/{path}/checkpoints/{checkpoint_id} - Restore a file to a particular checkpointed state\n        app.post('/api/contents/(.+)/checkpoints/(.*)', async (req, filename, checkpoint) => {\n            const res = await this._contents.restoreCheckpoint(filename, checkpoint);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n        // POST /api/contents/{path}/checkpoints - Create a new checkpoint for a file\n        app.post('/api/contents/(.+)/checkpoints', async (req, filename) => {\n            const res = await this._contents.createCheckpoint(filename);\n            return new Response(JSON.stringify(res), { status: 201 });\n        });\n        // DELETE /api/contents/{path}/checkpoints/{checkpoint_id} - Delete a checkpoint\n        app.delete('/api/contents/(.+)/checkpoints/(.*)', async (req, filename, checkpoint) => {\n            const res = await this._contents.deleteCheckpoint(filename, checkpoint);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n        // GET /api/contents/{path} - Get contents of file or directory\n        app.get('/api/contents(.*)', async (req, filename) => {\n            var _a;\n            const options = {\n                content: ((_a = req.query) === null || _a === void 0 ? void 0 : _a.content) === '1'\n            };\n            const nb = await this._contents.get(filename, options);\n            return new Response(JSON.stringify(nb));\n        });\n        // POST /api/contents/{path} - Create a new file in the specified path\n        app.post('/api/contents(.*)', async (req, path) => {\n            const options = req.body;\n            const copyFrom = options === null || options === void 0 ? void 0 : options.copy_from;\n            let file;\n            if (copyFrom) {\n                file = await this._contents.copy(copyFrom, path);\n            }\n            else {\n                file = await this._contents.newUntitled(options);\n            }\n            return new Response(JSON.stringify(file), { status: 201 });\n        });\n        // PATCH /api/contents/{path} - Rename a file or directory without re-uploading content\n        app.patch('/api/contents(.*)', async (req, filename) => {\n            var _a, _b;\n            const newPath = (_b = (_a = req.body) === null || _a === void 0 ? void 0 : _a.path) !== null && _b !== void 0 ? _b : '';\n            filename = filename[0] === '/' ? filename.slice(1) : filename;\n            const nb = await this._contents.rename(filename, newPath);\n            return new Response(JSON.stringify(nb));\n        });\n        // PUT /api/contents/{path} - Save or upload a file\n        app.put('/api/contents/(.+)', async (req, filename) => {\n            const body = req.body;\n            const nb = await this._contents.save(filename, body);\n            return new Response(JSON.stringify(nb));\n        });\n        // DELETE /api/contents/{path} - Delete a file in the given path\n        app.delete('/api/contents/(.+)', async (req, filename) => {\n            await this._contents.delete(filename);\n            return new Response(null, { status: 204 });\n        });\n        // POST /api/kernels/{kernel_id} - Restart a kernel\n        app.post('/api/kernels/(.*)/restart', async (req, kernelId) => {\n            const res = await this._kernels.restart(kernelId);\n            return new Response(JSON.stringify(res));\n        });\n        // DELETE /api/kernels/{kernel_id} - Kill a kernel and delete the kernel id\n        app.delete('/api/kernels/(.*)', async (req, kernelId) => {\n            const res = await this._kernels.shutdown(kernelId);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n        // KernelSpecs\n        app.get('/api/kernelspecs', async (req) => {\n            const res = this._kernelspecs.specs;\n            return new Response(JSON.stringify(res));\n        });\n        // NbConvert\n        app.get('/api/nbconvert', async (req) => {\n            return new Response(JSON.stringify({}));\n        });\n        // GET /api/sessions/{session} - Get session\n        app.get('/api/sessions/(.+)', async (req, id) => {\n            const session = await this._sessions.get(id);\n            return new Response(JSON.stringify(session), { status: 200 });\n        });\n        // GET /api/sessions - List available sessions\n        app.get('/api/sessions', async (req) => {\n            const sessions = await this._sessions.list();\n            return new Response(JSON.stringify(sessions), { status: 200 });\n        });\n        // PATCH /api/sessions/{session} - This can be used to rename a session\n        app.patch('/api/sessions(.*)', async (req, id) => {\n            const options = req.body;\n            const session = await this._sessions.patch(options);\n            return new Response(JSON.stringify(session), { status: 200 });\n        });\n        // DELETE /api/sessions/{session} - Delete a session\n        app.delete('/api/sessions/(.+)', async (req, id) => {\n            await this._sessions.shutdown(id);\n            return new Response(null, { status: 204 });\n        });\n        // POST /api/sessions - Create a new session or return an existing session if a session of the same name already exists\n        app.post('/api/sessions', async (req) => {\n            const options = req.body;\n            const session = await this._sessions.startNew(options);\n            return new Response(JSON.stringify(session), { status: 201 });\n        });\n        // Settings\n        // TODO: improve the regex\n        // const pluginPattern = new RegExp(/(?:@([^/]+?)[/])?([^/]+?):(\\w+)/);\n        const pluginPattern = '/api/settings/((?:@([^/]+?)[/])?([^/]+?):([^:]+))$';\n        app.get(pluginPattern, async (req, pluginId) => {\n            const settings = await this._settings.get(pluginId);\n            return new Response(JSON.stringify(settings));\n        });\n        app.put(pluginPattern, async (req, pluginId) => {\n            const body = req.body;\n            const { raw } = body;\n            await this._settings.save(pluginId, raw);\n            return new Response(null, { status: 204 });\n        });\n        app.get('/api/settings', async (req) => {\n            const plugins = await this._settings.getAll();\n            return new Response(JSON.stringify(plugins));\n        });\n    }\n}\n","import { ServiceManager, ServerConnection } from '@jupyterlab/services';\nimport { WebSocket } from 'mock-socket';\n/**\n * A custom ServiceManager to run in the browser\n */\nexport class LiteServiceManager extends ServiceManager {\n    /**\n     * Construct a new service provider.\n     *\n     * @param options The instantiation options for the service manager.\n     */\n    constructor(options) {\n        var _a;\n        const server = options.server;\n        super({\n            ...options,\n            serverSettings: {\n                ...ServerConnection.makeSettings(),\n                WebSocket,\n                fetch: (_a = server.fetch.bind(server)) !== null && _a !== void 0 ? _a : undefined\n            }\n        });\n        this._server = server;\n    }\n    /**\n     * Get the underlying Jupyter Server\n     */\n    get server() {\n        return this._server;\n    }\n}\n"],"sourceRoot":""}