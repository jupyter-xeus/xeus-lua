{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/application-extension/lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACuF;AACyB;AACpD;AACY;AACf;AACR;AACyB;AACA;AACH;AAC9B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAU,EAAE,gEAAW;AACtC;AACA,6BAA6B,2DAAQ;AACrC,+BAA+B,SAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAqB;AAC7C;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA,yBAAyB,mDAAM,EAAE,OAAO;AACxC,0BAA0B,uEAAoB;AAC9C,iCAAiC,oEAAe,GAAG,gEAAW;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAO,EAAE,oEAAgB;AACxC;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kEAAe;AAC3C;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT,yBAAyB,iCAAiC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,2DAAS;AACzC;AACA,wBAAwB,wEAAqB;AAC7C;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA,SAAS;AACT;AACA;AACA,iCAAiC,4BAA4B;AAC7D,aAAa;AACb;AACA;AACA,qCAAqC,8BAA8B,GAAG,+BAA+B;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAsB;AACpC;AACA,6BAA6B,2DAAQ;AACrC,+BAA+B,SAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,4DAAO;AACrB,eAAe,2EAAsB;AACrC;AACA,eAAe,WAAW;AAC1B;AACA,2BAA2B,2DAAM,EAAE,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wEAAsB;AACpC;AACA,oBAAoB,uEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6DAAU;AAC7C,+BAA+B,SAAS;AACxC;AACA;AACA,KAAK;AACL;AACA,cAAc,8DAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mDAAM;AAC9B,iBAAiB,sEAAoB;AACrC;AACA,mCAAmC,cAAc;AACjD,yBAAyB,mDAAM;AAC/B,kBAAkB,sEAAoB;AACtC;AACA,qCAAqC,cAAc;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAU;AACxB;AACA,6BAA6B,2DAAQ;AACrC,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAW;AAC1B;AACA;AACA;AACA,qCAAqC,mEAAc;AACnD;AACA;AACA;AACA,iCAAiC,mEAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAW;AAC1B,eAAe,oEAAgB,EAAE,4DAAO;AACxC;AACA,2BAA2B,mDAAM;AACjC;AACA,sCAAsC,WAAW;AACjD;AACA;AACA,iDAAiD,mEAAc;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oEAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mEAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,MAAM,GAAG,QAAQ;AAC3D;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAW;AAC1B,eAAe,2DAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,qCAAqC,gCAAgC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,uEAAkB;AACzD;AACA,KAAK;AACL;AACA,cAAc,gEAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,8DAAW,EAAE,2DAAS;AACtD;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA,qCAAqC,gCAAgC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC","file":"vendors-node_modules_retrolab_application-extension_lib_index_js.4f85827c2213fb9e4fc6.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabStatus, IRouter, JupyterFrontEnd, Router } from '@jupyterlab/application';\nimport { sessionContextDialogs, ISessionContextDialogs, DOMUtils, ICommandPalette } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager, renameDialog } from '@jupyterlab/docmanager';\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ITranslator, TranslationManager } from '@jupyterlab/translation';\nimport { RetroApp, RetroShell, IRetroShell } from '@retrolab/application';\nimport { jupyterIcon, retroInlineIcon } from '@retrolab/ui-components';\nimport { Widget } from '@lumino/widgets';\n/**\n * The default notebook factory.\n */\nconst NOTEBOOK_FACTORY = 'Notebook';\n/**\n * The editor factory.\n */\nconst EDITOR_FACTORY = 'Editor';\n/**\n * A regular expression to match path to notebooks and documents\n */\nconst TREE_PATTERN = new RegExp('/(notebooks|edit)/(.*)');\n/**\n * The command IDs used by the application plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Toggle Top Bar visibility\n     */\n    CommandIDs.toggleTop = 'application:toggle-top';\n    /**\n     * Toggle the Zen mode\n     */\n    CommandIDs.toggleZen = 'application:toggle-zen';\n    /**\n     * Open JupyterLab\n     */\n    CommandIDs.openLab = 'application:open-lab';\n    /**\n     * Open the tree page.\n     */\n    CommandIDs.openTree = 'application:open-tree';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Check if the application is dirty before closing the browser tab.\n */\nconst dirty = {\n    id: '@retrolab/application-extension:dirty',\n    autoStart: true,\n    requires: [ILabStatus, ITranslator],\n    activate: (app, status, translator) => {\n        if (!(app instanceof RetroApp)) {\n            throw new Error(`${dirty.id} must be activated in RetroLab.`);\n        }\n        const trans = translator.load('jupyterlab');\n        const message = trans.__('Are you sure you want to exit RetroLab?\\n\\nAny unsaved changes will be lost.');\n        window.addEventListener('beforeunload', event => {\n            if (app.status.isDirty) {\n                return (event.returnValue = message);\n            }\n        });\n    }\n};\n/**\n * The logo plugin.\n */\nconst logo = {\n    id: '@retrolab/application-extension:logo',\n    autoStart: true,\n    activate: (app) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        const node = document.createElement('a');\n        node.href = `${baseUrl}retro/tree`;\n        node.target = '_blank';\n        node.rel = 'noopener noreferrer';\n        const logo = new Widget({ node });\n        const retroLogo = PageConfig.getOption('retroLogo') === 'true';\n        const icon = retroLogo ? retroInlineIcon : jupyterIcon;\n        icon.element({\n            container: node,\n            elementPosition: 'center',\n            padding: '2px 2px 2px 8px',\n            height: '28px',\n            width: 'auto'\n        });\n        logo.id = 'jp-RetroLogo';\n        app.shell.add(logo, 'top', { rank: 0 });\n    }\n};\n/**\n * A plugin to open documents in the main area.\n */\nconst opener = {\n    id: '@retrolab/application-extension:opener',\n    autoStart: true,\n    requires: [IRouter, IDocumentManager],\n    activate: (app, router, docManager) => {\n        const { commands } = app;\n        const command = 'router:tree';\n        commands.addCommand(command, {\n            execute: (args) => {\n                var _a;\n                const parsed = args;\n                const matches = (_a = parsed.path.match(TREE_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                const [, , path] = matches;\n                if (!path) {\n                    return;\n                }\n                const file = decodeURIComponent(path);\n                const ext = PathExt.extname(file);\n                app.restored.then(() => {\n                    // TODO: get factory from file type instead?\n                    if (ext === '.ipynb') {\n                        docManager.open(file, NOTEBOOK_FACTORY, undefined, {\n                            ref: '_noref'\n                        });\n                    }\n                    else {\n                        docManager.open(file, EDITOR_FACTORY, undefined, {\n                            ref: '_noref'\n                        });\n                    }\n                });\n            }\n        });\n        router.register({ command, pattern: TREE_PATTERN });\n    }\n};\n/**\n * A plugin to dispose the Tabs menu\n */\nconst noTabsMenu = {\n    id: '@retrolab/application-extension:no-tabs-menu',\n    requires: [IMainMenu],\n    autoStart: true,\n    activate: (app, menu) => {\n        menu.tabsMenu.dispose();\n    }\n};\n/**\n * Add commands to open the tree and running pages.\n */\nconst pages = {\n    id: '@retrolab/application-extension:pages',\n    autoStart: true,\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, palette, menu) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        app.commands.addCommand(CommandIDs.openLab, {\n            label: 'Open JupyterLab',\n            execute: () => {\n                window.open(`${baseUrl}lab`);\n            }\n        });\n        app.commands.addCommand(CommandIDs.openTree, {\n            label: 'Open Files',\n            execute: () => {\n                window.open(`${baseUrl}retro/tree`);\n            }\n        });\n        if (palette) {\n            [CommandIDs.openLab, CommandIDs.openTree].forEach(command => {\n                palette.addItem({ command, category: 'View' });\n            });\n        }\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: CommandIDs.openLab }, { command: CommandIDs.openTree }], 0);\n        }\n    }\n};\n/**\n * The default paths for a RetroLab app.\n */\nconst paths = {\n    id: '@retrolab/application-extension:paths',\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths,\n    activate: (app) => {\n        if (!(app instanceof RetroApp)) {\n            throw new Error(`${paths.id} must be activated in RetroLab.`);\n        }\n        return app.paths;\n    }\n};\n/**\n * The default URL router provider.\n */\nconst router = {\n    id: '@retrolab/application-extension:router',\n    autoStart: true,\n    provides: IRouter,\n    requires: [JupyterFrontEnd.IPaths],\n    activate: (app, paths) => {\n        const { commands } = app;\n        const base = paths.urls.base;\n        const router = new Router({ base, commands });\n        void app.started.then(() => {\n            // Route the very first request on load.\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n        });\n        return router;\n    }\n};\n/**\n * The default session dialogs plugin\n */\nconst sessionDialogs = {\n    id: '@retrolab/application-extension:session-dialogs',\n    provides: ISessionContextDialogs,\n    autoStart: true,\n    activate: () => sessionContextDialogs\n};\n/**\n * The default RetroLab application shell.\n */\nconst shell = {\n    id: '@retrolab/application-extension:shell',\n    activate: (app) => {\n        if (!(app.shell instanceof RetroShell)) {\n            throw new Error(`${shell.id} did not find a RetroShell instance.`);\n        }\n        return app.shell;\n    },\n    autoStart: true,\n    provides: IRetroShell\n};\n/**\n * A plugin to provide a spacer at rank 10000 for flex panels\n */\nconst spacer = {\n    id: '@retrolab/application-extension:spacer',\n    autoStart: true,\n    activate: (app) => {\n        const top = new Widget();\n        top.id = DOMUtils.createDomID();\n        top.addClass('jp-RetroSpacer');\n        app.shell.add(top, 'top', { rank: 10000 });\n        const menu = new Widget();\n        menu.id = DOMUtils.createDomID();\n        menu.addClass('jp-RetroSpacer');\n        app.shell.add(menu, 'menu', { rank: 10000 });\n    }\n};\n/**\n * The default JupyterLab application status provider.\n */\nconst status = {\n    id: '@retrolab/application-extension:status',\n    autoStart: true,\n    provides: ILabStatus,\n    activate: (app) => {\n        if (!(app instanceof RetroApp)) {\n            throw new Error(`${status.id} must be activated in RetroLab.`);\n        }\n        return app.status;\n    }\n};\n/**\n * A plugin to display the document title in the browser tab title\n */\nconst tabTitle = {\n    id: '@retrolab/application-extension:tab-title',\n    autoStart: true,\n    requires: [IRetroShell],\n    activate: (app, shell) => {\n        const setTabTitle = () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof DocumentWidget)) {\n                return;\n            }\n            const update = () => {\n                const basename = PathExt.basename(current.context.path);\n                document.title = basename;\n            };\n            current.context.pathChanged.connect(update);\n            update();\n        };\n        shell.currentChanged.connect(setTabTitle);\n        setTabTitle();\n    }\n};\n/**\n * A plugin to display and rename the title of a file\n */\nconst title = {\n    id: '@retrolab/application-extension:title',\n    autoStart: true,\n    requires: [IRetroShell],\n    optional: [IDocumentManager, IRouter],\n    activate: (app, shell, docManager, router) => {\n        const widget = new Widget();\n        widget.id = 'jp-title';\n        app.shell.add(widget, 'top', { rank: 10 });\n        const addTitle = async () => {\n            const current = shell.currentWidget;\n            if (!current || !(current instanceof DocumentWidget)) {\n                return;\n            }\n            if (widget.node.children.length > 0) {\n                return;\n            }\n            const h = document.createElement('h1');\n            h.textContent = current.title.label;\n            widget.node.appendChild(h);\n            widget.node.style.marginLeft = '10px';\n            if (!docManager) {\n                return;\n            }\n            widget.node.onclick = async () => {\n                var _a, _b;\n                const result = await renameDialog(docManager, current.context.path);\n                // activate the current widget to bring the focus\n                if (current) {\n                    current.activate();\n                }\n                if (result === null) {\n                    return;\n                }\n                const newPath = (_a = current.context.path) !== null && _a !== void 0 ? _a : result.path;\n                const basename = PathExt.basename(newPath);\n                h.textContent = basename;\n                if (!router) {\n                    return;\n                }\n                const matches = (_b = router.current.path.match(TREE_PATTERN)) !== null && _b !== void 0 ? _b : [];\n                const [, route, path] = matches;\n                if (!route || !path) {\n                    return;\n                }\n                const encoded = encodeURIComponent(newPath);\n                router.navigate(`/retro/${route}/${encoded}`, {\n                    skipRouting: true\n                });\n            };\n        };\n        shell.currentChanged.connect(addTitle);\n        addTitle();\n    }\n};\n/**\n * Plugin to toggle the top header visibility.\n */\nconst topVisibility = {\n    id: '@retrolab/application-extension:top',\n    requires: [IRetroShell],\n    optional: [IMainMenu],\n    activate: (app, retroShell, menu) => {\n        const top = retroShell.top;\n        app.commands.addCommand(CommandIDs.toggleTop, {\n            label: 'Show Header',\n            execute: () => {\n                top.setHidden(top.isVisible);\n            },\n            isToggled: () => top.isVisible\n        });\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: CommandIDs.toggleTop }], 2);\n        }\n        const onChanged = () => {\n            if (app.format === 'desktop') {\n                retroShell.expandTop();\n            }\n            else {\n                retroShell.collapseTop();\n            }\n        };\n        // listen on format change (mobile and desktop) to make the view more compact\n        app.formatChanged.connect(onChanged);\n        onChanged();\n    },\n    autoStart: true\n};\n/**\n * A simplified Translator\n */\nconst translator = {\n    id: '@retrolab/application-extension:translator',\n    activate: (app) => {\n        const translationManager = new TranslationManager();\n        return translationManager;\n    },\n    autoStart: true,\n    provides: ITranslator\n};\n/**\n * Zen mode plugin\n */\nconst zen = {\n    id: '@retrolab/application-extension:zen',\n    autoStart: true,\n    optional: [ICommandPalette, IRetroShell, IMainMenu],\n    activate: (app, palette, retroShell, menu) => {\n        const { commands } = app;\n        const elem = document.documentElement;\n        const toggleOn = () => {\n            retroShell === null || retroShell === void 0 ? void 0 : retroShell.collapseTop();\n            retroShell === null || retroShell === void 0 ? void 0 : retroShell.menu.setHidden(true);\n            zenModeEnabled = true;\n        };\n        const toggleOff = () => {\n            retroShell === null || retroShell === void 0 ? void 0 : retroShell.expandTop();\n            retroShell === null || retroShell === void 0 ? void 0 : retroShell.menu.setHidden(false);\n            zenModeEnabled = false;\n        };\n        let zenModeEnabled = false;\n        commands.addCommand(CommandIDs.toggleZen, {\n            label: 'Toggle Zen Mode',\n            execute: () => {\n                if (!zenModeEnabled) {\n                    elem.requestFullscreen();\n                    toggleOn();\n                }\n                else {\n                    document.exitFullscreen();\n                    toggleOff();\n                }\n            }\n        });\n        document.addEventListener('fullscreenchange', () => {\n            if (!document.fullscreenElement) {\n                toggleOff();\n            }\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.toggleZen, category: 'Mode' });\n        }\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: CommandIDs.toggleZen }], 3);\n        }\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    dirty,\n    logo,\n    noTabsMenu,\n    opener,\n    pages,\n    paths,\n    router,\n    sessionDialogs,\n    shell,\n    spacer,\n    status,\n    tabTitle,\n    title,\n    topVisibility,\n    translator,\n    zen\n];\nexport default plugins;\n"],"sourceRoot":""}