{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/node_modules/@jupyterlab/observables/lib/observablemap.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/node_modules/@jupyterlab/observables/lib/observablejson.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/node_modules/@jupyterlab/observables/lib/observablestring.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/node_modules/@jupyterlab/observables/lib/observablelist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/node_modules/@jupyterlab/observables/lib/undoablelist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/node_modules/@jupyterlab/observables/lib/modeldb.js"],"names":["Private","ObservableMap","constructor","options","this","_map","Map","_changed","Signal","_isDisposed","_itemCmp","itemCmp","values","key","set","size","value","oldVal","get","undefined","Error","emit","type","oldValue","newValue","has","keys","keyList","forEach","v","k","push","valList","delete","clear","i","length","dispose","isDisposed","first","second","ObservableJSON","super","JSONExt","toJSON","out","Object","create","ChangeMessage","Message","args","ObservableString","initialText","_text","start","end","insert","index","text","slice","remove","ObservableList","_array","each","iter","ArrayIterator","oldIndex","newIndex","oldValues","newValues","num","ArrayExt","removeValue","item","copy","move","fromIndex","toIndex","pushAll","toArray","insertAll","removeRange","startIndex","endIndex","ObservableUndoableList","serializer","_inCompound","_isUndoable","_madeCompoundChange","_index","_stack","_serializer","changed","connect","_onListChanged","beginCompoundOperation","isUndoAble","endCompoundOperation","undo","canUndo","changes","change","reverse","_undoChange","redo","canRedo","_redoChange","clearUndo","list","evt","_copyChange","fromJSON","IdentitySerializer","ObservableValue","initialValue","_value","IChangedArgs","ModelDB","isPrepopulated","isCollaborative","connected","Promise","resolve","_toDispose","_disposables","DisposableSet","_basePath","basePath","baseDB","_db","path","_resolvePath","createString","str","add","createList","vec","createMap","map","createValue","val","getValue","setValue","view"],"mappings":"6SA4KIA,E,iCAtKG,MAAMC,EAITC,YAAYC,EAAU,IAKlB,GAJAC,KAAKC,KAAO,IAAIC,IAChBF,KAAKG,SAAW,IAAI,EAAAC,OAAOJ,MAC3BA,KAAKK,aAAc,EACnBL,KAAKM,SAAWP,EAAQQ,SAAWX,EAAQW,QACvCR,EAAQS,OACR,IAAK,MAAMC,KAAOV,EAAQS,OACtBR,KAAKC,KAAKS,IAAID,EAAKV,EAAQS,OAAOC,IAO9C,WACI,MAAO,MAKX,cACI,OAAOT,KAAKG,SAKhB,iBACI,OAAOH,KAAKK,YAKhB,WACI,OAAOL,KAAKC,KAAKU,KAiBrBD,IAAID,EAAKG,GACL,MAAMC,EAASb,KAAKC,KAAKa,IAAIL,GAC7B,QAAcM,IAAVH,EACA,MAAMI,MAAM,6CAGhB,MAAMT,EAAUP,KAAKM,SACrB,YAAeS,IAAXF,GAAwBN,EAAQM,EAAQD,KAG5CZ,KAAKC,KAAKS,IAAID,EAAKG,GACnBZ,KAAKG,SAASc,KAAK,CACfC,KAAML,EAAS,SAAW,MAC1BJ,IAAKA,EACLU,SAAUN,EACVO,SAAUR,KAPHC,EAkBfC,IAAIL,GACA,OAAOT,KAAKC,KAAKa,IAAIL,GASzBY,IAAIZ,GACA,OAAOT,KAAKC,KAAKoB,IAAIZ,GAOzBa,OACI,MAAMC,EAAU,GAIhB,OAHAvB,KAAKC,KAAKuB,SAAQ,CAACC,EAAGC,KAClBH,EAAQI,KAAKD,MAEVH,EAOXf,SACI,MAAMoB,EAAU,GAIhB,OAHA5B,KAAKC,KAAKuB,SAAQ,CAACC,EAAGC,KAClBE,EAAQD,KAAKF,MAEVG,EAaXC,OAAOpB,GACH,MAAMI,EAASb,KAAKC,KAAKa,IAAIL,GAU7B,OATgBT,KAAKC,KAAK4B,OAAOpB,IAE7BT,KAAKG,SAASc,KAAK,CACfC,KAAM,SACNT,IAAKA,EACLU,SAAUN,EACVO,cAAUL,IAGXF,EAKXiB,QAEI,MAAMP,EAAUvB,KAAKsB,OACrB,IAAK,IAAIS,EAAI,EAAGA,EAAIR,EAAQS,OAAQD,IAChC/B,KAAK6B,OAAON,EAAQQ,IAM5BE,UACQjC,KAAKkC,aAGTlC,KAAKK,aAAc,EACnB,EAAAD,OAAA,UAAiBJ,MACjBA,KAAKC,KAAK6B,WAOlB,SAAWlC,GAOPA,EAAQW,QAHR,SAAiB4B,EAAOC,GACpB,OAAOD,IAAUC,GALzB,CAQGxC,IAAYA,EAAU,K,eC7KlB,MAAMyC,UAAuBxC,EAIhCC,YAAYC,EAAU,IAClBuC,MAAM,CACF/B,QAAS,EAAAgC,QAAA,UACT/B,OAAQT,EAAQS,SAMxBgC,SACI,MAAMC,EAAMC,OAAOC,OAAO,MACpBrB,EAAOtB,KAAKsB,OAClB,IAAK,MAAMb,KAAOa,EAAM,CACpB,MAAMV,EAAQZ,KAAKc,IAAIL,QACTM,IAAVH,IACA6B,EAAIhC,GAAO,EAAA8B,QAAA,SAAiB3B,IAGpC,OAAO6B,IAMf,SAAWJ,GAIP,MAAMO,UAAsB,EAAAC,QAIxB/C,YAAYoB,EAAM4B,GACdR,MAAMpB,GACNlB,KAAK8C,KAAOA,GAGpBT,EAAeO,cAAgBA,EAbnC,CAcGP,IAAmBA,EAAiB,KC5ChC,MAAMU,EAITjD,YAAYkD,EAAc,IACtBhD,KAAKiD,MAAQ,GACbjD,KAAKK,aAAc,EACnBL,KAAKG,SAAW,IAAI,EAAAC,OAAOJ,MAC3BA,KAAKiD,MAAQD,EAKjB,WACI,MAAO,SAKX,cACI,OAAOhD,KAAKG,SAKhB,SAASS,GACDA,EAAMoB,SAAWhC,KAAKiD,MAAMjB,QAAUpB,IAAUZ,KAAKiD,QAGzDjD,KAAKiD,MAAQrC,EACbZ,KAAKG,SAASc,KAAK,CACfC,KAAM,MACNgC,MAAO,EACPC,IAAKvC,EAAMoB,OACXpB,MAAOA,KAMf,WACI,OAAOZ,KAAKiD,MAShBG,OAAOC,EAAOC,GACVtD,KAAKiD,MAAQjD,KAAKiD,MAAMM,MAAM,EAAGF,GAASC,EAAOtD,KAAKiD,MAAMM,MAAMF,GAClErD,KAAKG,SAASc,KAAK,CACfC,KAAM,SACNgC,MAAOG,EACPF,IAAKE,EAAQC,EAAKtB,OAClBpB,MAAO0C,IAUfE,OAAON,EAAOC,GACV,MAAMhC,EAAWnB,KAAKiD,MAAMM,MAAML,EAAOC,GACzCnD,KAAKiD,MAAQjD,KAAKiD,MAAMM,MAAM,EAAGL,GAASlD,KAAKiD,MAAMM,MAAMJ,GAC3DnD,KAAKG,SAASc,KAAK,CACfC,KAAM,SACNgC,MAAOA,EACPC,IAAKA,EACLvC,MAAOO,IAMfW,QACI9B,KAAKsD,KAAO,GAKhB,iBACI,OAAOtD,KAAKK,YAKhB4B,UACQjC,KAAKK,cAGTL,KAAKK,aAAc,EACnB,EAAAD,OAAA,UAAiBJ,MACjBA,KAAK8B,U,ICwRT,E,WAxXG,MAAM2B,EAIT3D,YAAYC,EAAU,IAClBC,KAAK0D,OAAS,GACd1D,KAAKK,aAAc,EACnBL,KAAKG,SAAW,IAAI,EAAAC,OAAOJ,WACJ,IAAnBD,EAAQS,SACR,IAAAmD,MAAK5D,EAAQS,QAAQI,IACjBZ,KAAK0D,OAAO/B,KAAKf,MAGzBZ,KAAKM,SAAWP,EAAQQ,SAAW,EAAQA,QAK/C,WACI,MAAO,OAKX,cACI,OAAOP,KAAKG,SAKhB,aACI,OAAOH,KAAK0D,OAAO1B,OAKvB,iBACI,OAAOhC,KAAKK,YAKhB4B,UACQjC,KAAKK,cAGTL,KAAKK,aAAc,EACnB,EAAAD,OAAA,UAAiBJ,MACjBA,KAAK8B,SAaT8B,OACI,OAAO,IAAI,EAAAC,cAAc7D,KAAK0D,QAYlC5C,IAAIuC,GACA,OAAOrD,KAAK0D,OAAOL,GAkBvB3C,IAAI2C,EAAOzC,GACP,MAAMO,EAAWnB,KAAK0D,OAAOL,GAC7B,QAActC,IAAVH,EACA,MAAM,IAAII,MAAM,iCAIhBT,EADYP,KAAKM,UACTa,EAAUP,KAGtBZ,KAAK0D,OAAOL,GAASzC,EACrBZ,KAAKG,SAASc,KAAK,CACfC,KAAM,MACN4C,SAAUT,EACVU,SAAUV,EACVW,UAAW,CAAC7C,GACZ8C,UAAW,CAACrD,MAoBpBe,KAAKf,GACD,MAAMsD,EAAMlE,KAAK0D,OAAO/B,KAAKf,GAQ7B,OAPAZ,KAAKG,SAASc,KAAK,CACfC,KAAM,MACN4C,UAAW,EACXC,SAAU/D,KAAKgC,OAAS,EACxBgC,UAAW,GACXC,UAAW,CAACrD,KAETsD,EAuBXd,OAAOC,EAAOzC,GACV,EAAAuD,SAAA,OAAgBnE,KAAK0D,OAAQL,EAAOzC,GACpCZ,KAAKG,SAASc,KAAK,CACfC,KAAM,MACN4C,UAAW,EACXC,SAAUV,EACVW,UAAW,GACXC,UAAW,CAACrD,KAiBpBwD,YAAYxD,GACR,MAAML,EAAUP,KAAKM,SACf+C,EAAQ,EAAAc,SAAA,eAAwBnE,KAAK0D,QAAQW,GACxC9D,EAAQ8D,EAAMzD,KAGzB,OADAZ,KAAKwD,OAAOH,GACLA,EAmBXG,OAAOH,GACH,MAAMzC,EAAQ,EAAAuD,SAAA,SAAkBnE,KAAK0D,OAAQL,GAC7C,QAActC,IAAVH,EAUJ,OAPAZ,KAAKG,SAASc,KAAK,CACfC,KAAM,SACN4C,SAAUT,EACVU,UAAW,EACXE,UAAW,GACXD,UAAW,CAACpD,KAETA,EAWXkB,QACI,MAAMwC,EAAOtE,KAAK0D,OAAOH,QACzBvD,KAAK0D,OAAO1B,OAAS,EACrBhC,KAAKG,SAASc,KAAK,CACfC,KAAM,SACN4C,SAAU,EACVC,SAAU,EACVE,UAAW,GACXD,UAAWM,IAoBnBC,KAAKC,EAAWC,GACZ,GAAIzE,KAAKgC,QAAU,GAAKwC,IAAcC,EAClC,OAEJ,MAAMjE,EAAS,CAACR,KAAK0D,OAAOc,IAC5B,EAAAL,SAAA,KAAcnE,KAAK0D,OAAQc,EAAWC,GACtCzE,KAAKG,SAASc,KAAK,CACfC,KAAM,OACN4C,SAAUU,EACVT,SAAUU,EACVT,UAAWxD,EACXyD,UAAWzD,IAoBnBkE,QAAQlE,GACJ,MAAMuD,EAAW/D,KAAKgC,OAWtB,OAVA,IAAA2B,MAAKnD,GAAQI,IACTZ,KAAK0D,OAAO/B,KAAKf,MAErBZ,KAAKG,SAASc,KAAK,CACfC,KAAM,MACN4C,UAAW,EACXC,WACAC,UAAW,GACXC,WAAW,IAAAU,SAAQnE,KAEhBR,KAAKgC,OAuBhB4C,UAAUvB,EAAO7C,GACb,MAAMuD,EAAWV,GACjB,IAAAM,MAAKnD,GAAQI,IACT,EAAAuD,SAAA,OAAgBnE,KAAK0D,OAAQL,IAASzC,MAE1CZ,KAAKG,SAASc,KAAK,CACfC,KAAM,MACN4C,UAAW,EACXC,WACAC,UAAW,GACXC,WAAW,IAAAU,SAAQnE,KAqB3BqE,YAAYC,EAAYC,GACpB,MAAMf,EAAYhE,KAAK0D,OAAOH,MAAMuB,EAAYC,GAChD,IAAK,IAAIhD,EAAI+C,EAAY/C,EAAIgD,EAAUhD,IACnC,EAAAoC,SAAA,SAAkBnE,KAAK0D,OAAQoB,GASnC,OAPA9E,KAAKG,SAASc,KAAK,CACfC,KAAM,SACN4C,SAAUgB,EACVf,UAAW,EACXC,YACAC,UAAW,KAERjE,KAAKgC,SAOpB,SAAWpC,GAOPA,EAAQW,QAHR,SAAiB4B,EAAOC,GACpB,OAAOD,IAAUC,GALzB,CAQG,IAAY,EAAU,KCjYlB,MAAM4C,UAA+BvB,EAIxC3D,YAAYmF,GACR3C,QACAtC,KAAKkF,aAAc,EACnBlF,KAAKmF,aAAc,EACnBnF,KAAKoF,qBAAsB,EAC3BpF,KAAKqF,QAAU,EACfrF,KAAKsF,OAAS,GACdtF,KAAKuF,YAAcN,EACnBjF,KAAKwF,QAAQC,QAAQzF,KAAK0F,eAAgB1F,MAK9C,cACI,OAAOA,KAAKqF,OAASrF,KAAKsF,OAAOtD,OAAS,EAK9C,cACI,OAAOhC,KAAKqF,QAAU,EAQ1BM,uBAAuBC,GACnB5F,KAAKkF,aAAc,EACnBlF,KAAKmF,aAA6B,IAAfS,EACnB5F,KAAKoF,qBAAsB,EAK/BS,uBACI7F,KAAKkF,aAAc,EACnBlF,KAAKmF,aAAc,EACfnF,KAAKoF,qBACLpF,KAAKqF,SAMbS,OACI,IAAK9F,KAAK+F,QACN,OAEJ,MAAMC,EAAUhG,KAAKsF,OAAOtF,KAAKqF,QACjCrF,KAAKmF,aAAc,EACnB,IAAK,MAAMc,KAAUD,EAAQE,UACzBlG,KAAKmG,YAAYF,GAErBjG,KAAKmF,aAAc,EACnBnF,KAAKqF,SAKTe,OACI,IAAKpG,KAAKqG,QACN,OAEJrG,KAAKqF,SACL,MAAMW,EAAUhG,KAAKsF,OAAOtF,KAAKqF,QACjCrF,KAAKmF,aAAc,EACnB,IAAK,MAAMc,KAAUD,EACjBhG,KAAKsG,YAAYL,GAErBjG,KAAKmF,aAAc,EAKvBoB,YACIvG,KAAKqF,QAAU,EACfrF,KAAKsF,OAAS,GAKlBI,eAAec,EAAMP,GACjB,GAAIjG,KAAKkC,aAAelC,KAAKmF,YACzB,OAGCnF,KAAKkF,aAAgBlF,KAAKoF,sBAC3BpF,KAAKsF,OAAStF,KAAKsF,OAAO/B,MAAM,EAAGvD,KAAKqF,OAAS,IAGrD,MAAMoB,EAAMzG,KAAK0G,YAAYT,GAEzBjG,KAAKsF,OAAOtF,KAAKqF,OAAS,GAC1BrF,KAAKsF,OAAOtF,KAAKqF,OAAS,GAAG1D,KAAK8E,GAGlCzG,KAAKsF,OAAO3D,KAAK,CAAC8E,IAGjBzG,KAAKkF,YAINlF,KAAKoF,qBAAsB,EAH3BpF,KAAKqF,SASbc,YAAYF,GACR,IAAI5C,EAAQ,EACZ,MAAM4B,EAAajF,KAAKuF,YACxB,OAAQU,EAAO/E,MACX,IAAK,OACD,IAAAyC,MAAKsC,EAAOhC,WAAW,KACnBjE,KAAKwD,OAAOyC,EAAOlC,aAEvB,MACJ,IAAK,MACDV,EAAQ4C,EAAOnC,UACf,IAAAH,MAAKsC,EAAOjC,WAAWpD,IACnBZ,KAAKU,IAAI2C,IAAS4B,EAAW0B,SAAS/F,OAE1C,MACJ,IAAK,SACDyC,EAAQ4C,EAAOnC,UACf,IAAAH,MAAKsC,EAAOjC,WAAWpD,IACnBZ,KAAKoD,OAAOC,IAAS4B,EAAW0B,SAAS/F,OAE7C,MACJ,IAAK,OACDZ,KAAKuE,KAAK0B,EAAOlC,SAAUkC,EAAOnC,UAClC,MACJ,QACI,QAMZwC,YAAYL,GACR,IAAI5C,EAAQ,EACZ,MAAM4B,EAAajF,KAAKuF,YACxB,OAAQU,EAAO/E,MACX,IAAK,MACDmC,EAAQ4C,EAAOlC,UACf,IAAAJ,MAAKsC,EAAOhC,WAAWrD,IACnBZ,KAAKoD,OAAOC,IAAS4B,EAAW0B,SAAS/F,OAE7C,MACJ,IAAK,MACDyC,EAAQ4C,EAAOlC,UACf,IAAAJ,MAAKsC,EAAOhC,WAAWrD,IACnBZ,KAAKU,IAAIuF,EAAOlC,WAAYkB,EAAW0B,SAAS/F,OAEpD,MACJ,IAAK,UACD,IAAA+C,MAAKsC,EAAOjC,WAAW,KACnBhE,KAAKwD,OAAOyC,EAAOnC,aAEvB,MACJ,IAAK,OACD9D,KAAKuE,KAAK0B,EAAOnC,SAAUmC,EAAOlC,UAClC,MACJ,QACI,QAMZ2C,YAAYT,GACR,MAAMjC,EAAY,IAClB,IAAAL,MAAKsC,EAAOjC,WAAWpD,IACnBoD,EAAUrC,KAAK3B,KAAKuF,YAAY/C,OAAO5B,OAE3C,MAAMqD,EAAY,GAIlB,OAHA,IAAAN,MAAKsC,EAAOhC,WAAWrD,IACnBqD,EAAUtC,KAAK3B,KAAKuF,YAAY/C,OAAO5B,OAEpC,CACHM,KAAM+E,EAAO/E,KACb4C,SAAUmC,EAAOnC,SACjBC,SAAUkC,EAAOlC,SACjBC,YACAC,eAOZ,SAAWe,GAkBPA,EAAuB4B,mBAdvB,MAIIpE,OAAO5B,GACH,OAAOA,EAKX+F,SAAS/F,GACL,OAAOA,IAfnB,CAmBGoE,IAA2BA,EAAyB,KCpNhD,MAAM6B,EAMT/G,YAAYgH,EAAe,MACvB9G,KAAK+G,OAAS,KACd/G,KAAKG,SAAW,IAAI,EAAAC,OAAOJ,MAC3BA,KAAKK,aAAc,EACnBL,KAAK+G,OAASD,EAKlB,WACI,MAAO,QAKX,iBACI,OAAO9G,KAAKK,YAKhB,cACI,OAAOL,KAAKG,SAKhBW,MACI,OAAOd,KAAK+G,OAKhBrG,IAAIE,GACA,MAAMO,EAAWnB,KAAK+G,OAClB,EAAAxE,QAAA,UAAkBpB,EAAUP,KAGhCZ,KAAK+G,OAASnG,EACdZ,KAAKG,SAASc,KAAK,CACfE,SAAUA,EACVC,SAAUR,KAMlBqB,UACQjC,KAAKK,cAGTL,KAAKK,aAAc,EACnB,EAAAD,OAAA,UAAiBJ,MACjBA,KAAK+G,OAAS,QAMtB,SAAWF,GAMPA,EAAgBG,aAFhB,QAJJ,CAOGH,IAAoBA,EAAkB,KAIlC,MAAMI,EAITnH,YAAYC,EAAU,IAKlBC,KAAKkH,gBAAiB,EAItBlH,KAAKmH,iBAAkB,EAMvBnH,KAAKoH,UAAYC,QAAQC,aAAQ,GACjCtH,KAAKuH,YAAa,EAClBvH,KAAKK,aAAc,EACnBL,KAAKwH,aAAe,IAAI,EAAAC,cACxBzH,KAAK0H,UAAY3H,EAAQ4H,UAAY,GACjC5H,EAAQ6H,OACR5H,KAAK6H,IAAM9H,EAAQ6H,QAGnB5H,KAAK6H,IAAM,IAAIhI,EACfG,KAAKuH,YAAa,GAQ1B,eACI,OAAOvH,KAAK0H,UAKhB,iBACI,OAAO1H,KAAKK,YAShBS,IAAIgH,GACA,OAAO9H,KAAK6H,IAAI/G,IAAId,KAAK+H,aAAaD,IAS1CzG,IAAIyG,GACA,OAAO9H,KAAK6H,IAAIxG,IAAIrB,KAAK+H,aAAaD,IAS1CE,aAAaF,GACT,MAAMG,EAAM,IAAIlF,EAGhB,OAFA/C,KAAKwH,aAAaU,IAAID,GACtBjI,KAAKU,IAAIoH,EAAMG,GACRA,EAaXE,WAAWL,GACP,MAAMM,EAAM,IAAIpD,EAAuB,IAAIA,EAAuB4B,oBAGlE,OAFA5G,KAAKwH,aAAaU,IAAIE,GACtBpI,KAAKU,IAAIoH,EAAMM,GACRA,EAaXC,UAAUP,GACN,MAAMQ,EAAM,IAAIjG,EAGhB,OAFArC,KAAKwH,aAAaU,IAAII,GACtBtI,KAAKU,IAAIoH,EAAMQ,GACRA,EASXC,YAAYT,GACR,MAAMU,EAAM,IAAI3B,EAGhB,OAFA7G,KAAKwH,aAAaU,IAAIM,GACtBxI,KAAKU,IAAIoH,EAAMU,GACRA,EAQXC,SAASX,GACL,MAAMU,EAAMxI,KAAKc,IAAIgH,GACrB,IAAKU,GAAoB,UAAbA,EAAItH,KACZ,MAAMF,MAAM,iDAEhB,OAAOwH,EAAI1H,MAUf4H,SAASZ,EAAMlH,GACX,MAAM4H,EAAMxI,KAAKc,IAAIgH,GACrB,IAAKU,GAAoB,UAAbA,EAAItH,KACZ,MAAMF,MAAM,gDAEhBwH,EAAI9H,IAAIE,GAUZ+H,KAAKhB,GACD,MAAMgB,EAAO,IAAI1B,EAAQ,CAAEU,WAAUC,OAAQ5H,OAE7C,OADAA,KAAKwH,aAAaU,IAAIS,GACfA,EAWXjI,IAAIoH,EAAMlH,GACNZ,KAAK6H,IAAInH,IAAIV,KAAK+H,aAAaD,GAAOlH,GAK1CqB,UACQjC,KAAKkC,aAGTlC,KAAKK,aAAc,EACfL,KAAKuH,YACLvH,KAAK6H,IAAI5F,UAEbjC,KAAKwH,aAAavF,WAKtB8F,aAAaD,GAIT,OAHI9H,KAAK0H,YACLI,EAAO9H,KAAK0H,UAAY,IAAMI,GAE3BA","file":"5942.290ff0f9fd2a9fb8a1f8.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of IObservbleMap<T>.\n */\nexport class ObservableMap {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._map = new Map();\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n        if (options.values) {\n            for (const key in options.values) {\n                this._map.set(key, options.values[key]);\n            }\n        }\n    }\n    /**\n     * The type of the Observable.\n     */\n    get type() {\n        return 'Map';\n    }\n    /**\n     * A signal emitted when the map has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Whether this map has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The number of key-value pairs in the map.\n     */\n    get size() {\n        return this._map.size;\n    }\n    /**\n     * Set a key-value pair in the map\n     *\n     * @param key - The key to set.\n     *\n     * @param value - The value for the key.\n     *\n     * @returns the old value for the key, or undefined\n     *   if that did not exist.\n     *\n     * @throws if the new value is undefined.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    set(key, value) {\n        const oldVal = this._map.get(key);\n        if (value === undefined) {\n            throw Error('Cannot set an undefined value, use remove');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (oldVal !== undefined && itemCmp(oldVal, value)) {\n            return oldVal;\n        }\n        this._map.set(key, value);\n        this._changed.emit({\n            type: oldVal ? 'change' : 'add',\n            key: key,\n            oldValue: oldVal,\n            newValue: value\n        });\n        return oldVal;\n    }\n    /**\n     * Get a value for a given key.\n     *\n     * @param key - the key.\n     *\n     * @returns the value for that key.\n     */\n    get(key) {\n        return this._map.get(key);\n    }\n    /**\n     * Check whether the map has a key.\n     *\n     * @param key - the key to check.\n     *\n     * @returns `true` if the map has the key, `false` otherwise.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n    /**\n     * Get a list of the keys in the map.\n     *\n     * @returns - a list of keys.\n     */\n    keys() {\n        const keyList = [];\n        this._map.forEach((v, k) => {\n            keyList.push(k);\n        });\n        return keyList;\n    }\n    /**\n     * Get a list of the values in the map.\n     *\n     * @returns - a list of values.\n     */\n    values() {\n        const valList = [];\n        this._map.forEach((v, k) => {\n            valList.push(v);\n        });\n        return valList;\n    }\n    /**\n     * Remove a key from the map\n     *\n     * @param key - the key to remove.\n     *\n     * @returns the value of the given key,\n     *   or undefined if that does not exist.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    delete(key) {\n        const oldVal = this._map.get(key);\n        const removed = this._map.delete(key);\n        if (removed) {\n            this._changed.emit({\n                type: 'remove',\n                key: key,\n                oldValue: oldVal,\n                newValue: undefined\n            });\n        }\n        return oldVal;\n    }\n    /**\n     * Set the ObservableMap to an empty map.\n     */\n    clear() {\n        // Delete one by one to emit the correct signals.\n        const keyList = this.keys();\n        for (let i = 0; i < keyList.length; i++) {\n            this.delete(keyList[i]);\n        }\n    }\n    /**\n     * Dispose of the resources held by the map.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this._map.clear();\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item comparator.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablemap.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JSONExt } from '@lumino/coreutils';\nimport { Message } from '@lumino/messaging';\nimport { ObservableMap } from './observablemap';\n/**\n * A concrete Observable map for JSON data.\n */\nexport class ObservableJSON extends ObservableMap {\n    /**\n     * Construct a new observable JSON object.\n     */\n    constructor(options = {}) {\n        super({\n            itemCmp: JSONExt.deepEqual,\n            values: options.values\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const out = Object.create(null);\n        const keys = this.keys();\n        for (const key of keys) {\n            const value = this.get(key);\n            if (value !== undefined) {\n                out[key] = JSONExt.deepCopy(value);\n            }\n        }\n        return out;\n    }\n}\n/**\n * The namespace for ObservableJSON static data.\n */\n(function (ObservableJSON) {\n    /**\n     * An observable JSON change message.\n     */\n    class ChangeMessage extends Message {\n        /**\n         * Create a new metadata changed message.\n         */\n        constructor(type, args) {\n            super(type);\n            this.args = args;\n        }\n    }\n    ObservableJSON.ChangeMessage = ChangeMessage;\n})(ObservableJSON || (ObservableJSON = {}));\n//# sourceMappingURL=observablejson.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of [[IObservableString]]\n */\nexport class ObservableString {\n    /**\n     * Construct a new observable string.\n     */\n    constructor(initialText = '') {\n        this._text = '';\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        this._text = initialText;\n    }\n    /**\n     * The type of the Observable.\n     */\n    get type() {\n        return 'String';\n    }\n    /**\n     * A signal emitted when the string has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Set the value of the string.\n     */\n    set text(value) {\n        if (value.length === this._text.length && value === this._text) {\n            return;\n        }\n        this._text = value;\n        this._changed.emit({\n            type: 'set',\n            start: 0,\n            end: value.length,\n            value: value\n        });\n    }\n    /**\n     * Get the value of the string.\n     */\n    get text() {\n        return this._text;\n    }\n    /**\n     * Insert a substring.\n     *\n     * @param index - The starting index.\n     *\n     * @param text - The substring to insert.\n     */\n    insert(index, text) {\n        this._text = this._text.slice(0, index) + text + this._text.slice(index);\n        this._changed.emit({\n            type: 'insert',\n            start: index,\n            end: index + text.length,\n            value: text\n        });\n    }\n    /**\n     * Remove a substring.\n     *\n     * @param start - The starting index.\n     *\n     * @param end - The ending index.\n     */\n    remove(start, end) {\n        const oldValue = this._text.slice(start, end);\n        this._text = this._text.slice(0, start) + this._text.slice(end);\n        this._changed.emit({\n            type: 'remove',\n            start: start,\n            end: end,\n            value: oldValue\n        });\n    }\n    /**\n     * Set the ObservableString to an empty string.\n     */\n    clear() {\n        this.text = '';\n    }\n    /**\n     * Test whether the string has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the string.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this.clear();\n    }\n}\n//# sourceMappingURL=observablestring.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt, ArrayIterator, each, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of [[IObservableList]].\n */\nexport class ObservableList {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._array = [];\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        if (options.values !== void 0) {\n            each(options.values, value => {\n                this._array.push(value);\n            });\n        }\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n    }\n    /**\n     * The type of this object.\n     */\n    get type() {\n        return 'List';\n    }\n    /**\n     * A signal emitted when the list has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The length of the list.\n     */\n    get length() {\n        return this._array.length;\n    }\n    /**\n     * Test whether the list has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the list.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this.clear();\n    }\n    /**\n     * Create an iterator over the values in the list.\n     *\n     * @returns A new iterator starting at the front of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    iter() {\n        return new ArrayIterator(this._array);\n    }\n    /**\n     * Get the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @returns The value at the specified index.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    get(index) {\n        return this._array[index];\n    }\n    /**\n     * Set the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    set(index, value) {\n        const oldValue = this._array[index];\n        if (value === undefined) {\n            throw new Error('Cannot set an undefined item');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (itemCmp(oldValue, value)) {\n            return;\n        }\n        this._array[index] = value;\n        this._changed.emit({\n            type: 'set',\n            oldIndex: index,\n            newIndex: index,\n            oldValues: [oldValue],\n            newValues: [value]\n        });\n    }\n    /**\n     * Add a value to the end of the list.\n     *\n     * @param value - The value to add to the end of the list.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Notes\n     * By convention, the oldIndex is set to -1 to indicate\n     * an push operation.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    push(value) {\n        const num = this._array.push(value);\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex: this.length - 1,\n            oldValues: [],\n            newValues: [value]\n        });\n        return num;\n    }\n    /**\n     * Insert a value into the list at a specific index.\n     *\n     * @param index - The index at which to insert the value.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     * By convention, the oldIndex is set to -2 to indicate\n     * an insert operation.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    insert(index, value) {\n        ArrayExt.insert(this._array, index, value);\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -2,\n            newIndex: index,\n            oldValues: [],\n            newValues: [value]\n        });\n    }\n    /**\n     * Remove the first occurrence of a value from the list.\n     *\n     * @param value - The value of interest.\n     *\n     * @returns The index of the removed value, or `-1` if the value\n     *   is not contained in the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     */\n    removeValue(value) {\n        const itemCmp = this._itemCmp;\n        const index = ArrayExt.findFirstIndex(this._array, item => {\n            return itemCmp(item, value);\n        });\n        this.remove(index);\n        return index;\n    }\n    /**\n     * Remove and return the value at a specific index.\n     *\n     * @param index - The index of the value of interest.\n     *\n     * @returns The value at the specified index, or `undefined` if the\n     *   index is out of range.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    remove(index) {\n        const value = ArrayExt.removeAt(this._array, index);\n        if (value === undefined) {\n            return;\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: index,\n            newIndex: -1,\n            newValues: [],\n            oldValues: [value]\n        });\n        return value;\n    }\n    /**\n     * Remove all values from the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * All current iterators are invalidated.\n     */\n    clear() {\n        const copy = this._array.slice();\n        this._array.length = 0;\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: 0,\n            newIndex: 0,\n            newValues: [],\n            oldValues: copy\n        });\n    }\n    /**\n     * Move a value from one index to another.\n     *\n     * @parm fromIndex - The index of the element to move.\n     *\n     * @param toIndex - The index to move the element to.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the lesser of the `fromIndex` and the `toIndex`\n     * and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * A `fromIndex` or a `toIndex` which is non-integral.\n     */\n    move(fromIndex, toIndex) {\n        if (this.length <= 1 || fromIndex === toIndex) {\n            return;\n        }\n        const values = [this._array[fromIndex]];\n        ArrayExt.move(this._array, fromIndex, toIndex);\n        this._changed.emit({\n            type: 'move',\n            oldIndex: fromIndex,\n            newIndex: toIndex,\n            oldValues: values,\n            newValues: values\n        });\n    }\n    /**\n     * Push a set of values to the back of the list.\n     *\n     * @param values - An iterable or array-like set of values to add.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Notes\n     * By convention, the oldIndex is set to -1 to indicate\n     * an push operation.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    pushAll(values) {\n        const newIndex = this.length;\n        each(values, value => {\n            this._array.push(value);\n        });\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex,\n            oldValues: [],\n            newValues: toArray(values)\n        });\n        return this.length;\n    }\n    /**\n     * Insert a set of items into the list at the specified index.\n     *\n     * @param index - The index at which to insert the values.\n     *\n     * @param values - The values to insert at the specified index.\n     *\n     * #### Complexity.\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     * By convention, the oldIndex is set to -2 to indicate\n     * an insert operation.\n     *\n     * #### Undefined Behavior.\n     * An `index` which is non-integral.\n     */\n    insertAll(index, values) {\n        const newIndex = index;\n        each(values, value => {\n            ArrayExt.insert(this._array, index++, value);\n        });\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -2,\n            newIndex,\n            oldValues: [],\n            newValues: toArray(values)\n        });\n    }\n    /**\n     * Remove a range of items from the list.\n     *\n     * @param startIndex - The start index of the range to remove (inclusive).\n     *\n     * @param endIndex - The end index of the range to remove (exclusive).\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing to the first removed value and beyond are invalid.\n     *\n     * #### Undefined Behavior\n     * A `startIndex` or `endIndex` which is non-integral.\n     */\n    removeRange(startIndex, endIndex) {\n        const oldValues = this._array.slice(startIndex, endIndex);\n        for (let i = startIndex; i < endIndex; i++) {\n            ArrayExt.removeAt(this._array, startIndex);\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: startIndex,\n            newIndex: -1,\n            oldValues,\n            newValues: []\n        });\n        return this.length;\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item cmp.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablelist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { each } from '@lumino/algorithm';\nimport { ObservableList } from './observablelist';\n/**\n * A concrete implementation of an observable undoable list.\n */\nexport class ObservableUndoableList extends ObservableList {\n    /**\n     * Construct a new undoable observable list.\n     */\n    constructor(serializer) {\n        super();\n        this._inCompound = false;\n        this._isUndoable = true;\n        this._madeCompoundChange = false;\n        this._index = -1;\n        this._stack = [];\n        this._serializer = serializer;\n        this.changed.connect(this._onListChanged, this);\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    get canRedo() {\n        return this._index < this._stack.length - 1;\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    get canUndo() {\n        return this._index >= 0;\n    }\n    /**\n     * Begin a compound operation.\n     *\n     * @param isUndoAble - Whether the operation is undoable.\n     *   The default is `true`.\n     */\n    beginCompoundOperation(isUndoAble) {\n        this._inCompound = true;\n        this._isUndoable = isUndoAble !== false;\n        this._madeCompoundChange = false;\n    }\n    /**\n     * End a compound operation.\n     */\n    endCompoundOperation() {\n        this._inCompound = false;\n        this._isUndoable = true;\n        if (this._madeCompoundChange) {\n            this._index++;\n        }\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        if (!this.canUndo) {\n            return;\n        }\n        const changes = this._stack[this._index];\n        this._isUndoable = false;\n        for (const change of changes.reverse()) {\n            this._undoChange(change);\n        }\n        this._isUndoable = true;\n        this._index--;\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        if (!this.canRedo) {\n            return;\n        }\n        this._index++;\n        const changes = this._stack[this._index];\n        this._isUndoable = false;\n        for (const change of changes) {\n            this._redoChange(change);\n        }\n        this._isUndoable = true;\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndo() {\n        this._index = -1;\n        this._stack = [];\n    }\n    /**\n     * Handle a change in the list.\n     */\n    _onListChanged(list, change) {\n        if (this.isDisposed || !this._isUndoable) {\n            return;\n        }\n        // Clear everything after this position if necessary.\n        if (!this._inCompound || !this._madeCompoundChange) {\n            this._stack = this._stack.slice(0, this._index + 1);\n        }\n        // Copy the change.\n        const evt = this._copyChange(change);\n        // Put the change in the stack.\n        if (this._stack[this._index + 1]) {\n            this._stack[this._index + 1].push(evt);\n        }\n        else {\n            this._stack.push([evt]);\n        }\n        // If not in a compound operation, increase index.\n        if (!this._inCompound) {\n            this._index++;\n        }\n        else {\n            this._madeCompoundChange = true;\n        }\n    }\n    /**\n     * Undo a change event.\n     */\n    _undoChange(change) {\n        let index = 0;\n        const serializer = this._serializer;\n        switch (change.type) {\n            case 'add':\n                each(change.newValues, () => {\n                    this.remove(change.newIndex);\n                });\n                break;\n            case 'set':\n                index = change.oldIndex;\n                each(change.oldValues, value => {\n                    this.set(index++, serializer.fromJSON(value));\n                });\n                break;\n            case 'remove':\n                index = change.oldIndex;\n                each(change.oldValues, value => {\n                    this.insert(index++, serializer.fromJSON(value));\n                });\n                break;\n            case 'move':\n                this.move(change.newIndex, change.oldIndex);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Redo a change event.\n     */\n    _redoChange(change) {\n        let index = 0;\n        const serializer = this._serializer;\n        switch (change.type) {\n            case 'add':\n                index = change.newIndex;\n                each(change.newValues, value => {\n                    this.insert(index++, serializer.fromJSON(value));\n                });\n                break;\n            case 'set':\n                index = change.newIndex;\n                each(change.newValues, value => {\n                    this.set(change.newIndex++, serializer.fromJSON(value));\n                });\n                break;\n            case 'remove':\n                each(change.oldValues, () => {\n                    this.remove(change.oldIndex);\n                });\n                break;\n            case 'move':\n                this.move(change.oldIndex, change.newIndex);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Copy a change as JSON.\n     */\n    _copyChange(change) {\n        const oldValues = [];\n        each(change.oldValues, value => {\n            oldValues.push(this._serializer.toJSON(value));\n        });\n        const newValues = [];\n        each(change.newValues, value => {\n            newValues.push(this._serializer.toJSON(value));\n        });\n        return {\n            type: change.type,\n            oldIndex: change.oldIndex,\n            newIndex: change.newIndex,\n            oldValues,\n            newValues\n        };\n    }\n}\n/**\n * Namespace for ObservableUndoableList utilities.\n */\n(function (ObservableUndoableList) {\n    /**\n     * A default, identity serializer.\n     */\n    class IdentitySerializer {\n        /**\n         * Identity serialize.\n         */\n        toJSON(value) {\n            return value;\n        }\n        /**\n         * Identity deserialize.\n         */\n        fromJSON(value) {\n            return value;\n        }\n    }\n    ObservableUndoableList.IdentitySerializer = IdentitySerializer;\n})(ObservableUndoableList || (ObservableUndoableList = {}));\n//# sourceMappingURL=undoablelist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DisposableSet } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\nimport { JSONExt } from '@lumino/coreutils';\nimport { ObservableMap } from './observablemap';\nimport { ObservableJSON } from './observablejson';\nimport { ObservableString } from './observablestring';\nimport { ObservableUndoableList } from './undoablelist';\n/**\n * A concrete implementation of an `IObservableValue`.\n */\nexport class ObservableValue {\n    /**\n     * Constructor for the value.\n     *\n     * @param initialValue: the starting value for the `ObservableValue`.\n     */\n    constructor(initialValue = null) {\n        this._value = null;\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._value = initialValue;\n    }\n    /**\n     * The observable type.\n     */\n    get type() {\n        return 'Value';\n    }\n    /**\n     * Whether the value has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the current value, or `undefined` if it has not been set.\n     */\n    get() {\n        return this._value;\n    }\n    /**\n     * Set the current value.\n     */\n    set(value) {\n        const oldValue = this._value;\n        if (JSONExt.deepEqual(oldValue, value)) {\n            return;\n        }\n        this._value = value;\n        this._changed.emit({\n            oldValue: oldValue,\n            newValue: value\n        });\n    }\n    /**\n     * Dispose of the resources held by the value.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this._value = null;\n    }\n}\n/**\n * The namespace for the `ObservableValue` class statics.\n */\n(function (ObservableValue) {\n    /**\n     * The changed args object emitted by the `IObservableValue`.\n     */\n    class IChangedArgs {\n    }\n    ObservableValue.IChangedArgs = IChangedArgs;\n})(ObservableValue || (ObservableValue = {}));\n/**\n * A concrete implementation of an `IModelDB`.\n */\nexport class ModelDB {\n    /**\n     * Constructor for the `ModelDB`.\n     */\n    constructor(options = {}) {\n        /**\n         * Whether the model has been populated with\n         * any model values.\n         */\n        this.isPrepopulated = false;\n        /**\n         * Whether the model is collaborative.\n         */\n        this.isCollaborative = false;\n        /**\n         * A promise resolved when the model is connected\n         * to its backend. For the in-memory ModelDB it\n         * is immediately resolved.\n         */\n        this.connected = Promise.resolve(void 0);\n        this._toDispose = false;\n        this._isDisposed = false;\n        this._disposables = new DisposableSet();\n        this._basePath = options.basePath || '';\n        if (options.baseDB) {\n            this._db = options.baseDB;\n        }\n        else {\n            this._db = new ObservableMap();\n            this._toDispose = true;\n        }\n    }\n    /**\n     * The base path for the `ModelDB`. This is prepended\n     * to all the paths that are passed in to the member\n     * functions of the object.\n     */\n    get basePath() {\n        return this._basePath;\n    }\n    /**\n     * Whether the database is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Get a value for a path.\n     *\n     * @param path: the path for the object.\n     *\n     * @returns an `IObservable`.\n     */\n    get(path) {\n        return this._db.get(this._resolvePath(path));\n    }\n    /**\n     * Whether the `IModelDB` has an object at this path.\n     *\n     * @param path: the path for the object.\n     *\n     * @returns a boolean for whether an object is at `path`.\n     */\n    has(path) {\n        return this._db.has(this._resolvePath(path));\n    }\n    /**\n     * Create a string and insert it in the database.\n     *\n     * @param path: the path for the string.\n     *\n     * @returns the string that was created.\n     */\n    createString(path) {\n        const str = new ObservableString();\n        this._disposables.add(str);\n        this.set(path, str);\n        return str;\n    }\n    /**\n     * Create an undoable list and insert it in the database.\n     *\n     * @param path: the path for the list.\n     *\n     * @returns the list that was created.\n     *\n     * #### Notes\n     * The list can only store objects that are simple\n     * JSON Objects and primitives.\n     */\n    createList(path) {\n        const vec = new ObservableUndoableList(new ObservableUndoableList.IdentitySerializer());\n        this._disposables.add(vec);\n        this.set(path, vec);\n        return vec;\n    }\n    /**\n     * Create a map and insert it in the database.\n     *\n     * @param path: the path for the map.\n     *\n     * @returns the map that was created.\n     *\n     * #### Notes\n     * The map can only store objects that are simple\n     * JSON Objects and primitives.\n     */\n    createMap(path) {\n        const map = new ObservableJSON();\n        this._disposables.add(map);\n        this.set(path, map);\n        return map;\n    }\n    /**\n     * Create an opaque value and insert it in the database.\n     *\n     * @param path: the path for the value.\n     *\n     * @returns the value that was created.\n     */\n    createValue(path) {\n        const val = new ObservableValue();\n        this._disposables.add(val);\n        this.set(path, val);\n        return val;\n    }\n    /**\n     * Get a value at a path, or `undefined if it has not been set\n     * That value must already have been created using `createValue`.\n     *\n     * @param path: the path for the value.\n     */\n    getValue(path) {\n        const val = this.get(path);\n        if (!val || val.type !== 'Value') {\n            throw Error('Can only call getValue for an ObservableValue');\n        }\n        return val.get();\n    }\n    /**\n     * Set a value at a path. That value must already have\n     * been created using `createValue`.\n     *\n     * @param path: the path for the value.\n     *\n     * @param value: the new value.\n     */\n    setValue(path, value) {\n        const val = this.get(path);\n        if (!val || val.type !== 'Value') {\n            throw Error('Can only call setValue on an ObservableValue');\n        }\n        val.set(value);\n    }\n    /**\n     * Create a view onto a subtree of the model database.\n     *\n     * @param basePath: the path for the root of the subtree.\n     *\n     * @returns an `IModelDB` with a view onto the original\n     *   `IModelDB`, with `basePath` prepended to all paths.\n     */\n    view(basePath) {\n        const view = new ModelDB({ basePath, baseDB: this });\n        this._disposables.add(view);\n        return view;\n    }\n    /**\n     * Set a value at a path. Not intended to\n     * be called by user code, instead use the\n     * `create*` factory methods.\n     *\n     * @param path: the path to set the value at.\n     *\n     * @param value: the value to set at the path.\n     */\n    set(path, value) {\n        this._db.set(this._resolvePath(path), value);\n    }\n    /**\n     * Dispose of the resources held by the database.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        if (this._toDispose) {\n            this._db.dispose();\n        }\n        this._disposables.dispose();\n    }\n    /**\n     * Compute the fully resolved path for a path argument.\n     */\n    _resolvePath(path) {\n        if (this._basePath) {\n            path = this._basePath + '.' + path;\n        }\n        return path;\n    }\n}\n//# sourceMappingURL=modeldb.js.map"],"sourceRoot":""}