{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/activitymonitor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/dataconnector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/markdowncodeblocks.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/nbformat.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/pageconfig.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/path.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/poll.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/ratelimiter.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/restorablepool.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/settingregistry.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/statedb.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/text.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/time.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/@jupyterlab/coreutils/lib/url.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./node_modules/url-parse/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lumino/coreutils/dist/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lumino/disposable/dist/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lumino/properties/dist/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lumino/signaling/dist/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/path-posix/index.js"],"names":["Object","defineProperty","exports","value","signaling_1","ActivityMonitor","constructor","options","this","_timer","_timeout","_isDisposed","_activityStopped","Signal","signal","connect","_onSignalFired","timeout","dispose","clearData","sender","args","clearTimeout","_sender","_args","setTimeout","emit","DataConnector","query","Error","id","__export","m","p","hasOwnProperty","MarkdownCodeBlocks","CODE_BLOCK_MARKER","markdownExtensions","MarkdownCodeBlock","startLine","code","endLine","isMarkdown","extension","indexOf","findMarkdownCodeBlocks","text","lines","split","codeBlocks","currentBlock","lineIndex","length","line","lineContainsMarker","constructingBlock","push","firstIndex","lastIndex","lastIndexOf","substring","coreutils_1","nbformat","MAJOR_VERSION","MINOR_VERSION","validateMimeValue","type","isJSONType","test","isString","x","prototype","toString","call","Array","isArray","valid","forEach","v","JSONExt","isObject","isRaw","cell","cell_type","isCode","isExecuteResult","output","output_type","isDisplayData","isDisplayUpdate","isStream","isError","__importDefault","mod","__esModule","minimist_1","url_1","PageConfig","getOption","name","configData","getBodyData","create","found","document","el","getElementById","JSON","parse","textContent","cli","default","process","argv","slice","path","fullPath","resolve","eval","e","console","error","key","stringify","setOption","last","getBaseUrl","URLExt","normalize","getTreeUrl","join","getWsUrl","baseUrl","wsUrl","getNBConvertURL","format","download","notebookPath","encodeParts","url","getToken","getNotebookVersion","notebookVersion","Extension","body","val","dataset","decodeURIComponent","populate","raw","map","pattern","rule","RegExp","warn","deferred","disabled","isDeferred","some","isDisabled","__importStar","result","k","posix","PathExt","removeSlash","paths","basename","ext","dirname","dir","extname","stem","pop","shift","parts","relative","from","to","normalizeExtension","defer","requestAnimationFrame","setImmediate","cancel","cancelAnimationFrame","clearImmediate","Poll","_disposed","_tick","PromiseDelegate","_ticked","_factory","factory","_standby","standby","Private","DEFAULT_STANDBY","_state","assign","DEFAULT_STATE","timestamp","Date","getTime","frequency","DEFAULT_FREQUENCY","DEFAULT_NAME","auto","start","_frequency","isDisposed","deepEqual","backoff","interval","max","Math","round","NEVER","MAX_INTERVAL","state","phase","promise","DISPOSED_STATE","catch","_","reject","refresh","schedule","IMMEDIATE","next","pending","scheduled","payload","execute","tick","_execute","stop","hidden","then","resolved","rejected","sleep","Infinity","DEFAULT_BACKOFF","growth","random","min","ceil","floor","getRandomIntInclusive","poll_1","RateLimiter","fn","limit","poll","async","ticked","undefined","Debouncer","Throttler","properties_1","RestorablePool","_added","_current","_currentChanged","_hasRestored","_objects","Set","_restore","_restored","_updated","namespace","obj","has","size","warning","add","disposed","_onInstanceDisposed","injectedProperty","get","connector","objName","data","nameProperty","set","save","clear","find","values","filter","filtered","inject","command","registry","when","promises","list","concat","saved","Promise","all","ids","index","remove","injected","oldName","newName","delete","AttachedProperty","ajv_1","json","disposable_1","plugin_schema_json_1","copy","deepCopy","RECORD_SEPARATOR","String","fromCharCode","DefaultSchemaValidator","_composer","useDefaults","_validator","addSchema","validateData","plugin","validate","getSchema","compose","schema","dataPath","keyword","schemaPath","message","_addSchema","user","SyntaxError","column","description","lineNumber","errors","composite","composer","validator","validateSchema","removeSchema","SettingRegistry","plugins","_pluginChanged","_ready","_transformers","_preload","load","Settings","reload","fetched","fetch","_load","_transform","annotatedPlugin","_save","transform","transforms","transformers","DisposableDelegate","upload","_validate","log","started","elapsed","transformed","_changed","pluginChanged","_onPluginChanged","version","annotatedDefaults","reifyDefault","reconcileShortcuts","defaults","memo","shortcut","keys","selector","indent","nondescript","untitled","reduce","acc","idx","rows","trim","prefix","source","pre","root","properties","property","title","sort","a","b","localeCompare","repeat","props","reified","spaces","str","defaultDocumentedValue","attribute","documentedValue","StateDB","_connector","Connector","transformation","contents","_clear","_merge","_overwrite","_fetch","_list","_remove","_storage","Text","HAS_SURROGATES","jsIndexToCharIndex","jsIdx","charIdx","i","charCode","charCodeAt","nextCharCode","charIndexToJsIndex","camelCase","upper","replace","match","toUpperCase","toLowerCase","titleCase","word","charAt","moment_1","Time","formatHuman","time","fromNow","ISettingRegistry","Token","IStateDB","url_parse_1","createElement","href","top","shorthand","header","protocol","colon","slashes","encodeURIComponent","objectToQueryString","content","queryStringToObject","isLocal","required","qs","protocolre","left","trimLeft","rules","address","NaN","ignore","hash","lolcation","loc","location","window","g","self","finaldestination","Url","unescape","pathname","extractProtocol","exec","rest","parser","extracted","instruction","instructions","base","unshift","up","splice","port","host","hostname","username","password","auth","origin","part","char","ins","module","isPrimitive","first","second","a1","a2","n","deepArrayEqual","firstValue","secondValue","deepObjectEqual","deepArrayCopy","subvalue","deepObjectCopy","emptyObject","freeze","emptyArray","crypto","MimeData","_types","_values","types","hasData","mime","getData","setData","_this","_resolve","_reject","reason","Random","getRandomValues","msCrypto","buffer","randomFillSync","randomBytes","bytes","_tokenStructuralPropertyT","UUID","uuid4","Uint8Array","lut","algorithm","signaling","extendStatics","d","setPrototypeOf","__proto__","__extends","__","ObservableDisposableSet","DisposableSet","_fn","enumerable","configurable","ObservableDisposableDelegate","_super","apply","arguments","_items","item","contains","items","each","_pid","nextPID","_create","_coerce","coerce","_compare","compare","changed","owner","ensureMap","_createValue","oldValue","newValue","_coerceValue","_maybeNotify","_compareValue","ownerData","WeakMap","slot","thisArg","disconnect","disconnectBetween","receiver","disconnectSender","disconnectReceiver","disconnectAll","object","getExceptionHandler","exceptionHandler","setExceptionHandler","handler","old","receivers","receiversForSender","connection","scheduleCleanup","sendersForReceiver","senders","err","findConnection","invokeSlot","dirtySet","connections","array","cleanupDirtySet","cleanupConnections","ArrayExt","removeAllWhere","isDeadConnection","util","normalizeArray","allowAboveRoot","res","splitPathRe","posixSplitPath","filename","resolvedPath","resolvedAbsolute","cwd","TypeError","isAbsolute","trailingSlash","substr","segment","arr","end","fromParts","toParts","samePartsLength","outputParts","_makeLong","f","pathObject","sep","pathString","allParts","delimiter"],"mappings":"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","file":"9622.4e96d8548dab27afc53f.js","sourcesContent":["\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst signaling_1 = require(\"@phosphor/signaling\");\n/**\n * A class that monitors activity on a signal.\n */\nclass ActivityMonitor {\n    /**\n     * Construct a new activity monitor.\n     */\n    constructor(options) {\n        this._timer = -1;\n        this._timeout = -1;\n        this._isDisposed = false;\n        this._activityStopped = new signaling_1.Signal(this);\n        options.signal.connect(this._onSignalFired, this);\n        this._timeout = options.timeout || 1000;\n    }\n    /**\n     * A signal emitted when activity has ceased.\n     */\n    get activityStopped() {\n        return this._activityStopped;\n    }\n    /**\n     * The timeout associated with the monitor, in milliseconds.\n     */\n    get timeout() {\n        return this._timeout;\n    }\n    set timeout(value) {\n        this._timeout = value;\n    }\n    /**\n     * Test whether the monitor has been disposed.\n     *\n     * #### Notes\n     * This is a read-only property.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the activity monitor.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * A signal handler for the monitored signal.\n     */\n    _onSignalFired(sender, args) {\n        clearTimeout(this._timer);\n        this._sender = sender;\n        this._args = args;\n        this._timer = setTimeout(() => {\n            this._activityStopped.emit({\n                sender: this._sender,\n                args: this._args\n            });\n        }, this._timeout);\n    }\n}\nexports.ActivityMonitor = ActivityMonitor;\n//# sourceMappingURL=activitymonitor.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An abstract class that adheres to the data connector interface.\n *\n * @typeparam T - The basic entity response type a service's connector.\n *\n * @typeparam U - The basic entity request type, which is conventionally the\n * same as the response type but may be different if a service's implementation\n * requires input data to be different from output responses. Defaults to `T`.\n *\n * @typeparam V - The basic token applied to a request, conventionally a string\n * ID or filter, but may be set to a different type when an implementation\n * requires it. Defaults to `string`.\n *\n * #### Notes\n * The only abstract method in this class is the `fetch` method, which must be\n * reimplemented by all subclasses. The `remove` and `save` methods have a\n * default implementation that returns a promise that will always reject. This\n * class is a convenience superclass for connectors that only need to `fetch`.\n */\nclass DataConnector {\n    /**\n     * Retrieve the list of items available from the data connector.\n     *\n     * @param query - The optional query filter to apply to the connector request.\n     *\n     * @returns A promise that always rejects with an error.\n     *\n     * #### Notes\n     * Subclasses should reimplement if they support a back-end that can list.\n     */\n    async list(query) {\n        throw new Error('DataConnector#list method has not been implemented.');\n    }\n    /**\n     * Remove a value using the data connector.\n     *\n     * @param id - The identifier for the data being removed.\n     *\n     * @returns A promise that always rejects with an error.\n     *\n     * #### Notes\n     * Subclasses should reimplement if they support a back-end that can remove.\n     */\n    async remove(id) {\n        throw new Error('DataConnector#remove method has not been implemented.');\n    }\n    /**\n     * Save a value using the data connector.\n     *\n     * @param id - The identifier for the data being saved.\n     *\n     * @param value - The data being saved.\n     *\n     * @returns A promise that always rejects with an error.\n     *\n     * #### Notes\n     * Subclasses should reimplement if they support a back-end that can save.\n     */\n    async save(id, value) {\n        throw new Error('DataConnector#save method has not been implemented.');\n    }\n}\nexports.DataConnector = DataConnector;\n//# sourceMappingURL=dataconnector.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./activitymonitor\"));\n__export(require(\"./dataconnector\"));\n__export(require(\"./markdowncodeblocks\"));\n__export(require(\"./nbformat\"));\n__export(require(\"./pageconfig\"));\n__export(require(\"./path\"));\n__export(require(\"./poll\"));\n__export(require(\"./ratelimiter\"));\n__export(require(\"./restorablepool\"));\n__export(require(\"./settingregistry\"));\n__export(require(\"./statedb\"));\n__export(require(\"./text\"));\n__export(require(\"./time\"));\n__export(require(\"./tokens\"));\n__export(require(\"./url\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The namespace for code block functions which help\n * in extract code from markdown text\n */\nvar MarkdownCodeBlocks;\n(function (MarkdownCodeBlocks) {\n    MarkdownCodeBlocks.CODE_BLOCK_MARKER = '```';\n    const markdownExtensions = [\n        '.markdown',\n        '.mdown',\n        '.mkdn',\n        '.md',\n        '.mkd',\n        '.mdwn',\n        '.mdtxt',\n        '.mdtext',\n        '.text',\n        '.txt',\n        '.Rmd'\n    ];\n    class MarkdownCodeBlock {\n        constructor(startLine) {\n            this.startLine = startLine;\n            this.code = '';\n            this.endLine = -1;\n        }\n    }\n    MarkdownCodeBlocks.MarkdownCodeBlock = MarkdownCodeBlock;\n    /**\n     * Check whether the given file extension is a markdown extension\n     * @param extension - A file extension\n     *\n     * @returns true/false depending on whether this is a supported markdown extension\n     */\n    function isMarkdown(extension) {\n        return markdownExtensions.indexOf(extension) > -1;\n    }\n    MarkdownCodeBlocks.isMarkdown = isMarkdown;\n    /**\n     * Construct all code snippets from current text\n     * (this could be potentially optimized if we can cache and detect differences)\n     * @param text - A string to parse codeblocks from\n     *\n     * @returns An array of MarkdownCodeBlocks.\n     */\n    function findMarkdownCodeBlocks(text) {\n        if (!text || text === '') {\n            return [];\n        }\n        const lines = text.split('\\n');\n        const codeBlocks = [];\n        let currentBlock = null;\n        for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n            const line = lines[lineIndex];\n            const lineContainsMarker = line.indexOf(MarkdownCodeBlocks.CODE_BLOCK_MARKER) === 0;\n            const constructingBlock = currentBlock != null;\n            // Skip this line if it is not part of any code block and doesn't contain a marker.\n            if (!lineContainsMarker && !constructingBlock) {\n                continue;\n            }\n            // Check if we are already constructing a code block.\n            if (!constructingBlock) {\n                // Start constructing a new code block.\n                currentBlock = new MarkdownCodeBlock(lineIndex);\n                // Check whether this is a single line code block of the form ```a = 10```.\n                const firstIndex = line.indexOf(MarkdownCodeBlocks.CODE_BLOCK_MARKER);\n                const lastIndex = line.lastIndexOf(MarkdownCodeBlocks.CODE_BLOCK_MARKER);\n                const isSingleLine = firstIndex !== lastIndex;\n                if (isSingleLine) {\n                    currentBlock.code = line.substring(firstIndex + MarkdownCodeBlocks.CODE_BLOCK_MARKER.length, lastIndex);\n                    currentBlock.endLine = lineIndex;\n                    codeBlocks.push(currentBlock);\n                    currentBlock = null;\n                }\n            }\n            else if (currentBlock) {\n                if (lineContainsMarker) {\n                    // End of block, finish it up.\n                    currentBlock.endLine = lineIndex - 1;\n                    codeBlocks.push(currentBlock);\n                    currentBlock = null;\n                }\n                else {\n                    // Append the current line.\n                    currentBlock.code += line + '\\n';\n                }\n            }\n        }\n        return codeBlocks;\n    }\n    MarkdownCodeBlocks.findMarkdownCodeBlocks = findMarkdownCodeBlocks;\n})(MarkdownCodeBlocks = exports.MarkdownCodeBlocks || (exports.MarkdownCodeBlocks = {}));\n//# sourceMappingURL=markdowncodeblocks.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Notebook format interfaces\n// https://nbformat.readthedocs.io/en/latest/format_description.html\n// https://github.com/jupyter/nbformat/blob/master/nbformat/v4/nbformat.v4.schema.json\nconst coreutils_1 = require(\"@phosphor/coreutils\");\n/**\n * A namespace for nbformat interfaces.\n */\nvar nbformat;\n(function (nbformat) {\n    /**\n     * The major version of the notebook format.\n     */\n    nbformat.MAJOR_VERSION = 4;\n    /**\n     * The minor version of the notebook format.\n     */\n    nbformat.MINOR_VERSION = 4;\n    /**\n     * Validate a mime type/value pair.\n     *\n     * @param type - The mimetype name.\n     *\n     * @param value - The value associated with the type.\n     *\n     * @returns Whether the type/value pair are valid.\n     */\n    function validateMimeValue(type, value) {\n        // Check if \"application/json\" or \"application/foo+json\"\n        const jsonTest = /^application\\/(.*?)+\\+json$/;\n        const isJSONType = type === 'application/json' || jsonTest.test(type);\n        let isString = (x) => {\n            return Object.prototype.toString.call(x) === '[object String]';\n        };\n        // If it is an array, make sure if is not a JSON type and it is an\n        // array of strings.\n        if (Array.isArray(value)) {\n            if (isJSONType) {\n                return false;\n            }\n            let valid = true;\n            value.forEach(v => {\n                if (!isString(v)) {\n                    valid = false;\n                }\n            });\n            return valid;\n        }\n        // If it is a string, make sure we are not a JSON type.\n        if (isString(value)) {\n            return !isJSONType;\n        }\n        // It is not a string, make sure it is a JSON type.\n        if (!isJSONType) {\n            return false;\n        }\n        // It is a JSON type, make sure it is a valid JSON object.\n        return coreutils_1.JSONExt.isObject(value);\n    }\n    nbformat.validateMimeValue = validateMimeValue;\n    /**\n     * Test whether a cell is a raw cell.\n     */\n    function isRaw(cell) {\n        return cell.cell_type === 'raw';\n    }\n    nbformat.isRaw = isRaw;\n    /**\n     * Test whether a cell is a markdown cell.\n     */\n    function isMarkdown(cell) {\n        return cell.cell_type === 'markdown';\n    }\n    nbformat.isMarkdown = isMarkdown;\n    /**\n     * Test whether a cell is a code cell.\n     */\n    function isCode(cell) {\n        return cell.cell_type === 'code';\n    }\n    nbformat.isCode = isCode;\n    /**\n     * Test whether an output is an execute result.\n     */\n    function isExecuteResult(output) {\n        return output.output_type === 'execute_result';\n    }\n    nbformat.isExecuteResult = isExecuteResult;\n    /**\n     * Test whether an output is from display data.\n     */\n    function isDisplayData(output) {\n        return output.output_type === 'display_data';\n    }\n    nbformat.isDisplayData = isDisplayData;\n    /**\n     * Test whether an output is from updated display data.\n     */\n    function isDisplayUpdate(output) {\n        return output.output_type === 'update_display_data';\n    }\n    nbformat.isDisplayUpdate = isDisplayUpdate;\n    /**\n     * Test whether an output is from a stream.\n     */\n    function isStream(output) {\n        return output.output_type === 'stream';\n    }\n    nbformat.isStream = isStream;\n    /**\n     * Test whether an output is an error.\n     */\n    function isError(output) {\n        return output.output_type === 'error';\n    }\n    nbformat.isError = isError;\n})(nbformat = exports.nbformat || (exports.nbformat = {}));\n//# sourceMappingURL=nbformat.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@phosphor/coreutils\");\nconst minimist_1 = __importDefault(require(\"minimist\"));\nconst url_1 = require(\"./url\");\n/**\n * The namespace for `PageConfig` functions.\n */\nvar PageConfig;\n(function (PageConfig) {\n    /**\n     * Get global configuration data for the Jupyter application.\n     *\n     * @param name - The name of the configuration option.\n     *\n     * @returns The config value or an empty string if not found.\n     *\n     * #### Notes\n     * All values are treated as strings.\n     * For browser based applications, it is assumed that the page HTML\n     * includes a script tag with the id `jupyter-config-data` containing the\n     * configuration as valid JSON.  In order to support the classic Notebook,\n     * we fall back on checking for `body` data of the given `name`.\n     *\n     * For node applications, it is assumed that the process was launched\n     * with a `--jupyter-config-data` option pointing to a JSON settings\n     * file.\n     */\n    function getOption(name) {\n        if (configData) {\n            return configData[name] || getBodyData(name);\n        }\n        configData = Object.create(null);\n        let found = false;\n        // Use script tag if available.\n        if (typeof document !== 'undefined' && document) {\n            const el = document.getElementById('jupyter-config-data');\n            if (el) {\n                configData = JSON.parse(el.textContent || '');\n                found = true;\n            }\n        }\n        // Otherwise use CLI if given.\n        if (!found && typeof process !== 'undefined') {\n            try {\n                const cli = minimist_1.default(process.argv.slice(2));\n                const path = require('path');\n                let fullPath = '';\n                if ('jupyter-config-data' in cli) {\n                    fullPath = path.resolve(cli['jupyter-config-data']);\n                }\n                else if ('JUPYTER_CONFIG_DATA' in process.env) {\n                    fullPath = path.resolve(process.env['JUPYTER_CONFIG_DATA']);\n                }\n                if (fullPath) {\n                    /* tslint:disable */\n                    // Force Webpack to ignore this require.\n                    configData = eval('require')(fullPath);\n                    /* tslint:enable */\n                }\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n        if (!coreutils_1.JSONExt.isObject(configData)) {\n            configData = Object.create(null);\n        }\n        else {\n            for (let key in configData) {\n                // PageConfig expects strings\n                if (typeof configData[key] !== 'string') {\n                    configData[key] = JSON.stringify(configData[key]);\n                }\n            }\n        }\n        return configData[name] || getBodyData(name);\n    }\n    PageConfig.getOption = getOption;\n    /**\n     * Set global configuration data for the Jupyter application.\n     *\n     * @param name - The name of the configuration option.\n     * @param value - The value to set the option to.\n     *\n     * @returns The last config value or an empty string if it doesn't exist.\n     */\n    function setOption(name, value) {\n        const last = getOption(name);\n        configData[name] = value;\n        return last;\n    }\n    PageConfig.setOption = setOption;\n    /**\n     * Get the base url for a Jupyter application, or the base url of the page.\n     */\n    function getBaseUrl() {\n        return url_1.URLExt.normalize(getOption('baseUrl') || '/');\n    }\n    PageConfig.getBaseUrl = getBaseUrl;\n    /**\n     * Get the tree url for a JupyterLab application.\n     */\n    function getTreeUrl() {\n        return url_1.URLExt.join(getBaseUrl(), getOption('treeUrl'));\n    }\n    PageConfig.getTreeUrl = getTreeUrl;\n    /**\n     * Get the base websocket url for a Jupyter application, or an empty string.\n     */\n    function getWsUrl(baseUrl) {\n        let wsUrl = getOption('wsUrl');\n        if (!wsUrl) {\n            baseUrl = baseUrl ? url_1.URLExt.normalize(baseUrl) : getBaseUrl();\n            if (baseUrl.indexOf('http') !== 0) {\n                return '';\n            }\n            wsUrl = 'ws' + baseUrl.slice(4);\n        }\n        return url_1.URLExt.normalize(wsUrl);\n    }\n    PageConfig.getWsUrl = getWsUrl;\n    /**\n     * Returns the URL converting this notebook to a certain\n     * format with nbconvert.\n     */\n    function getNBConvertURL({ path, format, download }) {\n        const notebookPath = url_1.URLExt.encodeParts(path);\n        const url = url_1.URLExt.join(getBaseUrl(), 'nbconvert', format, notebookPath);\n        if (download) {\n            return url + '?download=true';\n        }\n        return url;\n    }\n    PageConfig.getNBConvertURL = getNBConvertURL;\n    /**\n     * Get the authorization token for a Jupyter application.\n     */\n    function getToken() {\n        return getOption('token') || getBodyData('jupyterApiToken');\n    }\n    PageConfig.getToken = getToken;\n    /**\n     * Get the Notebook version info [major, minor, patch].\n     */\n    function getNotebookVersion() {\n        const notebookVersion = getOption('notebookVersion');\n        if (notebookVersion === '') {\n            return [0, 0, 0];\n        }\n        return JSON.parse(notebookVersion);\n    }\n    PageConfig.getNotebookVersion = getNotebookVersion;\n    /**\n     * Private page config data for the Jupyter application.\n     */\n    let configData = null;\n    /**\n     * Get a url-encoded item from `body.data` and decode it\n     * We should never have any encoded URLs anywhere else in code\n     * until we are building an actual request.\n     */\n    function getBodyData(key) {\n        if (typeof document === 'undefined' || !document.body) {\n            return '';\n        }\n        let val = document.body.dataset[key];\n        if (typeof val === 'undefined') {\n            return '';\n        }\n        return decodeURIComponent(val);\n    }\n    /**\n     * The namespace for page config `Extension` functions.\n     */\n    let Extension;\n    (function (Extension) {\n        /**\n         * Populate an array from page config.\n         *\n         * @param key - The page config key (e.g., `deferredExtensions`).\n         *\n         * #### Notes\n         * This is intended for `deferredExtensions` and `disabledExtensions`.\n         */\n        function populate(key) {\n            try {\n                const raw = getOption(key);\n                if (raw) {\n                    return JSON.parse(raw).map((pattern) => {\n                        return { raw: pattern, rule: new RegExp(pattern) };\n                    });\n                }\n            }\n            catch (error) {\n                console.warn(`Unable to parse ${key}.`, error);\n            }\n            return [];\n        }\n        /**\n         * The collection of deferred extensions in page config.\n         */\n        Extension.deferred = populate('deferredExtensions');\n        /**\n         * The collection of disabled extensions in page config.\n         */\n        Extension.disabled = populate('disabledExtensions');\n        /**\n         * Returns whether a plugin is deferred.\n         *\n         * @param id - The plugin ID.\n         */\n        function isDeferred(id) {\n            return Extension.deferred.some(val => val.raw === id || val.rule.test(id));\n        }\n        Extension.isDeferred = isDeferred;\n        /**\n         * Returns whether a plugin is disabled.\n         *\n         * @param id - The plugin ID.\n         */\n        function isDisabled(id) {\n            return Extension.disabled.some(val => val.raw === id || val.rule.test(id));\n        }\n        Extension.isDisabled = isDisabled;\n    })(Extension = PageConfig.Extension || (PageConfig.Extension = {}));\n})(PageConfig = exports.PageConfig || (exports.PageConfig = {}));\n//# sourceMappingURL=pageconfig.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst posix = __importStar(require(\"path-posix\"));\n/**\n * The namespace for path-related functions.\n *\n * Note that Jupyter server paths do not start with a leading slash.\n */\nvar PathExt;\n(function (PathExt) {\n    /**\n     * Join all arguments together and normalize the resulting path.\n     * Arguments must be strings. In v0.8, non-string arguments were silently ignored. In v0.10 and up, an exception is thrown.\n     *\n     * @param paths - The string paths to join.\n     */\n    function join(...paths) {\n        const path = posix.join(...paths);\n        return path === '.' ? '' : removeSlash(posix.join(...paths));\n    }\n    PathExt.join = join;\n    /**\n     * Return the last portion of a path. Similar to the Unix basename command.\n     * Often used to extract the file name from a fully qualified path.\n     *\n     * @param path - The path to evaluate.\n     *\n     * @param ext - An extension to remove from the result.\n     */\n    function basename(path, ext) {\n        return posix.basename(path, ext);\n    }\n    PathExt.basename = basename;\n    /**\n     * Get the directory name of a path, similar to the Unix dirname command.\n     * When an empty path is given, returns the root path.\n     *\n     * @param path - The file path.\n     */\n    function dirname(path) {\n        let dir = removeSlash(posix.dirname(path));\n        return dir === '.' ? '' : dir;\n    }\n    PathExt.dirname = dirname;\n    /**\n     * Get the extension of the path.\n     *\n     * @param path - The file path.\n     *\n     * @returns the extension of the file.\n     *\n     * #### Notes\n     * The extension is the string from the last occurrence of the `.`\n     * character to end of string in the last portion of the path, inclusive.\n     * If there is no `.` in the last portion of the path, or if the first\n     * character of the basename of path [[basename]] is `.`, then an\n     * empty string is returned.\n     */\n    function extname(path) {\n        return posix.extname(path);\n    }\n    PathExt.extname = extname;\n    /**\n     * Get the last portion of a path, without its extension (if any).\n     *\n     * @param path - The file path.\n     *\n     * @returns the last part of the path, sans extension.\n     */\n    function stem(path) {\n        return path\n            .split('\\\\')\n            .pop()\n            .split('/')\n            .pop()\n            .split('.')\n            .shift();\n    }\n    PathExt.stem = stem;\n    /**\n     * Normalize a string path, reducing '..' and '.' parts.\n     * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.\n     * When an empty path is given, returns the root path.\n     *\n     * @param path - The string path to normalize.\n     */\n    function normalize(path) {\n        if (path === '') {\n            return '';\n        }\n        return removeSlash(posix.normalize(path));\n    }\n    PathExt.normalize = normalize;\n    /**\n     * Resolve a sequence of paths or path segments into an absolute path.\n     * The root path in the application has no leading slash, so it is removed.\n     *\n     * @param parts - The paths to join.\n     *\n     * #### Notes\n     * The right-most parameter is considered {to}.  Other parameters are considered an array of {from}.\n     *\n     * Starting from leftmost {from} parameter, resolves {to} to an absolute path.\n     *\n     * If {to} isn't already absolute, {from} arguments are prepended in right to left order, until an absolute path is found. If after using all {from} paths still no absolute path is found, the current working directory is used as well. The resulting path is normalized, and trailing slashes are removed unless the path gets resolved to the root directory.\n     */\n    function resolve(...parts) {\n        return removeSlash(posix.resolve(...parts));\n    }\n    PathExt.resolve = resolve;\n    /**\n     * Solve the relative path from {from} to {to}.\n     *\n     * @param from - The source path.\n     *\n     * @param to - The target path.\n     *\n     * #### Notes\n     * If from and to each resolve to the same path (after calling\n     * path.resolve() on each), a zero-length string is returned.\n     * If a zero-length string is passed as from or to, `/`\n     * will be used instead of the zero-length strings.\n     */\n    function relative(from, to) {\n        return removeSlash(posix.relative(from, to));\n    }\n    PathExt.relative = relative;\n    /**\n     * Normalize a file extension to be of the type `'.foo'`.\n     *\n     * @param extension - the file extension.\n     *\n     * #### Notes\n     * Adds a leading dot if not present and converts to lower case.\n     */\n    function normalizeExtension(extension) {\n        if (extension.length > 0 && extension.indexOf('.') !== 0) {\n            extension = `.${extension}`;\n        }\n        return extension;\n    }\n    PathExt.normalizeExtension = normalizeExtension;\n    /**\n     * Remove the leading slash from a path.\n     *\n     * @param path: the path from which to remove a leading slash.\n     */\n    function removeSlash(path) {\n        if (path.indexOf('/') === 0) {\n            path = path.slice(1);\n        }\n        return path;\n    }\n    PathExt.removeSlash = removeSlash;\n})(PathExt = exports.PathExt || (exports.PathExt = {}));\n//# sourceMappingURL=path.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@phosphor/coreutils\");\nconst signaling_1 = require(\"@phosphor/signaling\");\n/**\n * A function to defer an action immediately.\n */\nconst defer = typeof requestAnimationFrame === 'function'\n    ? requestAnimationFrame\n    : setImmediate;\n/**\n * A function to cancel a deferred action.\n */\nconst cancel = typeof cancelAnimationFrame === 'function'\n    ? cancelAnimationFrame\n    : clearImmediate;\n/**\n * A class that wraps an asynchronous function to poll at a regular interval\n * with exponential increases to the interval length if the poll fails.\n *\n * @typeparam T - The resolved type of the factory's promises.\n * Defaults to `any`.\n *\n * @typeparam U - The rejected type of the factory's promises.\n * Defaults to `any`.\n *\n * @typeparam V - An optional type to extend the phases supported by a poll.\n * Defaults to `standby`, which already exists in the `Phase` type.\n */\nclass Poll {\n    /**\n     * Instantiate a new poll with exponential backoff in case of failure.\n     *\n     * @param options - The poll instantiation options.\n     */\n    constructor(options) {\n        this._disposed = new signaling_1.Signal(this);\n        this._tick = new coreutils_1.PromiseDelegate();\n        this._ticked = new signaling_1.Signal(this);\n        this._timeout = -1;\n        this._factory = options.factory;\n        this._standby = options.standby || Private.DEFAULT_STANDBY;\n        this._state = Object.assign({}, Private.DEFAULT_STATE, { timestamp: new Date().getTime() });\n        this.frequency = Object.assign({}, Private.DEFAULT_FREQUENCY, (options.frequency || {}));\n        this.name = options.name || Private.DEFAULT_NAME;\n        if ('auto' in options ? options.auto : true) {\n            defer(() => void this.start());\n        }\n    }\n    /**\n     * A signal emitted when the poll is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * The polling frequency parameters.\n     */\n    get frequency() {\n        return this._frequency;\n    }\n    set frequency(frequency) {\n        if (this.isDisposed || coreutils_1.JSONExt.deepEqual(frequency, this.frequency || {})) {\n            return;\n        }\n        let { backoff, interval, max } = frequency;\n        interval = Math.round(interval);\n        max = Math.round(max);\n        if (typeof backoff === 'number' && backoff < 1) {\n            throw new Error('Poll backoff growth factor must be at least 1');\n        }\n        if ((interval < 0 || interval > max) && interval !== Poll.NEVER) {\n            throw new Error('Poll interval must be between 0 and max');\n        }\n        if (max > Poll.MAX_INTERVAL && max !== Poll.NEVER) {\n            throw new Error(`Max interval must be less than ${Poll.MAX_INTERVAL}`);\n        }\n        this._frequency = { backoff, interval, max };\n    }\n    /**\n     * Whether the poll is disposed.\n     */\n    get isDisposed() {\n        return this.state.phase === 'disposed';\n    }\n    /**\n     * Indicates when the poll switches to standby.\n     */\n    get standby() {\n        return this._standby;\n    }\n    set standby(standby) {\n        if (this.isDisposed || this.standby === standby) {\n            return;\n        }\n        this._standby = standby;\n    }\n    /**\n     * The poll state, which is the content of the current poll tick.\n     */\n    get state() {\n        return this._state;\n    }\n    /**\n     * A promise that resolves when the poll next ticks.\n     */\n    get tick() {\n        return this._tick.promise;\n    }\n    /**\n     * A signal emitted when the poll ticks and fires off a new request.\n     */\n    get ticked() {\n        return this._ticked;\n    }\n    /**\n     * Dispose the poll.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._state = Object.assign({}, Private.DISPOSED_STATE, { timestamp: new Date().getTime() });\n        this._tick.promise.catch(_ => undefined);\n        this._tick.reject(new Error(`Poll (${this.name}) is disposed.`));\n        this._disposed.emit();\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Refreshes the poll. Schedules `refreshed` tick if necessary.\n     *\n     * @returns A promise that resolves after tick is scheduled and never rejects.\n     *\n     * #### Notes\n     * The returned promise resolves after the tick is scheduled, but before\n     * the polling action is run. To wait until after the poll action executes,\n     * await the `poll.tick` promise: `await poll.refresh(); await poll.tick;`\n     */\n    refresh() {\n        return this.schedule({\n            cancel: ({ phase }) => phase === 'refreshed',\n            interval: Poll.IMMEDIATE,\n            phase: 'refreshed'\n        });\n    }\n    /**\n     * Schedule the next poll tick.\n     *\n     * @param next - The next poll state data to schedule. Defaults to standby.\n     *\n     * @param next.cancel - Cancels state transition if function returns `true`.\n     *\n     * @returns A promise that resolves when the next poll state is active.\n     *\n     * #### Notes\n     * This method is not meant to be invoked by user code typically. It is public\n     * to allow poll instances to be composed into classes that schedule ticks.\n     */\n    async schedule(next = {}) {\n        if (this.isDisposed) {\n            return;\n        }\n        // Check if the phase transition should be canceled.\n        if (next.cancel && next.cancel(this.state)) {\n            return;\n        }\n        // Update poll state.\n        const last = this.state;\n        const pending = this._tick;\n        const scheduled = new coreutils_1.PromiseDelegate();\n        const state = Object.assign({ interval: this.frequency.interval, payload: null, phase: 'standby', timestamp: new Date().getTime() }, next);\n        this._state = state;\n        this._tick = scheduled;\n        // Clear the schedule if possible.\n        if (last.interval === Poll.IMMEDIATE) {\n            cancel(this._timeout);\n        }\n        else {\n            clearTimeout(this._timeout);\n        }\n        // Emit ticked signal, resolve pending promise, and await its settlement.\n        this._ticked.emit(this.state);\n        pending.resolve(this);\n        await pending.promise;\n        // Schedule next execution and cache its timeout handle.\n        const execute = () => {\n            if (this.isDisposed || this.tick !== scheduled.promise) {\n                return;\n            }\n            this._execute();\n        };\n        this._timeout =\n            state.interval === Poll.IMMEDIATE\n                ? defer(execute)\n                : state.interval === Poll.NEVER\n                    ? -1\n                    : setTimeout(execute, state.interval);\n    }\n    /**\n     * Starts the poll. Schedules `started` tick if necessary.\n     *\n     * @returns A promise that resolves after tick is scheduled and never rejects.\n     */\n    start() {\n        return this.schedule({\n            cancel: ({ phase }) => phase !== 'constructed' && phase !== 'standby' && phase !== 'stopped',\n            interval: Poll.IMMEDIATE,\n            phase: 'started'\n        });\n    }\n    /**\n     * Stops the poll. Schedules `stopped` tick if necessary.\n     *\n     * @returns A promise that resolves after tick is scheduled and never rejects.\n     */\n    stop() {\n        return this.schedule({\n            cancel: ({ phase }) => phase === 'stopped',\n            interval: Poll.NEVER,\n            phase: 'stopped'\n        });\n    }\n    /**\n     * Execute a new poll factory promise or stand by if necessary.\n     */\n    _execute() {\n        let standby = typeof this.standby === 'function' ? this.standby() : this.standby;\n        standby =\n            standby === 'never'\n                ? false\n                : standby === 'when-hidden'\n                    ? !!(typeof document !== 'undefined' && document && document.hidden)\n                    : true;\n        // If in standby mode schedule next tick without calling the factory.\n        if (standby) {\n            void this.schedule();\n            return;\n        }\n        const pending = this.tick;\n        this._factory(this.state)\n            .then((resolved) => {\n            if (this.isDisposed || this.tick !== pending) {\n                return;\n            }\n            void this.schedule({\n                payload: resolved,\n                phase: this.state.phase === 'rejected' ? 'reconnected' : 'resolved'\n            });\n        })\n            .catch((rejected) => {\n            if (this.isDisposed || this.tick !== pending) {\n                return;\n            }\n            void this.schedule({\n                interval: Private.sleep(this.frequency, this.state),\n                payload: rejected,\n                phase: 'rejected'\n            });\n        });\n    }\n}\nexports.Poll = Poll;\n/**\n * A namespace for `Poll` types, interfaces, and statics.\n */\n(function (Poll) {\n    /**\n     * An interval value that indicates the poll should tick immediately.\n     */\n    Poll.IMMEDIATE = 0;\n    /**\n     * Delays are 32-bit integers in many browsers so intervals need to be capped.\n     *\n     * #### Notes\n     * https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Maximum_delay_value\n     */\n    Poll.MAX_INTERVAL = 2147483647;\n    /**\n     * An interval value that indicates the poll should never tick.\n     */\n    Poll.NEVER = Infinity;\n})(Poll = exports.Poll || (exports.Poll = {}));\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default backoff growth rate if `backoff` is `true`.\n     */\n    Private.DEFAULT_BACKOFF = 3;\n    /**\n     * The default polling frequency.\n     */\n    Private.DEFAULT_FREQUENCY = {\n        backoff: true,\n        interval: 1000,\n        max: 30 * 1000\n    };\n    /**\n     * The default poll name.\n     */\n    Private.DEFAULT_NAME = 'unknown';\n    /**\n     * The default poll standby behavior.\n     */\n    Private.DEFAULT_STANDBY = 'when-hidden';\n    /**\n     * The first poll tick state's default values superseded in constructor.\n     */\n    Private.DEFAULT_STATE = {\n        interval: Poll.NEVER,\n        payload: null,\n        phase: 'constructed',\n        timestamp: new Date(0).getTime()\n    };\n    /**\n     * The disposed tick state values.\n     */\n    Private.DISPOSED_STATE = {\n        interval: Poll.NEVER,\n        payload: null,\n        phase: 'disposed',\n        timestamp: new Date(0).getTime()\n    };\n    /**\n     * Get a random integer between min and max, inclusive of both.\n     *\n     * #### Notes\n     * From\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values_inclusive\n     *\n     * From the MDN page: It might be tempting to use Math.round() to accomplish\n     * that, but doing so would cause your random numbers to follow a non-uniform\n     * distribution, which may not be acceptable for your needs.\n     */\n    function getRandomIntInclusive(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    /**\n     * Returns the number of milliseconds to sleep before the next tick.\n     *\n     * @param frequency - The poll's base frequency.\n     * @param last - The poll's last tick.\n     */\n    function sleep(frequency, last) {\n        const { backoff, interval, max } = frequency;\n        if (interval === Poll.NEVER) {\n            return interval;\n        }\n        const growth = backoff === true ? Private.DEFAULT_BACKOFF : backoff === false ? 1 : backoff;\n        const random = getRandomIntInclusive(interval, last.interval * growth);\n        return Math.min(max, random);\n    }\n    Private.sleep = sleep;\n})(Private || (Private = {}));\n//# sourceMappingURL=poll.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@phosphor/coreutils\");\nconst poll_1 = require(\"./poll\");\n/**\n * A base class to implement rate limiters with different invocation strategies.\n *\n * @typeparam T - The resolved type of the underlying function.\n *\n * @typeparam U - The rejected type of the underlying function.\n */\nclass RateLimiter {\n    /**\n     * Instantiate a rate limiter.\n     *\n     * @param fn - The function to rate limit.\n     *\n     * @param limit - The rate limit; defaults to 500ms.\n     */\n    constructor(fn, limit = 500) {\n        /**\n         * A promise that resolves on each successful invocation.\n         */\n        this.payload = null;\n        this.limit = limit;\n        this.poll = new poll_1.Poll({\n            auto: false,\n            factory: async () => await fn(),\n            frequency: { backoff: false, interval: poll_1.Poll.NEVER, max: poll_1.Poll.NEVER },\n            standby: 'never'\n        });\n        this.payload = new coreutils_1.PromiseDelegate();\n        this.poll.ticked.connect((_, state) => {\n            const { payload } = this;\n            if (state.phase === 'resolved') {\n                this.payload = new coreutils_1.PromiseDelegate();\n                payload.resolve(state.payload || undefined);\n                return;\n            }\n            if (state.phase === 'rejected' || state.phase === 'stopped') {\n                this.payload = new coreutils_1.PromiseDelegate();\n                payload.promise.catch(_ => undefined);\n                payload.reject(state.payload);\n                return;\n            }\n        }, this);\n    }\n    /**\n     * Whether the rate limiter is disposed.\n     */\n    get isDisposed() {\n        return this.payload === null;\n    }\n    /**\n     * Disposes the rate limiter.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this.payload = null;\n        this.poll.dispose();\n    }\n    /**\n     * Stop the function if it is mid-flight.\n     */\n    async stop() {\n        return this.poll.stop();\n    }\n}\nexports.RateLimiter = RateLimiter;\n/**\n * Wraps and debounces a function that can be called multiple times and only\n * executes the underlying function one `interval` after the last invocation.\n *\n * @typeparam T - The resolved type of the underlying function. Defaults to any.\n *\n * @typeparam U - The rejected type of the underlying function. Defaults to any.\n */\nclass Debouncer extends RateLimiter {\n    /**\n     * Invokes the function and only executes after rate limit has elapsed.\n     * Each invocation resets the timer.\n     */\n    async invoke() {\n        void this.poll.schedule({ interval: this.limit, phase: 'invoked' });\n        return this.payload.promise;\n    }\n}\nexports.Debouncer = Debouncer;\n/**\n * Wraps and throttles a function that can be called multiple times and only\n * executes the underlying function once per `interval`.\n *\n * @typeparam T - The resolved type of the underlying function. Defaults to any.\n *\n * @typeparam U - The rejected type of the underlying function. Defaults to any.\n */\nclass Throttler extends RateLimiter {\n    /**\n     * Throttles function invocations if one is currently in flight.\n     */\n    async invoke() {\n        if (this.poll.state.phase !== 'invoked') {\n            void this.poll.schedule({ interval: this.limit, phase: 'invoked' });\n        }\n        return this.payload.promise;\n    }\n}\nexports.Throttler = Throttler;\n//# sourceMappingURL=ratelimiter.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@phosphor/coreutils\");\nconst properties_1 = require(\"@phosphor/properties\");\nconst signaling_1 = require(\"@phosphor/signaling\");\n/**\n * An object pool that supports restoration.\n *\n * @typeparam T - The type of object being tracked.\n */\nclass RestorablePool {\n    /**\n     * Create a new restorable pool.\n     *\n     * @param options - The instantiation options for a restorable pool.\n     */\n    constructor(options) {\n        this._added = new signaling_1.Signal(this);\n        this._current = null;\n        this._currentChanged = new signaling_1.Signal(this);\n        this._hasRestored = false;\n        this._isDisposed = false;\n        this._objects = new Set();\n        this._restore = null;\n        this._restored = new coreutils_1.PromiseDelegate();\n        this._updated = new signaling_1.Signal(this);\n        this.namespace = options.namespace;\n    }\n    /**\n     * A signal emitted when an object object is added.\n     *\n     * #### Notes\n     * This signal will only fire when an object is added to the pool.\n     * It will not fire if an object injected into the pool.\n     */\n    get added() {\n        return this._added;\n    }\n    /**\n     * The current object.\n     *\n     * #### Notes\n     * The restorable pool does not set `current`. It is intended for client use.\n     *\n     * If `current` is set to an object that does not exist in the pool, it is a\n     * no-op.\n     */\n    get current() {\n        return this._current;\n    }\n    set current(obj) {\n        if (this._current === obj) {\n            return;\n        }\n        if (this._objects.has(obj)) {\n            this._current = obj;\n            this._currentChanged.emit(this._current);\n        }\n    }\n    /**\n     * A signal emitted when the current widget changes.\n     */\n    get currentChanged() {\n        return this._currentChanged;\n    }\n    /**\n     * Test whether the pool is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A promise resolved when the restorable pool has been restored.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * The number of objects held by the pool.\n     */\n    get size() {\n        return this._objects.size;\n    }\n    /**\n     * A signal emitted when an object is updated.\n     */\n    get updated() {\n        return this._updated;\n    }\n    /**\n     * Add a new object to the pool.\n     *\n     * @param obj - The object object being added.\n     *\n     * #### Notes\n     * The object passed into the tracker is added synchronously; its existence in\n     * the tracker can be checked with the `has()` method. The promise this method\n     * returns resolves after the object has been added and saved to an underlying\n     * restoration connector, if one is available.\n     */\n    async add(obj) {\n        if (obj.isDisposed) {\n            const warning = 'A disposed object cannot be added.';\n            console.warn(warning, obj);\n            throw new Error(warning);\n        }\n        if (this._objects.has(obj)) {\n            const warning = 'This object already exists in the pool.';\n            console.warn(warning, obj);\n            throw new Error(warning);\n        }\n        this._objects.add(obj);\n        obj.disposed.connect(this._onInstanceDisposed, this);\n        if (Private.injectedProperty.get(obj)) {\n            return;\n        }\n        if (this._restore) {\n            const { connector } = this._restore;\n            const objName = this._restore.name(obj);\n            if (objName) {\n                const name = `${this.namespace}:${objName}`;\n                const data = this._restore.args(obj);\n                Private.nameProperty.set(obj, name);\n                await connector.save(name, { data });\n            }\n        }\n        // Emit the added signal.\n        this._added.emit(obj);\n    }\n    /**\n     * Dispose of the resources held by the pool.\n     *\n     * #### Notes\n     * Disposing a pool does not affect the underlying data in the data connector,\n     * it simply disposes the client-side pool without making any connector calls.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._current = null;\n        this._isDisposed = true;\n        this._objects.clear();\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Find the first object in the pool that satisfies a filter function.\n     *\n     * @param - fn The filter function to call on each object.\n     */\n    find(fn) {\n        const values = this._objects.values();\n        for (let value of values) {\n            if (fn(value)) {\n                return value;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Iterate through each object in the pool.\n     *\n     * @param fn - The function to call on each object.\n     */\n    forEach(fn) {\n        this._objects.forEach(fn);\n    }\n    /**\n     * Filter the objects in the pool based on a predicate.\n     *\n     * @param fn - The function by which to filter.\n     */\n    filter(fn) {\n        const filtered = [];\n        this.forEach(obj => {\n            if (fn(obj)) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    }\n    /**\n     * Inject an object into the restorable pool without the pool handling its\n     * restoration lifecycle.\n     *\n     * @param obj - The object to inject into the pool.\n     */\n    inject(obj) {\n        Private.injectedProperty.set(obj, true);\n        return this.add(obj);\n    }\n    /**\n     * Check if this pool has the specified object.\n     *\n     * @param obj - The object whose existence is being checked.\n     */\n    has(obj) {\n        return this._objects.has(obj);\n    }\n    /**\n     * Restore the objects in this pool's namespace.\n     *\n     * @param options - The configuration options that describe restoration.\n     *\n     * @returns A promise that resolves when restoration has completed.\n     *\n     * #### Notes\n     * This function should almost never be invoked by client code. Its primary\n     * use case is to be invoked by a layout restorer plugin that handles\n     * multiple restorable pools and, when ready, asks them each to restore their\n     * respective objects.\n     */\n    async restore(options) {\n        if (this._hasRestored) {\n            throw new Error('This pool has already been restored.');\n        }\n        this._hasRestored = true;\n        const { command, connector, registry, when } = options;\n        const namespace = this.namespace;\n        const promises = when\n            ? [connector.list(namespace)].concat(when)\n            : [connector.list(namespace)];\n        this._restore = options;\n        const [saved] = await Promise.all(promises);\n        const values = await Promise.all(saved.ids.map(async (id, index) => {\n            const value = saved.values[index];\n            const args = value && value.data;\n            if (args === undefined) {\n                return connector.remove(id);\n            }\n            // Execute the command and if it fails, delete the state restore data.\n            return registry\n                .execute(command, args)\n                .catch(() => connector.remove(id));\n        }));\n        this._restored.resolve();\n        return values;\n    }\n    /**\n     * Save the restore data for a given object.\n     *\n     * @param obj - The object being saved.\n     */\n    async save(obj) {\n        const injected = Private.injectedProperty.get(obj);\n        if (!this._restore || !this.has(obj) || injected) {\n            return;\n        }\n        const { connector } = this._restore;\n        const objName = this._restore.name(obj);\n        const oldName = Private.nameProperty.get(obj);\n        const newName = objName ? `${this.namespace}:${objName}` : '';\n        if (oldName && oldName !== newName) {\n            await connector.remove(oldName);\n        }\n        // Set the name property irrespective of whether the new name is null.\n        Private.nameProperty.set(obj, newName);\n        if (newName) {\n            const data = this._restore.args(obj);\n            await connector.save(newName, { data });\n        }\n        if (oldName !== newName) {\n            this._updated.emit(obj);\n        }\n    }\n    /**\n     * Clean up after disposed objects.\n     */\n    _onInstanceDisposed(obj) {\n        this._objects.delete(obj);\n        if (obj === this._current) {\n            this._current = null;\n            this._currentChanged.emit(this._current);\n        }\n        if (Private.injectedProperty.get(obj)) {\n            return;\n        }\n        if (!this._restore) {\n            return;\n        }\n        const { connector } = this._restore;\n        const name = Private.nameProperty.get(obj);\n        if (name) {\n            void connector.remove(name);\n        }\n    }\n}\nexports.RestorablePool = RestorablePool;\n/*\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An attached property to indicate whether an object has been injected.\n     */\n    Private.injectedProperty = new properties_1.AttachedProperty({\n        name: 'injected',\n        create: () => false\n    });\n    /**\n     * An attached property for an object's ID.\n     */\n    Private.nameProperty = new properties_1.AttachedProperty({\n        name: 'name',\n        create: () => ''\n    });\n})(Private || (Private = {}));\n//# sourceMappingURL=restorablepool.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ajv_1 = __importDefault(require(\"ajv\"));\nconst json = __importStar(require(\"json5\"));\nconst coreutils_1 = require(\"@phosphor/coreutils\");\nconst disposable_1 = require(\"@phosphor/disposable\");\nconst signaling_1 = require(\"@phosphor/signaling\");\nconst plugin_schema_json_1 = __importDefault(require(\"./plugin-schema.json\"));\n/**\n * An alias for the JSON deep copy function.\n */\nconst copy = coreutils_1.JSONExt.deepCopy;\n/**\n * The default number of milliseconds before a `load()` call to the registry\n * will wait before timing out if it requires a transformation that has not been\n * registered.\n */\nconst DEFAULT_TRANSFORM_TIMEOUT = 7000;\n/**\n * The ASCII record separator character.\n */\nconst RECORD_SEPARATOR = String.fromCharCode(30);\n/**\n * The default implementation of a schema validator.\n */\nclass DefaultSchemaValidator {\n    /**\n     * Instantiate a schema validator.\n     */\n    constructor() {\n        this._composer = new ajv_1.default({ useDefaults: true });\n        this._validator = new ajv_1.default();\n        this._composer.addSchema(plugin_schema_json_1.default, 'jupyterlab-plugin-schema');\n        this._validator.addSchema(plugin_schema_json_1.default, 'jupyterlab-plugin-schema');\n    }\n    /**\n     * Validate a plugin's schema and user data; populate the `composite` data.\n     *\n     * @param plugin - The plugin being validated. Its `composite` data will be\n     * populated by reference.\n     *\n     * @param populate - Whether plugin data should be populated, defaults to\n     * `true`.\n     *\n     * @return A list of errors if either the schema or data fail to validate or\n     * `null` if there are no errors.\n     */\n    validateData(plugin, populate = true) {\n        const validate = this._validator.getSchema(plugin.id);\n        const compose = this._composer.getSchema(plugin.id);\n        // If the schemas do not exist, add them to the validator and continue.\n        if (!validate || !compose) {\n            if (plugin.schema.type !== 'object') {\n                const keyword = 'schema';\n                const message = `Setting registry schemas' root-level type must be ` +\n                    `'object', rejecting type: ${plugin.schema.type}`;\n                return [{ dataPath: 'type', keyword, schemaPath: '', message }];\n            }\n            const errors = this._addSchema(plugin.id, plugin.schema);\n            return errors || this.validateData(plugin);\n        }\n        // Parse the raw commented JSON into a user map.\n        let user;\n        try {\n            user = json.parse(plugin.raw, null);\n        }\n        catch (error) {\n            if (error instanceof SyntaxError) {\n                return [\n                    {\n                        dataPath: '',\n                        keyword: 'syntax',\n                        schemaPath: '',\n                        message: error.message\n                    }\n                ];\n            }\n            const { column, description } = error;\n            const line = error.lineNumber;\n            return [\n                {\n                    dataPath: '',\n                    keyword: 'parse',\n                    schemaPath: '',\n                    message: `${description} (line ${line} column ${column})`\n                }\n            ];\n        }\n        if (!validate(user)) {\n            return validate.errors;\n        }\n        // Copy the user data before merging defaults into composite map.\n        const composite = copy(user);\n        if (!compose(composite)) {\n            return compose.errors;\n        }\n        if (populate) {\n            plugin.data = { composite, user };\n        }\n        return null;\n    }\n    /**\n     * Add a schema to the validator.\n     *\n     * @param plugin - The plugin ID.\n     *\n     * @param schema - The schema being added.\n     *\n     * @return A list of errors if the schema fails to validate or `null` if there\n     * are no errors.\n     *\n     * #### Notes\n     * It is safe to call this function multiple times with the same plugin name.\n     */\n    _addSchema(plugin, schema) {\n        const composer = this._composer;\n        const validator = this._validator;\n        const validate = validator.getSchema('jupyterlab-plugin-schema');\n        // Validate against the main schema.\n        if (!validate(schema)) {\n            return validate.errors;\n        }\n        // Validate against the JSON schema meta-schema.\n        if (!validator.validateSchema(schema)) {\n            return validator.errors;\n        }\n        // Remove if schema already exists.\n        composer.removeSchema(plugin);\n        validator.removeSchema(plugin);\n        // Add schema to the validator and composer.\n        composer.addSchema(schema, plugin);\n        validator.addSchema(schema, plugin);\n        return null;\n    }\n}\nexports.DefaultSchemaValidator = DefaultSchemaValidator;\n/**\n * The default concrete implementation of a setting registry.\n */\nclass SettingRegistry {\n    /**\n     * Create a new setting registry.\n     */\n    constructor(options) {\n        /**\n         * The schema of the setting registry.\n         */\n        this.schema = plugin_schema_json_1.default;\n        /**\n         * The collection of setting registry plugins.\n         */\n        this.plugins = Object.create(null);\n        this._pluginChanged = new signaling_1.Signal(this);\n        this._ready = Promise.resolve();\n        this._transformers = Object.create(null);\n        this.connector = options.connector;\n        this.validator = options.validator || new DefaultSchemaValidator();\n        this._timeout = options.timeout || DEFAULT_TRANSFORM_TIMEOUT;\n        // Preload with any available data at instantiation-time.\n        if (options.plugins) {\n            this._ready = this._preload(options.plugins);\n        }\n    }\n    /**\n     * A signal that emits the name of a plugin when its settings change.\n     */\n    get pluginChanged() {\n        return this._pluginChanged;\n    }\n    /**\n     * Get an individual setting.\n     *\n     * @param plugin - The name of the plugin whose settings are being retrieved.\n     *\n     * @param key - The name of the setting being retrieved.\n     *\n     * @returns A promise that resolves when the setting is retrieved.\n     */\n    async get(plugin, key) {\n        // Wait for data preload before allowing normal operation.\n        await this._ready;\n        const plugins = this.plugins;\n        if (plugin in plugins) {\n            const { composite, user } = plugins[plugin].data;\n            return {\n                composite: key in composite ? copy(composite[key]) : undefined,\n                user: key in user ? copy(user[key]) : undefined\n            };\n        }\n        return this.load(plugin).then(() => this.get(plugin, key));\n    }\n    /**\n     * Load a plugin's settings into the setting registry.\n     *\n     * @param plugin - The name of the plugin whose settings are being loaded.\n     *\n     * @returns A promise that resolves with a plugin settings object or rejects\n     * if the plugin is not found.\n     */\n    async load(plugin) {\n        // Wait for data preload before allowing normal operation.\n        await this._ready;\n        const plugins = this.plugins;\n        const registry = this;\n        // If the plugin exists, resolve.\n        if (plugin in plugins) {\n            return new Settings({ plugin: plugins[plugin], registry });\n        }\n        // If the plugin needs to be loaded from the data connector, fetch.\n        return this.reload(plugin);\n    }\n    /**\n     * Reload a plugin's settings into the registry even if they already exist.\n     *\n     * @param plugin - The name of the plugin whose settings are being reloaded.\n     *\n     * @returns A promise that resolves with a plugin settings object or rejects\n     * with a list of `ISchemaValidator.IError` objects if it fails.\n     */\n    async reload(plugin) {\n        // Wait for data preload before allowing normal operation.\n        await this._ready;\n        const fetched = await this.connector.fetch(plugin);\n        const plugins = this.plugins;\n        const registry = this;\n        await this._load(await this._transform('fetch', fetched));\n        this._pluginChanged.emit(plugin);\n        return new Settings({ plugin: plugins[plugin], registry });\n    }\n    /**\n     * Remove a single setting in the registry.\n     *\n     * @param plugin - The name of the plugin whose setting is being removed.\n     *\n     * @param key - The name of the setting being removed.\n     *\n     * @returns A promise that resolves when the setting is removed.\n     */\n    async remove(plugin, key) {\n        // Wait for data preload before allowing normal operation.\n        await this._ready;\n        const plugins = this.plugins;\n        if (!(plugin in plugins)) {\n            return;\n        }\n        const raw = json.parse(plugins[plugin].raw, null);\n        // Delete both the value and any associated comment.\n        delete raw[key];\n        delete raw[`// ${key}`];\n        plugins[plugin].raw = Private.annotatedPlugin(plugins[plugin], raw);\n        return this._save(plugin);\n    }\n    /**\n     * Set a single setting in the registry.\n     *\n     * @param plugin - The name of the plugin whose setting is being set.\n     *\n     * @param key - The name of the setting being set.\n     *\n     * @param value - The value of the setting being set.\n     *\n     * @returns A promise that resolves when the setting has been saved.\n     *\n     */\n    async set(plugin, key, value) {\n        // Wait for data preload before allowing normal operation.\n        await this._ready;\n        const plugins = this.plugins;\n        if (!(plugin in plugins)) {\n            return this.load(plugin).then(() => this.set(plugin, key, value));\n        }\n        // Parse the raw JSON string removing all comments and return an object.\n        const raw = json.parse(plugins[plugin].raw, null);\n        plugins[plugin].raw = Private.annotatedPlugin(plugins[plugin], Object.assign({}, raw, { [key]: value }));\n        return this._save(plugin);\n    }\n    /**\n     * Register a plugin transform function to act on a specific plugin.\n     *\n     * @param plugin - The name of the plugin whose settings are transformed.\n     *\n     * @param transforms - The transform functions applied to the plugin.\n     *\n     * @returns A disposable that removes the transforms from the registry.\n     *\n     * #### Notes\n     * - `compose` transformations: The registry automatically overwrites a\n     * plugin's default values with user overrides, but a plugin may instead wish\n     * to merge values. This behavior can be accomplished in a `compose`\n     * transformation.\n     * - `fetch` transformations: The registry uses the plugin data that is\n     * fetched from its connector. If a plugin wants to override, e.g. to update\n     * its schema with dynamic defaults, a `fetch` transformation can be applied.\n     */\n    transform(plugin, transforms) {\n        const transformers = this._transformers;\n        if (plugin in transformers) {\n            throw new Error(`${plugin} already has a transformer.`);\n        }\n        transformers[plugin] = {\n            fetch: transforms.fetch || (plugin => plugin),\n            compose: transforms.compose || (plugin => plugin)\n        };\n        return new disposable_1.DisposableDelegate(() => {\n            delete transformers[plugin];\n        });\n    }\n    /**\n     * Upload a plugin's settings.\n     *\n     * @param plugin - The name of the plugin whose settings are being set.\n     *\n     * @param raw - The raw plugin settings being uploaded.\n     *\n     * @returns A promise that resolves when the settings have been saved.\n     */\n    async upload(plugin, raw) {\n        // Wait for data preload before allowing normal operation.\n        await this._ready;\n        const plugins = this.plugins;\n        if (!(plugin in plugins)) {\n            return this.load(plugin).then(() => this.upload(plugin, raw));\n        }\n        // Set the local copy.\n        plugins[plugin].raw = raw;\n        return this._save(plugin);\n    }\n    /**\n     * Load a plugin into the registry.\n     */\n    async _load(data) {\n        const plugin = data.id;\n        // Validate and preload the item.\n        try {\n            await this._validate(data);\n        }\n        catch (errors) {\n            const output = [`Validating ${plugin} failed:`];\n            errors.forEach((error, index) => {\n                const { dataPath, schemaPath, keyword, message } = error;\n                if (dataPath || schemaPath) {\n                    output.push(`${index} - schema @ ${schemaPath}, data @ ${dataPath}`);\n                }\n                output.push(`{${keyword}} ${message}`);\n            });\n            console.warn(output.join('\\n'));\n            throw errors;\n        }\n    }\n    /**\n     * Preload a list of plugins and fail gracefully.\n     */\n    async _preload(plugins) {\n        await Promise.all(plugins.map(async (plugin) => {\n            try {\n                // Apply a transformation to the plugin if necessary.\n                await this._load(await this._transform('fetch', plugin));\n            }\n            catch (errors) {\n                /* Ignore preload errors. */\n                console.log('Ignored setting registry preload errors.', errors);\n            }\n        }));\n    }\n    /**\n     * Save a plugin in the registry.\n     */\n    async _save(plugin) {\n        const plugins = this.plugins;\n        if (!(plugin in plugins)) {\n            throw new Error(`${plugin} does not exist in setting registry.`);\n        }\n        try {\n            await this._validate(plugins[plugin]);\n        }\n        catch (errors) {\n            console.warn(`${plugin} validation errors:`, errors);\n            throw new Error(`${plugin} failed to validate; check console.`);\n        }\n        await this.connector.save(plugin, plugins[plugin].raw);\n        // Fetch and reload the data to guarantee server and client are in sync.\n        const fetched = await this.connector.fetch(plugin);\n        await this._load(await this._transform('fetch', fetched));\n        this._pluginChanged.emit(plugin);\n    }\n    /**\n     * Transform the plugin if necessary.\n     */\n    async _transform(phase, plugin, started = new Date().getTime()) {\n        const elapsed = new Date().getTime() - started;\n        const id = plugin.id;\n        const transformers = this._transformers;\n        const timeout = this._timeout;\n        if (!plugin.schema['jupyter.lab.transform']) {\n            return plugin;\n        }\n        if (id in transformers) {\n            const transformed = transformers[id][phase].call(null, plugin);\n            if (transformed.id !== id) {\n                throw [\n                    {\n                        dataPath: '',\n                        keyword: 'id',\n                        message: 'Plugin transformations cannot change plugin IDs.',\n                        schemaPath: ''\n                    }\n                ];\n            }\n            return transformed;\n        }\n        // If the timeout has not been exceeded, stall and try again in 250ms.\n        if (elapsed < timeout) {\n            await new Promise(resolve => {\n                setTimeout(() => {\n                    resolve();\n                }, 250);\n            });\n            return this._transform(phase, plugin, started);\n        }\n        throw [\n            {\n                dataPath: '',\n                keyword: 'timeout',\n                message: `Transforming ${plugin.id} timed out.`,\n                schemaPath: ''\n            }\n        ];\n    }\n    /**\n     * Validate and preload a plugin, compose the `composite` data.\n     */\n    async _validate(plugin) {\n        // Validate the user data and create the composite data.\n        const errors = this.validator.validateData(plugin);\n        if (errors) {\n            throw errors;\n        }\n        // Apply a transformation if necessary and set the local copy.\n        this.plugins[plugin.id] = await this._transform('compose', plugin);\n    }\n}\nexports.SettingRegistry = SettingRegistry;\n/**\n * A manager for a specific plugin's settings.\n */\nclass Settings {\n    /**\n     * Instantiate a new plugin settings manager.\n     */\n    constructor(options) {\n        this._changed = new signaling_1.Signal(this);\n        this._isDisposed = false;\n        this.id = options.plugin.id;\n        this.registry = options.registry;\n        this.registry.pluginChanged.connect(this._onPluginChanged, this);\n    }\n    /**\n     * A signal that emits when the plugin's settings have changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The composite of user settings and extension defaults.\n     */\n    get composite() {\n        return this.plugin.data.composite;\n    }\n    /**\n     * Test whether the plugin settings manager disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    get plugin() {\n        return this.registry.plugins[this.id];\n    }\n    /**\n     * The plugin's schema.\n     */\n    get schema() {\n        return this.plugin.schema;\n    }\n    /**\n     * The plugin settings raw text value.\n     */\n    get raw() {\n        return this.plugin.raw;\n    }\n    /**\n     * The user settings.\n     */\n    get user() {\n        return this.plugin.data.user;\n    }\n    /**\n     * The published version of the NPM package containing these settings.\n     */\n    get version() {\n        return this.plugin.version;\n    }\n    /**\n     * Return the defaults in a commented JSON format.\n     */\n    annotatedDefaults() {\n        return Private.annotatedDefaults(this.schema, this.id);\n    }\n    /**\n     * Calculate the default value of a setting by iterating through the schema.\n     *\n     * @param key - The name of the setting whose default value is calculated.\n     *\n     * @returns A calculated default JSON value for a specific setting.\n     */\n    default(key) {\n        return Private.reifyDefault(this.schema, key);\n    }\n    /**\n     * Dispose of the plugin settings resources.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Get an individual setting.\n     *\n     * @param key - The name of the setting being retrieved.\n     *\n     * @returns The setting value.\n     *\n     * #### Notes\n     * This method returns synchronously because it uses a cached copy of the\n     * plugin settings that is synchronized with the registry.\n     */\n    get(key) {\n        const { composite, user } = this;\n        return {\n            composite: key in composite ? copy(composite[key]) : undefined,\n            user: key in user ? copy(user[key]) : undefined\n        };\n    }\n    /**\n     * Remove a single setting.\n     *\n     * @param key - The name of the setting being removed.\n     *\n     * @returns A promise that resolves when the setting is removed.\n     *\n     * #### Notes\n     * This function is asynchronous because it writes to the setting registry.\n     */\n    remove(key) {\n        return this.registry.remove(this.plugin.id, key);\n    }\n    /**\n     * Save all of the plugin's user settings at once.\n     */\n    save(raw) {\n        return this.registry.upload(this.plugin.id, raw);\n    }\n    /**\n     * Set a single setting.\n     *\n     * @param key - The name of the setting being set.\n     *\n     * @param value - The value of the setting.\n     *\n     * @returns A promise that resolves when the setting has been saved.\n     *\n     * #### Notes\n     * This function is asynchronous because it writes to the setting registry.\n     */\n    set(key, value) {\n        return this.registry.set(this.plugin.id, key, value);\n    }\n    /**\n     * Validates raw settings with comments.\n     *\n     * @param raw - The JSON with comments string being validated.\n     *\n     * @returns A list of errors or `null` if valid.\n     */\n    validate(raw) {\n        const data = { composite: {}, user: {} };\n        const { id, schema } = this.plugin;\n        const validator = this.registry.validator;\n        const version = this.version;\n        return validator.validateData({ data, id, raw, schema, version }, false);\n    }\n    /**\n     * Handle plugin changes in the setting registry.\n     */\n    _onPluginChanged(sender, plugin) {\n        if (plugin === this.plugin.id) {\n            this._changed.emit(undefined);\n        }\n    }\n}\nexports.Settings = Settings;\n/**\n * A namespace for `SettingRegistry` statics.\n */\n(function (SettingRegistry) {\n    /**\n     * Reconcile default and user shortcuts and return the composite list.\n     *\n     * @param defaults - The list of default shortcuts.\n     *\n     * @param user - The list of user shortcut overrides and additions.\n     *\n     * @returns A loadable list of shortcuts (omitting disabled and overridden).\n     */\n    function reconcileShortcuts(defaults, user) {\n        const memo = {};\n        // If a user shortcut collides with another user shortcut warn and filter.\n        user = user.filter(shortcut => {\n            const keys = shortcut.keys.join(RECORD_SEPARATOR);\n            const { selector } = shortcut;\n            if (!keys) {\n                console.warn('Shortcut skipped because `keys` are [\"\"].', shortcut);\n                return false;\n            }\n            if (!(keys in memo)) {\n                memo[keys] = {};\n            }\n            if (!(selector in memo[keys])) {\n                memo[keys][selector] = false; // User shortcuts are `false`.\n                return true;\n            }\n            console.warn('Shortcut skipped due to collision.', shortcut);\n            return false;\n        });\n        // If a default shortcut collides with another default, warn and filter.\n        // If a shortcut has already been added by the user preferences, filter it\n        // out too (this includes shortcuts that are disabled by user preferences).\n        defaults = defaults.filter(shortcut => {\n            const { disabled } = shortcut;\n            const keys = shortcut.keys.join(RECORD_SEPARATOR);\n            if (disabled || !keys) {\n                return false;\n            }\n            if (!(keys in memo)) {\n                memo[keys] = {};\n            }\n            const { selector } = shortcut;\n            if (!(selector in memo[keys])) {\n                memo[keys][selector] = true; // Default shortcuts are `true`.\n                return true;\n            }\n            // Only warn if a default shortcut collides with another default shortcut.\n            if (memo[keys][selector]) {\n                console.warn('Shortcut skipped due to collision.', shortcut);\n            }\n            return false;\n        });\n        // Filter out disabled user shortcuts and concat defaults before returning.\n        return user.filter(shortcut => !shortcut.disabled).concat(defaults);\n    }\n    SettingRegistry.reconcileShortcuts = reconcileShortcuts;\n})(SettingRegistry = exports.SettingRegistry || (exports.SettingRegistry = {}));\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default indentation level, uses spaces instead of tabs.\n     */\n    const indent = '    ';\n    /**\n     * Replacement text for schema properties missing a `description` field.\n     */\n    const nondescript = '[missing schema description]';\n    /**\n     * Replacement text for schema properties missing a `title` field.\n     */\n    const untitled = '[missing schema title]';\n    /**\n     * Returns an annotated (JSON with comments) version of a schema's defaults.\n     */\n    function annotatedDefaults(schema, plugin) {\n        const { description, properties, title } = schema;\n        const keys = Object.keys(properties).sort((a, b) => a.localeCompare(b));\n        const length = Math.max((description || nondescript).length, plugin.length);\n        return [\n            '{',\n            prefix(`${title || untitled}`),\n            prefix(plugin),\n            prefix(description || nondescript),\n            prefix('*'.repeat(length)),\n            '',\n            join(keys.map(key => defaultDocumentedValue(schema, key))),\n            '}'\n        ].join('\\n');\n    }\n    Private.annotatedDefaults = annotatedDefaults;\n    /**\n     * Returns an annotated (JSON with comments) version of a plugin's\n     * setting data.\n     */\n    function annotatedPlugin(plugin, data) {\n        const { description, title } = plugin.schema;\n        const keys = Object.keys(data).sort((a, b) => a.localeCompare(b));\n        const length = Math.max((description || nondescript).length, plugin.id.length);\n        return [\n            '{',\n            prefix(`${title || untitled}`),\n            prefix(plugin.id),\n            prefix(description || nondescript),\n            prefix('*'.repeat(length)),\n            '',\n            join(keys.map(key => documentedValue(plugin.schema, key, data[key]))),\n            '}'\n        ].join('\\n');\n    }\n    Private.annotatedPlugin = annotatedPlugin;\n    /**\n     * Returns the default value-with-documentation-string for a\n     * specific schema property.\n     */\n    function defaultDocumentedValue(schema, key) {\n        const props = (schema.properties && schema.properties[key]) || {};\n        const type = props['type'];\n        const description = props['description'] || nondescript;\n        const title = props['title'] || '';\n        const reified = reifyDefault(schema, key);\n        const spaces = indent.length;\n        const defaults = reified !== undefined\n            ? prefix(`\"${key}\": ${JSON.stringify(reified, null, spaces)}`, indent)\n            : prefix(`\"${key}\": ${type}`);\n        return [prefix(title), prefix(description), defaults]\n            .filter(str => str.length)\n            .join('\\n');\n    }\n    /**\n     * Returns a value-with-documentation-string for a specific schema property.\n     */\n    function documentedValue(schema, key, value) {\n        const props = schema.properties && schema.properties[key];\n        const description = (props && props['description']) || nondescript;\n        const title = (props && props['title']) || untitled;\n        const spaces = indent.length;\n        const attribute = prefix(`\"${key}\": ${JSON.stringify(value, null, spaces)}`, indent);\n        return [prefix(title), prefix(description), attribute].join('\\n');\n    }\n    /**\n     * Returns a joined string with line breaks and commas where appropriate.\n     */\n    function join(body) {\n        return body.reduce((acc, val, idx) => {\n            const rows = val.split('\\n');\n            const last = rows[rows.length - 1];\n            const comment = last.trim().indexOf('//') === 0;\n            const comma = comment || idx === body.length - 1 ? '' : ',';\n            const separator = idx === body.length - 1 ? '' : '\\n\\n';\n            return acc + val + comma + separator;\n        }, '');\n    }\n    /**\n     * Returns a documentation string with a comment prefix added on every line.\n     */\n    function prefix(source, pre = `${indent}// `) {\n        return pre + source.split('\\n').join(`\\n${pre}`);\n    }\n    /**\n     * Create a fully extrapolated default value for a root key in a schema.\n     */\n    function reifyDefault(schema, root) {\n        // If the property is at the root level, traverse its schema.\n        schema = (root ? schema.properties[root] : schema) || {};\n        // If the property has no default or is a primitive, return.\n        if (!('default' in schema) || schema.type !== 'object') {\n            return schema.default;\n        }\n        // Make a copy of the default value to populate.\n        const result = coreutils_1.JSONExt.deepCopy(schema.default);\n        // Iterate through and populate each child property.\n        for (let property in schema.properties || {}) {\n            result[property] = reifyDefault(schema.properties[property]);\n        }\n        return result;\n    }\n    Private.reifyDefault = reifyDefault;\n})(Private = exports.Private || (exports.Private = {}));\n//# sourceMappingURL=settingregistry.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst signaling_1 = require(\"@phosphor/signaling\");\n/**\n * The default concrete implementation of a state database.\n */\nclass StateDB {\n    /**\n     * Create a new state database.\n     *\n     * @param options - The instantiation options for a state database.\n     */\n    constructor(options = {}) {\n        this._changed = new signaling_1.Signal(this);\n        const { connector, transform } = options;\n        this._connector = connector || new StateDB.Connector();\n        this._ready = (transform || Promise.resolve(null)).then(transformation => {\n            if (!transformation) {\n                return;\n            }\n            const { contents, type } = transformation;\n            switch (type) {\n                case 'cancel':\n                    return;\n                case 'clear':\n                    return this._clear();\n                case 'merge':\n                    return this._merge(contents || {});\n                case 'overwrite':\n                    return this._overwrite(contents || {});\n                default:\n                    return;\n            }\n        });\n    }\n    /**\n     * A signal that emits the change type any time a value changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Clear the entire database.\n     */\n    async clear() {\n        await this._ready;\n        await this._clear();\n    }\n    /**\n     * Retrieve a saved bundle from the database.\n     *\n     * @param id - The identifier used to retrieve a data bundle.\n     *\n     * @returns A promise that bears a data payload if available.\n     *\n     * #### Notes\n     * The `id` values of stored items in the state database are formatted:\n     * `'namespace:identifier'`, which is the same convention that command\n     * identifiers in JupyterLab use as well. While this is not a technical\n     * requirement for `fetch()`, `remove()`, and `save()`, it *is* necessary for\n     * using the `list(namespace: string)` method.\n     *\n     * The promise returned by this method may be rejected if an error occurs in\n     * retrieving the data. Non-existence of an `id` will succeed with the `value`\n     * `undefined`.\n     */\n    async fetch(id) {\n        await this._ready;\n        return this._fetch(id);\n    }\n    /**\n     * Retrieve all the saved bundles for a namespace.\n     *\n     * @param filter - The namespace prefix to retrieve.\n     *\n     * @returns A promise that bears a collection of payloads for a namespace.\n     *\n     * #### Notes\n     * Namespaces are entirely conventional entities. The `id` values of stored\n     * items in the state database are formatted: `'namespace:identifier'`, which\n     * is the same convention that command identifiers in JupyterLab use as well.\n     *\n     * If there are any errors in retrieving the data, they will be logged to the\n     * console in order to optimistically return any extant data without failing.\n     * This promise will always succeed.\n     */\n    async list(namespace) {\n        await this._ready;\n        return this._list(namespace);\n    }\n    /**\n     * Remove a value from the database.\n     *\n     * @param id - The identifier for the data being removed.\n     *\n     * @returns A promise that is rejected if remove fails and succeeds otherwise.\n     */\n    async remove(id) {\n        await this._ready;\n        await this._remove(id);\n        this._changed.emit({ id, type: 'remove' });\n    }\n    /**\n     * Save a value in the database.\n     *\n     * @param id - The identifier for the data being saved.\n     *\n     * @param value - The data being saved.\n     *\n     * @returns A promise that is rejected if saving fails and succeeds otherwise.\n     *\n     * #### Notes\n     * The `id` values of stored items in the state database are formatted:\n     * `'namespace:identifier'`, which is the same convention that command\n     * identifiers in JupyterLab use as well. While this is not a technical\n     * requirement for `fetch()`, `remove()`, and `save()`, it *is* necessary for\n     * using the `list(namespace: string)` method.\n     */\n    async save(id, value) {\n        await this._ready;\n        await this._save(id, value);\n        this._changed.emit({ id, type: 'save' });\n    }\n    /**\n     * Return a serialized copy of the state database's entire contents.\n     *\n     * @returns A promise that resolves with the database contents as JSON.\n     */\n    async toJSON() {\n        await this._ready;\n        const { ids, values } = await this._list();\n        return values.reduce((acc, val, idx) => {\n            acc[ids[idx]] = val;\n            return acc;\n        }, {});\n    }\n    /**\n     * Clear the entire database.\n     */\n    async _clear() {\n        await Promise.all((await this._list()).ids.map(id => this._remove(id)));\n    }\n    /**\n     * Fetch a value from the database.\n     */\n    async _fetch(id) {\n        const value = await this._connector.fetch(id);\n        if (value) {\n            return JSON.parse(value).v;\n        }\n    }\n    /**\n     * Fetch a list from the database.\n     */\n    async _list(query) {\n        const { ids, values } = await this._connector.list(query);\n        return {\n            ids,\n            values: values.map(val => JSON.parse(val).v)\n        };\n    }\n    /**\n     * Merge data into the state database.\n     */\n    async _merge(contents) {\n        await Promise.all(Object.keys(contents).map(key => this._save(key, contents[key])));\n    }\n    /**\n     * Overwrite the entire database with new contents.\n     */\n    async _overwrite(contents) {\n        await this._clear();\n        await this._merge(contents);\n    }\n    /**\n     * Remove a key in the database.\n     */\n    async _remove(id) {\n        return this._connector.remove(id);\n    }\n    /**\n     * Save a key and its value in the database.\n     */\n    async _save(id, value) {\n        return this._connector.save(id, JSON.stringify({ v: value }));\n    }\n}\nexports.StateDB = StateDB;\n/**\n * A namespace for StateDB statics.\n */\n(function (StateDB) {\n    /**\n     * An in-memory string key/value data connector.\n     */\n    class Connector {\n        constructor() {\n            this._storage = {};\n        }\n        /**\n         * Retrieve an item from the data connector.\n         */\n        async fetch(id) {\n            return this._storage[id];\n        }\n        /**\n         * Retrieve the list of items available from the data connector.\n         */\n        async list(query = '') {\n            return Object.keys(this._storage).reduce((acc, val) => {\n                if (val && val.indexOf(query) === 0) {\n                    acc.ids.push(val);\n                    acc.values.push(this._storage[val]);\n                }\n                return acc;\n            }, { ids: [], values: [] });\n        }\n        /**\n         * Remove a value using the data connector.\n         */\n        async remove(id) {\n            delete this._storage[id];\n        }\n        /**\n         * Save a value using the data connector.\n         */\n        async save(id, value) {\n            this._storage[id] = value;\n        }\n    }\n    StateDB.Connector = Connector;\n})(StateDB = exports.StateDB || (exports.StateDB = {}));\n//# sourceMappingURL=statedb.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The namespace for text-related functions.\n */\nvar Text;\n(function (Text) {\n    // javascript stores text as utf16 and string indices use \"code units\",\n    // which stores high-codepoint characters as \"surrogate pairs\",\n    // which occupy two indices in the javascript string.\n    // We need to translate cursor_pos in the Jupyter protocol (in characters)\n    // to js offset (with surrogate pairs taking two spots).\n    const HAS_SURROGATES = '𝐚'.length > 1;\n    /**\n     * Convert a javascript string index into a unicode character offset\n     *\n     * @param jsIdx - The javascript string index (counting surrogate pairs)\n     *\n     * @param text - The text in which the offset is calculated\n     *\n     * @returns The unicode character offset\n     */\n    function jsIndexToCharIndex(jsIdx, text) {\n        if (HAS_SURROGATES) {\n            // not using surrogates, nothing to do\n            return jsIdx;\n        }\n        let charIdx = jsIdx;\n        for (let i = 0; i + 1 < text.length && i < jsIdx; i++) {\n            let charCode = text.charCodeAt(i);\n            // check for surrogate pair\n            if (charCode >= 0xd800 && charCode <= 0xdbff) {\n                let nextCharCode = text.charCodeAt(i + 1);\n                if (nextCharCode >= 0xdc00 && nextCharCode <= 0xdfff) {\n                    charIdx--;\n                    i++;\n                }\n            }\n        }\n        return charIdx;\n    }\n    Text.jsIndexToCharIndex = jsIndexToCharIndex;\n    /**\n     * Convert a unicode character offset to a javascript string index.\n     *\n     * @param charIdx - The index in unicode characters\n     *\n     * @param text - The text in which the offset is calculated\n     *\n     * @returns The js-native index\n     */\n    function charIndexToJsIndex(charIdx, text) {\n        if (HAS_SURROGATES) {\n            // not using surrogates, nothing to do\n            return charIdx;\n        }\n        let jsIdx = charIdx;\n        for (let i = 0; i + 1 < text.length && i < jsIdx; i++) {\n            let charCode = text.charCodeAt(i);\n            // check for surrogate pair\n            if (charCode >= 0xd800 && charCode <= 0xdbff) {\n                let nextCharCode = text.charCodeAt(i + 1);\n                if (nextCharCode >= 0xdc00 && nextCharCode <= 0xdfff) {\n                    jsIdx++;\n                    i++;\n                }\n            }\n        }\n        return jsIdx;\n    }\n    Text.charIndexToJsIndex = charIndexToJsIndex;\n    /**\n     * Given a 'snake-case', 'snake_case', or 'snake case' string,\n     * will return the camel case version: 'snakeCase'.\n     *\n     * @param str: the snake-case input string.\n     *\n     * @param upper: default = false. If true, the first letter of the\n     * returned string will be capitalized.\n     *\n     * @returns the camel case version of the input string.\n     */\n    function camelCase(str, upper = false) {\n        return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+|-+|_+)/g, function (match, index) {\n            if (+match === 0 || match[0] === '-') {\n                return '';\n            }\n            else if (index === 0 && !upper) {\n                return match.toLowerCase();\n            }\n            else {\n                return match.toUpperCase();\n            }\n        });\n    }\n    Text.camelCase = camelCase;\n    /**\n     * Given a string, title case the words in the string.\n     *\n     * @param str: the string to title case.\n     *\n     * @returns the same string, but with each word capitalized.\n     */\n    function titleCase(str) {\n        return str\n            .toLowerCase()\n            .split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(' ');\n    }\n    Text.titleCase = titleCase;\n})(Text = exports.Text || (exports.Text = {}));\n//# sourceMappingURL=text.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst moment_1 = __importDefault(require(\"moment\"));\n/**\n * The namespace for date functions.\n */\nvar Time;\n(function (Time) {\n    /**\n     * Convert a timestring to a human readable string (e.g. 'two minutes ago').\n     *\n     * @param value - The date timestring or date object.\n     *\n     * @returns A formatted date.\n     */\n    function formatHuman(value) {\n        let time = moment_1.default(value).fromNow();\n        time = time === 'a few seconds ago' ? 'seconds ago' : time;\n        return time;\n    }\n    Time.formatHuman = formatHuman;\n    /**\n     * Convert a timestring to a date format.\n     *\n     * @param value - The date timestring or date object.\n     *\n     * @param format - The format string.\n     *\n     * @returns A formatted date.\n     */\n    function format(value, format = 'YYYY-MM-DD HH:mm') {\n        return moment_1.default(value).format(format);\n    }\n    Time.format = format;\n})(Time = exports.Time || (exports.Time = {}));\n//# sourceMappingURL=time.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@phosphor/coreutils\");\n/* tslint:disable */\n/**\n * The setting registry token.\n */\nexports.ISettingRegistry = new coreutils_1.Token('@jupyterlab/coreutils:ISettingRegistry');\n/* tslint:disable */\n/**\n * The default state database token.\n */\nexports.IStateDB = new coreutils_1.Token('@jupyterlab/coreutils:IStateDB');\n//# sourceMappingURL=tokens.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_parse_1 = __importDefault(require(\"url-parse\"));\n/**\n * The namespace for URL-related functions.\n */\nvar URLExt;\n(function (URLExt) {\n    /**\n     * Parse a url into a URL object.\n     *\n     * @param urlString - The URL string to parse.\n     *\n     * @returns A URL object.\n     */\n    function parse(url) {\n        if (typeof document !== 'undefined' && document) {\n            let a = document.createElement('a');\n            a.href = url;\n            return a;\n        }\n        return url_parse_1.default(url);\n    }\n    URLExt.parse = parse;\n    /**\n     * Normalize a url.\n     */\n    function normalize(url) {\n        return url && parse(url).toString();\n    }\n    URLExt.normalize = normalize;\n    /**\n     * Join a sequence of url components and normalizes as in node `path.join`.\n     *\n     * @param parts - The url components.\n     *\n     * @returns the joined url.\n     */\n    function join(...parts) {\n        parts = parts || [];\n        // Isolate the top element.\n        const top = parts[0] || '';\n        // Check whether protocol shorthand is being used.\n        const shorthand = top.indexOf('//') === 0;\n        // Parse the top element into a header collection.\n        const header = top.match(/(\\w+)(:)(\\/\\/)?/);\n        const protocol = header && header[1];\n        const colon = protocol && header[2];\n        const slashes = colon && header[3];\n        // Construct the URL prefix.\n        const prefix = shorthand\n            ? '//'\n            : [protocol, colon, slashes].filter(str => str).join('');\n        // Construct the URL body omitting the prefix of the top value.\n        const body = [top.indexOf(prefix) === 0 ? top.replace(prefix, '') : top]\n            // Filter out top value if empty.\n            .filter(str => str)\n            // Remove leading slashes in all subsequent URL body elements.\n            .concat(parts.slice(1).map(str => str.replace(/^\\//, '')))\n            .join('/')\n            // Replace multiple slashes with one.\n            .replace(/\\/+/g, '/');\n        return prefix + body;\n    }\n    URLExt.join = join;\n    /**\n     * Encode the components of a multi-segment url.\n     *\n     * @param url - The url to encode.\n     *\n     * @returns the encoded url.\n     *\n     * #### Notes\n     * Preserves the `'/'` separators.\n     * Should not include the base url, since all parts are escaped.\n     */\n    function encodeParts(url) {\n        return join(...url.split('/').map(encodeURIComponent));\n    }\n    URLExt.encodeParts = encodeParts;\n    /**\n     * Return a serialized object string suitable for a query.\n     *\n     * @param object - The source object.\n     *\n     * @returns an encoded url query.\n     *\n     * #### Notes\n     * Modified version of [stackoverflow](http://stackoverflow.com/a/30707423).\n     */\n    function objectToQueryString(value) {\n        const keys = Object.keys(value).filter(key => key.length > 0);\n        if (!keys.length) {\n            return '';\n        }\n        return ('?' +\n            keys\n                .map(key => {\n                const content = encodeURIComponent(String(value[key]));\n                return key + (content ? '=' + content : '');\n            })\n                .join('&'));\n    }\n    URLExt.objectToQueryString = objectToQueryString;\n    /**\n     * Return a parsed object that represents the values in a query string.\n     */\n    function queryStringToObject(value) {\n        return value\n            .replace(/^\\?/, '')\n            .split('&')\n            .reduce((acc, val) => {\n            const [key, value] = val.split('=');\n            if (key.length > 0) {\n                acc[key] = decodeURIComponent(value || '');\n            }\n            return acc;\n        }, {});\n    }\n    URLExt.queryStringToObject = queryStringToObject;\n    /**\n     * Test whether the url is a local url.\n     *\n     * #### Notes\n     * This function returns `false` for any fully qualified url, including\n     * `data:`, `file:`, and `//` protocol URLs.\n     */\n    function isLocal(url) {\n        const { protocol } = parse(url);\n        return url.toLowerCase().indexOf(protocol) !== 0 && url.indexOf('/') !== 0;\n    }\n    URLExt.isLocal = isLocal;\n})(URLExt = exports.URLExt || (exports.URLExt = {}));\n//# sourceMappingURL=url.js.map","'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i\n  , whitespace = '[\\\\x09\\\\x0A\\\\x0B\\\\x0C\\\\x0D\\\\x20\\\\xA0\\\\u1680\\\\u180E\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200A\\\\u202F\\\\u205F\\\\u3000\\\\u2028\\\\u2029\\\\uFEFF]'\n  , left = new RegExp('^'+ whitespace +'+');\n\n/**\n * Trim a given string.\n *\n * @param {String} str String to trim.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(left, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address) {          // Sanitize what is left of the address\n    return address.replace('\\\\', '/');\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address) {\n  address = trimLeft(address);\n  var match = protocolre.exec(address);\n\n  return {\n    protocol: match[1] ? match[1].toLowerCase() : '',\n    slashes: !!match[2],\n    rest: match[3]\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = global || self, factory(global.lumino_coreutils = {}));\n}(this, (function (exports) { 'use strict';\n\n    // Copyright (c) Jupyter Development Team.\n    (function (JSONExt) {\n        /**\n         * A shared frozen empty JSONObject\n         */\n        JSONExt.emptyObject = Object.freeze({});\n        /**\n         * A shared frozen empty JSONArray\n         */\n        JSONExt.emptyArray = Object.freeze([]);\n        /**\n         * Test whether a JSON value is a primitive.\n         *\n         * @param value - The JSON value of interest.\n         *\n         * @returns `true` if the value is a primitive,`false` otherwise.\n         */\n        function isPrimitive(value) {\n            return (value === null ||\n                typeof value === 'boolean' ||\n                typeof value === 'number' ||\n                typeof value === 'string');\n        }\n        JSONExt.isPrimitive = isPrimitive;\n        function isArray(value) {\n            return Array.isArray(value);\n        }\n        JSONExt.isArray = isArray;\n        function isObject(value) {\n            return !isPrimitive(value) && !isArray(value);\n        }\n        JSONExt.isObject = isObject;\n        /**\n         * Compare two JSON values for deep equality.\n         *\n         * @param first - The first JSON value of interest.\n         *\n         * @param second - The second JSON value of interest.\n         *\n         * @returns `true` if the values are equivalent, `false` otherwise.\n         */\n        function deepEqual(first, second) {\n            // Check referential and primitive equality first.\n            if (first === second) {\n                return true;\n            }\n            // If one is a primitive, the `===` check ruled out the other.\n            if (isPrimitive(first) || isPrimitive(second)) {\n                return false;\n            }\n            // Test whether they are arrays.\n            var a1 = isArray(first);\n            var a2 = isArray(second);\n            // Bail if the types are different.\n            if (a1 !== a2) {\n                return false;\n            }\n            // If they are both arrays, compare them.\n            if (a1 && a2) {\n                return deepArrayEqual(first, second);\n            }\n            // At this point, they must both be objects.\n            return deepObjectEqual(first, second);\n        }\n        JSONExt.deepEqual = deepEqual;\n        /**\n         * Create a deep copy of a JSON value.\n         *\n         * @param value - The JSON value to copy.\n         *\n         * @returns A deep copy of the given JSON value.\n         */\n        function deepCopy(value) {\n            // Do nothing for primitive values.\n            if (isPrimitive(value)) {\n                return value;\n            }\n            // Deep copy an array.\n            if (isArray(value)) {\n                return deepArrayCopy(value);\n            }\n            // Deep copy an object.\n            return deepObjectCopy(value);\n        }\n        JSONExt.deepCopy = deepCopy;\n        /**\n         * Compare two JSON arrays for deep equality.\n         */\n        function deepArrayEqual(first, second) {\n            // Check referential equality first.\n            if (first === second) {\n                return true;\n            }\n            // Test the arrays for equal length.\n            if (first.length !== second.length) {\n                return false;\n            }\n            // Compare the values for equality.\n            for (var i = 0, n = first.length; i < n; ++i) {\n                if (!deepEqual(first[i], second[i])) {\n                    return false;\n                }\n            }\n            // At this point, the arrays are equal.\n            return true;\n        }\n        /**\n         * Compare two JSON objects for deep equality.\n         */\n        function deepObjectEqual(first, second) {\n            // Check referential equality first.\n            if (first === second) {\n                return true;\n            }\n            // Check for the first object's keys in the second object.\n            for (var key in first) {\n                if (first[key] !== undefined && !(key in second)) {\n                    return false;\n                }\n            }\n            // Check for the second object's keys in the first object.\n            for (var key in second) {\n                if (second[key] !== undefined && !(key in first)) {\n                    return false;\n                }\n            }\n            // Compare the values for equality.\n            for (var key in first) {\n                // Get the values.\n                var firstValue = first[key];\n                var secondValue = second[key];\n                // If both are undefined, ignore the key.\n                if (firstValue === undefined && secondValue === undefined) {\n                    continue;\n                }\n                // If only one value is undefined, the objects are not equal.\n                if (firstValue === undefined || secondValue === undefined) {\n                    return false;\n                }\n                // Compare the values.\n                if (!deepEqual(firstValue, secondValue)) {\n                    return false;\n                }\n            }\n            // At this point, the objects are equal.\n            return true;\n        }\n        /**\n         * Create a deep copy of a JSON array.\n         */\n        function deepArrayCopy(value) {\n            var result = new Array(value.length);\n            for (var i = 0, n = value.length; i < n; ++i) {\n                result[i] = deepCopy(value[i]);\n            }\n            return result;\n        }\n        /**\n         * Create a deep copy of a JSON object.\n         */\n        function deepObjectCopy(value) {\n            var result = {};\n            for (var key in value) {\n                // Ignore undefined values.\n                var subvalue = value[key];\n                if (subvalue === undefined) {\n                    continue;\n                }\n                result[key] = deepCopy(subvalue);\n            }\n            return result;\n        }\n    })(exports.JSONExt || (exports.JSONExt = {}));\n\n    // Copyright (c) Jupyter Development Team.\n    // Distributed under the terms of the Modified BSD License.\n    /*-----------------------------------------------------------------------------\n    | Copyright (c) 2014-2017, PhosphorJS Contributors\n    |\n    | Distributed under the terms of the BSD 3-Clause License.\n    |\n    | The full license is in the file LICENSE, distributed with this software.\n    |----------------------------------------------------------------------------*/\n    /**\n     * An object which stores MIME data for general application use.\n     *\n     * #### Notes\n     * This class does not attempt to enforce \"correctness\" of MIME types\n     * and their associated data. Since this class is designed to transfer\n     * arbitrary data and objects within the same application, it assumes\n     * that the user provides correct and accurate data.\n     */\n    var MimeData = /** @class */ (function () {\n        function MimeData() {\n            this._types = [];\n            this._values = [];\n        }\n        /**\n         * Get an array of the MIME types contained within the dataset.\n         *\n         * @returns A new array of the MIME types, in order of insertion.\n         */\n        MimeData.prototype.types = function () {\n            return this._types.slice();\n        };\n        /**\n         * Test whether the dataset has an entry for the given type.\n         *\n         * @param mime - The MIME type of interest.\n         *\n         * @returns `true` if the dataset contains a value for the given\n         *   MIME type, `false` otherwise.\n         */\n        MimeData.prototype.hasData = function (mime) {\n            return this._types.indexOf(mime) !== -1;\n        };\n        /**\n         * Get the data value for the given MIME type.\n         *\n         * @param mime - The MIME type of interest.\n         *\n         * @returns The value for the given MIME type, or `undefined` if\n         *   the dataset does not contain a value for the type.\n         */\n        MimeData.prototype.getData = function (mime) {\n            var i = this._types.indexOf(mime);\n            return i !== -1 ? this._values[i] : undefined;\n        };\n        /**\n         * Set the data value for the given MIME type.\n         *\n         * @param mime - The MIME type of interest.\n         *\n         * @param data - The data value for the given MIME type.\n         *\n         * #### Notes\n         * This will overwrite any previous entry for the MIME type.\n         */\n        MimeData.prototype.setData = function (mime, data) {\n            this.clearData(mime);\n            this._types.push(mime);\n            this._values.push(data);\n        };\n        /**\n         * Remove the data entry for the given MIME type.\n         *\n         * @param mime - The MIME type of interest.\n         *\n         * #### Notes\n         * This is a no-op if there is no entry for the given MIME type.\n         */\n        MimeData.prototype.clearData = function (mime) {\n            var i = this._types.indexOf(mime);\n            if (i !== -1) {\n                this._types.splice(i, 1);\n                this._values.splice(i, 1);\n            }\n        };\n        /**\n         * Remove all data entries from the dataset.\n         */\n        MimeData.prototype.clear = function () {\n            this._types.length = 0;\n            this._values.length = 0;\n        };\n        return MimeData;\n    }());\n\n    // Copyright (c) Jupyter Development Team.\n    // Distributed under the terms of the Modified BSD License.\n    /*-----------------------------------------------------------------------------\n    | Copyright (c) 2014-2017, PhosphorJS Contributors\n    |\n    | Distributed under the terms of the BSD 3-Clause License.\n    |\n    | The full license is in the file LICENSE, distributed with this software.\n    |----------------------------------------------------------------------------*/\n    /**\n     * A class which wraps a promise into a delegate object.\n     *\n     * #### Notes\n     * This class is useful when the logic to resolve or reject a promise\n     * cannot be defined at the point where the promise is created.\n     */\n    var PromiseDelegate = /** @class */ (function () {\n        /**\n         * Construct a new promise delegate.\n         */\n        function PromiseDelegate() {\n            var _this = this;\n            this.promise = new Promise(function (resolve, reject) {\n                _this._resolve = resolve;\n                _this._reject = reject;\n            });\n        }\n        /**\n         * Resolve the wrapped promise with the given value.\n         *\n         * @param value - The value to use for resolving the promise.\n         */\n        PromiseDelegate.prototype.resolve = function (value) {\n            var resolve = this._resolve;\n            resolve(value);\n        };\n        /**\n         * Reject the wrapped promise with the given value.\n         *\n         * @reason - The reason for rejecting the promise.\n         */\n        PromiseDelegate.prototype.reject = function (reason) {\n            var reject = this._reject;\n            reject(reason);\n        };\n        return PromiseDelegate;\n    }());\n\n    // Copyright (c) Jupyter Development Team.\n    (function (Random) {\n        /**\n         * A function which generates random bytes.\n         *\n         * @param buffer - The `Uint8Array` to fill with random bytes.\n         *\n         * #### Notes\n         * A cryptographically strong random number generator will be used if\n         * available. Otherwise, `Math.random` will be used as a fallback for\n         * randomness.\n         *\n         * The following RNGs are supported, listed in order of precedence:\n         *   - `window.crypto.getRandomValues`\n         *   - `window.msCrypto.getRandomValues`\n         *   - `require('crypto').randomFillSync\n         *   - `require('crypto').randomBytes\n         *   - `Math.random`\n         */\n        Random.getRandomValues = (function () {\n            // Look up the crypto module if available.\n            var crypto = ((typeof window !== 'undefined' && (window.crypto || window.msCrypto)) ||\n                (typeof require !== 'undefined' && require('crypto')) || null);\n            // Modern browsers and IE 11\n            if (crypto && typeof crypto.getRandomValues === 'function') {\n                return function getRandomValues(buffer) {\n                    return crypto.getRandomValues(buffer);\n                };\n            }\n            // Node 7+\n            if (crypto && typeof crypto.randomFillSync === 'function') {\n                return function getRandomValues(buffer) {\n                    return crypto.randomFillSync(buffer);\n                };\n            }\n            // Node 0.10+\n            if (crypto && typeof crypto.randomBytes === 'function') {\n                return function getRandomValues(buffer) {\n                    var bytes = crypto.randomBytes(buffer.length);\n                    for (var i = 0, n = bytes.length; i < n; ++i) {\n                        buffer[i] = bytes[i];\n                    }\n                };\n            }\n            // Fallback\n            return function getRandomValues(buffer) {\n                var value = 0;\n                for (var i = 0, n = buffer.length; i < n; ++i) {\n                    if (i % 4 === 0) {\n                        value = Math.random() * 0xFFFFFFFF >>> 0;\n                    }\n                    buffer[i] = value & 0xFF;\n                    value >>>= 8;\n                }\n            };\n        })();\n    })(exports.Random || (exports.Random = {}));\n\n    // Copyright (c) Jupyter Development Team.\n    // Distributed under the terms of the Modified BSD License.\n    /*-----------------------------------------------------------------------------\n    | Copyright (c) 2014-2017, PhosphorJS Contributors\n    |\n    | Distributed under the terms of the BSD 3-Clause License.\n    |\n    | The full license is in the file LICENSE, distributed with this software.\n    |----------------------------------------------------------------------------*/\n    /**\n     * A runtime object which captures compile-time type information.\n     *\n     * #### Notes\n     * A token captures the compile-time type of an interface or class in\n     * an object which can be used at runtime in a type-safe fashion.\n     */\n    var Token = /** @class */ (function () {\n        /**\n         * Construct a new token.\n         *\n         * @param name - A human readable name for the token.\n         */\n        function Token(name) {\n            this.name = name;\n            this._tokenStructuralPropertyT = null;\n        }\n        return Token;\n    }());\n\n    // Copyright (c) Jupyter Development Team.\n    (function (UUID) {\n        /**\n         * A function which generates UUID v4 identifiers.\n         *\n         * @returns A new UUID v4 string.\n         *\n         * #### Notes\n         * This implementation complies with RFC 4122.\n         *\n         * This uses `Random.getRandomValues()` for random bytes, which in\n         * turn will use the underlying `crypto` module of the platform if\n         * it is available. The fallback for randomness is `Math.random`.\n         */\n        UUID.uuid4 = (function () {\n            // Create a 16 byte array to hold the random values.\n            var bytes = new Uint8Array(16);\n            // Create a look up table from bytes to hex strings.\n            var lut = new Array(256);\n            // Pad the single character hex digits with a leading zero.\n            for (var i = 0; i < 16; ++i) {\n                lut[i] = '0' + i.toString(16);\n            }\n            // Populate the rest of the hex digits.\n            for (var i = 16; i < 256; ++i) {\n                lut[i] = i.toString(16);\n            }\n            // Return a function which generates the UUID.\n            return function uuid4() {\n                // Get a new batch of random values.\n                exports.Random.getRandomValues(bytes);\n                // Set the UUID version number to 4.\n                bytes[6] = 0x40 | (bytes[6] & 0x0F);\n                // Set the clock sequence bit to the RFC spec.\n                bytes[8] = 0x80 | (bytes[8] & 0x3F);\n                // Assemble the UUID string.\n                return (lut[bytes[0]] +\n                    lut[bytes[1]] +\n                    lut[bytes[2]] +\n                    lut[bytes[3]] +\n                    '-' +\n                    lut[bytes[4]] +\n                    lut[bytes[5]] +\n                    '-' +\n                    lut[bytes[6]] +\n                    lut[bytes[7]] +\n                    '-' +\n                    lut[bytes[8]] +\n                    lut[bytes[9]] +\n                    '-' +\n                    lut[bytes[10]] +\n                    lut[bytes[11]] +\n                    lut[bytes[12]] +\n                    lut[bytes[13]] +\n                    lut[bytes[14]] +\n                    lut[bytes[15]]);\n            };\n        })();\n    })(exports.UUID || (exports.UUID = {}));\n\n    exports.MimeData = MimeData;\n    exports.PromiseDelegate = PromiseDelegate;\n    exports.Token = Token;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.js.map\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@lumino/algorithm'), require('@lumino/signaling')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@lumino/algorithm', '@lumino/signaling'], factory) :\n    (global = global || self, factory(global.lumino_disposable = {}, global.lumino_algorithm, global.lumino_signaling));\n}(this, (function (exports, algorithm, signaling) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\n\n    /**\n     * A disposable object which delegates to a callback function.\n     */\n    var DisposableDelegate = /** @class */ (function () {\n        /**\n         * Construct a new disposable delegate.\n         *\n         * @param fn - The callback function to invoke on dispose.\n         */\n        function DisposableDelegate(fn) {\n            this._fn = fn;\n        }\n        Object.defineProperty(DisposableDelegate.prototype, \"isDisposed\", {\n            /**\n             * Test whether the delegate has been disposed.\n             */\n            get: function () {\n                return !this._fn;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Dispose of the delegate and invoke the callback function.\n         */\n        DisposableDelegate.prototype.dispose = function () {\n            if (!this._fn) {\n                return;\n            }\n            var fn = this._fn;\n            this._fn = null;\n            fn();\n        };\n        return DisposableDelegate;\n    }());\n    /**\n     * An observable disposable object which delegates to a callback function.\n     */\n    var ObservableDisposableDelegate = /** @class */ (function (_super) {\n        __extends(ObservableDisposableDelegate, _super);\n        function ObservableDisposableDelegate() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._disposed = new signaling.Signal(_this);\n            return _this;\n        }\n        Object.defineProperty(ObservableDisposableDelegate.prototype, \"disposed\", {\n            /**\n             * A signal emitted when the delegate is disposed.\n             */\n            get: function () {\n                return this._disposed;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Dispose of the delegate and invoke the callback function.\n         */\n        ObservableDisposableDelegate.prototype.dispose = function () {\n            if (this.isDisposed) {\n                return;\n            }\n            _super.prototype.dispose.call(this);\n            this._disposed.emit(undefined);\n            signaling.Signal.clearData(this);\n        };\n        return ObservableDisposableDelegate;\n    }(DisposableDelegate));\n    /**\n     * An object which manages a collection of disposable items.\n     */\n    exports.DisposableSet = /** @class */ (function () {\n        /**\n         * Construct a new disposable set.\n         */\n        function DisposableSet() {\n            this._isDisposed = false;\n            this._items = new Set();\n        }\n        Object.defineProperty(DisposableSet.prototype, \"isDisposed\", {\n            /**\n             * Test whether the set has been disposed.\n             */\n            get: function () {\n                return this._isDisposed;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Dispose of the set and the items it contains.\n         *\n         * #### Notes\n         * Items are disposed in the order they are added to the set.\n         */\n        DisposableSet.prototype.dispose = function () {\n            if (this._isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this._items.forEach(function (item) { item.dispose(); });\n            this._items.clear();\n        };\n        /**\n         * Test whether the set contains a specific item.\n         *\n         * @param item - The item of interest.\n         *\n         * @returns `true` if the set contains the item, `false` otherwise.\n         */\n        DisposableSet.prototype.contains = function (item) {\n            return this._items.has(item);\n        };\n        /**\n         * Add a disposable item to the set.\n         *\n         * @param item - The item to add to the set.\n         *\n         * #### Notes\n         * If the item is already contained in the set, this is a no-op.\n         */\n        DisposableSet.prototype.add = function (item) {\n            this._items.add(item);\n        };\n        /**\n         * Remove a disposable item from the set.\n         *\n         * @param item - The item to remove from the set.\n         *\n         * #### Notes\n         * If the item is not contained in the set, this is a no-op.\n         */\n        DisposableSet.prototype.remove = function (item) {\n            this._items.delete(item);\n        };\n        /**\n         * Remove all items from the set.\n         */\n        DisposableSet.prototype.clear = function () {\n            this._items.clear();\n        };\n        return DisposableSet;\n    }());\n    /**\n     * The namespace for the `DisposableSet` class statics.\n     */\n    (function (DisposableSet) {\n        /**\n         * Create a disposable set from an iterable of items.\n         *\n         * @param items - The iterable or array-like object of interest.\n         *\n         * @returns A new disposable initialized with the given items.\n         */\n        function from(items) {\n            var set = new DisposableSet();\n            algorithm.each(items, function (item) { set.add(item); });\n            return set;\n        }\n        DisposableSet.from = from;\n    })(exports.DisposableSet || (exports.DisposableSet = {}));\n    /**\n     * An observable object which manages a collection of disposable items.\n     */\n    exports.ObservableDisposableSet = /** @class */ (function (_super) {\n        __extends(ObservableDisposableSet, _super);\n        function ObservableDisposableSet() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._disposed = new signaling.Signal(_this);\n            return _this;\n        }\n        Object.defineProperty(ObservableDisposableSet.prototype, \"disposed\", {\n            /**\n             * A signal emitted when the set is disposed.\n             */\n            get: function () {\n                return this._disposed;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Dispose of the set and the items it contains.\n         *\n         * #### Notes\n         * Items are disposed in the order they are added to the set.\n         */\n        ObservableDisposableSet.prototype.dispose = function () {\n            if (this.isDisposed) {\n                return;\n            }\n            _super.prototype.dispose.call(this);\n            this._disposed.emit(undefined);\n            signaling.Signal.clearData(this);\n        };\n        return ObservableDisposableSet;\n    }(exports.DisposableSet));\n    /**\n     * The namespace for the `ObservableDisposableSet` class statics.\n     */\n    (function (ObservableDisposableSet) {\n        /**\n         * Create an observable disposable set from an iterable of items.\n         *\n         * @param items - The iterable or array-like object of interest.\n         *\n         * @returns A new disposable initialized with the given items.\n         */\n        function from(items) {\n            var set = new ObservableDisposableSet();\n            algorithm.each(items, function (item) { set.add(item); });\n            return set;\n        }\n        ObservableDisposableSet.from = from;\n    })(exports.ObservableDisposableSet || (exports.ObservableDisposableSet = {}));\n\n    exports.DisposableDelegate = DisposableDelegate;\n    exports.ObservableDisposableDelegate = ObservableDisposableDelegate;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.js.map\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = global || self, factory(global.lumino_properties = {}));\n}(this, (function (exports) { 'use strict';\n\n    // Copyright (c) Jupyter Development Team.\n    // Distributed under the terms of the Modified BSD License.\n    /*-----------------------------------------------------------------------------\n    | Copyright (c) 2014-2017, PhosphorJS Contributors\n    |\n    | Distributed under the terms of the BSD 3-Clause License.\n    |\n    | The full license is in the file LICENSE, distributed with this software.\n    |----------------------------------------------------------------------------*/\n    /**\n     * A class which attaches a value to an external object.\n     *\n     * #### Notes\n     * Attached properties are used to extend the state of an object with\n     * semantic data from an unrelated class. They also encapsulate value\n     * creation, coercion, and notification.\n     *\n     * Because attached property values are stored in a hash table, which\n     * in turn is stored in a WeakMap keyed on the owner object, there is\n     * non-trivial storage overhead involved in their use. The pattern is\n     * therefore best used for the storage of rare data.\n     */\n    exports.AttachedProperty = /** @class */ (function () {\n        /**\n         * Construct a new attached property.\n         *\n         * @param options - The options for initializing the property.\n         */\n        function AttachedProperty(options) {\n            this._pid = Private.nextPID();\n            this.name = options.name;\n            this._create = options.create;\n            this._coerce = options.coerce || null;\n            this._compare = options.compare || null;\n            this._changed = options.changed || null;\n        }\n        /**\n         * Get the current value of the property for a given owner.\n         *\n         * @param owner - The property owner of interest.\n         *\n         * @returns The current value of the property.\n         *\n         * #### Notes\n         * If the value has not yet been set, the default value will be\n         * computed and assigned as the current value of the property.\n         */\n        AttachedProperty.prototype.get = function (owner) {\n            var value;\n            var map = Private.ensureMap(owner);\n            if (this._pid in map) {\n                value = map[this._pid];\n            }\n            else {\n                value = map[this._pid] = this._createValue(owner);\n            }\n            return value;\n        };\n        /**\n         * Set the current value of the property for a given owner.\n         *\n         * @param owner - The property owner of interest.\n         *\n         * @param value - The value for the property.\n         *\n         * #### Notes\n         * If the value has not yet been set, the default value will be\n         * computed and used as the previous value for the comparison.\n         */\n        AttachedProperty.prototype.set = function (owner, value) {\n            var oldValue;\n            var map = Private.ensureMap(owner);\n            if (this._pid in map) {\n                oldValue = map[this._pid];\n            }\n            else {\n                oldValue = map[this._pid] = this._createValue(owner);\n            }\n            var newValue = this._coerceValue(owner, value);\n            this._maybeNotify(owner, oldValue, map[this._pid] = newValue);\n        };\n        /**\n         * Explicitly coerce the current property value for a given owner.\n         *\n         * @param owner - The property owner of interest.\n         *\n         * #### Notes\n         * If the value has not yet been set, the default value will be\n         * computed and used as the previous value for the comparison.\n         */\n        AttachedProperty.prototype.coerce = function (owner) {\n            var oldValue;\n            var map = Private.ensureMap(owner);\n            if (this._pid in map) {\n                oldValue = map[this._pid];\n            }\n            else {\n                oldValue = map[this._pid] = this._createValue(owner);\n            }\n            var newValue = this._coerceValue(owner, oldValue);\n            this._maybeNotify(owner, oldValue, map[this._pid] = newValue);\n        };\n        /**\n         * Get or create the default value for the given owner.\n         */\n        AttachedProperty.prototype._createValue = function (owner) {\n            var create = this._create;\n            return create(owner);\n        };\n        /**\n         * Coerce the value for the given owner.\n         */\n        AttachedProperty.prototype._coerceValue = function (owner, value) {\n            var coerce = this._coerce;\n            return coerce ? coerce(owner, value) : value;\n        };\n        /**\n         * Compare the old value and new value for equality.\n         */\n        AttachedProperty.prototype._compareValue = function (oldValue, newValue) {\n            var compare = this._compare;\n            return compare ? compare(oldValue, newValue) : oldValue === newValue;\n        };\n        /**\n         * Run the change notification if the given values are different.\n         */\n        AttachedProperty.prototype._maybeNotify = function (owner, oldValue, newValue) {\n            var changed = this._changed;\n            if (changed && !this._compareValue(oldValue, newValue)) {\n                changed(owner, oldValue, newValue);\n            }\n        };\n        return AttachedProperty;\n    }());\n    /**\n     * The namespace for the `AttachedProperty` class statics.\n     */\n    (function (AttachedProperty) {\n        /**\n         * Clear the stored property data for the given owner.\n         *\n         * @param owner - The property owner of interest.\n         *\n         * #### Notes\n         * This will clear all property values for the owner, but it will\n         * **not** run the change notification for any of the properties.\n         */\n        function clearData(owner) {\n            Private.ownerData.delete(owner);\n        }\n        AttachedProperty.clearData = clearData;\n    })(exports.AttachedProperty || (exports.AttachedProperty = {}));\n    /**\n     * The namespace for the module implementation details.\n     */\n    var Private;\n    (function (Private) {\n        /**\n         * A weak mapping of property owner to property map.\n         */\n        Private.ownerData = new WeakMap();\n        /**\n         * A function which computes successive unique property ids.\n         */\n        Private.nextPID = (function () {\n            var id = 0;\n            return function () {\n                var rand = Math.random();\n                var stem = (\"\" + rand).slice(2);\n                return \"pid-\" + stem + \"-\" + id++;\n            };\n        })();\n        /**\n         * Lookup the data map for the property owner.\n         *\n         * This will create the map if one does not already exist.\n         */\n        function ensureMap(owner) {\n            var map = Private.ownerData.get(owner);\n            if (map) {\n                return map;\n            }\n            map = Object.create(null);\n            Private.ownerData.set(owner, map);\n            return map;\n        }\n        Private.ensureMap = ensureMap;\n    })(Private || (Private = {}));\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.js.map\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@lumino/algorithm')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@lumino/algorithm'], factory) :\n    (global = global || self, factory(global.lumino_signaling = {}, global.lumino_algorithm));\n}(this, (function (exports, algorithm) { 'use strict';\n\n    // Copyright (c) Jupyter Development Team.\n    /**\n     * A concrete implementation of `ISignal`.\n     *\n     * #### Example\n     * ```typescript\n     * import { ISignal, Signal } from '@lumino/signaling';\n     *\n     * class SomeClass {\n     *\n     *   constructor(name: string) {\n     *     this.name = name;\n     *   }\n     *\n     *   readonly name: string;\n     *\n     *   get valueChanged: ISignal<this, number> {\n     *     return this._valueChanged;\n     *   }\n     *\n     *   get value(): number {\n     *     return this._value;\n     *   }\n     *\n     *   set value(value: number) {\n     *     if (value === this._value) {\n     *       return;\n     *     }\n     *     this._value = value;\n     *     this._valueChanged.emit(value);\n     *   }\n     *\n     *   private _value = 0;\n     *   private _valueChanged = new Signal<this, number>(this);\n     * }\n     *\n     * function logger(sender: SomeClass, value: number): void {\n     *   console.log(sender.name, value);\n     * }\n     *\n     * let m1 = new SomeClass('foo');\n     * let m2 = new SomeClass('bar');\n     *\n     * m1.valueChanged.connect(logger);\n     * m2.valueChanged.connect(logger);\n     *\n     * m1.value = 42;  // logs: foo 42\n     * m2.value = 17;  // logs: bar 17\n     * ```\n     */\n    exports.Signal = /** @class */ (function () {\n        /**\n         * Construct a new signal.\n         *\n         * @param sender - The sender which owns the signal.\n         */\n        function Signal(sender) {\n            this.sender = sender;\n        }\n        /**\n         * Connect a slot to the signal.\n         *\n         * @param slot - The slot to invoke when the signal is emitted.\n         *\n         * @param thisArg - The `this` context for the slot. If provided,\n         *   this must be a non-primitive object.\n         *\n         * @returns `true` if the connection succeeds, `false` otherwise.\n         */\n        Signal.prototype.connect = function (slot, thisArg) {\n            return Private.connect(this, slot, thisArg);\n        };\n        /**\n         * Disconnect a slot from the signal.\n         *\n         * @param slot - The slot to disconnect from the signal.\n         *\n         * @param thisArg - The `this` context for the slot. If provided,\n         *   this must be a non-primitive object.\n         *\n         * @returns `true` if the connection is removed, `false` otherwise.\n         */\n        Signal.prototype.disconnect = function (slot, thisArg) {\n            return Private.disconnect(this, slot, thisArg);\n        };\n        /**\n         * Emit the signal and invoke the connected slots.\n         *\n         * @param args - The args to pass to the connected slots.\n         *\n         * #### Notes\n         * Slots are invoked synchronously in connection order.\n         *\n         * Exceptions thrown by connected slots will be caught and logged.\n         */\n        Signal.prototype.emit = function (args) {\n            Private.emit(this, args);\n        };\n        return Signal;\n    }());\n    /**\n     * The namespace for the `Signal` class statics.\n     */\n    (function (Signal) {\n        /**\n         * Remove all connections between a sender and receiver.\n         *\n         * @param sender - The sender object of interest.\n         *\n         * @param receiver - The receiver object of interest.\n         *\n         * #### Notes\n         * If a `thisArg` is provided when connecting a signal, that object\n         * is considered the receiver. Otherwise, the `slot` is considered\n         * the receiver.\n         */\n        function disconnectBetween(sender, receiver) {\n            Private.disconnectBetween(sender, receiver);\n        }\n        Signal.disconnectBetween = disconnectBetween;\n        /**\n         * Remove all connections where the given object is the sender.\n         *\n         * @param sender - The sender object of interest.\n         */\n        function disconnectSender(sender) {\n            Private.disconnectSender(sender);\n        }\n        Signal.disconnectSender = disconnectSender;\n        /**\n         * Remove all connections where the given object is the receiver.\n         *\n         * @param receiver - The receiver object of interest.\n         *\n         * #### Notes\n         * If a `thisArg` is provided when connecting a signal, that object\n         * is considered the receiver. Otherwise, the `slot` is considered\n         * the receiver.\n         */\n        function disconnectReceiver(receiver) {\n            Private.disconnectReceiver(receiver);\n        }\n        Signal.disconnectReceiver = disconnectReceiver;\n        /**\n         * Remove all connections where an object is the sender or receiver.\n         *\n         * @param object - The object of interest.\n         *\n         * #### Notes\n         * If a `thisArg` is provided when connecting a signal, that object\n         * is considered the receiver. Otherwise, the `slot` is considered\n         * the receiver.\n         */\n        function disconnectAll(object) {\n            Private.disconnectAll(object);\n        }\n        Signal.disconnectAll = disconnectAll;\n        /**\n         * Clear all signal data associated with the given object.\n         *\n         * @param object - The object for which the data should be cleared.\n         *\n         * #### Notes\n         * This removes all signal connections and any other signal data\n         * associated with the object.\n         */\n        function clearData(object) {\n            Private.disconnectAll(object);\n        }\n        Signal.clearData = clearData;\n        /**\n         * Get the signal exception handler.\n         *\n         * @returns The current exception handler.\n         *\n         * #### Notes\n         * The default exception handler is `console.error`.\n         */\n        function getExceptionHandler() {\n            return Private.exceptionHandler;\n        }\n        Signal.getExceptionHandler = getExceptionHandler;\n        /**\n         * Set the signal exception handler.\n         *\n         * @param handler - The function to use as the exception handler.\n         *\n         * @returns The old exception handler.\n         *\n         * #### Notes\n         * The exception handler is invoked when a slot throws an exception.\n         */\n        function setExceptionHandler(handler) {\n            var old = Private.exceptionHandler;\n            Private.exceptionHandler = handler;\n            return old;\n        }\n        Signal.setExceptionHandler = setExceptionHandler;\n    })(exports.Signal || (exports.Signal = {}));\n    /**\n     * The namespace for the module implementation details.\n     */\n    var Private;\n    (function (Private) {\n        /**\n         * The signal exception handler function.\n         */\n        Private.exceptionHandler = function (err) {\n            console.error(err);\n        };\n        /**\n         * Connect a slot to a signal.\n         *\n         * @param signal - The signal of interest.\n         *\n         * @param slot - The slot to invoke when the signal is emitted.\n         *\n         * @param thisArg - The `this` context for the slot. If provided,\n         *   this must be a non-primitive object.\n         *\n         * @returns `true` if the connection succeeds, `false` otherwise.\n         */\n        function connect(signal, slot, thisArg) {\n            // Coerce a `null` `thisArg` to `undefined`.\n            thisArg = thisArg || undefined;\n            // Ensure the sender's array of receivers is created.\n            var receivers = receiversForSender.get(signal.sender);\n            if (!receivers) {\n                receivers = [];\n                receiversForSender.set(signal.sender, receivers);\n            }\n            // Bail if a matching connection already exists.\n            if (findConnection(receivers, signal, slot, thisArg)) {\n                return false;\n            }\n            // Choose the best object for the receiver.\n            var receiver = thisArg || slot;\n            // Ensure the receiver's array of senders is created.\n            var senders = sendersForReceiver.get(receiver);\n            if (!senders) {\n                senders = [];\n                sendersForReceiver.set(receiver, senders);\n            }\n            // Create a new connection and add it to the end of each array.\n            var connection = { signal: signal, slot: slot, thisArg: thisArg };\n            receivers.push(connection);\n            senders.push(connection);\n            // Indicate a successful connection.\n            return true;\n        }\n        Private.connect = connect;\n        /**\n         * Disconnect a slot from a signal.\n         *\n         * @param signal - The signal of interest.\n         *\n         * @param slot - The slot to disconnect from the signal.\n         *\n         * @param thisArg - The `this` context for the slot. If provided,\n         *   this must be a non-primitive object.\n         *\n         * @returns `true` if the connection is removed, `false` otherwise.\n         */\n        function disconnect(signal, slot, thisArg) {\n            // Coerce a `null` `thisArg` to `undefined`.\n            thisArg = thisArg || undefined;\n            // Lookup the list of receivers, and bail if none exist.\n            var receivers = receiversForSender.get(signal.sender);\n            if (!receivers || receivers.length === 0) {\n                return false;\n            }\n            // Bail if no matching connection exits.\n            var connection = findConnection(receivers, signal, slot, thisArg);\n            if (!connection) {\n                return false;\n            }\n            // Choose the best object for the receiver.\n            var receiver = thisArg || slot;\n            // Lookup the array of senders, which is now known to exist.\n            var senders = sendersForReceiver.get(receiver);\n            // Clear the connection and schedule cleanup of the arrays.\n            connection.signal = null;\n            scheduleCleanup(receivers);\n            scheduleCleanup(senders);\n            // Indicate a successful disconnection.\n            return true;\n        }\n        Private.disconnect = disconnect;\n        /**\n         * Remove all connections between a sender and receiver.\n         *\n         * @param sender - The sender object of interest.\n         *\n         * @param receiver - The receiver object of interest.\n         */\n        function disconnectBetween(sender, receiver) {\n            // If there are no receivers, there is nothing to do.\n            var receivers = receiversForSender.get(sender);\n            if (!receivers || receivers.length === 0) {\n                return;\n            }\n            // If there are no senders, there is nothing to do.\n            var senders = sendersForReceiver.get(receiver);\n            if (!senders || senders.length === 0) {\n                return;\n            }\n            // Clear each connection between the sender and receiver.\n            algorithm.each(senders, function (connection) {\n                // Skip connections which have already been cleared.\n                if (!connection.signal) {\n                    return;\n                }\n                // Clear the connection if it matches the sender.\n                if (connection.signal.sender === sender) {\n                    connection.signal = null;\n                }\n            });\n            // Schedule a cleanup of the senders and receivers.\n            scheduleCleanup(receivers);\n            scheduleCleanup(senders);\n        }\n        Private.disconnectBetween = disconnectBetween;\n        /**\n         * Remove all connections where the given object is the sender.\n         *\n         * @param sender - The sender object of interest.\n         */\n        function disconnectSender(sender) {\n            // If there are no receivers, there is nothing to do.\n            var receivers = receiversForSender.get(sender);\n            if (!receivers || receivers.length === 0) {\n                return;\n            }\n            // Clear each receiver connection.\n            algorithm.each(receivers, function (connection) {\n                // Skip connections which have already been cleared.\n                if (!connection.signal) {\n                    return;\n                }\n                // Choose the best object for the receiver.\n                var receiver = connection.thisArg || connection.slot;\n                // Clear the connection.\n                connection.signal = null;\n                // Cleanup the array of senders, which is now known to exist.\n                scheduleCleanup(sendersForReceiver.get(receiver));\n            });\n            // Schedule a cleanup of the receivers.\n            scheduleCleanup(receivers);\n        }\n        Private.disconnectSender = disconnectSender;\n        /**\n         * Remove all connections where the given object is the receiver.\n         *\n         * @param receiver - The receiver object of interest.\n         */\n        function disconnectReceiver(receiver) {\n            // If there are no senders, there is nothing to do.\n            var senders = sendersForReceiver.get(receiver);\n            if (!senders || senders.length === 0) {\n                return;\n            }\n            // Clear each sender connection.\n            algorithm.each(senders, function (connection) {\n                // Skip connections which have already been cleared.\n                if (!connection.signal) {\n                    return;\n                }\n                // Lookup the sender for the connection.\n                var sender = connection.signal.sender;\n                // Clear the connection.\n                connection.signal = null;\n                // Cleanup the array of receivers, which is now known to exist.\n                scheduleCleanup(receiversForSender.get(sender));\n            });\n            // Schedule a cleanup of the list of senders.\n            scheduleCleanup(senders);\n        }\n        Private.disconnectReceiver = disconnectReceiver;\n        /**\n         * Remove all connections where an object is the sender or receiver.\n         *\n         * @param object - The object of interest.\n         */\n        function disconnectAll(object) {\n            // Remove all connections where the given object is the sender.\n            disconnectSender(object);\n            // Remove all connections where the given object is the receiver.\n            disconnectReceiver(object);\n        }\n        Private.disconnectAll = disconnectAll;\n        /**\n         * Emit a signal and invoke its connected slots.\n         *\n         * @param signal - The signal of interest.\n         *\n         * @param args - The args to pass to the connected slots.\n         *\n         * #### Notes\n         * Slots are invoked synchronously in connection order.\n         *\n         * Exceptions thrown by connected slots will be caught and logged.\n         */\n        function emit(signal, args) {\n            // If there are no receivers, there is nothing to do.\n            var receivers = receiversForSender.get(signal.sender);\n            if (!receivers || receivers.length === 0) {\n                return;\n            }\n            // Invoke the slots for connections with a matching signal.\n            // Any connections added during emission are not invoked.\n            for (var i = 0, n = receivers.length; i < n; ++i) {\n                var connection = receivers[i];\n                if (connection.signal === signal) {\n                    invokeSlot(connection, args);\n                }\n            }\n        }\n        Private.emit = emit;\n        /**\n         * A weak mapping of sender to array of receiver connections.\n         */\n        var receiversForSender = new WeakMap();\n        /**\n         * A weak mapping of receiver to array of sender connections.\n         */\n        var sendersForReceiver = new WeakMap();\n        /**\n         * A set of connection arrays which are pending cleanup.\n         */\n        var dirtySet = new Set();\n        /**\n         * A function to schedule an event loop callback.\n         */\n        var schedule = (function () {\n            var ok = typeof requestAnimationFrame === 'function';\n            // @ts-ignore\n            return ok ? requestAnimationFrame : setImmediate;\n        })();\n        /**\n         * Find a connection which matches the given parameters.\n         */\n        function findConnection(connections, signal, slot, thisArg) {\n            return algorithm.find(connections, function (connection) { return (connection.signal === signal &&\n                connection.slot === slot &&\n                connection.thisArg === thisArg); });\n        }\n        /**\n         * Invoke a slot with the given parameters.\n         *\n         * The connection is assumed to be valid.\n         *\n         * Exceptions in the slot will be caught and logged.\n         */\n        function invokeSlot(connection, args) {\n            var signal = connection.signal, slot = connection.slot, thisArg = connection.thisArg;\n            try {\n                slot.call(thisArg, signal.sender, args);\n            }\n            catch (err) {\n                Private.exceptionHandler(err);\n            }\n        }\n        /**\n         * Schedule a cleanup of a connection array.\n         *\n         * This will add the array to the dirty set and schedule a deferred\n         * cleanup of the array contents. On cleanup, any connection with a\n         * `null` signal will be removed from the array.\n         */\n        function scheduleCleanup(array) {\n            if (dirtySet.size === 0) {\n                schedule(cleanupDirtySet);\n            }\n            dirtySet.add(array);\n        }\n        /**\n         * Cleanup the connection lists in the dirty set.\n         *\n         * This function should only be invoked asynchronously, when the\n         * stack frame is guaranteed to not be on the path of user code.\n         */\n        function cleanupDirtySet() {\n            dirtySet.forEach(cleanupConnections);\n            dirtySet.clear();\n        }\n        /**\n         * Cleanup the dirty connections in a connections array.\n         *\n         * This will remove any connection with a `null` signal.\n         *\n         * This function should only be invoked asynchronously, when the\n         * stack frame is guaranteed to not be on the path of user code.\n         */\n        function cleanupConnections(connections) {\n            algorithm.ArrayExt.removeAllWhere(connections, isDeadConnection);\n        }\n        /**\n         * Test whether a connection is dead.\n         *\n         * A dead connection has a `null` signal.\n         */\n        function isDeadConnection(connection) {\n            return connection.signal === null;\n        }\n    })(Private || (Private = {}));\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.js.map\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\nvar util = require('util');\nvar isString = function (x) {\n  return typeof x === 'string';\n};\n\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  var res = [];\n  for (var i = 0; i < parts.length; i++) {\n    var p = parts[i];\n\n    // ignore empty parts\n    if (!p || p === '.')\n      continue;\n\n    if (p === '..') {\n      if (res.length && res[res.length - 1] !== '..') {\n        res.pop();\n      } else if (allowAboveRoot) {\n        res.push('..');\n      }\n    } else {\n      res.push(p);\n    }\n  }\n\n  return res;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar posix = {};\n\n\nfunction posixSplitPath(filename) {\n  return splitPathRe.exec(filename).slice(1);\n}\n\n\n// path.resolve([from ...], to)\n// posix version\nposix.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (!isString(path)) {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(resolvedPath.split('/'),\n                                !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nposix.normalize = function(path) {\n  var isAbsolute = posix.isAbsolute(path),\n      trailingSlash = path.substr(-1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(path.split('/'), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nposix.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nposix.join = function() {\n  var path = '';\n  for (var i = 0; i < arguments.length; i++) {\n    var segment = arguments[i];\n    if (!isString(segment)) {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    if (segment) {\n      if (!path) {\n        path += segment;\n      } else {\n        path += '/' + segment;\n      }\n    }\n  }\n  return posix.normalize(path);\n};\n\n\n// path.relative(from, to)\n// posix version\nposix.relative = function(from, to) {\n  from = posix.resolve(from).substr(1);\n  to = posix.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\n\nposix._makeLong = function(path) {\n  return path;\n};\n\n\nposix.dirname = function(path) {\n  var result = posixSplitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nposix.basename = function(path, ext) {\n  var f = posixSplitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nposix.extname = function(path) {\n  return posixSplitPath(path)[3];\n};\n\n\nposix.format = function(pathObject) {\n  if (!util.isObject(pathObject)) {\n    throw new TypeError(\n        \"Parameter 'pathObject' must be an object, not \" + typeof pathObject\n    );\n  }\n\n  var root = pathObject.root || '';\n\n  if (!isString(root)) {\n    throw new TypeError(\n        \"'pathObject.root' must be a string or undefined, not \" +\n        typeof pathObject.root\n    );\n  }\n\n  var dir = pathObject.dir ? pathObject.dir + posix.sep : '';\n  var base = pathObject.base || '';\n  return dir + base;\n};\n\n\nposix.parse = function(pathString) {\n  if (!isString(pathString)) {\n    throw new TypeError(\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\n    );\n  }\n  var allParts = posixSplitPath(pathString);\n  if (!allParts || allParts.length !== 4) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  allParts[1] = allParts[1] || '';\n  allParts[2] = allParts[2] || '';\n  allParts[3] = allParts[3] || '';\n\n  return {\n    root: allParts[0],\n    dir: allParts[0] + allParts[1].slice(0, allParts[1].length - 1),\n    base: allParts[2],\n    ext: allParts[3],\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\n  };\n};\n\n\nposix.sep = '/';\nposix.delimiter = ':';\n\n  module.exports = posix;\n"],"sourceRoot":""}