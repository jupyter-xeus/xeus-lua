{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/codemirror-extension/lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACoD;AACK;AACwD;AACzD;AACP;AACc;AACZ;AACG;AAClB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA,cAAc,+DAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mEAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAc,EAAE,yEAAgB,EAAE,gEAAW,EAAE,+DAAW;AACzE,eAAe,2DAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,kEAAc,EAAE,8DAAS,EAAE,gEAAW;AACrD,eAAe,6DAAU;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB,sEAAkB,EAAE,qCAAqC;AAClF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAyB;AAC7B;AACA;AACA,WAAW,kEAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mDAAU;AACzB;AACA;AACA,uBAAuB,mDAAU;AACjC;AACA,kBAAkB,gZAAkC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,SAAS,sGAAsG,GAAG,kFAA8B;AAChJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2BAAO,GAAkB,EAAE,SAAS,KAAK,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,oEAAgB;AACjE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oEAAgB;AAC7D;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,+CAA+C,GAAG,GAAG,IAAI,KAAK,eAAe;AAC7E,aAAa;AACb,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,+CAA+C,GAAG,GAAG,IAAI,KAAK,eAAe;AAC7E,aAAa;AACb,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mEAAe;AAC5C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mEAAe;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,oEAAgB;AAC5B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iC","file":"vendors-node_modules_jupyterlab_codemirror-extension_lib_index_js.e6cf3323290f5074624f.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module codemirror-extension\n */\nimport { ILabShell } from '@jupyterlab/application';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { CodeMirrorEditor, editorServices, EditorSyntaxStatus, ICodeMirror, Mode } from '@jupyterlab/codemirror';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator } from '@jupyterlab/translation';\nimport CodeMirror from 'codemirror';\n/**\n * The command IDs used by the codemirror plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.changeKeyMap = 'codemirror:change-keymap';\n    CommandIDs.changeTheme = 'codemirror:change-theme';\n    CommandIDs.changeMode = 'codemirror:change-mode';\n    CommandIDs.find = 'codemirror:find';\n    CommandIDs.goToLine = 'codemirror:go-to-line';\n})(CommandIDs || (CommandIDs = {}));\n/** The CodeMirror singleton. */\nconst codemirrorSingleton = {\n    id: '@jupyterlab/codemirror-extension:codemirror',\n    provides: ICodeMirror,\n    activate: activateCodeMirror\n};\n/**\n * The editor services.\n */\nconst services = {\n    id: '@jupyterlab/codemirror-extension:services',\n    provides: IEditorServices,\n    activate: activateEditorServices\n};\n/**\n * The editor commands.\n */\nconst commands = {\n    id: '@jupyterlab/codemirror-extension:commands',\n    requires: [IEditorTracker, ISettingRegistry, ITranslator, ICodeMirror],\n    optional: [IMainMenu],\n    activate: activateEditorCommands,\n    autoStart: true\n};\n/**\n * The JupyterLab plugin for the EditorSyntax status item.\n */\nexport const editorSyntaxStatus = {\n    id: '@jupyterlab/codemirror-extension:editor-syntax-status',\n    autoStart: true,\n    requires: [IEditorTracker, ILabShell, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, labShell, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const item = new EditorSyntaxStatus({ commands: app.commands, translator });\n        labShell.currentChanged.connect(() => {\n            const current = labShell.currentWidget;\n            if (current && tracker.has(current) && item.model) {\n                item.model.editor = current.content.editor;\n            }\n        });\n        statusBar.registerStatusItem('@jupyterlab/codemirror-extension:editor-syntax-status', {\n            item,\n            align: 'left',\n            rank: 0,\n            isActive: () => !!labShell.currentWidget &&\n                !!tracker.currentWidget &&\n                labShell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    commands,\n    services,\n    editorSyntaxStatus,\n    codemirrorSingleton\n];\nexport default plugins;\n/**\n * The plugin ID used as the key in the setting registry.\n */\nconst id = commands.id;\n/**\n * Set up the editor services.\n */\nfunction activateEditorServices(app) {\n    CodeMirror.prototype.save = () => {\n        void app.commands.execute('docmanager:save');\n    };\n    return editorServices;\n}\n/**\n * Simplest implementation of the CodeMirror singleton provider.\n */\nclass CodeMirrorSingleton {\n    get CodeMirror() {\n        return CodeMirror;\n    }\n    async ensureVimKeymap() {\n        if (!('Vim' in CodeMirror)) {\n            // @ts-expect-error\n            await import('codemirror/keymap/vim.js');\n        }\n    }\n}\n/**\n * Set up the CodeMirror singleton.\n */\nfunction activateCodeMirror(app) {\n    return new CodeMirrorSingleton();\n}\n/**\n * Set up the editor widget menu and commands.\n */\nfunction activateEditorCommands(app, tracker, settingRegistry, translator, codeMirror, mainMenu) {\n    var _a;\n    const trans = translator.load('jupyterlab');\n    const { commands, restored } = app;\n    let { theme, keyMap, scrollPastEnd, styleActiveLine, styleSelectedText, selectionPointer, lineWiseCopyCut } = CodeMirrorEditor.defaultConfig;\n    /**\n     * Update the setting values.\n     */\n    async function updateSettings(settings) {\n        var _a, _b, _c, _d, _e;\n        keyMap = settings.get('keyMap').composite || keyMap;\n        // Lazy loading of vim mode\n        if (keyMap === 'vim') {\n            await codeMirror.ensureVimKeymap();\n        }\n        theme = settings.get('theme').composite || theme;\n        // Lazy loading of theme stylesheets\n        if (theme !== 'jupyter' && theme !== 'default') {\n            const filename = theme === 'solarized light' || theme === 'solarized dark'\n                ? 'solarized'\n                : theme;\n            await import(`codemirror/theme/${filename}.css`);\n        }\n        scrollPastEnd = (_a = settings.get('scrollPastEnd').composite) !== null && _a !== void 0 ? _a : scrollPastEnd;\n        styleActiveLine = (_b = settings.get('styleActiveLine').composite) !== null && _b !== void 0 ? _b : styleActiveLine;\n        styleSelectedText = (_c = settings.get('styleSelectedText').composite) !== null && _c !== void 0 ? _c : styleSelectedText;\n        selectionPointer = (_d = settings.get('selectionPointer').composite) !== null && _d !== void 0 ? _d : selectionPointer;\n        lineWiseCopyCut = (_e = settings.get('lineWiseCopyCut').composite) !== null && _e !== void 0 ? _e : lineWiseCopyCut;\n    }\n    /**\n     * Update the settings of the current tracker instances.\n     */\n    function updateTracker() {\n        const editorOptions = {\n            keyMap,\n            theme,\n            scrollPastEnd,\n            styleActiveLine,\n            styleSelectedText,\n            selectionPointer,\n            lineWiseCopyCut\n        };\n        tracker.forEach(widget => {\n            if (widget.content.editor instanceof CodeMirrorEditor) {\n                widget.content.editor.setOptions(editorOptions);\n            }\n        });\n    }\n    // Fetch the initial state of the settings.\n    Promise.all([settingRegistry.load(id), restored])\n        .then(async ([settings]) => {\n        await updateSettings(settings);\n        updateTracker();\n        settings.changed.connect(async () => {\n            await updateSettings(settings);\n            updateTracker();\n        });\n    })\n        .catch((reason) => {\n        console.error(reason.message);\n        updateTracker();\n    });\n    /**\n     * Handle the settings of new widgets.\n     */\n    tracker.widgetAdded.connect((sender, widget) => {\n        const editorOptions = {\n            keyMap,\n            theme,\n            scrollPastEnd,\n            styleActiveLine,\n            styleSelectedText,\n            selectionPointer,\n            lineWiseCopyCut\n        };\n        if (widget.content.editor instanceof CodeMirrorEditor) {\n            widget.content.editor.setOptions(editorOptions);\n        }\n    });\n    /**\n     * A test for whether the tracker has an active widget.\n     */\n    function isEnabled() {\n        return (tracker.currentWidget !== null &&\n            tracker.currentWidget === app.shell.currentWidget);\n    }\n    /**\n     * Create a menu for the editor.\n     */\n    commands.addCommand(CommandIDs.changeTheme, {\n        label: args => {\n            var _a;\n            return args.theme === 'default'\n                ? trans.__('codemirror')\n                : trans.__((_a = args.theme) !== null && _a !== void 0 ? _a : theme);\n        },\n        execute: args => {\n            var _a;\n            const key = 'theme';\n            const value = (theme = (_a = args['theme']) !== null && _a !== void 0 ? _a : theme);\n            return settingRegistry.set(id, key, value).catch((reason) => {\n                console.error(`Failed to set ${id}:${key} - ${reason.message}`);\n            });\n        },\n        isToggled: args => args['theme'] === theme\n    });\n    commands.addCommand(CommandIDs.changeKeyMap, {\n        label: args => {\n            var _a;\n            const theKeyMap = (_a = args['keyMap']) !== null && _a !== void 0 ? _a : keyMap;\n            return theKeyMap === 'sublime'\n                ? trans.__('Sublime Text')\n                : trans.__(theKeyMap);\n        },\n        execute: args => {\n            var _a;\n            const key = 'keyMap';\n            const value = (keyMap = (_a = args['keyMap']) !== null && _a !== void 0 ? _a : keyMap);\n            return settingRegistry.set(id, key, value).catch((reason) => {\n                console.error(`Failed to set ${id}:${key} - ${reason.message}`);\n            });\n        },\n        isToggled: args => args['keyMap'] === keyMap\n    });\n    commands.addCommand(CommandIDs.find, {\n        label: trans.__('Find…'),\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const editor = widget.content.editor;\n            editor.execCommand('find');\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.goToLine, {\n        label: trans.__('Go to Line…'),\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const editor = widget.content.editor;\n            editor.execCommand('jumpToLine');\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.changeMode, {\n        label: args => args['name'],\n        execute: args => {\n            const name = args['name'];\n            const widget = tracker.currentWidget;\n            if (name && widget) {\n                const spec = Mode.findByName(name);\n                if (spec) {\n                    widget.content.model.mimeType = spec.mime;\n                }\n            }\n        },\n        isEnabled,\n        isToggled: args => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return false;\n            }\n            const mime = widget.content.model.mimeType;\n            const spec = Mode.findByMIME(mime);\n            const name = spec && spec.name;\n            return args['name'] === name;\n        }\n    });\n    if (mainMenu) {\n        const modeMenu = (_a = mainMenu.viewMenu.items.find(item => {\n            var _a;\n            return item.type === 'submenu' &&\n                ((_a = item.submenu) === null || _a === void 0 ? void 0 : _a.id) === 'jp-mainmenu-view-codemirror-theme';\n        })) === null || _a === void 0 ? void 0 : _a.submenu;\n        if (modeMenu) {\n            Mode.getModeInfo()\n                .sort((a, b) => {\n                const aName = a.name || '';\n                const bName = b.name || '';\n                return aName.localeCompare(bName);\n            })\n                .forEach(spec => {\n                // Avoid mode name with a curse word.\n                if (spec.mode.indexOf('brainf') === 0) {\n                    return;\n                }\n                modeMenu.addItem({\n                    command: CommandIDs.changeMode,\n                    args: Object.assign({}, spec) // TODO: Casting to `any` until lumino typings are fixed\n                });\n            });\n        }\n        // Add go to line capabilities to the edit menu.\n        mainMenu.editMenu.goToLiners.add({\n            tracker,\n            goToLine: (widget) => {\n                const editor = widget.content.editor;\n                editor.execCommand('jumpToLine');\n            }\n        });\n    }\n}\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}