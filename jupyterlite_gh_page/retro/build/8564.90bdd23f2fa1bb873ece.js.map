{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/running/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/tree-extension/lib/index.js"],"names":["IRunningSessionManagers","Token","Item","props","_a","runningItem","icon","detail","call","trans","translator","nullTranslator","load","shutdownLabel","__","shutdownItemIcon","closeIcon","className","react","tag","stylesheet","title","labelTitle","onClick","open","label","ToolbarButtonComponent","shutdown","tooltip","ListView","runningItems","map","item","i","key","List","UseSignal","signal","manager","runningChanged","running","shutdownAllLabel","Section","shutdownTitle","shutdownAllConfirmationText","name","onShutdown","showDialog","body","buttons","Dialog","then","result","button","accept","shutdownAll","disabled","length","RunningSessionsComponent","refreshIcon","managers","items","forEach","refreshRunning","RunningSessions","ReactWidget","constructor","super","this","addClass","render","id","requires","IFileBrowserFactory","autoStart","activate","app","filebrowser","commands","browser","defaultBrowser","newNotebookCommand","addCommand","notebookIcon","execute","newNotebook","CommandToolbarButton","newFile","toolbar","insertItem","newTerminalCommand","terminalIcon","newTerminal","ITranslator","optional","factory","tabPanel","TabPanel","tabPlacement","tabsMovable","addWidget","tabBar","addTab","runningIcon","shell","add","rank"],"mappings":"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","file":"8564.90bdd23f2fa1bb873ece.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module running\n */\nimport { Dialog, ReactWidget, showDialog, ToolbarButtonComponent, UseSignal } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { closeIcon, refreshIcon } from '@jupyterlab/ui-components';\nimport { Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport * as React from 'react';\n/**\n * The class name added to a running widget.\n */\nconst RUNNING_CLASS = 'jp-RunningSessions';\n/**\n * The class name added to a running widget header.\n */\nconst HEADER_CLASS = 'jp-RunningSessions-header';\n/**\n * The class name added to the running terminal sessions section.\n */\nconst SECTION_CLASS = 'jp-RunningSessions-section';\n/**\n * The class name added to the running sessions section header.\n */\nconst SECTION_HEADER_CLASS = 'jp-RunningSessions-sectionHeader';\n/**\n * The class name added to a section container.\n */\nconst CONTAINER_CLASS = 'jp-RunningSessions-sectionContainer';\n/**\n * The class name added to the running kernel sessions section list.\n */\nconst LIST_CLASS = 'jp-RunningSessions-sectionList';\n/**\n * The class name added to the running sessions items.\n */\nconst ITEM_CLASS = 'jp-RunningSessions-item';\n/**\n * The class name added to a running session item label.\n */\nconst ITEM_LABEL_CLASS = 'jp-RunningSessions-itemLabel';\n/**\n * The class name added to a running session item detail.\n */\nconst ITEM_DETAIL_CLASS = 'jp-RunningSessions-itemDetail';\n/**\n * The class name added to a running session item shutdown button.\n */\nconst SHUTDOWN_BUTTON_CLASS = 'jp-RunningSessions-itemShutdown';\n/**\n * The class name added to a running session item shutdown button.\n */\nconst SHUTDOWN_ALL_BUTTON_CLASS = 'jp-RunningSessions-shutdownAll';\n/* tslint:disable */\n/**\n * The running sessions token.\n */\nexport const IRunningSessionManagers = new Token('@jupyterlab/running:IRunningSessionManagers');\nexport class RunningSessionManagers {\n    constructor() {\n        this._managers = [];\n    }\n    /**\n     * Add a running item manager.\n     *\n     * @param manager - The running item manager.\n     *\n     */\n    add(manager) {\n        this._managers.push(manager);\n        return new DisposableDelegate(() => {\n            const i = this._managers.indexOf(manager);\n            if (i > -1) {\n                this._managers.splice(i, 1);\n            }\n        });\n    }\n    /**\n     * Return an iterator of launcher items.\n     */\n    items() {\n        return this._managers;\n    }\n}\nfunction Item(props) {\n    var _a;\n    const { runningItem } = props;\n    const icon = runningItem.icon();\n    const detail = (_a = runningItem.detail) === null || _a === void 0 ? void 0 : _a.call(runningItem);\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const shutdownLabel = props.shutdownLabel || trans.__('Shut Down');\n    const shutdownItemIcon = props.shutdownItemIcon || closeIcon;\n    return (React.createElement(\"li\", { className: ITEM_CLASS },\n        React.createElement(icon.react, { tag: \"span\", stylesheet: \"runningItem\" }),\n        React.createElement(\"span\", { className: ITEM_LABEL_CLASS, title: runningItem.labelTitle ? runningItem.labelTitle() : '', onClick: () => runningItem.open() }, runningItem.label()),\n        detail && React.createElement(\"span\", { className: ITEM_DETAIL_CLASS }, detail),\n        React.createElement(ToolbarButtonComponent, { className: SHUTDOWN_BUTTON_CLASS, icon: shutdownItemIcon, onClick: () => runningItem.shutdown(), tooltip: shutdownLabel })));\n}\nfunction ListView(props) {\n    return (React.createElement(\"ul\", { className: LIST_CLASS }, props.runningItems.map((item, i) => (React.createElement(Item, { key: i, runningItem: item, shutdownLabel: props.shutdownLabel, shutdownItemIcon: props.shutdownItemIcon, translator: props.translator })))));\n}\nfunction List(props) {\n    return (React.createElement(UseSignal, { signal: props.manager.runningChanged }, () => (React.createElement(ListView, { runningItems: props.manager.running(), shutdownLabel: props.shutdownLabel, shutdownAllLabel: props.shutdownAllLabel, shutdownItemIcon: props.manager.shutdownItemIcon, translator: props.translator }))));\n}\n/**\n * The Section component contains the shared look and feel for an interactive\n * list of kernels and sessions.\n *\n * It is specialized for each based on its props.\n */\nfunction Section(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const shutdownAllLabel = props.manager.shutdownAllLabel || trans.__('Shut Down All');\n    const shutdownTitle = `${shutdownAllLabel}?`;\n    const shutdownAllConfirmationText = props.manager.shutdownAllConfirmationText ||\n        `${shutdownAllLabel} ${props.manager.name}`;\n    function onShutdown() {\n        void showDialog({\n            title: shutdownTitle,\n            body: shutdownAllConfirmationText,\n            buttons: [\n                Dialog.cancelButton({ label: trans.__('Cancel') }),\n                Dialog.warnButton({ label: shutdownAllLabel })\n            ]\n        }).then(result => {\n            if (result.button.accept) {\n                props.manager.shutdownAll();\n            }\n        });\n    }\n    return (React.createElement(\"div\", { className: SECTION_CLASS },\n        React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: `${SECTION_HEADER_CLASS} jp-stack-panel-header` },\n                React.createElement(\"h2\", null, props.manager.name),\n                React.createElement(UseSignal, { signal: props.manager.runningChanged }, () => {\n                    const disabled = props.manager.running().length === 0;\n                    return (React.createElement(\"button\", { className: `${SHUTDOWN_ALL_BUTTON_CLASS} jp-mod-styled ${disabled && 'jp-mod-disabled'}`, disabled: disabled, onClick: onShutdown }, shutdownAllLabel));\n                })),\n            React.createElement(\"div\", { className: CONTAINER_CLASS },\n                React.createElement(List, { manager: props.manager, shutdownLabel: props.manager.shutdownLabel, shutdownAllLabel: shutdownAllLabel, translator: props.translator })))));\n}\nfunction RunningSessionsComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: HEADER_CLASS },\n            React.createElement(ToolbarButtonComponent, { tooltip: trans.__('Refresh List'), icon: refreshIcon, onClick: () => props.managers.items().forEach(manager => manager.refreshRunning()) })),\n        props.managers.items().map(manager => (React.createElement(Section, { key: manager.name, manager: manager, translator: props.translator })))));\n}\n/**\n * A class that exposes the running terminal and kernel sessions.\n */\nexport class RunningSessions extends ReactWidget {\n    /**\n     * Construct a new running widget.\n     */\n    constructor(managers, translator) {\n        super();\n        this.managers = managers;\n        this.translator = translator || nullTranslator;\n        // this can't be in the react element, because then it would be too nested\n        this.addClass(RUNNING_CLASS);\n    }\n    render() {\n        return (React.createElement(RunningSessionsComponent, { managers: this.managers, translator: this.translator }));\n    }\n}\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandToolbarButton } from '@jupyterlab/apputils';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IRunningSessionManagers, RunningSessions } from '@jupyterlab/running';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { notebookIcon, runningIcon, terminalIcon } from '@jupyterlab/ui-components';\nimport { TabPanel } from '@lumino/widgets';\n/**\n * Plugin to add extra buttons to the file browser to create\n * new notebooks, files and terminals.\n */\nconst newFiles = {\n    id: '@retrolab/tree-extension:buttons',\n    requires: [IFileBrowserFactory],\n    autoStart: true,\n    activate: (app, filebrowser) => {\n        const { commands } = app;\n        const browser = filebrowser.defaultBrowser;\n        // wrapper commands to be able to override the label\n        const newNotebookCommand = 'tree:new-notebook';\n        commands.addCommand(newNotebookCommand, {\n            label: 'New Notebook',\n            icon: notebookIcon,\n            execute: () => {\n                return commands.execute('notebook:create-new');\n            }\n        });\n        const newNotebook = new CommandToolbarButton({\n            commands,\n            id: newNotebookCommand\n        });\n        const newFile = new CommandToolbarButton({\n            commands,\n            id: 'filebrowser:create-new-file'\n        });\n        browser.toolbar.insertItem(0, 'new-notebook', newNotebook);\n        browser.toolbar.insertItem(1, 'new-file', newFile);\n    }\n};\n/**\n * Plugin to add a \"New Terminal\" button to the file browser toolbar.\n */\nconst newTerminal = {\n    id: '@retrolab/tree-extension:new-terminal',\n    requires: [IFileBrowserFactory],\n    autoStart: true,\n    activate: (app, filebrowser) => {\n        const { commands } = app;\n        const browser = filebrowser.defaultBrowser;\n        const newTerminalCommand = 'tree:new-terminal';\n        commands.addCommand(newTerminalCommand, {\n            label: 'New Terminal',\n            icon: terminalIcon,\n            execute: () => {\n                return commands.execute('terminal:create-new');\n            }\n        });\n        const newTerminal = new CommandToolbarButton({\n            commands,\n            id: newTerminalCommand\n        });\n        browser.toolbar.insertItem(2, 'new-terminal', newTerminal);\n    }\n};\n/**\n * A plugin to add the file browser widget to an ILabShell\n */\nconst browserWidget = {\n    id: '@jupyterlab-classic/tree-extension:widget',\n    requires: [IFileBrowserFactory, ITranslator],\n    optional: [IRunningSessionManagers],\n    autoStart: true,\n    activate: (app, factory, translator, manager) => {\n        const tabPanel = new TabPanel({ tabPlacement: 'top', tabsMovable: true });\n        tabPanel.addClass('jp-TreePanel');\n        const { defaultBrowser: browser } = factory;\n        browser.title.label = 'Files';\n        tabPanel.addWidget(browser);\n        tabPanel.tabBar.addTab(browser.title);\n        if (manager) {\n            const running = new RunningSessions(manager, translator);\n            running.id = 'jp-running-sessions';\n            running.title.label = 'Running';\n            running.title.icon = runningIcon;\n            tabPanel.addWidget(running);\n            tabPanel.tabBar.addTab(running.title);\n        }\n        app.shell.add(tabPanel, 'main', { rank: 100 });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    newFiles,\n    newTerminal,\n    browserWidget\n];\nexport default plugins;\n"],"sourceRoot":""}