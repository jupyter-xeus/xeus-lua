{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/retro-application-extension/lib/index.js"],"names":["TREE_PATTERN","RegExp","id","requires","IDocumentManager","autoStart","activate","app","docManager","baseUrl","PageConfig","docOpen","open","path","widgetName","kernel","options","ref","call","route","PathExt","window","node","document","createElement","href","target","rel","logo","Widget","liteWordmark","container","elementPosition","padding","height","width","shell","add","rank","IRouter","router","commands","command","addCommand","execute","args","_a","request","match","URLSearchParams","location","search","get","file","decodeURIComponent","ext","restored","then","undefined","register","pattern"],"mappings":"2NAUA,MAQMA,EAAe,IAAIC,OAAO,yBAiGhC,EADgB,CA1FG,CACfC,GAAI,sDACJC,SAAU,CAAC,EAAAC,kBACXC,WAAW,EACXC,SAAU,CAACC,EAAKC,KACZ,MAAMC,EAAU,EAAAC,WAAA,aAEVC,EAAUH,EAAWI,KAC3BJ,EAAWI,KAAO,CAACC,EAAMC,EAAa,UAAWC,EAAQC,KAErD,GAAY,YADAA,aAAyC,EAASA,EAAQC,KAGlE,YADAN,EAAQO,KAAKV,EAAYK,EAAMC,EAAYC,EAAQC,GAGvD,MACMG,EAAgB,WADV,EAAAC,QAAA,QAAgBP,GACK,YAAc,OAC/CQ,OAAOT,KAAK,GAAGH,UAAgBU,UAAcN,QAQ5C,CACTX,GAAI,gDACJG,WAAW,EACXC,SAAWC,IACP,MAAME,EAAU,EAAAC,WAAA,aACVY,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAO,GAAGhB,cACfa,EAAKI,OAAS,SACdJ,EAAKK,IAAM,sBACX,MAAMC,EAAO,IAAI,EAAAC,OAAO,CAAEP,SAC1B,EAAAQ,aAAA,QAAqB,CACjBC,UAAWT,EACXU,gBAAiB,SACjBC,QAAS,kBACTC,OAAQ,OACRC,MAAO,SAEXP,EAAK1B,GAAK,eACVK,EAAI6B,MAAMC,IAAIT,EAAM,MAAO,CAAEU,KAAM,MAO5B,CACXpC,GAAI,kDACJG,WAAW,EACXF,SAAU,CAAC,EAAAoC,QAAS,EAAAnC,kBACpBE,SAAU,CAACC,EAAKiC,EAAQhC,KACpB,MAAM,SAAEiC,GAAalC,EACfmC,EAAU,cAChBD,EAASE,WAAWD,EAAS,CACzBE,QAAUC,IACN,IAAIC,EAIJ,GAD8D,QAA7CA,EAFFD,EAEcE,QAAQC,MAAMhD,UAAkC,IAAP8C,IAAgBA,EAElF,OAEJ,MACMjC,EADY,IAAIoC,gBAAgB5B,OAAO6B,SAASC,QAC/BC,IAAI,QAC3B,IAAKvC,EACD,OAEJ,MAAMwC,EAAOC,mBAAmBzC,GAC1B0C,EAAM,EAAAnC,QAAA,QAAgBiC,GAC5B9C,EAAIiD,SAASC,MAAK,KAEF,WAARF,EACA/C,EAAWI,KAAKyC,EAzFf,gBAyFuCK,EAAW,CAC/CzC,IAAK,WAITT,EAAWI,KAAKyC,EA1FjB,cA0FuCK,EAAW,CAC7CzC,IAAK,iBAMzBuB,EAAOmB,SAAS,CAAEjB,UAASkB,QAAS5D","file":"486.bca69afea7bef94493df.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IRouter } from '@jupyterlab/application';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { liteWordmark } from '@jupyterlite/ui-components';\nimport { Widget } from '@lumino/widgets';\n/**\n * The default notebook factory.\n */\nconst NOTEBOOK_FACTORY = 'Notebook';\n/**\n * The editor factory.\n */\nconst EDITOR_FACTORY = 'Editor';\n/**\n * A regular expression to match path to notebooks and documents\n */\nconst TREE_PATTERN = new RegExp('/(notebooks|edit)\\\\/?');\n/**\n * A plugin to open document in a new browser tab.\n *\n * TODO: remove and use a custom doc manager?\n */\nconst docmanager = {\n    id: '@jupyterlite/retro-application-extension:docmanager',\n    requires: [IDocumentManager],\n    autoStart: true,\n    activate: (app, docManager) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        // patch the `docManager.open` option to prevent the default behavior\n        const docOpen = docManager.open;\n        docManager.open = (path, widgetName = 'default', kernel, options) => {\n            const ref = options === null || options === void 0 ? void 0 : options.ref;\n            if (ref === '_noref') {\n                docOpen.call(docManager, path, widgetName, kernel, options);\n                return;\n            }\n            const ext = PathExt.extname(path);\n            const route = ext === '.ipynb' ? 'notebooks' : 'edit';\n            window.open(`${baseUrl}retro/${route}?path=${path}`);\n            return undefined;\n        };\n    }\n};\n/**\n * The logo plugin.\n */\nconst logo = {\n    id: '@jupyterlite/retro-application-extension:logo',\n    autoStart: true,\n    activate: (app) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        const node = document.createElement('a');\n        node.href = `${baseUrl}retro/tree`;\n        node.target = '_blank';\n        node.rel = 'noopener noreferrer';\n        const logo = new Widget({ node });\n        liteWordmark.element({\n            container: node,\n            elementPosition: 'center',\n            padding: '2px 2px 2px 8px',\n            height: '28px',\n            width: 'auto'\n        });\n        logo.id = 'jp-RetroLogo';\n        app.shell.add(logo, 'top', { rank: 0 });\n    }\n};\n/**\n * A custom openeer plugin to pass the path to documents as\n * query string parameters.\n */\nconst opener = {\n    id: '@jupyterlite/retro-application-extension:opener',\n    autoStart: true,\n    requires: [IRouter, IDocumentManager],\n    activate: (app, router, docManager) => {\n        const { commands } = app;\n        const command = 'router:tree';\n        commands.addCommand(command, {\n            execute: (args) => {\n                var _a;\n                const parsed = args;\n                // use request to do the matching\n                const matches = (_a = parsed.request.match(TREE_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                if (!matches) {\n                    return;\n                }\n                const urlParams = new URLSearchParams(window.location.search);\n                const path = urlParams.get('path');\n                if (!path) {\n                    return;\n                }\n                const file = decodeURIComponent(path);\n                const ext = PathExt.extname(file);\n                app.restored.then(() => {\n                    // TODO: get factory from file type instead?\n                    if (ext === '.ipynb') {\n                        docManager.open(file, NOTEBOOK_FACTORY, undefined, {\n                            ref: '_noref'\n                        });\n                    }\n                    else {\n                        docManager.open(file, EDITOR_FACTORY, undefined, {\n                            ref: '_noref'\n                        });\n                    }\n                });\n            }\n        });\n        router.register({ command, pattern: TREE_PATTERN });\n    }\n};\nconst plugins = [docmanager, logo, opener];\nexport default plugins;\n"],"sourceRoot":""}