{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/server/lib/app.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/server/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/server/lib/router.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/server/lib/server.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/server/lib/service.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACkD;AAClD;AACA;AACA;AACO,gCAAgC,4DAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC/FA;AACA;AACsB;AACG;AACC;;;;;;;;;;;;;;;;ACJ1B;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;AC7GkC;AAClC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,2BAA2B,2CAAM;AACjC,eAAe,qDAAqD;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,KAAK;AACnC;AACA;AACA;AACA,SAAS;AACT,+BAA+B,KAAK,cAAc,cAAc;AAChE;AACA;AACA,sDAAsD,cAAc;AACpE,SAAS;AACT,+BAA+B,KAAK;AACpC;AACA;AACA,sDAAsD,cAAc;AACpE,SAAS;AACT,iCAAiC,KAAK,cAAc,cAAc;AAClE;AACA;AACA,sDAAsD,cAAc;AACpE,SAAS;AACT,8BAA8B,KAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,+BAA+B,KAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,cAAc;AACrE,SAAS;AACT,gCAAgC,KAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,8BAA8B,KAAK;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT,iCAAiC,KAAK;AACtC;AACA;AACA,uCAAuC,cAAc;AACrD,SAAS;AACT,8BAA8B,UAAU;AACxC;AACA;AACA;AACA,SAAS;AACT,gCAAgC,UAAU;AAC1C;AACA;AACA,sDAAsD,cAAc;AACpE,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iDAAiD;AACjD,SAAS;AACT,8BAA8B,QAAQ;AACtC;AACA;AACA,0DAA0D,cAAc;AACxE,SAAS;AACT;AACA;AACA;AACA,2DAA2D,cAAc;AACzE,SAAS;AACT,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA,0DAA0D,cAAc;AACxE,SAAS;AACT,iCAAiC,QAAQ;AACzC;AACA;AACA,uCAAuC,cAAc;AACrD,SAAS;AACT;AACA;AACA;AACA;AACA,0DAA0D,cAAc;AACxE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,MAAM;AACzB;AACA,uCAAuC,cAAc;AACrD,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;ACjKwE;AAChC;AACxC;AACA;AACA;AACO,iCAAiC,gEAAc;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+EAA6B;AAChD,yBAAyB;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"packages_server_lib_index_js.8b883f1ed924f49c61c0.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Application } from '@lumino/application';\n/**\n * Server is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLiteServer extends Application {\n    /**\n     * Construct a new JupyterLite object.\n     *\n     * @param options The instantiation options for a JupyterLiteServer application.\n     */\n    constructor(options) {\n        super(options);\n        /**\n         * The name of the application.\n         */\n        this.name = 'JupyterLite Server';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The version of the application.\n         */\n        this.version = 'unknown';\n        this._serviceManager = null;\n    }\n    /**\n     * Get the underlying lite service manager for this app.\n     */\n    get serviceManager() {\n        return this._serviceManager;\n    }\n    /**\n     * Attach the application shell to the DOM.\n     *\n     * @param id - The id of the host node for the shell, or `''`.\n     *\n     * #### Notes\n     * For this server application there is no shell to attach\n     */\n    attachShell(id) {\n        // no-op\n    }\n    /**\n     * A method invoked on a window `'resize'` event.\n     *\n     * #### Notes\n     * For this server application there is no shell to update\n     */\n    evtResize(event) {\n        // no-op\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach(mod => {\n            this.registerPluginModule(mod);\n        });\n    }\n    /**\n     * Register the underlying lite service manager for this app.\n     *\n     * @param serviceManager The Service Manager for the app.\n     */\n    registerServiceManager(serviceManager) {\n        this._serviceManager = serviceManager;\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nexport * from './app';\nexport * from './server';\nexport * from './service';\n","/**\n * A simple router.\n */\nexport class Router {\n    constructor() {\n        this._routes = [];\n    }\n    /**\n     * Add a new GET route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    get(pattern, callback) {\n        this._add('GET', pattern, callback);\n    }\n    /**\n     * Add a new PUT route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    put(pattern, callback) {\n        this._add('PUT', pattern, callback);\n    }\n    /**\n     * Add a new POST route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    post(pattern, callback) {\n        this._add('POST', pattern, callback);\n    }\n    /**\n     * Add a new PATCH route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    patch(pattern, callback) {\n        this._add('PATCH', pattern, callback);\n    }\n    /**\n     * Add a new DELETE route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    delete(pattern, callback) {\n        this._add('DELETE', pattern, callback);\n    }\n    /**\n     * Route a request.\n     *\n     * @param req The request to route.\n     */\n    async route(req) {\n        const url = new URL(req.url);\n        const { method } = req;\n        const { pathname } = url;\n        for (const r of this._routes) {\n            if (r.method !== method) {\n                continue;\n            }\n            const match = pathname.match(r.pattern);\n            if (!match) {\n                continue;\n            }\n            const matches = match.slice(1);\n            let body;\n            if (r.method === 'PATCH' || r.method === 'PUT' || r.method === 'POST') {\n                try {\n                    body = JSON.parse(await req.text());\n                }\n                catch {\n                    body = undefined;\n                }\n            }\n            return r.callback.call(null, {\n                pathname,\n                body,\n                query: Object.fromEntries(url.searchParams)\n            }, ...matches);\n        }\n        throw new Error('Cannot route ' + req.method + ' ' + req.url);\n    }\n    /**\n     * Add a new route.\n     *\n     * @param method The method\n     * @param pattern The pattern\n     * @param callback The callback\n     */\n    _add(method, pattern, callback) {\n        if (typeof pattern === 'string') {\n            pattern = new RegExp(pattern);\n        }\n        this._routes.push({\n            method,\n            pattern,\n            callback\n        });\n    }\n}\n","import { Router } from './router';\n/**\n * A (very, very) simplified Jupyter Server running in the browser.\n */\nexport class JupyterServer {\n    /**\n     * Construct a new JupyterServer.\n     */\n    constructor(options) {\n        this._router = new Router();\n        const { contents, kernels, kernelspecs, sessions, settings } = options;\n        this._contents = contents;\n        this._kernels = kernels;\n        this._kernelspecs = kernelspecs;\n        this._sessions = sessions;\n        this._settings = settings;\n        this._addRoutes();\n    }\n    /**\n     * Handle an incoming request from the client.\n     *\n     * @param req The incoming request\n     * @param init The optional init request\n     */\n    async fetch(req, init) {\n        if (!(req instanceof Request)) {\n            throw Error('Request info is not a Request');\n        }\n        return this._router.route(req);\n    }\n    /**\n     * Add the routes.\n     */\n    _addRoutes() {\n        const app = this._router;\n        // GET /api/contents/{path}/checkpoints - Get a list of checkpoints for a file\n        app.get('/api/contents/(.+)/checkpoints', async (req, filename) => {\n            const res = await this._contents.listCheckpoints(filename);\n            return new Response(JSON.stringify(res));\n        });\n        // POST /api/contents/{path}/checkpoints/{checkpoint_id} - Restore a file to a particular checkpointed state\n        app.post('/api/contents/(.+)/checkpoints/(.*)', async (req, filename, checkpoint) => {\n            const res = await this._contents.restoreCheckpoint(filename, checkpoint);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n        // POST /api/contents/{path}/checkpoints - Create a new checkpoint for a file\n        app.post('/api/contents/(.+)/checkpoints', async (req, filename) => {\n            const res = await this._contents.createCheckpoint(filename);\n            return new Response(JSON.stringify(res), { status: 201 });\n        });\n        // DELETE /api/contents/{path}/checkpoints/{checkpoint_id} - Delete a checkpoint\n        app.delete('/api/contents/(.+)/checkpoints/(.*)', async (req, filename, checkpoint) => {\n            const res = await this._contents.deleteCheckpoint(filename, checkpoint);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n        // GET /api/contents/{path} - Get contents of file or directory\n        app.get('/api/contents(.*)', async (req, filename) => {\n            var _a;\n            const options = {\n                content: ((_a = req.query) === null || _a === void 0 ? void 0 : _a.content) === '1'\n            };\n            const nb = await this._contents.get(filename, options);\n            return new Response(JSON.stringify(nb));\n        });\n        // POST /api/contents/{path} - Create a new file in the specified path\n        app.post('/api/contents(.*)', async (req, path) => {\n            const options = req.body;\n            const copyFrom = options === null || options === void 0 ? void 0 : options.copy_from;\n            let file;\n            if (copyFrom) {\n                file = await this._contents.copy(copyFrom, path);\n            }\n            else {\n                file = await this._contents.newUntitled(options);\n            }\n            return new Response(JSON.stringify(file), { status: 201 });\n        });\n        // PATCH /api/contents/{path} - Rename a file or directory without re-uploading content\n        app.patch('/api/contents(.*)', async (req, filename) => {\n            var _a, _b;\n            const newPath = (_b = (_a = req.body) === null || _a === void 0 ? void 0 : _a.path) !== null && _b !== void 0 ? _b : '';\n            filename = filename[0] === '/' ? filename.slice(1) : filename;\n            const nb = await this._contents.rename(filename, newPath);\n            return new Response(JSON.stringify(nb));\n        });\n        // PUT /api/contents/{path} - Save or upload a file\n        app.put('/api/contents/(.+)', async (req, filename) => {\n            const body = req.body;\n            const nb = await this._contents.save(filename, body);\n            return new Response(JSON.stringify(nb));\n        });\n        // DELETE /api/contents/{path} - Delete a file in the given path\n        app.delete('/api/contents/(.+)', async (req, filename) => {\n            await this._contents.delete(filename);\n            return new Response(null, { status: 204 });\n        });\n        // POST /api/kernels/{kernel_id} - Restart a kernel\n        app.post('/api/kernels/(.*)/restart', async (req, kernelId) => {\n            const res = await this._kernels.restart(kernelId);\n            return new Response(JSON.stringify(res));\n        });\n        // DELETE /api/kernels/{kernel_id} - Kill a kernel and delete the kernel id\n        app.delete('/api/kernels/(.*)', async (req, kernelId) => {\n            const res = await this._kernels.shutdown(kernelId);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n        // KernelSpecs\n        app.get('/api/kernelspecs', async (req) => {\n            const res = this._kernelspecs.specs;\n            return new Response(JSON.stringify(res));\n        });\n        // NbConvert\n        app.get('/api/nbconvert', async (req) => {\n            return new Response(JSON.stringify({}));\n        });\n        // GET /api/sessions/{session} - Get session\n        app.get('/api/sessions/(.+)', async (req, id) => {\n            const session = await this._sessions.get(id);\n            return new Response(JSON.stringify(session), { status: 200 });\n        });\n        // GET /api/sessions - List available sessions\n        app.get('/api/sessions', async (req) => {\n            const sessions = await this._sessions.list();\n            return new Response(JSON.stringify(sessions), { status: 200 });\n        });\n        // PATCH /api/sessions/{session} - This can be used to rename a session\n        app.patch('/api/sessions(.*)', async (req, id) => {\n            const options = req.body;\n            const session = await this._sessions.patch(options);\n            return new Response(JSON.stringify(session), { status: 200 });\n        });\n        // DELETE /api/sessions/{session} - Delete a session\n        app.delete('/api/sessions/(.+)', async (req, id) => {\n            await this._sessions.shutdown(id);\n            return new Response(null, { status: 204 });\n        });\n        // POST /api/sessions - Create a new session or return an existing session if a session of the same name already exists\n        app.post('/api/sessions', async (req) => {\n            const options = req.body;\n            const session = await this._sessions.startNew(options);\n            return new Response(JSON.stringify(session), { status: 201 });\n        });\n        // Settings\n        // TODO: improve the regex\n        // const pluginPattern = new RegExp(/(?:@([^/]+?)[/])?([^/]+?):(\\w+)/);\n        const pluginPattern = '/api/settings/((?:@([^/]+?)[/])?([^/]+?):([^:]+))$';\n        app.get(pluginPattern, async (req, pluginId) => {\n            const settings = await this._settings.get(pluginId);\n            return new Response(JSON.stringify(settings));\n        });\n        app.put(pluginPattern, async (req, pluginId) => {\n            const body = req.body;\n            const { raw } = body;\n            await this._settings.save(pluginId, raw);\n            return new Response(null, { status: 204 });\n        });\n        app.get('/api/settings', async (req) => {\n            const plugins = await this._settings.getAll();\n            return new Response(JSON.stringify(plugins));\n        });\n    }\n}\n","import { ServiceManager, ServerConnection } from '@jupyterlab/services';\nimport { WebSocket } from 'mock-socket';\n/**\n * A custom ServiceManager to run in the browser\n */\nexport class LiteServiceManager extends ServiceManager {\n    /**\n     * Construct a new service provider.\n     *\n     * @param options The instantiation options for the service manager.\n     */\n    constructor(options) {\n        var _a;\n        const server = options.server;\n        super({\n            ...options,\n            serverSettings: {\n                ...ServerConnection.makeSettings(),\n                WebSocket,\n                fetch: (_a = server.fetch.bind(server)) !== null && _a !== void 0 ? _a : undefined\n            }\n        });\n        this._server = server;\n    }\n    /**\n     * Get the underlying Jupyter Server\n     */\n    get server() {\n        return this._server;\n    }\n}\n"],"sourceRoot":""}