{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/docprovider/lib/awareness.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/docprovider/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/docprovider/lib/mock.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/docprovider/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/docprovider/lib/yprovider.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/lib0/url.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/y-protocols/auth.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/y-websocket/src/y-websocket.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,qC;;;;;;;;;;;;;;;;;;;;;;;;;ACnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4B;AACL;AACE;AACG;AAC5B,iC;;;;;;;;;;;;;;;ACZO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;;;;;;ACpB0C;AAC1C;AACA;AACA;AACO,qCAAqC,oDAAK;AACjD,kC;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACoD;AACV;AACA;AACM;AACvB;AAC0C;AAC3B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,yCAAyC,0DAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4BAA4B,sDAAY,gBAAgB,0DAAc;AACtE,qBAAqB,sDAAY,eAAe,gEAAoB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,8BAA8B,qDAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAA6B;AAChE;AACA;AACA;AACA,oBAAoB,4CAAa;AACjC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wDAAsB;AAClD,YAAY,gDAAc;AAC1B;AACA;AACA,2BAA2B,wBAAwB;AACnD,gBAAgB,gDAAc;AAC9B,2BAA2B,OAAO;AAClC;AACA,8BAA8B,uDAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8DAAe;AACzD;AACA;AACA;AACA;AACA;AACA,0BAA0B,QAAQ,kGAAkG,EAAE;AACtI;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wDAAsB;AAC9C,QAAQ,uDAAqB;AAC7B,QAAQ,0DAAwB,UAAU,oDAAqB;AAC/D,0BAA0B,uDAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wDAAsB;AAC9C;AACA,QAAQ,uDAAqB;AAC7B,QAAQ,sDAAoB;AAC5B;AACA,0BAA0B,uDAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;;ACrMA;AACA;AACA;AACA;AACA;;AAEqC;;AAErC;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACO;AACP;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;A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","file":"vendors-node_modules_jupyterlab_docprovider_lib_index_js.04f95428d89103f611f0.js","sourcesContent":["// From https://en.wikipedia.org/wiki/Moons_of_Jupiter\nexport const moonsOfJupyter = [\n    'Metis',\n    'Adrastea',\n    'Amalthea',\n    'Thebe',\n    'Io',\n    'Europa',\n    'Ganymede',\n    'Callisto',\n    'Themisto',\n    'Leda',\n    'Ersa',\n    'Pandia',\n    'Himalia',\n    'Lysithea',\n    'Elara',\n    'Dia',\n    'Carpo',\n    'Valetudo',\n    'Euporie',\n    'Eupheme',\n    // 'S/2003 J 18',\n    // 'S/2010 J 2',\n    'Helike',\n    // 'S/2003 J 16',\n    // 'S/2003 J 2',\n    'Euanthe',\n    // 'S/2017 J 7',\n    'Hermippe',\n    'Praxidike',\n    'Thyone',\n    'Thelxinoe',\n    // 'S/2017 J 3',\n    'Ananke',\n    'Mneme',\n    // 'S/2016 J 1',\n    'Orthosie',\n    'Harpalyke',\n    'Iocaste',\n    // 'S/2017 J 9',\n    // 'S/2003 J 12',\n    // 'S/2003 J 4',\n    'Erinome',\n    'Aitne',\n    'Herse',\n    'Taygete',\n    // 'S/2017 J 2',\n    // 'S/2017 J 6',\n    'Eukelade',\n    'Carme',\n    // 'S/2003 J 19',\n    'Isonoe',\n    // 'S/2003 J 10',\n    'Autonoe',\n    'Philophrosyne',\n    'Cyllene',\n    'Pasithee',\n    // 'S/2010 J 1',\n    'Pasiphae',\n    'Sponde',\n    // 'S/2017 J 8',\n    'Eurydome',\n    // 'S/2017 J 5',\n    'Kalyke',\n    'Hegemone',\n    'Kale',\n    'Kallichore',\n    // 'S/2011 J 1',\n    // 'S/2017 J 1',\n    'Chaldene',\n    'Arche',\n    'Eirene',\n    'Kore',\n    // 'S/2011 J 2',\n    // 'S/2003 J 9',\n    'Megaclite',\n    'Aoede',\n    // 'S/2003 J 23',\n    'Callirrhoe',\n    'Sinope'\n];\n/**\n * Get a random user-name based on the moons of Jupyter.\n * This function returns names like \"Anonymous Io\" or \"Anonymous Metis\".\n */\nexport const getAnonymousUserName = () => 'Anonymous ' +\n    moonsOfJupyter[Math.floor(Math.random() * moonsOfJupyter.length)];\nexport const userColors = [\n    '#12A0D3',\n    '#17AB30',\n    '#CC8500',\n    '#A79011',\n    '#ee6352',\n    '#609DA9',\n    '#4BA749',\n    '#00A1B3'\n];\nexport const getRandomColor = () => userColors[Math.floor(Math.random() * userColors.length)];\n//# sourceMappingURL=awareness.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module docprovider\n */\nexport * from './awareness';\nexport * from './mock';\nexport * from './tokens';\nexport * from './yprovider';\n//# sourceMappingURL=index.js.map","export class ProviderMock {\n    requestInitialContent() {\n        return Promise.resolve(false);\n    }\n    putInitializedState() {\n        /* nop */\n    }\n    acquireLock() {\n        return Promise.resolve(0);\n    }\n    releaseLock(lock) {\n        /* nop */\n    }\n    destroy() {\n        /* nop */\n    }\n    setPath(path) {\n        /* nop */\n    }\n}\n//# sourceMappingURL=mock.js.map","import { Token } from '@lumino/coreutils';\n/**\n * The default document provider token.\n */\nexport const IDocumentProviderFactory = new Token('@jupyterlab/docprovider:IDocumentProviderFactory');\n//# sourceMappingURL=tokens.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport * as decoding from 'lib0/decoding';\nimport * as encoding from 'lib0/encoding';\nimport { WebsocketProvider } from 'y-websocket';\nimport * as Y from 'yjs';\nimport { getAnonymousUserName, getRandomColor } from './awareness';\nimport * as env from 'lib0/environment';\n/**\n * A class to provide Yjs synchronization over WebSocket.\n *\n * The user can specify their own user-name and user-color by adding url parameters:\n *   ?username=Alice&usercolor=007007\n * where usercolor must be a six-digit hexadecimal encoded RGB value without the hash token.\n *\n * We specify custom messages that the server can interpret. For reference please look in yjs_ws_server.\n *\n */\nexport class WebSocketProviderWithLocks extends WebsocketProvider {\n    /**\n     * Construct a new WebSocketProviderWithLocks\n     *\n     * @param options The instantiation options for a WebSocketProviderWithLocks\n     */\n    constructor(options) {\n        super(options.url, options.contentType + ':' + options.path, options.ymodel.ydoc, {\n            awareness: options.ymodel.awareness\n        });\n        this._currentLockRequest = null;\n        this._initialContentRequest = null;\n        this._path = options.path;\n        this._contentType = options.contentType;\n        this._serverUrl = options.url;\n        const color = '#' + env.getParam('--usercolor', getRandomColor().slice(1));\n        const name = env.getParam('--username', getAnonymousUserName());\n        const awareness = options.ymodel.awareness;\n        const currState = awareness.getLocalState();\n        // only set if this was not already set by another plugin\n        if (currState && currState.name == null) {\n            options.ymodel.awareness.setLocalStateField('user', {\n                name,\n                color\n            });\n        }\n        // Message handler that confirms when a lock has been acquired\n        this.messageHandlers[127] = (encoder, decoder, provider, emitSynced, messageType) => {\n            // acquired lock\n            const timestamp = decoding.readUint32(decoder);\n            const lockRequest = this._currentLockRequest;\n            this._currentLockRequest = null;\n            if (lockRequest) {\n                lockRequest.resolve(timestamp);\n            }\n        };\n        // Message handler that receives the initial content\n        this.messageHandlers[125] = (encoder, decoder, provider, emitSynced, messageType) => {\n            // received initial content\n            const initialContent = decoding.readTailAsUint8Array(decoder);\n            // Apply data from server\n            if (initialContent.byteLength > 0) {\n                setTimeout(() => {\n                    Y.applyUpdate(this.doc, initialContent);\n                }, 0);\n            }\n            const initialContentRequest = this._initialContentRequest;\n            this._initialContentRequest = null;\n            if (initialContentRequest) {\n                initialContentRequest.resolve(initialContent.byteLength > 0);\n            }\n        };\n        this._isInitialized = false;\n        this._onConnectionStatus = this._onConnectionStatus.bind(this);\n        this.on('status', this._onConnectionStatus);\n    }\n    setPath(newPath) {\n        if (newPath !== this._path) {\n            this._path = newPath;\n            // The next time the provider connects, we should connect through a different server url\n            this.bcChannel =\n                this._serverUrl + '/' + this._contentType + ':' + this._path;\n            this.url = this.bcChannel;\n            const encoder = encoding.createEncoder();\n            encoding.write(encoder, 123);\n            // writing a utf8 string to the encoder\n            const escapedPath = unescape(encodeURIComponent(this._contentType + ':' + newPath));\n            for (let i = 0; i < escapedPath.length; i++) {\n                encoding.write(encoder, \n                /** @type {number} */ escapedPath.codePointAt(i));\n            }\n            this._sendMessage(encoding.toUint8Array(encoder));\n        }\n    }\n    /**\n     * Resolves to true if the initial content has been initialized on the server. false otherwise.\n     */\n    requestInitialContent() {\n        if (this._initialContentRequest) {\n            return this._initialContentRequest.promise;\n        }\n        this._initialContentRequest = new PromiseDelegate();\n        this._sendMessage(new Uint8Array([125]));\n        // Resolve with true if the server doesn't respond for some reason.\n        // In case of a connection problem, we don't want the user to re-initialize the window.\n        // Instead wait for y-websocket to connect to the server.\n        // @todo maybe we should reload instead..\n        setTimeout(() => { var _a; return (_a = this._initialContentRequest) === null || _a === void 0 ? void 0 : _a.resolve(false); }, 1000);\n        return this._initialContentRequest.promise;\n    }\n    /**\n     * Put the initialized state.\n     */\n    putInitializedState() {\n        const encoder = encoding.createEncoder();\n        encoding.writeVarUint(encoder, 124);\n        encoding.writeUint8Array(encoder, Y.encodeStateAsUpdate(this.doc));\n        this._sendMessage(encoding.toUint8Array(encoder));\n        this._isInitialized = true;\n    }\n    /**\n     * Acquire a lock.\n     * Returns a Promise that resolves to the lock number.\n     */\n    acquireLock() {\n        if (this._currentLockRequest) {\n            return this._currentLockRequest.promise;\n        }\n        this._sendMessage(new Uint8Array([127]));\n        // try to acquire lock in regular interval\n        const intervalID = setInterval(() => {\n            if (this.wsconnected) {\n                // try to acquire lock\n                this._sendMessage(new Uint8Array([127]));\n            }\n        }, 500);\n        let resolve, reject;\n        const promise = new Promise((_resolve, _reject) => {\n            resolve = _resolve;\n            reject = _reject;\n        });\n        this._currentLockRequest = { promise, resolve, reject };\n        const _finally = () => {\n            clearInterval(intervalID);\n        };\n        promise.then(_finally, _finally);\n        return promise;\n    }\n    /**\n     * Release a lock.\n     *\n     * @param lock The lock to release.\n     */\n    releaseLock(lock) {\n        const encoder = encoding.createEncoder();\n        // reply with release lock\n        encoding.writeVarUint(encoder, 126);\n        encoding.writeUint32(encoder, lock);\n        // releasing lock\n        this._sendMessage(encoding.toUint8Array(encoder));\n    }\n    /**\n     * Send a new message to WebSocket server.\n     *\n     * @param message The message to send\n     */\n    _sendMessage(message) {\n        // send once connected\n        const send = () => {\n            setTimeout(() => {\n                if (this.wsconnected) {\n                    this.ws.send(message);\n                }\n                else {\n                    this.once('status', send);\n                }\n            }, 0);\n        };\n        send();\n    }\n    /**\n     * Handle a change to the connection status.\n     *\n     * @param status The connection status.\n     */\n    async _onConnectionStatus(status) {\n        if (this._isInitialized && status.status === 'connected') {\n            const lock = await this.acquireLock();\n            const contentIsInitialized = await this.requestInitialContent();\n            if (!contentIsInitialized) {\n                this.putInitializedState();\n            }\n            this.releaseLock(lock);\n        }\n    }\n}\n//# sourceMappingURL=yprovider.js.map","/**\n * Utility module to work with urls.\n *\n * @module url\n */\n\nimport * as object from './object.js'\n\n/**\n * Parse query parameters from an url.\n *\n * @param {string} url\n * @return {Object<string,string>}\n */\nexport const decodeQueryParams = url => {\n  /**\n   * @type {Object<string,string>}\n   */\n  const query = {}\n  const urlQuerySplit = url.split('?')\n  const pairs = urlQuerySplit[urlQuerySplit.length - 1].split('&')\n  for (var i = 0; i < pairs.length; i++) {\n    const item = pairs[i]\n    if (item.length > 0) {\n      const pair = item.split('=')\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '')\n    }\n  }\n  return query\n}\n\n/**\n * @param {Object<string,string>} params\n * @return {string}\n */\nexport const encodeQueryParams = params =>\n  object.map(params, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join('&')\n","\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\n\nexport const messagePermissionDenied = 0\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {string} reason\n */\nexport const writePermissionDenied = (encoder, reason) => {\n  encoding.writeVarUint(encoder, messagePermissionDenied)\n  encoding.writeVarString(encoder, reason)\n}\n\n/**\n * @callback PermissionDeniedHandler\n * @param {any} y\n * @param {string} reason\n */\n\n/**\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} y\n * @param {PermissionDeniedHandler} permissionDeniedHandler\n */\nexport const readAuthMessage = (decoder, y, permissionDeniedHandler) => {\n  switch (decoding.readVarUint(decoder)) {\n    case messagePermissionDenied: permissionDeniedHandler(y, decoding.readVarString(decoder))\n  }\n}\n","/*\nUnlike stated in the LICENSE file, it is not necessary to include the copyright notice and permission notice when you copy code from this file.\n*/\n\n/**\n * @module provider/websocket\n */\n\n/* eslint-env browser */\n\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as bc from 'lib0/broadcastchannel'\nimport * as time from 'lib0/time'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as authProtocol from 'y-protocols/auth'\nimport * as awarenessProtocol from 'y-protocols/awareness'\nimport * as mutex from 'lib0/mutex'\nimport { Observable } from 'lib0/observable'\nimport * as math from 'lib0/math'\nimport * as url from 'lib0/url'\n\nconst messageSync = 0\nconst messageQueryAwareness = 3\nconst messageAwareness = 1\nconst messageAuth = 2\n\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */\nconst messageHandlers = []\n\nmessageHandlers[messageSync] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageSync)\n  const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, provider.doc, provider)\n  if (emitSynced && syncMessageType === syncProtocol.messageYjsSyncStep2 && !provider.synced) {\n    provider.synced = true\n  }\n}\n\nmessageHandlers[messageQueryAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageAwareness)\n  encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, Array.from(provider.awareness.getStates().keys())))\n}\n\nmessageHandlers[messageAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  awarenessProtocol.applyAwarenessUpdate(provider.awareness, decoding.readVarUint8Array(decoder), provider)\n}\n\nmessageHandlers[messageAuth] = (encoder, decoder, provider, emitSynced, messageType) => {\n  authProtocol.readAuthMessage(decoder, provider.doc, permissionDeniedHandler)\n}\n\nconst reconnectTimeoutBase = 1200\nconst maxReconnectTimeout = 2500\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000\n\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */\nconst permissionDeniedHandler = (provider, reason) => console.warn(`Permission denied to access ${provider.url}.\\n${reason}`)\n\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */\nconst readMessage = (provider, buf, emitSynced) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  const messageHandler = provider.messageHandlers[messageType]\n  if (/** @type {any} */ (messageHandler)) {\n    messageHandler(encoder, decoder, provider, emitSynced, messageType)\n  } else {\n    console.error('Unable to compute message')\n  }\n  return encoder\n}\n\n/**\n * @param {WebsocketProvider} provider\n */\nconst setupWS = provider => {\n  if (provider.shouldConnect && provider.ws === null) {\n    const websocket = new provider._WS(provider.url)\n    websocket.binaryType = 'arraybuffer'\n    provider.ws = websocket\n    provider.wsconnecting = true\n    provider.wsconnected = false\n    provider.synced = false\n\n    websocket.onmessage = event => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      const encoder = readMessage(provider, new Uint8Array(event.data), true)\n      if (encoding.length(encoder) > 1) {\n        websocket.send(encoding.toUint8Array(encoder))\n      }\n    }\n    websocket.onclose = () => {\n      provider.ws = null\n      provider.wsconnecting = false\n      if (provider.wsconnected) {\n        provider.wsconnected = false\n        provider.synced = false\n        // update awareness (all users except local left)\n        awarenessProtocol.removeAwarenessStates(provider.awareness, Array.from(provider.awareness.getStates().keys()).filter(client => client !== provider.doc.clientID), provider)\n        provider.emit('status', [{\n          status: 'disconnected'\n        }])\n      } else {\n        provider.wsUnsuccessfulReconnects++\n      }\n      // Start with no reconnect timeout and increase timeout by\n      // log10(wsUnsuccessfulReconnects).\n      // The idea is to increase reconnect timeout slowly and have no reconnect\n      // timeout at the beginning (log(1) = 0)\n      setTimeout(setupWS, math.min(math.log10(provider.wsUnsuccessfulReconnects + 1) * reconnectTimeoutBase, maxReconnectTimeout), provider)\n    }\n    websocket.onopen = () => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      provider.wsconnecting = false\n      provider.wsconnected = true\n      provider.wsUnsuccessfulReconnects = 0\n      provider.emit('status', [{\n        status: 'connected'\n      }])\n      // always send sync step 1 when connected\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeSyncStep1(encoder, provider.doc)\n      websocket.send(encoding.toUint8Array(encoder))\n      // broadcast local awareness state\n      if (provider.awareness.getLocalState() !== null) {\n        const encoderAwarenessState = encoding.createEncoder()\n        encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n        encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [provider.doc.clientID]))\n        websocket.send(encoding.toUint8Array(encoderAwarenessState))\n      }\n    }\n\n    provider.emit('status', [{\n      status: 'connecting'\n    }])\n  }\n}\n\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */\nconst broadcastMessage = (provider, buf) => {\n  if (provider.wsconnected) {\n    /** @type {WebSocket} */ (provider.ws).send(buf)\n  }\n  if (provider.bcconnected) {\n    provider.mux(() => {\n      bc.publish(provider.bcChannel, buf)\n    })\n  }\n}\n\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */\nexport class WebsocketProvider extends Observable {\n  /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} [opts]\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   */\n  constructor (serverUrl, roomname, doc, { connect = true, awareness = new awarenessProtocol.Awareness(doc), params = {}, WebSocketPolyfill = WebSocket, resyncInterval = -1 } = {}) {\n    super()\n    // ensure that url is always ends with /\n    while (serverUrl[serverUrl.length - 1] === '/') {\n      serverUrl = serverUrl.slice(0, serverUrl.length - 1)\n    }\n    const encodedParams = url.encodeQueryParams(params)\n    this.bcChannel = serverUrl + '/' + roomname\n    this.url = serverUrl + '/' + roomname + (encodedParams.length === 0 ? '' : '?' + encodedParams)\n    this.roomname = roomname\n    this.doc = doc\n    this._WS = WebSocketPolyfill\n    this.awareness = awareness\n    this.wsconnected = false\n    this.wsconnecting = false\n    this.bcconnected = false\n    this.wsUnsuccessfulReconnects = 0\n    this.messageHandlers = messageHandlers.slice()\n    this.mux = mutex.createMutex()\n    /**\n     * @type {boolean}\n     */\n    this._synced = false\n    /**\n     * @type {WebSocket?}\n     */\n    this.ws = null\n    this.wsLastMessageReceived = 0\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    this.shouldConnect = connect\n\n    /**\n     * @type {number}\n     */\n    this._resyncInterval = 0\n    if (resyncInterval > 0) {\n      this._resyncInterval = /** @type {any} */ (setInterval(() => {\n        if (this.ws) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder()\n          encoding.writeVarUint(encoder, messageSync)\n          syncProtocol.writeSyncStep1(encoder, doc)\n          this.ws.send(encoding.toUint8Array(encoder))\n        }\n      }, resyncInterval))\n    }\n\n    /**\n     * @param {ArrayBuffer} data\n     */\n    this._bcSubscriber = data => {\n      this.mux(() => {\n        const encoder = readMessage(this, new Uint8Array(data), false)\n        if (encoding.length(encoder) > 1) {\n          bc.publish(this.bcChannel, encoding.toUint8Array(encoder))\n        }\n      })\n    }\n    /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._updateHandler = (update, origin) => {\n      if (origin !== this) {\n        const encoder = encoding.createEncoder()\n        encoding.writeVarUint(encoder, messageSync)\n        syncProtocol.writeUpdate(encoder, update)\n        broadcastMessage(this, encoding.toUint8Array(encoder))\n      }\n    }\n    this.doc.on('update', this._updateHandler)\n    /**\n     * @param {any} changed\n     * @param {any} origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(awareness, changedClients))\n      broadcastMessage(this, encoding.toUint8Array(encoder))\n    }\n    this._beforeUnloadHandler = () => {\n      awarenessProtocol.removeAwarenessStates(this.awareness, [doc.clientID], 'window unload')\n    }\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', this._beforeUnloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.on('exit', () => this._beforeUnloadHandler)\n    }\n    awareness.on('update', this._awarenessUpdateHandler)\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      if (this.wsconnected && messageReconnectTimeout < time.getUnixTime() - this.wsLastMessageReceived) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        /** @type {WebSocket} */ (this.ws).close()\n      }\n    }, messageReconnectTimeout / 10))\n    if (connect) {\n      this.connect()\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get synced () {\n    return this._synced\n  }\n\n  set synced (state) {\n    if (this._synced !== state) {\n      this._synced = state\n      this.emit('synced', [state])\n      this.emit('sync', [state])\n    }\n  }\n\n  destroy () {\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval)\n    }\n    clearInterval(this._checkInterval)\n    this.disconnect()\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('beforeunload', this._beforeUnloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.off('exit', () => this._beforeUnloadHandler)\n    }\n    this.awareness.off('update', this._awarenessUpdateHandler)\n    this.doc.off('update', this._updateHandler)\n    super.destroy()\n  }\n\n  connectBc () {\n    if (!this.bcconnected) {\n      bc.subscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = true\n    }\n    // send sync step1 to bc\n    this.mux(() => {\n      // write sync step 1\n      const encoderSync = encoding.createEncoder()\n      encoding.writeVarUint(encoderSync, messageSync)\n      syncProtocol.writeSyncStep1(encoderSync, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderSync))\n      // broadcast local state\n      const encoderState = encoding.createEncoder()\n      encoding.writeVarUint(encoderState, messageSync)\n      syncProtocol.writeSyncStep2(encoderState, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderState))\n      // write queryAwareness\n      const encoderAwarenessQuery = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessQuery))\n      // broadcast local awareness state\n      const encoderAwarenessState = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n      encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID]))\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessState))\n    })\n  }\n\n  disconnectBc () {\n    // broadcast message with local awareness state set to null (indicating disconnect)\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, messageAwareness)\n    encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID], new Map()))\n    broadcastMessage(this, encoding.toUint8Array(encoder))\n    if (this.bcconnected) {\n      bc.unsubscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = false\n    }\n  }\n\n  disconnect () {\n    this.shouldConnect = false\n    this.disconnectBc()\n    if (this.ws !== null) {\n      this.ws.close()\n    }\n  }\n\n  connect () {\n    this.shouldConnect = true\n    if (!this.wsconnected && this.ws === null) {\n      setupWS(this)\n      this.connectBc()\n    }\n  }\n}\n"],"sourceRoot":""}