{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar-extension/lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACoD;AACkD;AAChD;AACE;AACA;AACO;AACuC;AAChD;AACH;AACA;AAC5C;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW;AAC1B,cAAc,6DAAU;AACxB;AACA;AACA;AACA,8BAA8B,4DAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL,eAAe,8DAAS,EAAE,yEAAgB,EAAE,iEAAe;AAC3D;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,QAAQ,6DAAU;AAClB,QAAQ,kEAAgB;AACxB,QAAQ,gEAAe;AACvB,QAAQ,8DAAS;AACjB,QAAQ,gEAAW;AACnB;AACA,eAAe,wEAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uEAAqB;AAC1D;AACA;AACA,yBAAyB,+DAAY,EAAE,wBAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,QAAQ,6DAAU;AAClB,QAAQ,kEAAgB;AACxB,QAAQ,kEAAc;AACtB,QAAQ,gEAAe;AACvB,QAAQ,8DAAS;AACjB,QAAQ,gEAAW;AACnB;AACA;AACA,yBAAyB,0DAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,6DAAU,EAAE,gEAAW;AACtC;AACA,yBAAyB,kEAAe;AACxC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAS,EAAE,gEAAW,EAAE,6DAAU;AACjD;AACA;AACA,+BAA+B,6DAAM;AACrC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2BAA2B,6EAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;AACvB,iC","file":"vendors-node_modules_jupyterlab_statusbar-extension_lib_index_js.bc82856b0493f9f7ab27.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module statusbar-extension\n */\nimport { ILabShell } from '@jupyterlab/application';\nimport { ICommandPalette, ISessionContextDialogs, sessionContextDialogs } from '@jupyterlab/apputils';\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar, KernelStatus, LineCol, RunningSessions, StatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { Switch } from '@jupyterlab/ui-components';\nimport { CommandRegistry } from '@lumino/commands';\nexport const STATUSBAR_PLUGIN_ID = '@jupyterlab/statusbar-extension:plugin';\n/**\n * Initialization data for the statusbar extension.\n */\nconst statusBar = {\n    id: STATUSBAR_PLUGIN_ID,\n    requires: [ITranslator],\n    provides: IStatusBar,\n    autoStart: true,\n    activate: (app, translator, labShell, settingRegistry, palette) => {\n        const trans = translator.load('jupyterlab');\n        const statusBar = new StatusBar();\n        statusBar.id = 'jp-main-statusbar';\n        app.shell.add(statusBar, 'bottom');\n        // If available, connect to the shell's layout modified signal.\n        if (labShell) {\n            labShell.layoutModified.connect(() => {\n                statusBar.update();\n            });\n        }\n        const category = trans.__('Main Area');\n        const command = 'statusbar:toggle';\n        app.commands.addCommand(command, {\n            label: trans.__('Show Status Bar'),\n            execute: (args) => {\n                statusBar.setHidden(statusBar.isVisible);\n                if (settingRegistry) {\n                    void settingRegistry.set(STATUSBAR_PLUGIN_ID, 'visible', statusBar.isVisible);\n                }\n            },\n            isToggled: () => statusBar.isVisible\n        });\n        if (palette) {\n            palette.addItem({ command, category });\n        }\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(STATUSBAR_PLUGIN_ID);\n            const updateSettings = (settings) => {\n                const visible = settings.get('visible').composite;\n                statusBar.setHidden(!visible);\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect(settings => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n        return statusBar;\n    },\n    optional: [ILabShell, ISettingRegistry, ICommandPalette]\n};\n/**\n * A plugin that provides a kernel status item to the status bar.\n */\nexport const kernelStatus = {\n    id: '@jupyterlab/statusbar-extension:kernel-status',\n    autoStart: true,\n    requires: [\n        IStatusBar,\n        INotebookTracker,\n        IConsoleTracker,\n        ILabShell,\n        ITranslator\n    ],\n    optional: [ISessionContextDialogs],\n    activate: (app, statusBar, notebookTracker, consoleTracker, labShell, translator, sessionDialogs) => {\n        // When the status item is clicked, launch the kernel\n        // selection dialog for the current session.\n        let currentSession = null;\n        const changeKernel = async () => {\n            if (!currentSession) {\n                return;\n            }\n            await (sessionDialogs || sessionContextDialogs).selectKernel(currentSession, translator);\n        };\n        // Create the status item.\n        const item = new KernelStatus({ onClick: changeKernel }, translator);\n        // When the title of the active widget changes, update the label\n        // of the hover text.\n        const onTitleChanged = (title) => {\n            item.model.activityName = title.label;\n        };\n        // Keep the session object on the status item up-to-date.\n        labShell.currentChanged.connect((_, change) => {\n            const { oldValue, newValue } = change;\n            // Clean up after the old value if it exists,\n            // listen for changes to the title of the activity\n            if (oldValue) {\n                oldValue.title.changed.disconnect(onTitleChanged);\n            }\n            if (newValue) {\n                newValue.title.changed.connect(onTitleChanged);\n            }\n            // Grab the session off of the current widget, if it exists.\n            if (newValue && consoleTracker.has(newValue)) {\n                currentSession = newValue.sessionContext;\n            }\n            else if (newValue && notebookTracker.has(newValue)) {\n                currentSession = newValue.sessionContext;\n            }\n            else {\n                currentSession = null;\n            }\n            item.model.sessionContext = currentSession;\n        });\n        statusBar.registerStatusItem('@jupyterlab/statusbar-extension:kernel-status', {\n            item,\n            align: 'left',\n            rank: 1,\n            isActive: () => {\n                const current = labShell.currentWidget;\n                return (!!current &&\n                    (notebookTracker.has(current) || consoleTracker.has(current)));\n            }\n        });\n    }\n};\n/**\n * A plugin providing a line/column status item to the application.\n */\nexport const lineColItem = {\n    id: '@jupyterlab/statusbar-extension:line-col-status',\n    autoStart: true,\n    requires: [\n        IStatusBar,\n        INotebookTracker,\n        IEditorTracker,\n        IConsoleTracker,\n        ILabShell,\n        ITranslator\n    ],\n    activate: (_, statusBar, notebookTracker, editorTracker, consoleTracker, labShell, translator) => {\n        const item = new LineCol(translator);\n        const onActiveCellChanged = (notebook, cell) => {\n            item.model.editor = cell && cell.editor;\n        };\n        const onPromptCreated = (console, prompt) => {\n            item.model.editor = prompt && prompt.editor;\n        };\n        labShell.currentChanged.connect((_, change) => {\n            const { oldValue, newValue } = change;\n            // Check if we need to disconnect the console listener\n            // or the notebook active cell listener\n            if (oldValue && consoleTracker.has(oldValue)) {\n                oldValue.console.promptCellCreated.disconnect(onPromptCreated);\n            }\n            else if (oldValue && notebookTracker.has(oldValue)) {\n                oldValue.content.activeCellChanged.disconnect(onActiveCellChanged);\n            }\n            // Wire up the new editor to the model if it exists\n            if (newValue && consoleTracker.has(newValue)) {\n                newValue.console.promptCellCreated.connect(onPromptCreated);\n                const prompt = newValue.console.promptCell;\n                item.model.editor = prompt && prompt.editor;\n            }\n            else if (newValue && notebookTracker.has(newValue)) {\n                newValue.content.activeCellChanged.connect(onActiveCellChanged);\n                const cell = newValue.content.activeCell;\n                item.model.editor = cell && cell.editor;\n            }\n            else if (newValue && editorTracker.has(newValue)) {\n                item.model.editor = newValue.content.editor;\n            }\n            else {\n                item.model.editor = null;\n            }\n        });\n        // Add the status item to the status bar.\n        statusBar.registerStatusItem('@jupyterlab/statusbar-extension:line-col-status', {\n            item,\n            align: 'right',\n            rank: 2,\n            isActive: () => {\n                const current = labShell.currentWidget;\n                return (!!current &&\n                    (notebookTracker.has(current) ||\n                        editorTracker.has(current) ||\n                        consoleTracker.has(current)));\n            }\n        });\n    }\n};\n/*\n * A plugin providing running terminals and sessions information\n * to the status bar.\n */\nexport const runningSessionsItem = {\n    id: '@jupyterlab/statusbar-extension:running-sessions-status',\n    autoStart: true,\n    requires: [IStatusBar, ITranslator],\n    activate: (app, statusBar, translator) => {\n        const item = new RunningSessions({\n            onClick: () => app.shell.activateById('jp-running-sessions'),\n            serviceManager: app.serviceManager,\n            translator\n        });\n        statusBar.registerStatusItem('@jupyterlab/statusbar-extension:running-sessions-status', {\n            item,\n            align: 'left',\n            rank: 0\n        });\n    }\n};\n/**\n * The simple interface mode switch in the status bar.\n */\nconst modeSwitch = {\n    id: '@jupyterlab/statusbar-extension:mode-switch',\n    requires: [ILabShell, ITranslator, IStatusBar],\n    activate: (app, shell, translator, statusBar) => {\n        const trans = translator.load('jupyterlab');\n        const modeSwitch = new Switch();\n        modeSwitch.id = 'jp-single-document-mode';\n        modeSwitch.valueChanged.connect((_, args) => {\n            shell.mode = args.newValue ? 'single-document' : 'multiple-document';\n        });\n        shell.modeChanged.connect((_, mode) => {\n            modeSwitch.value = mode === 'single-document';\n        });\n        modeSwitch.value = shell.mode === 'single-document';\n        // Show the current file browser shortcut in its title.\n        const updateModeSwitchTitle = () => {\n            const binding = app.commands.keyBindings.find(b => b.command === 'application:toggle-mode');\n            if (binding) {\n                const ks = CommandRegistry.formatKeystroke(binding.keys.join(' '));\n                modeSwitch.caption = trans.__('Simple Interface (%1)', ks);\n            }\n            else {\n                modeSwitch.caption = trans.__('Simple Interface');\n            }\n        };\n        updateModeSwitchTitle();\n        app.commands.keyBindingChanged.connect(() => {\n            updateModeSwitchTitle();\n        });\n        modeSwitch.label = trans.__('Simple');\n        statusBar.registerStatusItem('@jupyterlab/statusbar-extension:mode-switch', {\n            item: modeSwitch,\n            align: 'left',\n            isActive: () => true,\n            rank: -1\n        });\n    },\n    autoStart: true\n};\nconst plugins = [\n    statusBar,\n    lineColItem,\n    kernelStatus,\n    runningSessionsItem,\n    modeSwitch\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}