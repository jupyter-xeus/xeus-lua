{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console-extension/lib/foreign.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console-extension/lib/index.js"],"names":["id","requires","IConsoleTracker","ISettingRegistry","ITranslator","optional","ICommandPalette","activate","app","tracker","settingRegistry","translator","palette","trans","load","shell","widgetAdded","connect","sender","widget","console","handler","ForeignHandler","sessionContext","parent","Private","foreignHandlerProperty","set","get","then","composite","showAllKernelActivity","enabled","disposed","dispose","commands","category","__","toggleShowAllActivity","addCommand","label","args","execute","current","currentWidget","activateById","getCurrent","isToggled","_a","isEnabled","addItem","command","isPalette","autoStart","CommandIDs","AttachedProperty","name","create","autoClosingBrackets","clear","runUnforced","runForced","linebreak","interrupt","restart","closeAndShutdown","open","inject","changeKernel","enterToExecute","shiftEnterToExecute","interactionMode","replaceSelection","provides","ConsolePanel","IEditorServices","IRenderMimeRegistry","ILayoutRestorer","IFileBrowserFactory","IMainMenu","ILauncher","ILabStatus","ISessionContextDialogs","async","contentFactory","editorServices","rendermime","restorer","browserFactory","mainMenu","launcher","status","sessionDialogs","manager","serviceManager","sessionContextDialogs","WidgetTracker","namespace","createConsole","options","ready","panel","Object","assign","mimeTypeService","setBusy","undefined","node","dataset","jpInteractionMode","add","propertyChanged","save","ref","mode","insertMode","restore","path","kernelPreference","UUID","when","disposables","onSpecsChanged","specs","kernelspecs","DisposableSet","baseUrl","PageConfig","rank","default","Infinity","spec","kernelIconUrl","resources","index","indexOf","URLExt","slice","isLauncher","metadata","kernel","JSONExt","specsChanged","mapOption","editor","config","option","setOption","pluginId","promptCellConfig","updateSettings","forEach","promptCell","pluginChanged","plugin","find","value","session","sessions","running","item","Promise","reject","_b","_c","_d","display_name","icon","consoleIcon","basePath","defaultBrowser","model","insertLinebreak","text","showDialog","title","body","buttons","Dialog","result","button","accept","shutdown","selectKernel","fileMenu","closeAndCleaners","closeAndCleanupLabel","n","closeAndCleanup","kernelMenu","kernelUsers","restartKernelAndClearLabel","interruptKernel","resolve","restartKernel","restartKernelAndClear","restarted","shutdownKernel","runMenu","codeRunners","runLabel","run","editMenu","clearers","clearCurrentLabel","clearCurrent","runShortcutTitles","notebook","terminal","reason","error","message","helpMenu","getKernel","editorFactory","factoryService","newInlineEditor"],"mappings":"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","file":"6707.6590186e701563cfc56e.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { ForeignHandler, IConsoleTracker } from '@jupyterlab/console';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { AttachedProperty } from '@lumino/properties';\n/**\n * The console widget tracker provider.\n */\nexport const foreign = {\n    id: '@jupyterlab/console-extension:foreign',\n    requires: [IConsoleTracker, ISettingRegistry, ITranslator],\n    optional: [ICommandPalette],\n    activate: activateForeign,\n    autoStart: true\n};\nexport default foreign;\nfunction activateForeign(app, tracker, settingRegistry, translator, palette) {\n    const trans = translator.load('jupyterlab');\n    const { shell } = app;\n    tracker.widgetAdded.connect((sender, widget) => {\n        const console = widget.console;\n        const handler = new ForeignHandler({\n            sessionContext: console.sessionContext,\n            parent: console\n        });\n        Private.foreignHandlerProperty.set(console, handler);\n        // Property showAllKernelActivity configures foreign handler enabled on start.\n        void settingRegistry\n            .get('@jupyterlab/console-extension:tracker', 'showAllKernelActivity')\n            .then(({ composite }) => {\n            const showAllKernelActivity = composite;\n            handler.enabled = showAllKernelActivity;\n        });\n        console.disposed.connect(() => {\n            handler.dispose();\n        });\n    });\n    const { commands } = app;\n    const category = trans.__('Console');\n    const toggleShowAllActivity = 'console:toggle-show-all-kernel-activity';\n    // Get the current widget and activate unless the args specify otherwise.\n    function getCurrent(args) {\n        const widget = tracker.currentWidget;\n        const activate = args['activate'] !== false;\n        if (activate && widget) {\n            shell.activateById(widget.id);\n        }\n        return widget;\n    }\n    commands.addCommand(toggleShowAllActivity, {\n        label: args => trans.__('Show All Kernel Activity'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            const handler = Private.foreignHandlerProperty.get(current.console);\n            if (handler) {\n                handler.enabled = !handler.enabled;\n            }\n        },\n        isToggled: () => {\n            var _a;\n            return tracker.currentWidget !== null &&\n                !!((_a = Private.foreignHandlerProperty.get(tracker.currentWidget.console)) === null || _a === void 0 ? void 0 : _a.enabled);\n        },\n        isEnabled: () => tracker.currentWidget !== null &&\n            tracker.currentWidget === shell.currentWidget\n    });\n    if (palette) {\n        palette.addItem({\n            command: toggleShowAllActivity,\n            category,\n            args: { isPalette: true }\n        });\n    }\n}\n/*\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An attached property for a console's foreign handler.\n     */\n    Private.foreignHandlerProperty = new AttachedProperty({\n        name: 'foreignHandler',\n        create: () => undefined\n    });\n})(Private || (Private = {}));\n//# sourceMappingURL=foreign.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module console-extension\n */\nimport { ILabStatus, ILayoutRestorer } from '@jupyterlab/application';\nimport { Dialog, ICommandPalette, ISessionContextDialogs, sessionContextDialogs, showDialog, WidgetTracker } from '@jupyterlab/apputils';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { ConsolePanel, IConsoleTracker } from '@jupyterlab/console';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { consoleIcon } from '@jupyterlab/ui-components';\nimport { find } from '@lumino/algorithm';\nimport { JSONExt, UUID } from '@lumino/coreutils';\nimport { DisposableSet } from '@lumino/disposable';\nimport foreign from './foreign';\n/**\n * The command IDs used by the console plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.autoClosingBrackets = 'console:toggle-autoclosing-brackets';\n    CommandIDs.create = 'console:create';\n    CommandIDs.clear = 'console:clear';\n    CommandIDs.runUnforced = 'console:run-unforced';\n    CommandIDs.runForced = 'console:run-forced';\n    CommandIDs.linebreak = 'console:linebreak';\n    CommandIDs.interrupt = 'console:interrupt-kernel';\n    CommandIDs.restart = 'console:restart-kernel';\n    CommandIDs.closeAndShutdown = 'console:close-and-shutdown';\n    CommandIDs.open = 'console:open';\n    CommandIDs.inject = 'console:inject';\n    CommandIDs.changeKernel = 'console:change-kernel';\n    CommandIDs.enterToExecute = 'console:enter-to-execute';\n    CommandIDs.shiftEnterToExecute = 'console:shift-enter-to-execute';\n    CommandIDs.interactionMode = 'console:interaction-mode';\n    CommandIDs.replaceSelection = 'console:replace-selection';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The console widget tracker provider.\n */\nconst tracker = {\n    id: '@jupyterlab/console-extension:tracker',\n    provides: IConsoleTracker,\n    requires: [\n        ConsolePanel.IContentFactory,\n        IEditorServices,\n        IRenderMimeRegistry,\n        ISettingRegistry,\n        ITranslator\n    ],\n    optional: [\n        ILayoutRestorer,\n        IFileBrowserFactory,\n        IMainMenu,\n        ICommandPalette,\n        ILauncher,\n        ILabStatus,\n        ISessionContextDialogs\n    ],\n    activate: activateConsole,\n    autoStart: true\n};\n/**\n * The console widget content factory.\n */\nconst factory = {\n    id: '@jupyterlab/console-extension:factory',\n    provides: ConsolePanel.IContentFactory,\n    requires: [IEditorServices],\n    autoStart: true,\n    activate: (app, editorServices) => {\n        const editorFactory = editorServices.factoryService.newInlineEditor;\n        return new ConsolePanel.ContentFactory({ editorFactory });\n    }\n};\n/**\n * Export the plugins as the default.\n */\nconst plugins = [factory, tracker, foreign];\nexport default plugins;\n/**\n * Activate the console extension.\n */\nasync function activateConsole(app, contentFactory, editorServices, rendermime, settingRegistry, translator, restorer, browserFactory, mainMenu, palette, launcher, status, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const manager = app.serviceManager;\n    const { commands, shell } = app;\n    const category = trans.__('Console');\n    sessionDialogs = sessionDialogs !== null && sessionDialogs !== void 0 ? sessionDialogs : sessionContextDialogs;\n    // Create a widget tracker for all console panels.\n    const tracker = new WidgetTracker({\n        namespace: 'console'\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: CommandIDs.create,\n            args: widget => {\n                const { path, name, kernelPreference } = widget.console.sessionContext;\n                return {\n                    path,\n                    name,\n                    kernelPreference: Object.assign({}, kernelPreference)\n                };\n            },\n            name: widget => { var _a; return (_a = widget.console.sessionContext.path) !== null && _a !== void 0 ? _a : UUID.uuid4(); },\n            when: manager.ready\n        });\n    }\n    // Add a launcher item if the launcher is available.\n    if (launcher) {\n        void manager.ready.then(() => {\n            let disposables = null;\n            const onSpecsChanged = () => {\n                if (disposables) {\n                    disposables.dispose();\n                    disposables = null;\n                }\n                const specs = manager.kernelspecs.specs;\n                if (!specs) {\n                    return;\n                }\n                disposables = new DisposableSet();\n                const baseUrl = PageConfig.getBaseUrl();\n                for (const name in specs.kernelspecs) {\n                    const rank = name === specs.default ? 0 : Infinity;\n                    const spec = specs.kernelspecs[name];\n                    let kernelIconUrl = spec.resources['logo-64x64'];\n                    if (kernelIconUrl) {\n                        const index = kernelIconUrl.indexOf('kernelspecs');\n                        kernelIconUrl = URLExt.join(baseUrl, kernelIconUrl.slice(index));\n                    }\n                    disposables.add(launcher.add({\n                        command: CommandIDs.create,\n                        args: { isLauncher: true, kernelPreference: { name } },\n                        category: trans.__('Console'),\n                        rank,\n                        kernelIconUrl,\n                        metadata: {\n                            kernel: JSONExt.deepCopy(spec.metadata || {})\n                        }\n                    }));\n                }\n            };\n            onSpecsChanged();\n            manager.kernelspecs.specsChanged.connect(onSpecsChanged);\n        });\n    }\n    /**\n     * Create a console for a given path.\n     */\n    async function createConsole(options) {\n        var _a;\n        await manager.ready;\n        const panel = new ConsolePanel(Object.assign({ manager,\n            contentFactory, mimeTypeService: editorServices.mimeTypeService, rendermime,\n            translator, setBusy: (_a = (status && (() => status.setBusy()))) !== null && _a !== void 0 ? _a : undefined }, options));\n        const interactionMode = (await settingRegistry.get('@jupyterlab/console-extension:tracker', 'interactionMode')).composite;\n        panel.console.node.dataset.jpInteractionMode = interactionMode;\n        // Add the console panel to the tracker. We want the panel to show up before\n        // any kernel selection dialog, so we do not await panel.session.ready;\n        await tracker.add(panel);\n        panel.sessionContext.propertyChanged.connect(() => {\n            void tracker.save(panel);\n        });\n        shell.add(panel, 'main', {\n            ref: options.ref,\n            mode: options.insertMode,\n            activate: options.activate !== false\n        });\n        return panel;\n    }\n    const mapOption = (editor, config, option) => {\n        if (config[option] === undefined) {\n            return;\n        }\n        switch (option) {\n            case 'autoClosingBrackets':\n                editor.setOption('autoClosingBrackets', config['autoClosingBrackets']);\n                break;\n            case 'cursorBlinkRate':\n                editor.setOption('cursorBlinkRate', config['cursorBlinkRate']);\n                break;\n            case 'fontFamily':\n                editor.setOption('fontFamily', config['fontFamily']);\n                break;\n            case 'fontSize':\n                editor.setOption('fontSize', config['fontSize']);\n                break;\n            case 'lineHeight':\n                editor.setOption('lineHeight', config['lineHeight']);\n                break;\n            case 'lineNumbers':\n                editor.setOption('lineNumbers', config['lineNumbers']);\n                break;\n            case 'lineWrap':\n                editor.setOption('lineWrap', config['lineWrap']);\n                break;\n            case 'matchBrackets':\n                editor.setOption('matchBrackets', config['matchBrackets']);\n                break;\n            case 'readOnly':\n                editor.setOption('readOnly', config['readOnly']);\n                break;\n            case 'insertSpaces':\n                editor.setOption('insertSpaces', config['insertSpaces']);\n                break;\n            case 'tabSize':\n                editor.setOption('tabSize', config['tabSize']);\n                break;\n            case 'wordWrapColumn':\n                editor.setOption('wordWrapColumn', config['wordWrapColumn']);\n                break;\n            case 'rulers':\n                editor.setOption('rulers', config['rulers']);\n                break;\n            case 'codeFolding':\n                editor.setOption('codeFolding', config['codeFolding']);\n                break;\n        }\n    };\n    const setOption = (editor, config) => {\n        if (editor === undefined) {\n            return;\n        }\n        mapOption(editor, config, 'autoClosingBrackets');\n        mapOption(editor, config, 'cursorBlinkRate');\n        mapOption(editor, config, 'fontFamily');\n        mapOption(editor, config, 'fontSize');\n        mapOption(editor, config, 'lineHeight');\n        mapOption(editor, config, 'lineNumbers');\n        mapOption(editor, config, 'lineWrap');\n        mapOption(editor, config, 'matchBrackets');\n        mapOption(editor, config, 'readOnly');\n        mapOption(editor, config, 'insertSpaces');\n        mapOption(editor, config, 'tabSize');\n        mapOption(editor, config, 'wordWrapColumn');\n        mapOption(editor, config, 'rulers');\n        mapOption(editor, config, 'codeFolding');\n    };\n    const pluginId = '@jupyterlab/console-extension:tracker';\n    let interactionMode;\n    let promptCellConfig;\n    async function updateSettings() {\n        interactionMode = (await settingRegistry.get(pluginId, 'interactionMode'))\n            .composite;\n        promptCellConfig = (await settingRegistry.get(pluginId, 'promptCellConfig'))\n            .composite;\n        tracker.forEach(widget => {\n            var _a;\n            widget.console.node.dataset.jpInteractionMode = interactionMode;\n            setOption((_a = widget.console.promptCell) === null || _a === void 0 ? void 0 : _a.editor, promptCellConfig);\n        });\n    }\n    settingRegistry.pluginChanged.connect((sender, plugin) => {\n        if (plugin === pluginId) {\n            void updateSettings();\n        }\n    });\n    await updateSettings();\n    commands.addCommand(CommandIDs.autoClosingBrackets, {\n        execute: async (args) => {\n            var _a;\n            promptCellConfig.autoClosingBrackets = !!((_a = args['force']) !== null && _a !== void 0 ? _a : !promptCellConfig.autoClosingBrackets);\n            await settingRegistry.set(pluginId, 'promptCellConfig', promptCellConfig);\n        },\n        label: trans.__('Auto Close Brackets for Code Console Prompt'),\n        isToggled: () => promptCellConfig.autoClosingBrackets\n    });\n    /**\n     * Whether there is an active console.\n     */\n    function isEnabled() {\n        return (tracker.currentWidget !== null &&\n            tracker.currentWidget === shell.currentWidget);\n    }\n    let command = CommandIDs.open;\n    commands.addCommand(command, {\n        execute: (args) => {\n            const path = args['path'];\n            const widget = tracker.find(value => {\n                var _a;\n                return ((_a = value.console.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path) === path;\n            });\n            if (widget) {\n                if (args.activate !== false) {\n                    shell.activateById(widget.id);\n                }\n                return widget;\n            }\n            else {\n                return manager.ready.then(() => {\n                    const model = find(manager.sessions.running(), item => {\n                        return item.path === path;\n                    });\n                    if (model) {\n                        return createConsole(args);\n                    }\n                    return Promise.reject(`No running kernel session for path: ${path}`);\n                });\n            }\n        }\n    });\n    command = CommandIDs.create;\n    commands.addCommand(command, {\n        label: args => {\n            var _a, _b, _c, _d;\n            if (args['isPalette']) {\n                return trans.__('New Console');\n            }\n            else if (args['isLauncher'] && args['kernelPreference']) {\n                const kernelPreference = args['kernelPreference'];\n                // TODO: Lumino command functions should probably be allowed to return undefined?\n                return ((_d = (_c = (_b = (_a = manager.kernelspecs) === null || _a === void 0 ? void 0 : _a.specs) === null || _b === void 0 ? void 0 : _b.kernelspecs[kernelPreference.name || '']) === null || _c === void 0 ? void 0 : _c.display_name) !== null && _d !== void 0 ? _d : '');\n            }\n            return trans.__('Console');\n        },\n        icon: args => (args['isPalette'] ? undefined : consoleIcon),\n        execute: args => {\n            var _a;\n            const basePath = (_a = (args['basePath'] ||\n                args['cwd'] || (browserFactory === null || browserFactory === void 0 ? void 0 : browserFactory.defaultBrowser.model.path))) !== null && _a !== void 0 ? _a : '';\n            return createConsole(Object.assign({ basePath }, args));\n        }\n    });\n    // Get the current widget and activate unless the args specify otherwise.\n    function getCurrent(args) {\n        const widget = tracker.currentWidget;\n        const activate = args['activate'] !== false;\n        if (activate && widget) {\n            shell.activateById(widget.id);\n        }\n        return widget !== null && widget !== void 0 ? widget : null;\n    }\n    commands.addCommand(CommandIDs.clear, {\n        label: trans.__('Clear Console Cells'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            current.console.clear();\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runUnforced, {\n        label: trans.__('Run Cell (unforced)'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            return current.console.execute();\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runForced, {\n        label: trans.__('Run Cell (forced)'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            return current.console.execute(true);\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.linebreak, {\n        label: trans.__('Insert Line Break'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            current.console.insertLinebreak();\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.replaceSelection, {\n        label: trans.__('Replace Selection in Console'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            const text = args['text'] || '';\n            current.console.replaceSelection(text);\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.interrupt, {\n        label: trans.__('Interrupt Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.console.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restart, {\n        label: trans.__('Restart Kernel…'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            return sessionDialogs.restart(current.console.sessionContext, translator);\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.closeAndShutdown, {\n        label: trans.__('Close and Shut Down…'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            return showDialog({\n                title: trans.__('Shut down the console?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', current.title.label),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.console.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                        return true;\n                    });\n                }\n                else {\n                    return false;\n                }\n            });\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.inject, {\n        execute: args => {\n            const path = args['path'];\n            tracker.find(widget => {\n                var _a;\n                if (((_a = widget.console.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path) === path) {\n                    if (args['activate'] !== false) {\n                        shell.activateById(widget.id);\n                    }\n                    void widget.console.inject(args['code'], args['metadata']);\n                    return true;\n                }\n                return false;\n            });\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.changeKernel, {\n        label: trans.__('Change Kernel…'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            return sessionDialogs.selectKernel(current.console.sessionContext, translator);\n        },\n        isEnabled\n    });\n    if (palette) {\n        // Add command palette items\n        [\n            CommandIDs.create,\n            CommandIDs.linebreak,\n            CommandIDs.clear,\n            CommandIDs.runUnforced,\n            CommandIDs.runForced,\n            CommandIDs.restart,\n            CommandIDs.interrupt,\n            CommandIDs.changeKernel,\n            CommandIDs.closeAndShutdown\n        ].forEach(command => {\n            palette.addItem({ command, category, args: { isPalette: true } });\n        });\n    }\n    if (mainMenu) {\n        // Add a close and shutdown command to the file menu.\n        mainMenu.fileMenu.closeAndCleaners.add({\n            tracker,\n            closeAndCleanupLabel: (n) => trans.__('Shutdown Console'),\n            closeAndCleanup: (current) => {\n                return showDialog({\n                    title: trans.__('Shut down the Console?'),\n                    body: trans.__('Are you sure you want to close \"%1\"?', current.title.label),\n                    buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n                }).then(result => {\n                    if (result.button.accept) {\n                        return current.console.sessionContext.shutdown().then(() => {\n                            current.dispose();\n                        });\n                    }\n                    else {\n                        return void 0;\n                    }\n                });\n            }\n        });\n        // Add a kernel user to the Kernel menu\n        mainMenu.kernelMenu.kernelUsers.add({\n            tracker,\n            restartKernelAndClearLabel: n => trans.__('Restart Kernel and Clear Console'),\n            interruptKernel: current => {\n                var _a;\n                const kernel = (_a = current.console.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n                if (kernel) {\n                    return kernel.interrupt();\n                }\n                return Promise.resolve(void 0);\n            },\n            restartKernel: current => sessionDialogs.restart(current.console.sessionContext, translator),\n            restartKernelAndClear: current => {\n                return sessionDialogs\n                    .restart(current.console.sessionContext)\n                    .then(restarted => {\n                    if (restarted) {\n                        current.console.clear();\n                    }\n                    return restarted;\n                });\n            },\n            changeKernel: current => sessionDialogs.selectKernel(current.console.sessionContext, translator),\n            shutdownKernel: current => current.console.sessionContext.shutdown()\n        });\n        // Add a code runner to the Run menu.\n        mainMenu.runMenu.codeRunners.add({\n            tracker,\n            runLabel: (n) => trans.__('Run Cell'),\n            run: current => current.console.execute(true)\n        });\n        // Add a clearer to the edit menu\n        mainMenu.editMenu.clearers.add({\n            tracker,\n            clearCurrentLabel: (n) => trans.__('Clear Console Cell'),\n            clearCurrent: (current) => {\n                return current.console.clear();\n            }\n        });\n    }\n    // For backwards compatibility and clarity, we explicitly label the run\n    // keystroke with the actual effected change, rather than the generic\n    // \"notebook\" or \"terminal\" interaction mode. When this interaction mode\n    // affects more than just the run keystroke, we can make this menu title more\n    // generic.\n    const runShortcutTitles = {\n        notebook: trans.__('Execute with Shift+Enter'),\n        terminal: trans.__('Execute with Enter')\n    };\n    // Add the execute keystroke setting submenu.\n    commands.addCommand(CommandIDs.interactionMode, {\n        label: args => runShortcutTitles[args['interactionMode']] || '',\n        execute: async (args) => {\n            const key = 'keyMap';\n            try {\n                await settingRegistry.set(pluginId, 'interactionMode', args['interactionMode']);\n            }\n            catch (reason) {\n                console.error(`Failed to set ${pluginId}:${key} - ${reason.message}`);\n            }\n        },\n        isToggled: args => args['interactionMode'] === interactionMode\n    });\n    if (mainMenu) {\n        // Add kernel information to the application help menu.\n        mainMenu.helpMenu.kernelUsers.add({\n            tracker,\n            getKernel: current => { var _a; return (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel; }\n        });\n    }\n    return tracker;\n}\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}