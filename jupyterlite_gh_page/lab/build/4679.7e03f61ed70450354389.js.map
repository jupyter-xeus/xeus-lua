{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser-extension/lib/index.js"],"names":["CommandIDs","copy","copyDownloadLink","createLauncher","cut","del","download","duplicate","hideBrowser","goToPath","goUp","openPath","open","openBrowserTab","paste","createNewDirectory","createNewFile","createNewMarkdownFile","rename","copyShareableLink","copyPath","showBrowser","shutdown","toggleBrowser","toggleNavigateToCurrentDirectory","toggleLastModified","search","namespace","browser","id","requires","IFileBrowserFactory","ITranslator","optional","ILayoutRestorer","ISettingRegistry","ITreePathUpdater","ICommandPalette","autoStart","activate","app","factory","translator","restorer","settingRegistry","treePathUpdater","commandPalette","trans","load","defaultBrowser","node","setAttribute","__","add","docRegistry","registry","commands","tracker","addCommand","execute","widget","currentWidget","delete","icon","closeIcon","stylesheet","label","mnemonic","copyIcon","cutIcon","async","args","_a","path","dontShowBrowser","Private","navigateToPath","type","browserForPath","getBrowserForPath","clearSelectedItems","parts","split","name","length","selectItemByName","reason","console","warn","model","restored","rootPath","cd","caption","InputDialog","placeholder","title","okLabel","value","undefined","trailingSlash","endsWith","slice","services","manager","item","contents","get","content","Error","response","status","message","showErrorMessage","addItem","command","category","Promise","all","toArray","map","selectedItems","localPath","ft","getFileType","bindprops","folderIcon","pasteIcon","newFolderIcon","ext","textEditorIcon","markdownIcon","editIcon","next","Clipboard","isVisible","fileIcon","shutdownKernels","stopIcon","isHidden","isToggled","navigateToCurrentDirectory","set","catch","error","showLastModifiedColumn","alert","addCommands","updateBrowserTitle","binding","find","keyBindings","b","ks","CommandRegistry","keys","join","keyBindingChanged","connect","then","pathChanged","sender","newValue","useFuzzyFilter","settings","changed","composite","provides","IDocumentManager","IStateDB","IRouter","JupyterFrontEnd","docManager","state","router","tree","WidgetTracker","createFileBrowser","options","FilterFileBrowserModel","auto","driveName","refreshInterval","restore","FileBrowser","restoreBrowser","downloadPlugin","downloadIcon","getDownloadUrl","url","browserWidget","ILabShell","labShell","rank","areas","area","it","widgets","contains","activateById","collapseLeft","layout","fresh","mode","maybeCreate","isEmpty","hasCommand","layoutModified","currentChanged","_","change","context","contextForWidget","shareFile","URLExt","PageConfig","workspace","treePath","linkIcon","openWithPlugin","contextMenu","opened","_b","openWith","menu","items","submenu","clearItems","OpenWith","intersection","i","getFactories","Set","forEach","openBrowserTabPlugin","addIcon","fileUploadStatus","IStatusBar","statusBar","FileUploadStatus","registerStatusItem","align","isActive","activeStateChanged","stateChanged","launcherToolbarButton","launcher","ToolbarButton","onClick","tooltip","actualOnClick","toolbar","insertItem","cwd","_path","ready","PathExt","restoring","addClass","refresh","removeClass","listener","routed","disconnect","paths","file","factories","preferredWidgetFactories","f","notebookFactory","getWidgetFactory","indexOf","unshift","iter","first","isect","reduce","subarr","filter","x","has"],"mappings":"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","file":"4679.7e03f61ed70450354389.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module filebrowser-extension\n */\nimport { ILabShell, ILayoutRestorer, IRouter, ITreePathUpdater, JupyterFrontEnd } from '@jupyterlab/application';\nimport { Clipboard, ICommandPalette, InputDialog, showErrorMessage, ToolbarButton, WidgetTracker } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { FileBrowser, FileUploadStatus, FilterFileBrowserModel, IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { addIcon, closeIcon, copyIcon, cutIcon, downloadIcon, editIcon, fileIcon, folderIcon, linkIcon, markdownIcon, newFolderIcon, pasteIcon, stopIcon, textEditorIcon } from '@jupyterlab/ui-components';\nimport { find, map, reduce, toArray } from '@lumino/algorithm';\nimport { CommandRegistry } from '@lumino/commands';\n/**\n * The command IDs used by the file browser plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.copy = 'filebrowser:copy';\n    CommandIDs.copyDownloadLink = 'filebrowser:copy-download-link';\n    // For main browser only.\n    CommandIDs.createLauncher = 'filebrowser:create-main-launcher';\n    CommandIDs.cut = 'filebrowser:cut';\n    CommandIDs.del = 'filebrowser:delete';\n    CommandIDs.download = 'filebrowser:download';\n    CommandIDs.duplicate = 'filebrowser:duplicate';\n    // For main browser only.\n    CommandIDs.hideBrowser = 'filebrowser:hide-main';\n    CommandIDs.goToPath = 'filebrowser:go-to-path';\n    CommandIDs.goUp = 'filebrowser:go-up';\n    CommandIDs.openPath = 'filebrowser:open-path';\n    CommandIDs.open = 'filebrowser:open';\n    CommandIDs.openBrowserTab = 'filebrowser:open-browser-tab';\n    CommandIDs.paste = 'filebrowser:paste';\n    CommandIDs.createNewDirectory = 'filebrowser:create-new-directory';\n    CommandIDs.createNewFile = 'filebrowser:create-new-file';\n    CommandIDs.createNewMarkdownFile = 'filebrowser:create-new-markdown-file';\n    CommandIDs.rename = 'filebrowser:rename';\n    // For main browser only.\n    CommandIDs.copyShareableLink = 'filebrowser:share-main';\n    // For main browser only.\n    CommandIDs.copyPath = 'filebrowser:copy-path';\n    CommandIDs.showBrowser = 'filebrowser:activate';\n    CommandIDs.shutdown = 'filebrowser:shutdown';\n    // For main browser only.\n    CommandIDs.toggleBrowser = 'filebrowser:toggle-main';\n    CommandIDs.toggleNavigateToCurrentDirectory = 'filebrowser:toggle-navigate-to-current-directory';\n    CommandIDs.toggleLastModified = 'filebrowser:toggle-last-modified';\n    CommandIDs.search = 'filebrowser:search';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The file browser namespace token.\n */\nconst namespace = 'filebrowser';\n/**\n * The default file browser extension.\n */\nconst browser = {\n    id: '@jupyterlab/filebrowser-extension:browser',\n    requires: [IFileBrowserFactory, ITranslator],\n    optional: [\n        ILayoutRestorer,\n        ISettingRegistry,\n        ITreePathUpdater,\n        ICommandPalette\n    ],\n    autoStart: true,\n    activate: (app, factory, translator, restorer, settingRegistry, treePathUpdater, commandPalette) => {\n        const trans = translator.load('jupyterlab');\n        const browser = factory.defaultBrowser;\n        browser.node.setAttribute('role', 'region');\n        browser.node.setAttribute('aria-label', trans.__('File Browser Section'));\n        // Let the application restorer track the primary file browser (that is\n        // automatically created) for restoration of application state (e.g. setting\n        // the file browser as the current side bar widget).\n        //\n        // All other file browsers created by using the factory function are\n        // responsible for their own restoration behavior, if any.\n        if (restorer) {\n            restorer.add(browser, namespace);\n        }\n        addCommands(app, factory, translator, settingRegistry, commandPalette);\n        browser.title.icon = folderIcon;\n        // Show the current file browser shortcut in its title.\n        const updateBrowserTitle = () => {\n            const binding = find(app.commands.keyBindings, b => b.command === CommandIDs.toggleBrowser);\n            if (binding) {\n                const ks = CommandRegistry.formatKeystroke(binding.keys.join(' '));\n                browser.title.caption = trans.__('File Browser (%1)', ks);\n            }\n            else {\n                browser.title.caption = trans.__('File Browser');\n            }\n        };\n        updateBrowserTitle();\n        app.commands.keyBindingChanged.connect(() => {\n            updateBrowserTitle();\n        });\n        void Promise.all([app.restored, browser.model.restored]).then(() => {\n            if (treePathUpdater) {\n                browser.model.pathChanged.connect((sender, args) => {\n                    treePathUpdater(args.newValue);\n                });\n            }\n            let navigateToCurrentDirectory = false;\n            let showLastModifiedColumn = true;\n            let useFuzzyFilter = true;\n            if (settingRegistry) {\n                void settingRegistry\n                    .load('@jupyterlab/filebrowser-extension:browser')\n                    .then(settings => {\n                    settings.changed.connect(settings => {\n                        navigateToCurrentDirectory = settings.get('navigateToCurrentDirectory').composite;\n                        browser.navigateToCurrentDirectory = navigateToCurrentDirectory;\n                    });\n                    navigateToCurrentDirectory = settings.get('navigateToCurrentDirectory').composite;\n                    browser.navigateToCurrentDirectory = navigateToCurrentDirectory;\n                    settings.changed.connect(settings => {\n                        showLastModifiedColumn = settings.get('showLastModifiedColumn')\n                            .composite;\n                        browser.showLastModifiedColumn = showLastModifiedColumn;\n                    });\n                    showLastModifiedColumn = settings.get('showLastModifiedColumn')\n                        .composite;\n                    browser.showLastModifiedColumn = showLastModifiedColumn;\n                    settings.changed.connect(settings => {\n                        useFuzzyFilter = settings.get('useFuzzyFilter')\n                            .composite;\n                        browser.useFuzzyFilter = useFuzzyFilter;\n                    });\n                    useFuzzyFilter = settings.get('useFuzzyFilter')\n                        .composite;\n                    browser.useFuzzyFilter = useFuzzyFilter;\n                });\n            }\n        });\n    }\n};\n/**\n * The default file browser factory provider.\n */\nconst factory = {\n    id: '@jupyterlab/filebrowser-extension:factory',\n    provides: IFileBrowserFactory,\n    requires: [IDocumentManager, ITranslator],\n    optional: [IStateDB, IRouter, JupyterFrontEnd.ITreeResolver],\n    activate: async (app, docManager, translator, state, router, tree) => {\n        const { commands } = app;\n        const tracker = new WidgetTracker({ namespace });\n        const createFileBrowser = (id, options = {}) => {\n            var _a;\n            const model = new FilterFileBrowserModel({\n                translator: translator,\n                auto: (_a = options.auto) !== null && _a !== void 0 ? _a : true,\n                manager: docManager,\n                driveName: options.driveName || '',\n                refreshInterval: options.refreshInterval,\n                state: options.state === null\n                    ? undefined\n                    : options.state || state || undefined\n            });\n            const restore = options.restore;\n            const widget = new FileBrowser({ id, model, restore, translator });\n            // Track the newly created file browser.\n            void tracker.add(widget);\n            return widget;\n        };\n        // Manually restore and load the default file browser.\n        const defaultBrowser = createFileBrowser('filebrowser', {\n            auto: false,\n            restore: false\n        });\n        void Private.restoreBrowser(defaultBrowser, commands, router, tree);\n        return { createFileBrowser, defaultBrowser, tracker };\n    }\n};\n/**\n * A plugin providing download + copy download link commands in the context menu.\n *\n * Disabling this plugin will NOT disable downloading files from the server.\n * Users will still be able to retrieve files from the file download URLs the\n * server provides.\n */\nconst downloadPlugin = {\n    id: '@jupyterlab/filebrowser-extension:download',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const trans = translator.load('jupyterlab');\n        const { commands } = app;\n        const { tracker } = factory;\n        commands.addCommand(CommandIDs.download, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (widget) {\n                    return widget.download();\n                }\n            },\n            icon: downloadIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Download')\n        });\n        commands.addCommand(CommandIDs.copyDownloadLink, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                return widget.model.manager.services.contents\n                    .getDownloadUrl(widget.selectedItems().next().path)\n                    .then(url => {\n                    Clipboard.copyToSystem(url);\n                });\n            },\n            icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy Download Link'),\n            mnemonic: 0\n        });\n    }\n};\n/**\n * A plugin to add the file browser widget to an ILabShell\n */\nconst browserWidget = {\n    id: '@jupyterlab/filebrowser-extension:widget',\n    requires: [IDocumentManager, IFileBrowserFactory, ITranslator, ILabShell],\n    autoStart: true,\n    activate: (app, docManager, factory, translator, labShell) => {\n        const { commands } = app;\n        const { defaultBrowser: browser, tracker } = factory;\n        labShell.add(browser, 'left', { rank: 100 });\n        commands.addCommand(CommandIDs.showBrowser, {\n            execute: args => {\n                const path = args.path || '';\n                const browserForPath = Private.getBrowserForPath(path, factory);\n                // Check for browser not found\n                if (!browserForPath) {\n                    return;\n                }\n                // Shortcut if we are using the main file browser\n                if (browser === browserForPath) {\n                    labShell.activateById(browser.id);\n                    return;\n                }\n                else {\n                    const areas = ['left', 'right'];\n                    for (const area of areas) {\n                        const it = labShell.widgets(area);\n                        let widget = it.next();\n                        while (widget) {\n                            if (widget.contains(browserForPath)) {\n                                labShell.activateById(widget.id);\n                                return;\n                            }\n                            widget = it.next();\n                        }\n                    }\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.hideBrowser, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (widget && !widget.isHidden) {\n                    labShell.collapseLeft();\n                }\n            }\n        });\n        // If the layout is a fresh session without saved data and not in single document\n        // mode, open file browser.\n        void labShell.restored.then(layout => {\n            if (layout.fresh && labShell.mode !== 'single-document') {\n                void commands.execute(CommandIDs.showBrowser, void 0);\n            }\n        });\n        void Promise.all([app.restored, browser.model.restored]).then(() => {\n            function maybeCreate() {\n                // Create a launcher if there are no open items.\n                if (labShell.isEmpty('main') &&\n                    commands.hasCommand('launcher:create')) {\n                    void Private.createLauncher(commands, browser);\n                }\n            }\n            // When layout is modified, create a launcher if there are no open items.\n            labShell.layoutModified.connect(() => {\n                maybeCreate();\n            });\n            // Whether to automatically navigate to a document's current directory\n            labShell.currentChanged.connect(async (_, change) => {\n                if (browser.navigateToCurrentDirectory && change.newValue) {\n                    const { newValue } = change;\n                    const context = docManager.contextForWidget(newValue);\n                    if (context) {\n                        const { path } = context;\n                        try {\n                            await Private.navigateToPath(path, factory, translator);\n                        }\n                        catch (reason) {\n                            console.warn(`${CommandIDs.goToPath} failed to open: ${path}`, reason);\n                        }\n                    }\n                }\n            });\n            maybeCreate();\n        });\n    }\n};\n/**\n * The default file browser share-file plugin\n *\n * This extension adds a \"Copy Shareable Link\" command that generates a copy-\n * pastable URL. This url can be used to open a particular file in JupyterLab,\n * handy for emailing links or bookmarking for reference.\n *\n * If you need to change how this link is generated (for instance, to copy a\n * /user-redirect URL for JupyterHub), disable this plugin and replace it\n * with another implementation.\n */\nconst shareFile = {\n    id: '@jupyterlab/filebrowser-extension:share-file',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const trans = translator.load('jupyterlab');\n        const { commands } = app;\n        const { tracker } = factory;\n        commands.addCommand(CommandIDs.copyShareableLink, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                const model = widget === null || widget === void 0 ? void 0 : widget.selectedItems().next();\n                if (!model) {\n                    return;\n                }\n                Clipboard.copyToSystem(URLExt.normalize(PageConfig.getUrl({\n                    mode: 'single-document',\n                    workspace: PageConfig.defaultWorkspace,\n                    treePath: model.path\n                })));\n            },\n            isVisible: () => !!tracker.currentWidget &&\n                toArray(tracker.currentWidget.selectedItems()).length === 1,\n            icon: linkIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy Shareable Link')\n        });\n    }\n};\n/**\n * The \"Open With\" context menu.\n *\n * This is its own plugin in case you would like to disable this feature.\n * e.g. jupyter labextension disable @jupyterlab/filebrowser-extension:open-with\n */\nconst openWithPlugin = {\n    id: '@jupyterlab/filebrowser-extension:open-with',\n    requires: [IFileBrowserFactory],\n    autoStart: true,\n    activate: (app, factory) => {\n        const { docRegistry } = app;\n        const { tracker } = factory;\n        function updateOpenWithMenu(contextMenu) {\n            var _a, _b;\n            const openWith = (_b = (_a = contextMenu.menu.items.find(item => {\n                var _a;\n                return item.type === 'submenu' &&\n                    ((_a = item.submenu) === null || _a === void 0 ? void 0 : _a.id) === 'jp-contextmenu-open-with';\n            })) === null || _a === void 0 ? void 0 : _a.submenu) !== null && _b !== void 0 ? _b : null;\n            if (!openWith) {\n                return; // Bail early if the open with menu is not displayed\n            }\n            // clear the current menu items\n            openWith.clearItems();\n            // get the widget factories that could be used to open all of the items\n            // in the current filebrowser selection\n            const factories = tracker.currentWidget\n                ? Private.OpenWith.intersection(map(tracker.currentWidget.selectedItems(), i => {\n                    return Private.OpenWith.getFactories(docRegistry, i);\n                }))\n                : new Set();\n            // make new menu items from the widget factories\n            factories.forEach(factory => {\n                openWith.addItem({\n                    args: { factory: factory },\n                    command: CommandIDs.open\n                });\n            });\n        }\n        app.contextMenu.opened.connect(updateOpenWithMenu);\n    }\n};\n/**\n * The \"Open in New Browser Tab\" context menu.\n *\n * This is its own plugin in case you would like to disable this feature.\n * e.g. jupyter labextension disable @jupyterlab/filebrowser-extension:open-browser-tab\n *\n * Note: If disabling this, you may also want to disable:\n * @jupyterlab/docmanager-extension:open-browser-tab\n */\nconst openBrowserTabPlugin = {\n    id: '@jupyterlab/filebrowser-extension:open-browser-tab',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const { commands } = app;\n        const trans = translator.load('jupyterlab');\n        const { tracker } = factory;\n        commands.addCommand(CommandIDs.openBrowserTab, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                return Promise.all(toArray(map(widget.selectedItems(), item => {\n                    return commands.execute('docmanager:open-browser-tab', {\n                        path: item.path\n                    });\n                })));\n            },\n            icon: addIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Open in New Browser Tab'),\n            mnemonic: 0\n        });\n    }\n};\n/**\n * A plugin providing file upload status.\n */\nexport const fileUploadStatus = {\n    id: '@jupyterlab/filebrowser-extension:file-upload-status',\n    autoStart: true,\n    requires: [IFileBrowserFactory, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, browser, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const item = new FileUploadStatus({\n            tracker: browser.tracker,\n            translator\n        });\n        statusBar.registerStatusItem('@jupyterlab/filebrowser-extension:file-upload-status', {\n            item,\n            align: 'middle',\n            isActive: () => {\n                return !!item.model && item.model.items.length > 0;\n            },\n            activeStateChanged: item.model.stateChanged\n        });\n    }\n};\n/**\n * A plugin to add a launcher button to the file browser toolbar\n */\nexport const launcherToolbarButton = {\n    id: '@jupyterlab/filebrowser-extension:launcher-toolbar-button',\n    autoStart: true,\n    requires: [IFileBrowserFactory, ITranslator],\n    activate: (app, factory, translator) => {\n        const { commands } = app;\n        const trans = translator.load('jupyterlab');\n        const { defaultBrowser: browser } = factory;\n        // Add a launcher toolbar item.\n        const launcher = new ToolbarButton({\n            icon: addIcon,\n            onClick: () => {\n                if (commands.hasCommand('launcher:create')) {\n                    return Private.createLauncher(commands, browser);\n                }\n            },\n            tooltip: trans.__('New Launcher'),\n            actualOnClick: true\n        });\n        browser.toolbar.insertItem(0, 'launch', launcher);\n    }\n};\n/**\n * Add the main file browser commands to the application's command registry.\n */\nfunction addCommands(app, factory, translator, settingRegistry, commandPalette) {\n    const trans = translator.load('jupyterlab');\n    const { docRegistry: registry, commands } = app;\n    const { defaultBrowser: browser, tracker } = factory;\n    commands.addCommand(CommandIDs.del, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.delete();\n            }\n        },\n        icon: closeIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Delete'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.copy, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.copy();\n            }\n        },\n        icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Copy'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.cut, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.cut();\n            }\n        },\n        icon: cutIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Cut')\n    });\n    commands.addCommand(CommandIDs.duplicate, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.duplicate();\n            }\n        },\n        icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Duplicate')\n    });\n    commands.addCommand(CommandIDs.goToPath, {\n        execute: async (args) => {\n            var _a;\n            const path = args.path || '';\n            const showBrowser = !((_a = args === null || args === void 0 ? void 0 : args.dontShowBrowser) !== null && _a !== void 0 ? _a : false);\n            try {\n                const item = await Private.navigateToPath(path, factory, translator);\n                if (item.type !== 'directory' && showBrowser) {\n                    const browserForPath = Private.getBrowserForPath(path, factory);\n                    if (browserForPath) {\n                        browserForPath.clearSelectedItems();\n                        const parts = path.split('/');\n                        const name = parts[parts.length - 1];\n                        if (name) {\n                            await browserForPath.selectItemByName(name);\n                        }\n                    }\n                }\n            }\n            catch (reason) {\n                console.warn(`${CommandIDs.goToPath} failed to go to: ${path}`, reason);\n            }\n            if (showBrowser) {\n                return commands.execute(CommandIDs.showBrowser, { path });\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.goUp, {\n        label: 'go up',\n        execute: async () => {\n            const browserForPath = Private.getBrowserForPath('', factory);\n            if (!browserForPath) {\n                return;\n            }\n            const { model } = browserForPath;\n            await model.restored;\n            if (model.path === model.rootPath) {\n                return;\n            }\n            try {\n                await model.cd('..');\n            }\n            catch (reason) {\n                console.warn(`${CommandIDs.goUp} failed to go to parent directory of ${model.path}`, reason);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.openPath, {\n        label: args => args.path ? trans.__('Open %1', args.path) : trans.__('Open from Path…'),\n        caption: args => args.path ? trans.__('Open %1', args.path) : trans.__('Open from path'),\n        execute: async (args) => {\n            var _a;\n            let path;\n            if (args === null || args === void 0 ? void 0 : args.path) {\n                path = args.path;\n            }\n            else {\n                path = (_a = (await InputDialog.getText({\n                    label: trans.__('Path'),\n                    placeholder: '/path/relative/to/jlab/root',\n                    title: trans.__('Open Path'),\n                    okLabel: trans.__('Open')\n                })).value) !== null && _a !== void 0 ? _a : undefined;\n            }\n            if (!path) {\n                return;\n            }\n            try {\n                const trailingSlash = path !== '/' && path.endsWith('/');\n                if (trailingSlash) {\n                    // The normal contents service errors on paths ending in slash\n                    path = path.slice(0, path.length - 1);\n                }\n                const browserForPath = Private.getBrowserForPath(path, factory);\n                const { services } = browserForPath.model.manager;\n                const item = await services.contents.get(path, {\n                    content: false\n                });\n                if (trailingSlash && item.type !== 'directory') {\n                    throw new Error(`Path ${path}/ is not a directory`);\n                }\n                await commands.execute(CommandIDs.goToPath, {\n                    path,\n                    dontShowBrowser: args.dontShowBrowser\n                });\n                if (item.type === 'directory') {\n                    return;\n                }\n                return commands.execute('docmanager:open', { path });\n            }\n            catch (reason) {\n                if (reason.response && reason.response.status === 404) {\n                    reason.message = trans.__('Could not find path: %1', path);\n                }\n                return showErrorMessage(trans.__('Cannot open'), reason);\n            }\n        }\n    });\n    // Add the openPath command to the command palette\n    if (commandPalette) {\n        commandPalette.addItem({\n            command: CommandIDs.openPath,\n            category: trans.__('File Operations')\n        });\n    }\n    commands.addCommand(CommandIDs.open, {\n        execute: args => {\n            const factory = args['factory'] || void 0;\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const { contents } = widget.model.manager.services;\n            return Promise.all(toArray(map(widget.selectedItems(), item => {\n                if (item.type === 'directory') {\n                    const localPath = contents.localPath(item.path);\n                    return widget.model.cd(`/${localPath}`);\n                }\n                return commands.execute('docmanager:open', {\n                    factory: factory,\n                    path: item.path\n                });\n            })));\n        },\n        icon: args => {\n            var _a;\n            const factory = args['factory'] || void 0;\n            if (factory) {\n                // if an explicit factory is passed...\n                const ft = registry.getFileType(factory);\n                // ...set an icon if the factory name corresponds to a file type name...\n                // ...or leave the icon blank\n                return (_a = ft === null || ft === void 0 ? void 0 : ft.icon) === null || _a === void 0 ? void 0 : _a.bindprops({ stylesheet: 'menuItem' });\n            }\n            else {\n                return folderIcon.bindprops({ stylesheet: 'menuItem' });\n            }\n        },\n        // FIXME-TRANS: Is this localizable?\n        label: args => (args['label'] || args['factory'] || trans.__('Open')),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.paste, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.paste();\n            }\n        },\n        icon: pasteIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Paste'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.createNewDirectory, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.createNewDirectory();\n            }\n        },\n        icon: newFolderIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New Folder')\n    });\n    commands.addCommand(CommandIDs.createNewFile, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.createNewFile({ ext: 'txt' });\n            }\n        },\n        icon: textEditorIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New File')\n    });\n    commands.addCommand(CommandIDs.createNewMarkdownFile, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.createNewFile({ ext: 'md' });\n            }\n        },\n        icon: markdownIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New Markdown File')\n    });\n    commands.addCommand(CommandIDs.rename, {\n        execute: args => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.rename();\n            }\n        },\n        icon: editIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Rename'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.copyPath, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const item = widget.selectedItems().next();\n            if (!item) {\n                return;\n            }\n            Clipboard.copyToSystem(item.path);\n        },\n        isVisible: () => !!tracker.currentWidget &&\n            tracker.currentWidget.selectedItems().next !== undefined,\n        icon: fileIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Copy Path')\n    });\n    commands.addCommand(CommandIDs.shutdown, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.shutdownKernels();\n            }\n        },\n        icon: stopIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Shut Down Kernel')\n    });\n    commands.addCommand(CommandIDs.toggleBrowser, {\n        execute: () => {\n            if (browser.isHidden) {\n                return commands.execute(CommandIDs.showBrowser, void 0);\n            }\n            return commands.execute(CommandIDs.hideBrowser, void 0);\n        }\n    });\n    commands.addCommand(CommandIDs.createLauncher, {\n        label: trans.__('New Launcher'),\n        execute: () => Private.createLauncher(commands, browser)\n    });\n    if (settingRegistry) {\n        commands.addCommand(CommandIDs.toggleNavigateToCurrentDirectory, {\n            label: trans.__('Show Active File in File Browser'),\n            isToggled: () => browser.navigateToCurrentDirectory,\n            execute: () => {\n                const value = !browser.navigateToCurrentDirectory;\n                const key = 'navigateToCurrentDirectory';\n                return settingRegistry\n                    .set('@jupyterlab/filebrowser-extension:browser', key, value)\n                    .catch((reason) => {\n                    console.error(`Failed to set navigateToCurrentDirectory setting`);\n                });\n            }\n        });\n    }\n    commands.addCommand(CommandIDs.toggleLastModified, {\n        label: trans.__('Show Last Modified Column'),\n        isToggled: () => browser.showLastModifiedColumn,\n        execute: () => {\n            const value = !browser.showLastModifiedColumn;\n            const key = 'showLastModifiedColumn';\n            if (settingRegistry) {\n                return settingRegistry\n                    .set('@jupyterlab/filebrowser-extension:browser', key, value)\n                    .catch((reason) => {\n                    console.error(`Failed to set showLastModifiedColumn setting`);\n                });\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.search, {\n        label: trans.__('Search on File Names'),\n        execute: () => alert('search')\n    });\n    if (commandPalette) {\n        commandPalette.addItem({\n            command: CommandIDs.toggleNavigateToCurrentDirectory,\n            category: trans.__('File Operations')\n        });\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create a launcher for a given filebrowser widget.\n     */\n    function createLauncher(commands, browser) {\n        const { model } = browser;\n        return commands\n            .execute('launcher:create', { cwd: model.path })\n            .then((launcher) => {\n            model.pathChanged.connect(() => {\n                if (launcher.content) {\n                    launcher.content.cwd = model.path;\n                }\n            }, launcher);\n            return launcher;\n        });\n    }\n    Private.createLauncher = createLauncher;\n    /**\n     * Get browser object given file path.\n     */\n    function getBrowserForPath(path, factory) {\n        const { defaultBrowser: browser, tracker } = factory;\n        const driveName = browser.model.manager.services.contents.driveName(path);\n        if (driveName) {\n            const browserForPath = tracker.find(_path => _path.model.driveName === driveName);\n            if (!browserForPath) {\n                // warn that no filebrowser could be found for this driveName\n                console.warn(`${CommandIDs.goToPath} failed to find filebrowser for path: ${path}`);\n                return;\n            }\n            return browserForPath;\n        }\n        // if driveName is empty, assume the main filebrowser\n        return browser;\n    }\n    Private.getBrowserForPath = getBrowserForPath;\n    /**\n     * Navigate to a path or the path containing a file.\n     */\n    async function navigateToPath(path, factory, translator) {\n        const trans = translator.load('jupyterlab');\n        const browserForPath = Private.getBrowserForPath(path, factory);\n        if (!browserForPath) {\n            throw new Error(trans.__('No browser for path'));\n        }\n        const { services } = browserForPath.model.manager;\n        const localPath = services.contents.localPath(path);\n        await services.ready;\n        const item = await services.contents.get(path, { content: false });\n        const { model } = browserForPath;\n        await model.restored;\n        if (item.type === 'directory') {\n            await model.cd(`/${localPath}`);\n        }\n        else {\n            await model.cd(`/${PathExt.dirname(localPath)}`);\n        }\n        return item;\n    }\n    Private.navigateToPath = navigateToPath;\n    /**\n     * Restores file browser state and overrides state if tree resolver resolves.\n     */\n    async function restoreBrowser(browser, commands, router, tree) {\n        const restoring = 'jp-mod-restoring';\n        browser.addClass(restoring);\n        if (!router) {\n            await browser.model.restore(browser.id);\n            await browser.model.refresh();\n            browser.removeClass(restoring);\n            return;\n        }\n        const listener = async () => {\n            router.routed.disconnect(listener);\n            const paths = await (tree === null || tree === void 0 ? void 0 : tree.paths);\n            if ((paths === null || paths === void 0 ? void 0 : paths.file) || (paths === null || paths === void 0 ? void 0 : paths.browser)) {\n                // Restore the model without populating it.\n                await browser.model.restore(browser.id, false);\n                if (paths.file) {\n                    await commands.execute(CommandIDs.openPath, {\n                        path: paths.file,\n                        dontShowBrowser: true\n                    });\n                }\n                if (paths.browser) {\n                    await commands.execute(CommandIDs.openPath, {\n                        path: paths.browser,\n                        dontShowBrowser: true\n                    });\n                }\n            }\n            else {\n                await browser.model.restore(browser.id);\n                await browser.model.refresh();\n            }\n            browser.removeClass(restoring);\n        };\n        router.routed.connect(listener);\n    }\n    Private.restoreBrowser = restoreBrowser;\n})(Private || (Private = {}));\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    factory,\n    browser,\n    shareFile,\n    fileUploadStatus,\n    downloadPlugin,\n    browserWidget,\n    launcherToolbarButton,\n    openWithPlugin,\n    openBrowserTabPlugin\n];\nexport default plugins;\n(function (Private) {\n    let OpenWith;\n    (function (OpenWith) {\n        /**\n         * Get the factories for the selected item\n         *\n         * @param docRegistry Application document registry\n         * @param item Selected item model\n         * @returns Available factories for the model\n         */\n        function getFactories(docRegistry, item) {\n            var _a;\n            const factories = docRegistry\n                .preferredWidgetFactories(item.path)\n                .map(f => f.name);\n            const notebookFactory = (_a = docRegistry.getWidgetFactory('notebook')) === null || _a === void 0 ? void 0 : _a.name;\n            if (notebookFactory &&\n                item.type === 'notebook' &&\n                factories.indexOf(notebookFactory) === -1) {\n                factories.unshift(notebookFactory);\n            }\n            return factories;\n        }\n        OpenWith.getFactories = getFactories;\n        /**\n         * Return the intersection of multiple arrays.\n         *\n         * @param iter Iterator of arrays\n         * @returns Set of common elements to all arrays\n         */\n        function intersection(iter) {\n            // pop the first element of iter\n            const first = iter.next();\n            // first will be undefined if iter is empty\n            if (!first) {\n                return new Set();\n            }\n            // \"initialize\" the intersection from first\n            const isect = new Set(first);\n            // reduce over the remaining elements of iter\n            return reduce(iter, (isect, subarr) => {\n                // filter out all elements not present in both isect and subarr,\n                // accumulate result in new set\n                return new Set(subarr.filter(x => isect.has(x)));\n            }, isect);\n        }\n        OpenWith.intersection = intersection;\n    })(OpenWith = Private.OpenWith || (Private.OpenWith = {}));\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}