{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/p5-kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/p5-kernel-extension/lib/index.js"],"names":["MIME_TYPE","P5Kernel","constructor","options","super","this","_bootstrap","_inputs","_p5Ready","PromiseDelegate","p5Url","ready","then","_eval","resolve","promise","implementation","implementation_version","language_info","codemirror_mode","name","file_extension","mimetype","nbconvert_exporter","pygments_lexer","version","protocol_version","status","banner","help_links","text","url","content","code","startsWith","res","_magics","publishExecuteResult","execution_count","executionCount","user_expressions","executeRequest","push","_a","_b","input","map","c","join","script","re","matches","match","width","undefined","height","data","metadata","id","autoStart","requires","activate","app","kernelspecs","PageConfig","URLExt","window","location","origin","register","spec","display_name","language","argv","env","interrupt_mode","resources","create","async"],"mappings":"oNAKA,MAAMA,EAAY,sBAIX,MAAMC,UAAiB,IAM1BC,YAAYC,GACRC,MAAMD,GACNE,KAAKC,WAAa,GAClBD,KAAKE,QAAU,GACfF,KAAKG,SAAW,IAAI,EAAAC,gBACpB,MAAM,MAAEC,GAAUP,EAClBE,KAAKC,WAAa,mBACVI,uJAORN,MAAMO,MAAMC,MAAK,KACbP,KAAKQ,MAAMR,KAAKC,YAChBD,KAAKG,SAASM,aAMtB,YACI,OAAOT,KAAKG,SAASO,QAKzB,0BAyBI,MAxBgB,CACZC,eAAgB,QAChBC,uBAAwB,QACxBC,cAAe,CACXC,gBAAiB,CACbC,KAAM,cAEVC,eAAgB,MAChBC,SAAU,kBACVF,KAAM,OACNG,mBAAoB,aACpBC,eAAgB,aAChBC,QAAS,UAEbC,iBAAkB,MAClBC,OAAQ,KACRC,OAAQ,iBACRC,WAAY,CACR,CACIC,KAAM,eACNC,IAAK,gDAWrB,qBAAqBC,GACjB,MAAM,KAAEC,GAASD,EACjB,GAAIC,EAAKC,WAAW,KAAM,CACtB,MAAMC,QAAY9B,KAAK+B,QAAQH,GAC/B,GAAIE,EAEA,OADA9B,KAAKgC,qBAAqBF,GACnB,CACHR,OAAQ,KACRW,gBAAiBjC,KAAKkC,eACtBC,iBAAkB,IAI9B,MAAML,EAAM/B,MAAMqC,eAAeT,GAEjC,OADA3B,KAAKE,QAAQmC,KAAKT,GACXE,EAOX,cAAcF,GACV,IAAIU,EAAIC,EACR,GAAIX,EAAKC,WAAW,SAAU,CAC1B,MAAMW,EAAQxC,KAAKE,QAAQuC,KAAIC,GAAK,iBAAiBA,UAASC,KAAK,MAC7DC,EAAS,aACjB5C,KAAKC,sCACHuC,+DAKMK,EAAK,8BACLC,EAAUlB,EAAKmB,MAAMF,GACrBG,EAAgF,QAAvEV,EAAKQ,aAAyC,EAASA,EAAQ,UAAuB,IAAPR,EAAgBA,OAAKW,EAC7GC,EAAiF,QAAvEX,EAAKO,aAAyC,EAASA,EAAQ,UAAuB,IAAPP,EAAgBA,OAAKU,EACpH,MAAO,CACHhB,gBAAiBjC,KAAKkC,eACtBiB,KAAM,CACF,CAACxD,GAAY,CACT,mCACA,WAAWiD,cACX,WACFD,KAAK,OAEXS,SAAU,CACN,CAACzD,GAAY,CACTqD,QACAE,cCpHxB,MAwCA,EADgB,CAnCD,CACXG,GAAI,0CACJC,WAAW,EACXC,SAAU,CAAC,KACXC,SAAU,CAACC,EAAKC,KACZ,MAAMhC,EAAM,EAAAiC,WAAA,UAAqB,UATtB,kDAULtD,EAAQ,EAAAuD,OAAA,QAAelC,GAAO,EAAAkC,OAAA,KAAYC,OAAOC,SAASC,OAAQrC,GAAOA,EAC/EgC,EAAYM,SAAS,CACjBC,KAAM,CACFlD,KAAM,OACNmD,aAAc,QACdC,SAAU,aACVC,KAAM,GACNH,KAAM,CACFG,KAAM,GACNC,IAAK,GACLH,aAAc,QACdC,SAAU,aACVG,eAAgB,UAChBlB,SAAU,IAEdmB,UAAW,CACP,aAAc,OACd,aAAc,0BAGtBC,OAAQC,MAAO3E,GACJ,IAAIF,EAAS,IACbE,EACHO","file":"7801.c15af60cf46334a863b1.js","sourcesContent":["import { JavaScriptKernel } from '@jupyterlite/javascript-kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\n/**\n * The mimetype for mime bundle results\n */\nconst MIME_TYPE = 'text/html-sandboxed';\n/**\n * A kernel that executes code in an IFrame.\n */\nexport class P5Kernel extends JavaScriptKernel {\n    /**\n     * Instantiate a new P5Kernel.\n     *\n     * @param options The instantiation options for a new P5Kernel.\n     */\n    constructor(options) {\n        super(options);\n        this._bootstrap = '';\n        this._inputs = [];\n        this._p5Ready = new PromiseDelegate();\n        const { p5Url } = options;\n        this._bootstrap = `\n      import('${p5Url}').then(() => {\n        // create the p5 global instance\n        window.__globalP5 = new p5();\n        return Promise.resolve();\n      })\n    `;\n        // wait for the parent IFrame to be ready\n        super.ready.then(() => {\n            this._eval(this._bootstrap);\n            this._p5Ready.resolve();\n        });\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._p5Ready.promise;\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'p5.js',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'javascript'\n                },\n                file_extension: '.js',\n                mimetype: 'text/javascript',\n                name: 'p5js',\n                nbconvert_exporter: 'javascript',\n                pygments_lexer: 'javascript',\n                version: 'es2017'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'A p5.js kernel',\n            help_links: [\n                {\n                    text: 'p5.js Kernel',\n                    url: 'https://github.com/jupyterlite/jupyterlite'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const { code } = content;\n        if (code.startsWith('%')) {\n            const res = await this._magics(code);\n            if (res) {\n                this.publishExecuteResult(res);\n                return {\n                    status: 'ok',\n                    execution_count: this.executionCount,\n                    user_expressions: {}\n                };\n            }\n        }\n        const res = super.executeRequest(content);\n        this._inputs.push(code);\n        return res;\n    }\n    /**\n     * Handle magics coming from execute requests.\n     *\n     * @param code The code block to handle.\n     */\n    async _magics(code) {\n        var _a, _b;\n        if (code.startsWith('%show')) {\n            const input = this._inputs.map(c => `window.eval(\\`${c}\\`);`).join('\\n');\n            const script = `\n        ${this._bootstrap}.then(() => {\n          ${input}\n          window.__globalP5._start();\n        })\n      `;\n            // add metadata\n            const re = /^%show(?: (.+)\\s+(.+))?\\s*$/;\n            const matches = code.match(re);\n            const width = (_a = matches === null || matches === void 0 ? void 0 : matches[1]) !== null && _a !== void 0 ? _a : undefined;\n            const height = (_b = matches === null || matches === void 0 ? void 0 : matches[2]) !== null && _b !== void 0 ? _b : undefined;\n            return {\n                execution_count: this.executionCount,\n                data: {\n                    [MIME_TYPE]: [\n                        '<body style=\"overflow: hidden;\">',\n                        `<script>${script}</script>`,\n                        '</body>'\n                    ].join('\\n')\n                },\n                metadata: {\n                    [MIME_TYPE]: {\n                        width,\n                        height\n                    }\n                }\n            };\n        }\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IKernelSpecs } from '@jupyterlite/kernel';\nimport { P5Kernel } from '@jupyterlite/p5-kernel';\n/**\n * The default CDN fallback for p5.js\n */\nconst P5_CDN_URL = 'https://cdn.jsdelivr.net/npm/p5@1.3.1/lib/p5.js';\n/**\n * A plugin to register the p5.js kernel.\n */\nconst kernel = {\n    id: '@jupyterlite/p5-kernel-extension:kernel',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        const url = PageConfig.getOption('p5Url') || P5_CDN_URL;\n        const p5Url = URLExt.isLocal(url) ? URLExt.join(window.location.origin, url) : url;\n        kernelspecs.register({\n            spec: {\n                name: 'p5js',\n                display_name: 'p5.js',\n                language: 'javascript',\n                argv: [],\n                spec: {\n                    argv: [],\n                    env: {},\n                    display_name: 'p5.js',\n                    language: 'javascript',\n                    interrupt_mode: 'message',\n                    metadata: {}\n                },\n                resources: {\n                    'logo-32x32': 'TODO',\n                    'logo-64x64': '/kernelspecs/p5js.png'\n                }\n            },\n            create: async (options) => {\n                return new P5Kernel({\n                    ...options,\n                    p5Url\n                });\n            }\n        });\n    }\n};\nconst plugins = [kernel];\nexport default plugins;\n"],"sourceRoot":""}