{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/fileeditor/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/fileeditor/lib/tabspacestatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/fileeditor/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/fileeditor/lib/widget.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACiC;AACR;AACA;AACzB,iC;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AAC+D;AAC2B;AACjC;AAC/B;AAC1B;AACA;AACA;AACA;AACA,2CAA2C,mEAAc;AACzD;AACA;AACA;AACA;AACA,YAAY,0DAAmB,CAAC,2DAAQ,GAAG,wCAAwC,YAAY,IAAI,eAAe,+CAA+C;AACjK;AACA;AACA;AACA;AACO,6BAA6B,8DAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mEAAc;AAC9D,sBAAsB,kEAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0DAAmB,qBAAqB,qJAAqJ;AACjN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAAS;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,8DAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AACzC,0C;;;;;;;;;;;;;;;;;AChGA;AACA;AAC0C;AAC1C;AACA;AACA;AACA;AACO,2BAA2B,oDAAK;AACvC;AACA,kC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACuE;AACI;AAChB;AACP;AACI;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,oCAAoC,qEAAiB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,8DAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,EAAE,oFAAgC,IAAI,iCAAiC;AAClJ;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,yBAAyB,mDAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0DAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,gCAAgC,qEAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,6BAA6B,qEAAc;AAC3C,2BAA2B,mEAAc,EAAE,mBAAmB;AAC9D;AACA;AACA;AACA,kC","file":"vendors-node_modules_jupyterlab_fileeditor_lib_index_js.936f8149aca0767bc447.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module fileeditor\n */\nexport * from './tabspacestatus';\nexport * from './tokens';\nexport * from './widget';\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { clickedItem, interactiveItem, showPopup, TextItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport React from 'react';\n/**\n * A pure functional component for rendering the TabSpace status.\n */\nfunction TabSpaceComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const description = props.isSpaces\n        ? trans.__('Spaces')\n        : trans.__('Tab Size');\n    return (React.createElement(TextItem, { onClick: props.handleClick, source: `${description}: ${props.tabSpace}`, title: trans.__('Change Tab indentationâ€¦') }));\n}\n/**\n * A VDomRenderer for a tabs vs. spaces status item.\n */\nexport class TabSpaceStatus extends VDomRenderer {\n    /**\n     * Create a new tab/space status item.\n     */\n    constructor(options) {\n        super(new TabSpaceStatus.Model());\n        this._popup = null;\n        this._menu = options.menu;\n        this.translator = options.translator || nullTranslator;\n        this.addClass(interactiveItem);\n    }\n    /**\n     * Render the TabSpace status item.\n     */\n    render() {\n        if (!this.model || !this.model.config) {\n            return null;\n        }\n        else {\n            return (React.createElement(TabSpaceComponent, { isSpaces: this.model.config.insertSpaces, tabSpace: this.model.config.tabSize, handleClick: () => this._handleClick(), translator: this.translator }));\n        }\n    }\n    /**\n     * Handle a click on the status item.\n     */\n    _handleClick() {\n        const menu = this._menu;\n        if (this._popup) {\n            this._popup.dispose();\n        }\n        menu.aboutToClose.connect(this._menuClosed, this);\n        this._popup = showPopup({\n            body: menu,\n            anchor: this,\n            align: 'right'\n        });\n    }\n    _menuClosed() {\n        this.removeClass(clickedItem);\n    }\n}\n/**\n * A namespace for TabSpace statics.\n */\n(function (TabSpaceStatus) {\n    /**\n     * A VDomModel for the TabSpace status item.\n     */\n    class Model extends VDomModel {\n        constructor() {\n            super(...arguments);\n            this._config = null;\n        }\n        /**\n         * The editor config from the settings system.\n         */\n        get config() {\n            return this._config;\n        }\n        set config(val) {\n            const oldConfig = this._config;\n            this._config = val;\n            this._triggerChange(oldConfig, this._config);\n        }\n        _triggerChange(oldValue, newValue) {\n            const oldSpaces = oldValue && oldValue.insertSpaces;\n            const oldSize = oldValue && oldValue.tabSize;\n            const newSpaces = newValue && newValue.insertSpaces;\n            const newSize = newValue && newValue.tabSize;\n            if (oldSpaces !== newSpaces || oldSize !== newSize) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    TabSpaceStatus.Model = Model;\n})(TabSpaceStatus || (TabSpaceStatus = {}));\n//# sourceMappingURL=tabspacestatus.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The editor tracker token.\n */\nexport const IEditorTracker = new Token('@jupyterlab/fileeditor:IEditorTracker');\n/* tslint:enable */\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CodeEditor, CodeEditorWrapper } from '@jupyterlab/codeeditor';\nimport { ABCWidgetFactory, DocumentWidget } from '@jupyterlab/docregistry';\nimport { textEditorIcon } from '@jupyterlab/ui-components';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { StackedLayout, Widget } from '@lumino/widgets';\n/**\n * The data attribute added to a widget that can run code.\n */\nconst CODE_RUNNER = 'jpCodeRunner';\n/**\n * The data attribute added to a widget that can undo.\n */\nconst UNDOER = 'jpUndoer';\n/**\n * A code editor wrapper for the file editor.\n */\nexport class FileEditorCodeWrapper extends CodeEditorWrapper {\n    /**\n     * Construct a new editor widget.\n     */\n    constructor(options) {\n        super({\n            factory: options.factory,\n            model: options.context.model\n        });\n        this._ready = new PromiseDelegate();\n        const context = (this._context = options.context);\n        const editor = this.editor;\n        this.addClass('jp-FileEditorCodeWrapper');\n        this.node.dataset[CODE_RUNNER] = 'true';\n        this.node.dataset[UNDOER] = 'true';\n        editor.model.value.text = context.model.toString();\n        void context.ready.then(() => {\n            this._onContextReady();\n        });\n        if (context.model.modelDB.isCollaborative) {\n            const modelDB = context.model.modelDB;\n            void modelDB.connected.then(() => {\n                const collaborators = modelDB.collaborators;\n                if (!collaborators) {\n                    return;\n                }\n                // Setup the selection style for collaborators\n                const localCollaborator = collaborators.localCollaborator;\n                this.editor.uuid = localCollaborator.sessionId;\n                this.editor.selectionStyle = Object.assign(Object.assign({}, CodeEditor.defaultSelectionStyle), { color: localCollaborator.color });\n                collaborators.changed.connect(this._onCollaboratorsChanged, this);\n                // Trigger an initial onCollaboratorsChanged event.\n                this._onCollaboratorsChanged();\n            });\n        }\n    }\n    /**\n     * Get the context for the editor widget.\n     */\n    get context() {\n        return this._context;\n    }\n    /**\n     * A promise that resolves when the file editor is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Handle actions that should be taken when the context is ready.\n     */\n    _onContextReady() {\n        if (this.isDisposed) {\n            return;\n        }\n        const contextModel = this._context.model;\n        const editor = this.editor;\n        const editorModel = editor.model;\n        // Set the editor model value.\n        editorModel.value.text = contextModel.toString();\n        // Prevent the initial loading from disk from being in the editor history.\n        editor.clearHistory();\n        // Wire signal connections.\n        contextModel.contentChanged.connect(this._onContentChanged, this);\n        // Resolve the ready promise.\n        this._ready.resolve(undefined);\n    }\n    /**\n     * Handle a change in context model content.\n     */\n    _onContentChanged() {\n        const editorModel = this.editor.model;\n        const oldValue = editorModel.value.text;\n        const newValue = this._context.model.toString();\n        if (oldValue !== newValue) {\n            editorModel.value.text = newValue;\n        }\n    }\n    /**\n     * Handle a change to the collaborators on the model\n     * by updating UI elements associated with them.\n     */\n    _onCollaboratorsChanged() {\n        // If there are selections corresponding to non-collaborators,\n        // they are stale and should be removed.\n        const collaborators = this._context.model.modelDB.collaborators;\n        if (!collaborators) {\n            return;\n        }\n        for (const key of this.editor.model.selections.keys()) {\n            if (!collaborators.has(key)) {\n                this.editor.model.selections.delete(key);\n            }\n        }\n    }\n}\n/**\n * A widget for editors.\n */\nexport class FileEditor extends Widget {\n    /**\n     * Construct a new editor widget.\n     */\n    constructor(options) {\n        super();\n        this.addClass('jp-FileEditor');\n        const context = (this._context = options.context);\n        this._mimeTypeService = options.mimeTypeService;\n        const editorWidget = (this.editorWidget = new FileEditorCodeWrapper(options));\n        this.editor = editorWidget.editor;\n        this.model = editorWidget.model;\n        // Listen for changes to the path.\n        context.pathChanged.connect(this._onPathChanged, this);\n        this._onPathChanged();\n        const layout = (this.layout = new StackedLayout());\n        layout.addWidget(editorWidget);\n    }\n    /**\n     * Get the context for the editor widget.\n     */\n    get context() {\n        return this.editorWidget.context;\n    }\n    /**\n     * A promise that resolves when the file editor is ready.\n     */\n    get ready() {\n        return this.editorWidget.ready;\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the widget's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        if (!this.model) {\n            return;\n        }\n        switch (event.type) {\n            case 'mousedown':\n                this._ensureFocus();\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('mousedown', this);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('mousedown', this);\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this._ensureFocus();\n    }\n    /**\n     * Ensure that the widget has focus.\n     */\n    _ensureFocus() {\n        if (!this.editor.hasFocus()) {\n            this.editor.focus();\n        }\n    }\n    /**\n     * Handle a change to the path.\n     */\n    _onPathChanged() {\n        const editor = this.editor;\n        const localPath = this._context.localPath;\n        editor.model.mimeType = this._mimeTypeService.getMimeTypeByFilePath(localPath);\n    }\n}\n/**\n * A widget factory for editors.\n */\nexport class FileEditorFactory extends ABCWidgetFactory {\n    /**\n     * Construct a new editor widget factory.\n     */\n    constructor(options) {\n        super(options.factoryOptions);\n        this._services = options.editorServices;\n    }\n    /**\n     * Create a new widget given a context.\n     */\n    createNewWidget(context) {\n        const func = this._services.factoryService.newDocumentEditor;\n        const factory = options => {\n            return func(options);\n        };\n        const content = new FileEditor({\n            factory,\n            context,\n            mimeTypeService: this._services.mimeTypeService\n        });\n        content.title.icon = textEditorIcon;\n        const widget = new DocumentWidget({ content, context });\n        return widget;\n    }\n}\n//# sourceMappingURL=widget.js.map"],"sourceRoot":""}