{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/binary.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/buffer.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/decoding.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/number.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/encoding.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/observable.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/set.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/time.js"],"names":["BIT1","BIT2","BIT3","BIT4","BIT6","BIT7","BIT8","BITS5","BITS6","BITS7","BITS8","BITS31","createUint8ArrayFromLen","len","Uint8Array","createUint8ArrayViewFromArrayBuffer","buffer","byteOffset","length","createUint8ArrayFromArrayBuffer","toBase64","bytes","s","i","byteLength","btoa","Buffer","from","toString","fromBase64","a","atob","charCodeAt","buf","copyUint8Array","uint8Array","newBuf","set","Decoder","constructor","this","arr","pos","createDecoder","hasContent","decoder","readUint8Array","view","readVarUint8Array","readVarUint","readTailAsUint8Array","readUint8","readUint32","uint","num","r","Error","readVarInt","sign","readVarString","remainingLen","encodedString","String","fromCodePoint","nextLen","subarray","apply","decodeURIComponent","escape","readFromDataView","dv","DataView","readAnyLookupTable","getFloat32","getFloat64","getBigInt64","obj","readAny","push","RleDecoder","reader","super","count","read","UintOptRleDecoder","isNegative","IntDiffOptRleDecoder","diff","hasCount","StringDecoder","str","spos","end","res","slice","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","isInteger","isFinite","math","isNaN","Encoder","cpos","cbuf","bufs","createEncoder","encoder","toUint8Array","uint8arr","curPos","d","write","bufferLen","writeUint8","writeUint32","writeVarUint","writeVarInt","writeVarString","unescape","encodeURIComponent","codePointAt","writeBinaryEncoder","append","writeUint8Array","leftCopyLen","rightCopyLen","writeVarUint8Array","writeOnDataView","verifyLen","dview","floatTestBed","ArrayBuffer","writeAny","data","setFloat32","writeFloat32","setFloat64","writeFloat64","setBigInt64","writeBigInt64","Array","keys","Object","key","RleEncoder","writer","w","v","flushUintOptRleEncoder","UintOptRleEncoder","flushIntDiffOptRleEncoder","encodedDiff","IntDiffOptRleEncoder","StringEncoder","sarr","lensE","string","join","Observable","_observers","on","name","f","add","once","_f","args","off","observers","get","undefined","delete","size","emit","values","forEach","destroy","create","Set","getUnixTime","Date","now"],"mappings":"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","file":"6101.2da435c32f97e02172d1.js","sourcesContent":["/* eslint-env browser */\n\n/**\n * Binary data constants.\n *\n * @module binary\n */\n\n/**\n * n-th bit activated.\n *\n * @type {number}\n */\nexport const BIT1 = 1\nexport const BIT2 = 2\nexport const BIT3 = 4\nexport const BIT4 = 8\nexport const BIT5 = 16\nexport const BIT6 = 32\nexport const BIT7 = 64\nexport const BIT8 = 128\nexport const BIT9 = 256\nexport const BIT10 = 512\nexport const BIT11 = 1024\nexport const BIT12 = 2048\nexport const BIT13 = 4096\nexport const BIT14 = 8192\nexport const BIT15 = 16384\nexport const BIT16 = 32768\nexport const BIT17 = 65536\nexport const BIT18 = 1 << 17\nexport const BIT19 = 1 << 18\nexport const BIT20 = 1 << 19\nexport const BIT21 = 1 << 20\nexport const BIT22 = 1 << 21\nexport const BIT23 = 1 << 22\nexport const BIT24 = 1 << 23\nexport const BIT25 = 1 << 24\nexport const BIT26 = 1 << 25\nexport const BIT27 = 1 << 26\nexport const BIT28 = 1 << 27\nexport const BIT29 = 1 << 28\nexport const BIT30 = 1 << 29\nexport const BIT31 = 1 << 30\nexport const BIT32 = 1 << 31\n\n/**\n * First n bits activated.\n *\n * @type {number}\n */\nexport const BITS0 = 0\nexport const BITS1 = 1\nexport const BITS2 = 3\nexport const BITS3 = 7\nexport const BITS4 = 15\nexport const BITS5 = 31\nexport const BITS6 = 63\nexport const BITS7 = 127\nexport const BITS8 = 255\nexport const BITS9 = 511\nexport const BITS10 = 1023\nexport const BITS11 = 2047\nexport const BITS12 = 4095\nexport const BITS13 = 8191\nexport const BITS14 = 16383\nexport const BITS15 = 32767\nexport const BITS16 = 65535\nexport const BITS17 = BIT18 - 1\nexport const BITS18 = BIT19 - 1\nexport const BITS19 = BIT20 - 1\nexport const BITS20 = BIT21 - 1\nexport const BITS21 = BIT22 - 1\nexport const BITS22 = BIT23 - 1\nexport const BITS23 = BIT24 - 1\nexport const BITS24 = BIT25 - 1\nexport const BITS25 = BIT26 - 1\nexport const BITS26 = BIT27 - 1\nexport const BITS27 = BIT28 - 1\nexport const BITS28 = BIT29 - 1\nexport const BITS29 = BIT30 - 1\nexport const BITS30 = BIT31 - 1\n/**\n * @type {number}\n */\nexport const BITS31 = 0x7FFFFFFF\n/**\n * @type {number}\n */\nexport const BITS32 = 0xFFFFFFFF\n","/**\n * Utility functions to work with buffers (Uint8Array).\n *\n * @module buffer\n */\n\nimport * as string from './string.js'\nimport * as env from './environment.js'\nimport * as encoding from './encoding.js'\nimport * as decoding from './decoding.js'\n\n/**\n * @param {number} len\n */\nexport const createUint8ArrayFromLen = len => new Uint8Array(len)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n * @param {number} byteOffset\n * @param {number} length\n */\nexport const createUint8ArrayViewFromArrayBuffer = (buffer, byteOffset, length) => new Uint8Array(buffer, byteOffset, length)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n */\nexport const createUint8ArrayFromArrayBuffer = buffer => new Uint8Array(buffer)\n\n/* istanbul ignore next */\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Browser = bytes => {\n  let s = ''\n  for (let i = 0; i < bytes.byteLength; i++) {\n    s += string.fromCharCode(bytes[i])\n  }\n  // eslint-disable-next-line no-undef\n  return btoa(s)\n}\n\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Node = bytes => Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength).toString('base64')\n\n/* istanbul ignore next */\n/**\n * @param {string} s\n * @return {Uint8Array}\n */\nconst fromBase64Browser = s => {\n  // eslint-disable-next-line no-undef\n  const a = atob(s)\n  const bytes = createUint8ArrayFromLen(a.length)\n  for (let i = 0; i < a.length; i++) {\n    bytes[i] = a.charCodeAt(i)\n  }\n  return bytes\n}\n\n/**\n * @param {string} s\n */\nconst fromBase64Node = s => {\n  const buf = Buffer.from(s, 'base64')\n  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength)\n}\n\n/* istanbul ignore next */\nexport const toBase64 = env.isBrowser ? toBase64Browser : toBase64Node\n\n/* istanbul ignore next */\nexport const fromBase64 = env.isBrowser ? fromBase64Browser : fromBase64Node\n\n/**\n * Copy the content of an Uint8Array view to a new ArrayBuffer.\n *\n * @param {Uint8Array} uint8Array\n * @return {Uint8Array}\n */\nexport const copyUint8Array = uint8Array => {\n  const newBuf = createUint8ArrayFromLen(uint8Array.byteLength)\n  newBuf.set(uint8Array)\n  return newBuf\n}\n\n/**\n * Encode anything as a UInt8Array. It's a pun on typescripts's `any` type.\n * See encoding.writeAny for more information.\n *\n * @param {any} data\n * @return {Uint8Array}\n */\nexport const encodeAny = data => {\n  const encoder = encoding.createEncoder()\n  encoding.writeAny(encoder, data)\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Decode an any-encoded value.\n *\n * @param {Uint8Array} buf\n * @return {any}\n */\nexport const decodeAny = buf => decoding.readAny(decoding.createDecoder(buf))\n","/**\n * Efficient schema-less binary decoding with support for variable length encoding.\n *\n * Use [lib0/decoding] with [lib0/encoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = new encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = new decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module decoding\n */\n\nimport * as buffer from './buffer.js'\nimport * as binary from './binary.js'\nimport * as math from './math.js'\n\n/**\n * A Decoder handles the decoding of an Uint8Array.\n */\nexport class Decoder {\n  /**\n   * @param {Uint8Array} uint8Array Binary data to decode\n   */\n  constructor (uint8Array) {\n    /**\n     * Decoding target.\n     *\n     * @type {Uint8Array}\n     */\n    this.arr = uint8Array\n    /**\n     * Current decoding position.\n     *\n     * @type {number}\n     */\n    this.pos = 0\n  }\n}\n\n/**\n * @function\n * @param {Uint8Array} uint8Array\n * @return {Decoder}\n */\nexport const createDecoder = uint8Array => new Decoder(uint8Array)\n\n/**\n * @function\n * @param {Decoder} decoder\n * @return {boolean}\n */\nexport const hasContent = decoder => decoder.pos !== decoder.arr.length\n\n/**\n * Clone a decoder instance.\n * Optionally set a new position parameter.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} [newPos] Defaults to current position\n * @return {Decoder} A clone of `decoder`\n */\nexport const clone = (decoder, newPos = decoder.pos) => {\n  const _decoder = createDecoder(decoder.arr)\n  _decoder.pos = newPos\n  return _decoder\n}\n\n/**\n * Create an Uint8Array view of the next `len` bytes and advance the position by `len`.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} len The length of bytes to read\n * @return {Uint8Array}\n */\nexport const readUint8Array = (decoder, len) => {\n  const view = buffer.createUint8ArrayViewFromArrayBuffer(decoder.arr.buffer, decoder.pos + decoder.arr.byteOffset, len)\n  decoder.pos += len\n  return view\n}\n\n/**\n * Read variable length Uint8Array.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\nexport const readVarUint8Array = decoder => readUint8Array(decoder, readVarUint(decoder))\n\n/**\n * Read the rest of the content as an ArrayBuffer\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\nexport const readTailAsUint8Array = decoder => readUint8Array(decoder, decoder.arr.length - decoder.pos)\n\n/**\n * Skip one byte, jump to the next position.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} The next position\n */\nexport const skip8 = decoder => decoder.pos++\n\n/**\n * Read one byte as unsigned integer.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} Unsigned 8-bit integer\n */\nexport const readUint8 = decoder => decoder.arr[decoder.pos++]\n\n/**\n * Read 2 bytes as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint16 = decoder => {\n  const uint =\n    decoder.arr[decoder.pos] +\n    (decoder.arr[decoder.pos + 1] << 8)\n  decoder.pos += 2\n  return uint\n}\n\n/**\n * Read 4 bytes as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint32 = decoder => {\n  const uint =\n    (decoder.arr[decoder.pos] +\n    (decoder.arr[decoder.pos + 1] << 8) +\n    (decoder.arr[decoder.pos + 2] << 16) +\n    (decoder.arr[decoder.pos + 3] << 24)) >>> 0\n  decoder.pos += 4\n  return uint\n}\n\n/**\n * Read 4 bytes as unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint32BigEndian = decoder => {\n  const uint =\n    (decoder.arr[decoder.pos + 3] +\n    (decoder.arr[decoder.pos + 2] << 8) +\n    (decoder.arr[decoder.pos + 1] << 16) +\n    (decoder.arr[decoder.pos] << 24)) >>> 0\n  decoder.pos += 4\n  return uint\n}\n\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint8 = decoder => decoder.arr[decoder.pos]\n\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint16 = decoder =>\n  decoder.arr[decoder.pos] +\n  (decoder.arr[decoder.pos + 1] << 8)\n\n/**\n * Look ahead without incrementing the position\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint32 = decoder => (\n  decoder.arr[decoder.pos] +\n  (decoder.arr[decoder.pos + 1] << 8) +\n  (decoder.arr[decoder.pos + 2] << 16) +\n  (decoder.arr[decoder.pos + 3] << 24)\n) >>> 0\n\n/**\n * Read unsigned integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\nexport const readVarUint = decoder => {\n  let num = 0\n  let len = 0\n  while (true) {\n    const r = decoder.arr[decoder.pos++]\n    num = num | ((r & binary.BITS7) << len)\n    len += 7\n    if (r < binary.BIT8) {\n      return num >>> 0 // return unsigned number!\n    }\n    /* istanbul ignore if */\n    if (len > 35) {\n      throw new Error('Integer out of range!')\n    }\n  }\n}\n\n/**\n * Read signed integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n * @todo This should probably create the inverse ~num if number is negative - but this would be a breaking change.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\nexport const readVarInt = decoder => {\n  let r = decoder.arr[decoder.pos++]\n  let num = r & binary.BITS6\n  let len = 6\n  const sign = (r & binary.BIT7) > 0 ? -1 : 1\n  if ((r & binary.BIT8) === 0) {\n    // don't continue reading\n    return sign * num\n  }\n  while (true) {\n    r = decoder.arr[decoder.pos++]\n    num = num | ((r & binary.BITS7) << len)\n    len += 7\n    if (r < binary.BIT8) {\n      return sign * (num >>> 0)\n    }\n    /* istanbul ignore if */\n    if (len > 41) {\n      throw new Error('Integer out of range!')\n    }\n  }\n}\n\n/**\n * Look ahead and read varUint without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {number}\n */\nexport const peekVarUint = decoder => {\n  const pos = decoder.pos\n  const s = readVarUint(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * Look ahead and read varUint without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {number}\n */\nexport const peekVarInt = decoder => {\n  const pos = decoder.pos\n  const s = readVarInt(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * Read string of variable length\n * * varUint is used to store the length of the string\n *\n * Transforming utf8 to a string is pretty expensive. The code performs 10x better\n * when String.fromCodePoint is fed with all characters as arguments.\n * But most environments have a maximum number of arguments per functions.\n * For effiency reasons we apply a maximum of 10000 characters at once.\n *\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String.\n */\nexport const readVarString = decoder => {\n  let remainingLen = readVarUint(decoder)\n  if (remainingLen === 0) {\n    return ''\n  } else {\n    let encodedString = String.fromCodePoint(readUint8(decoder)) // remember to decrease remainingLen\n    if (--remainingLen < 100) { // do not create a Uint8Array for small strings\n      while (remainingLen--) {\n        encodedString += String.fromCodePoint(readUint8(decoder))\n      }\n    } else {\n      while (remainingLen > 0) {\n        const nextLen = remainingLen < 10000 ? remainingLen : 10000\n        // this is dangerous, we create a fresh array view from the existing buffer\n        const bytes = decoder.arr.subarray(decoder.pos, decoder.pos + nextLen)\n        decoder.pos += nextLen\n        // Starting with ES5.1 we can supply a generic array-like object as arguments\n        encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes))\n        remainingLen -= nextLen\n      }\n    }\n    return decodeURIComponent(escape(encodedString))\n  }\n}\n\n/**\n * Look ahead and read varString without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {string}\n */\nexport const peekVarString = decoder => {\n  const pos = decoder.pos\n  const s = readVarString(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * @param {Decoder} decoder\n * @param {number} len\n * @return {DataView}\n */\nexport const readFromDataView = (decoder, len) => {\n  const dv = new DataView(decoder.arr.buffer, decoder.arr.byteOffset + decoder.pos, len)\n  decoder.pos += len\n  return dv\n}\n\n/**\n * @param {Decoder} decoder\n */\nexport const readFloat32 = decoder => readFromDataView(decoder, 4).getFloat32(0, false)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readFloat64 = decoder => readFromDataView(decoder, 8).getFloat64(0, false)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readBigInt64 = decoder => /** @type {any} */ (readFromDataView(decoder, 8)).getBigInt64(0, false)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readBigUint64 = decoder => /** @type {any} */ (readFromDataView(decoder, 8)).getBigUint64(0, false)\n\n/**\n * @type {Array<function(Decoder):any>}\n */\nconst readAnyLookupTable = [\n  decoder => undefined, // CASE 127: undefined\n  decoder => null, // CASE 126: null\n  readVarInt, // CASE 125: integer\n  readFloat32, // CASE 124: float32\n  readFloat64, // CASE 123: float64\n  readBigInt64, // CASE 122: bigint\n  decoder => false, // CASE 121: boolean (false)\n  decoder => true, // CASE 120: boolean (true)\n  readVarString, // CASE 119: string\n  decoder => { // CASE 118: object<string,any>\n    const len = readVarUint(decoder)\n    /**\n     * @type {Object<string,any>}\n     */\n    const obj = {}\n    for (let i = 0; i < len; i++) {\n      const key = readVarString(decoder)\n      obj[key] = readAny(decoder)\n    }\n    return obj\n  },\n  decoder => { // CASE 117: array<any>\n    const len = readVarUint(decoder)\n    const arr = []\n    for (let i = 0; i < len; i++) {\n      arr.push(readAny(decoder))\n    }\n    return arr\n  },\n  readVarUint8Array // CASE 116: Uint8Array\n]\n\n/**\n * @param {Decoder} decoder\n */\nexport const readAny = decoder => readAnyLookupTable[127 - readUint8(decoder)](decoder)\n\n/**\n * T must not be null.\n *\n * @template T\n */\nexport class RleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {function(Decoder):T} reader\n   */\n  constructor (uint8Array, reader) {\n    super(uint8Array)\n    /**\n     * The reader\n     */\n    this.reader = reader\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    this.s = null\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = this.reader(this)\n      if (hasContent(this)) {\n        this.count = readVarUint(this) + 1 // see encoder implementation for the reason why this is incremented\n      } else {\n        this.count = -1 // read the current value forever\n      }\n    }\n    this.count--\n    return /** @type {T} */ (this.s)\n  }\n}\n\nexport class IntDiffDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {number} start\n   */\n  constructor (uint8Array, start) {\n    super(uint8Array)\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    this.s += readVarInt(this)\n    return this.s\n  }\n}\n\nexport class RleIntDiffDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {number} start\n   */\n  constructor (uint8Array, start) {\n    super(uint8Array)\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n    this.count = 0\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    if (this.count === 0) {\n      this.s += readVarInt(this)\n      if (hasContent(this)) {\n        this.count = readVarUint(this) + 1 // see encoder implementation for the reason why this is incremented\n      } else {\n        this.count = -1 // read the current value forever\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s)\n  }\n}\n\nexport class UintOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = readVarInt(this)\n      // if the sign is negative, we read the count too, otherwise count is 1\n      const isNegative = math.isNegativeZero(this.s)\n      this.count = 1\n      if (isNegative) {\n        this.s = -this.s\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s)\n  }\n}\n\nexport class IncUintOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = readVarInt(this)\n      // if the sign is negative, we read the count too, otherwise count is 1\n      const isNegative = math.isNegativeZero(this.s)\n      this.count = 1\n      if (isNegative) {\n        this.s = -this.s\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s++)\n  }\n}\n\nexport class IntDiffOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n    this.diff = 0\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    if (this.count === 0) {\n      const diff = readVarInt(this)\n      // if the first bit is set, we read more data\n      const hasCount = diff & 1\n      this.diff = diff >> 1\n      this.count = 1\n      if (hasCount) {\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.s += this.diff\n    this.count--\n    return this.s\n  }\n}\n\nexport class StringDecoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    this.decoder = new UintOptRleDecoder(uint8Array)\n    this.str = readVarString(this.decoder)\n    /**\n     * @type {number}\n     */\n    this.spos = 0\n  }\n\n  /**\n   * @return {string}\n   */\n  read () {\n    const end = this.spos + this.decoder.read()\n    const res = this.str.slice(this.spos, end)\n    this.spos = end\n    return res\n  }\n}\n","/**\n * Utility helpers for working with numbers.\n *\n * @module number\n */\n\nimport * as math from './math.js'\nimport * as binary from './binary.js'\n\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER\nexport const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER\n\nexport const LOWEST_INT32 = 1 << 31\n/**\n * @type {number}\n */\nexport const HIGHEST_INT32 = binary.BITS31\n\n/**\n * @module number\n */\n\n/* istanbul ignore next */\nexport const isInteger = Number.isInteger || (num => typeof num === 'number' && isFinite(num) && math.floor(num) === num)\nexport const isNaN = Number.isNaN\n","/**\n * Efficient schema-less binary encoding with support for variable length encoding.\n *\n * Use [lib0/encoding] with [lib0/decoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = new encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = new decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module encoding\n */\n\nimport * as buffer from './buffer.js'\nimport * as math from './math.js'\nimport * as number from './number.js'\nimport * as binary from './binary.js'\n\n/**\n * A BinaryEncoder handles the encoding to an Uint8Array.\n */\nexport class Encoder {\n  constructor () {\n    this.cpos = 0\n    this.cbuf = new Uint8Array(100)\n    /**\n     * @type {Array<Uint8Array>}\n     */\n    this.bufs = []\n  }\n}\n\n/**\n * @function\n * @return {Encoder}\n */\nexport const createEncoder = () => new Encoder()\n\n/**\n * The current length of the encoded data.\n *\n * @function\n * @param {Encoder} encoder\n * @return {number}\n */\nexport const length = encoder => {\n  let len = encoder.cpos\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    len += encoder.bufs[i].length\n  }\n  return len\n}\n\n/**\n * Transform to Uint8Array.\n *\n * @function\n * @param {Encoder} encoder\n * @return {Uint8Array} The created ArrayBuffer.\n */\nexport const toUint8Array = encoder => {\n  const uint8arr = new Uint8Array(length(encoder))\n  let curPos = 0\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    const d = encoder.bufs[i]\n    uint8arr.set(d, curPos)\n    curPos += d.length\n  }\n  uint8arr.set(buffer.createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos), curPos)\n  return uint8arr\n}\n\n/**\n * Verify that it is possible to write `len` bytes wtihout checking. If\n * necessary, a new Buffer with the required length is attached.\n *\n * @param {Encoder} encoder\n * @param {number} len\n */\nconst verifyLen = (encoder, len) => {\n  const bufferLen = encoder.cbuf.length\n  if (bufferLen - encoder.cpos < len) {\n    encoder.bufs.push(buffer.createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos))\n    encoder.cbuf = new Uint8Array(math.max(bufferLen, len) * 2)\n    encoder.cpos = 0\n  }\n}\n\n/**\n * Write one byte to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The byte that is to be encoded.\n */\nexport const write = (encoder, num) => {\n  const bufferLen = encoder.cbuf.length\n  if (encoder.cpos === bufferLen) {\n    encoder.bufs.push(encoder.cbuf)\n    encoder.cbuf = new Uint8Array(bufferLen * 2)\n    encoder.cpos = 0\n  }\n  encoder.cbuf[encoder.cpos++] = num\n}\n\n/**\n * Write one byte at a specific position.\n * Position must already be written (i.e. encoder.length > pos)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos Position to which to write data\n * @param {number} num Unsigned 8-bit integer\n */\nexport const set = (encoder, pos, num) => {\n  let buffer = null\n  // iterate all buffers and adjust position\n  for (let i = 0; i < encoder.bufs.length && buffer === null; i++) {\n    const b = encoder.bufs[i]\n    if (pos < b.length) {\n      buffer = b // found buffer\n    } else {\n      pos -= b.length\n    }\n  }\n  if (buffer === null) {\n    // use current buffer\n    buffer = encoder.cbuf\n  }\n  buffer[pos] = num\n}\n\n/**\n * Write one byte as an unsigned integer.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint8 = write\n\n/**\n * Write one byte as an unsigned Integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint8 = set\n\n/**\n * Write two bytes as an unsigned integer.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint16 = (encoder, num) => {\n  write(encoder, num & binary.BITS8)\n  write(encoder, (num >>> 8) & binary.BITS8)\n}\n/**\n * Write two bytes as an unsigned integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint16 = (encoder, pos, num) => {\n  set(encoder, pos, num & binary.BITS8)\n  set(encoder, pos + 1, (num >>> 8) & binary.BITS8)\n}\n\n/**\n * Write two bytes as an unsigned integer\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint32 = (encoder, num) => {\n  for (let i = 0; i < 4; i++) {\n    write(encoder, num & binary.BITS8)\n    num >>>= 8\n  }\n}\n\n/**\n * Write two bytes as an unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint32BigEndian = (encoder, num) => {\n  for (let i = 3; i >= 0; i--) {\n    write(encoder, (num >>> (8 * i)) & binary.BITS8)\n  }\n}\n\n/**\n * Write two bytes as an unsigned integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint32 = (encoder, pos, num) => {\n  for (let i = 0; i < 4; i++) {\n    set(encoder, pos + i, num & binary.BITS8)\n    num >>>= 8\n  }\n}\n\n/**\n * Write a variable length unsigned integer.\n *\n * Encodes integers in the range from [0, 4294967295] / [0, 0xffffffff]. (max 32 bit unsigned integer)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeVarUint = (encoder, num) => {\n  while (num > binary.BITS7) {\n    write(encoder, binary.BIT8 | (binary.BITS7 & num))\n    num >>>= 7\n  }\n  write(encoder, binary.BITS7 & num)\n}\n\n/**\n * Write a variable length integer.\n *\n * Encodes integers in the range from [-2147483648, -2147483647].\n *\n * We don't use zig-zag encoding because we want to keep the option open\n * to use the same function for BigInt and 53bit integers (doubles).\n *\n * We use the 7th bit instead for signaling that this is a negative number.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeVarInt = (encoder, num) => {\n  const isNegative = math.isNegativeZero(num)\n  if (isNegative) {\n    num = -num\n  }\n  //             |- whether to continue reading         |- whether is negative     |- number\n  write(encoder, (num > binary.BITS6 ? binary.BIT8 : 0) | (isNegative ? binary.BIT7 : 0) | (binary.BITS6 & num))\n  num >>>= 6\n  // We don't need to consider the case of num === 0 so we can use a different\n  // pattern here than above.\n  while (num > 0) {\n    write(encoder, (num > binary.BITS7 ? binary.BIT8 : 0) | (binary.BITS7 & num))\n    num >>>= 7\n  }\n}\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nexport const writeVarString = (encoder, str) => {\n  const encodedString = unescape(encodeURIComponent(str))\n  const len = encodedString.length\n  writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    write(encoder, /** @type {number} */ (encodedString.codePointAt(i)))\n  }\n}\n\n/**\n * Write the content of another Encoder.\n *\n * @TODO: can be improved!\n *        - Note: Should consider that when appending a lot of small Encoders, we should rather clone than referencing the old structure.\n *                Encoders start with a rather big initial buffer.\n *\n * @function\n * @param {Encoder} encoder The enUint8Arr\n * @param {Encoder} append The BinaryEncoder to be written.\n */\nexport const writeBinaryEncoder = (encoder, append) => writeUint8Array(encoder, toUint8Array(append))\n\n/**\n * Append fixed-length Uint8Array to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nexport const writeUint8Array = (encoder, uint8Array) => {\n  const bufferLen = encoder.cbuf.length\n  const cpos = encoder.cpos\n  const leftCopyLen = math.min(bufferLen - cpos, uint8Array.length)\n  const rightCopyLen = uint8Array.length - leftCopyLen\n  encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos)\n  encoder.cpos += leftCopyLen\n  if (rightCopyLen > 0) {\n    // Still something to write, write right half..\n    // Append new buffer\n    encoder.bufs.push(encoder.cbuf)\n    // must have at least size of remaining buffer\n    encoder.cbuf = new Uint8Array(math.max(bufferLen * 2, rightCopyLen))\n    // copy array\n    encoder.cbuf.set(uint8Array.subarray(leftCopyLen))\n    encoder.cpos = rightCopyLen\n  }\n}\n\n/**\n * Append an Uint8Array to Encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nexport const writeVarUint8Array = (encoder, uint8Array) => {\n  writeVarUint(encoder, uint8Array.byteLength)\n  writeUint8Array(encoder, uint8Array)\n}\n\n/**\n * Create an DataView of the next `len` bytes. Use it to write data after\n * calling this function.\n *\n * ```js\n * // write float32 using DataView\n * const dv = writeOnDataView(encoder, 4)\n * dv.setFloat32(0, 1.1)\n * // read float32 using DataView\n * const dv = readFromDataView(encoder, 4)\n * dv.getFloat32(0) // => 1.100000023841858 (leaving it to the reader to find out why this is the correct result)\n * ```\n *\n * @param {Encoder} encoder\n * @param {number} len\n * @return {DataView}\n */\nexport const writeOnDataView = (encoder, len) => {\n  verifyLen(encoder, len)\n  const dview = new DataView(encoder.cbuf.buffer, encoder.cpos, len)\n  encoder.cpos += len\n  return dview\n}\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nexport const writeFloat32 = (encoder, num) => writeOnDataView(encoder, 4).setFloat32(0, num, false)\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nexport const writeFloat64 = (encoder, num) => writeOnDataView(encoder, 8).setFloat64(0, num, false)\n\n/**\n * @param {Encoder} encoder\n * @param {bigint} num\n */\nexport const writeBigInt64 = (encoder, num) => /** @type {any} */ (writeOnDataView(encoder, 8)).setBigInt64(0, num, false)\n\n/**\n * @param {Encoder} encoder\n * @param {bigint} num\n */\nexport const writeBigUint64 = (encoder, num) => /** @type {any} */ (writeOnDataView(encoder, 8)).setBigUint64(0, num, false)\n\nconst floatTestBed = new DataView(new ArrayBuffer(4))\n/**\n * Check if a number can be encoded as a 32 bit float.\n *\n * @param {number} num\n * @return {boolean}\n */\nconst isFloat32 = num => {\n  floatTestBed.setFloat32(0, num)\n  return floatTestBed.getFloat32(0) === num\n}\n\n/**\n * Encode data with efficient binary format.\n *\n * Differences to JSON:\n * • Transforms data to a binary format (not to a string)\n * • Encodes undefined, NaN, and ArrayBuffer (these can't be represented in JSON)\n * • Numbers are efficiently encoded either as a variable length integer, as a\n *   32 bit float, as a 64 bit float, or as a 64 bit bigint.\n *\n * Encoding table:\n *\n * | Data Type           | Prefix   | Encoding Method    | Comment |\n * | ------------------- | -------- | ------------------ | ------- |\n * | undefined           | 127      |                    | Functions, symbol, and everything that cannot be identified is encoded as undefined |\n * | null                | 126      |                    | |\n * | integer             | 125      | writeVarInt        | Only encodes 32 bit signed integers |\n * | float32             | 124      | writeFloat32       | |\n * | float64             | 123      | writeFloat64       | |\n * | bigint              | 122      | writeBigInt64      | |\n * | boolean (false)     | 121      |                    | True and false are different data types so we save the following byte |\n * | boolean (true)      | 120      |                    | - 0b01111000 so the last bit determines whether true or false |\n * | string              | 119      | writeVarString     | |\n * | object<string,any>  | 118      | custom             | Writes {length} then {length} key-value pairs |\n * | array<any>          | 117      | custom             | Writes {length} then {length} json values |\n * | Uint8Array          | 116      | writeVarUint8Array | We use Uint8Array for any kind of binary data |\n *\n * Reasons for the decreasing prefix:\n * We need the first bit for extendability (later we may want to encode the\n * prefix with writeVarUint). The remaining 7 bits are divided as follows:\n * [0-30]   the beginning of the data range is used for custom purposes\n *          (defined by the function that uses this library)\n * [31-127] the end of the data range is used for data encoding by\n *          lib0/encoding.js\n *\n * @param {Encoder} encoder\n * @param {undefined|null|number|bigint|boolean|string|Object<string,any>|Array<any>|Uint8Array} data\n */\nexport const writeAny = (encoder, data) => {\n  switch (typeof data) {\n    case 'string':\n      // TYPE 119: STRING\n      write(encoder, 119)\n      writeVarString(encoder, data)\n      break\n    case 'number':\n      if (number.isInteger(data) && data <= binary.BITS31) {\n        // TYPE 125: INTEGER\n        write(encoder, 125)\n        writeVarInt(encoder, data)\n      } else if (isFloat32(data)) {\n        // TYPE 124: FLOAT32\n        write(encoder, 124)\n        writeFloat32(encoder, data)\n      } else {\n        // TYPE 123: FLOAT64\n        write(encoder, 123)\n        writeFloat64(encoder, data)\n      }\n      break\n    case 'bigint':\n      // TYPE 122: BigInt\n      write(encoder, 122)\n      writeBigInt64(encoder, data)\n      break\n    case 'object':\n      if (data === null) {\n        // TYPE 126: null\n        write(encoder, 126)\n      } else if (data instanceof Array) {\n        // TYPE 117: Array\n        write(encoder, 117)\n        writeVarUint(encoder, data.length)\n        for (let i = 0; i < data.length; i++) {\n          writeAny(encoder, data[i])\n        }\n      } else if (data instanceof Uint8Array) {\n        // TYPE 116: ArrayBuffer\n        write(encoder, 116)\n        writeVarUint8Array(encoder, data)\n      } else {\n        // TYPE 118: Object\n        write(encoder, 118)\n        const keys = Object.keys(data)\n        writeVarUint(encoder, keys.length)\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i]\n          writeVarString(encoder, key)\n          writeAny(encoder, data[key])\n        }\n      }\n      break\n    case 'boolean':\n      // TYPE 120/121: boolean (true/false)\n      write(encoder, data ? 120 : 121)\n      break\n    default:\n      // TYPE 127: undefined\n      write(encoder, 127)\n  }\n}\n\n/**\n * Now come a few stateful encoder that have their own classes.\n */\n\n/**\n * Basic Run Length Encoder - a basic compression implementation.\n *\n * Encodes [1,1,1,7] to [1,3,7,1] (3 times 1, 1 time 7). This encoder might do more harm than good if there are a lot of values that are not repeated.\n *\n * It was originally used for image compression. Cool .. article http://csbruce.com/cbm/transactor/pdfs/trans_v7_i06.pdf\n *\n * @note T must not be null!\n *\n * @template T\n */\nexport class RleEncoder extends Encoder {\n  /**\n   * @param {function(Encoder, T):void} writer\n   */\n  constructor (writer) {\n    super()\n    /**\n     * The writer\n     */\n    this.w = writer\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    this.s = null\n    this.count = 0\n  }\n\n  /**\n   * @param {T} v\n   */\n  write (v) {\n    if (this.s === v) {\n      this.count++\n    } else {\n      if (this.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        writeVarUint(this, this.count - 1) // since count is always > 0, we can decrement by one. non-standard encoding ftw\n      }\n      this.count = 1\n      // write first value\n      this.w(this, v)\n      this.s = v\n    }\n  }\n}\n\n/**\n * Basic diff decoder using variable length encoding.\n *\n * Encodes the values [3, 1100, 1101, 1050, 0] to [3, 1097, 1, -51, -1050] using writeVarInt.\n */\nexport class IntDiffEncoder extends Encoder {\n  /**\n   * @param {number} start\n   */\n  constructor (start) {\n    super()\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    writeVarInt(this, v - this.s)\n    this.s = v\n  }\n}\n\n/**\n * A combination of IntDiffEncoder and RleEncoder.\n *\n * Basically first writes the IntDiffEncoder and then counts duplicate diffs using RleEncoding.\n *\n * Encodes the values [1,1,1,2,3,4,5,6] as [1,1,0,2,1,5] (RLE([1,0,0,1,1,1,1,1]) ⇒ RleIntDiff[1,1,0,2,1,5])\n */\nexport class RleIntDiffEncoder extends Encoder {\n  /**\n   * @param {number} start\n   */\n  constructor (start) {\n    super()\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s === v && this.count > 0) {\n      this.count++\n    } else {\n      if (this.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        writeVarUint(this, this.count - 1) // since count is always > 0, we can decrement by one. non-standard encoding ftw\n      }\n      this.count = 1\n      // write first value\n      writeVarInt(this, v - this.s)\n      this.s = v\n    }\n  }\n}\n\n/**\n * @param {UintOptRleEncoder} encoder\n */\nconst flushUintOptRleEncoder = encoder => {\n  /* istanbul ignore else */\n  if (encoder.count > 0) {\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set sign to positive\n    // case 2: write several values. set sign to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encoder.count === 1 ? encoder.s : -encoder.s)\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2) // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n}\n\n/**\n * Optimized Rle encoder that does not suffer from the mentioned problem of the basic Rle encoder.\n *\n * Internally uses VarInt encoder to write unsigned integers. If the input occurs multiple times, we write\n * write it as a negative number. The UintOptRleDecoder then understands that it needs to read a count.\n *\n * Encodes [1,2,3,3,3] as [1,2,-3,3] (once 1, once 2, three times 3)\n */\nexport class UintOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s === v) {\n      this.count++\n    } else {\n      flushUintOptRleEncoder(this)\n      this.count = 1\n      this.s = v\n    }\n  }\n\n  toUint8Array () {\n    flushUintOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * Increasing Uint Optimized RLE Encoder\n *\n * The RLE encoder counts the number of same occurences of the same value.\n * The IncUintOptRle encoder counts if the value increases.\n * I.e. 7, 8, 9, 10 will be encoded as [-7, 4]. 1, 3, 5 will be encoded\n * as [1, 3, 5].\n */\nexport class IncUintOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s + this.count === v) {\n      this.count++\n    } else {\n      flushUintOptRleEncoder(this)\n      this.count = 1\n      this.s = v\n    }\n  }\n\n  toUint8Array () {\n    flushUintOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * @param {IntDiffOptRleEncoder} encoder\n */\nconst flushIntDiffOptRleEncoder = encoder => {\n  if (encoder.count > 0) {\n    //          31 bit making up the diff | wether to write the counter\n    const encodedDiff = encoder.diff << 1 | (encoder.count === 1 ? 0 : 1)\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set first bit to positive\n    // case 2: write several values. set first bit to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encodedDiff)\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2) // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n}\n\n/**\n * A combination of the IntDiffEncoder and the UintOptRleEncoder.\n *\n * The count approach is similar to the UintDiffOptRleEncoder, but instead of using the negative bitflag, it encodes\n * in the LSB whether a count is to be read. Therefore this Encoder only supports 31 bit integers!\n *\n * Encodes [1, 2, 3, 2] as [3, 1, 6, -1] (more specifically [(1 << 1) | 1, (3 << 0) | 0, -1])\n *\n * Internally uses variable length encoding. Contrary to normal UintVar encoding, the first byte contains:\n * * 1 bit that denotes whether the next value is a count (LSB)\n * * 1 bit that denotes whether this value is negative (MSB - 1)\n * * 1 bit that denotes whether to continue reading the variable length integer (MSB)\n *\n * Therefore, only five bits remain to encode diff ranges.\n *\n * Use this Encoder only when appropriate. In most cases, this is probably a bad idea.\n */\nexport class IntDiffOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n    this.diff = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.diff === v - this.s) {\n      this.s = v\n      this.count++\n    } else {\n      flushIntDiffOptRleEncoder(this)\n      this.count = 1\n      this.diff = v - this.s\n      this.s = v\n    }\n  }\n\n  toUint8Array () {\n    flushIntDiffOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * Optimized String Encoder.\n *\n * Encoding many small strings in a simple Encoder is not very efficient. The function call to decode a string takes some time and creates references that must be eventually deleted.\n * In practice, when decoding several million small strings, the GC will kick in more and more often to collect orphaned string objects (or maybe there is another reason?).\n *\n * This string encoder solves the above problem. All strings are concatenated and written as a single string using a single encoding call.\n *\n * The lengths are encoded using a UintOptRleEncoder.\n */\nexport class StringEncoder {\n  constructor () {\n    /**\n     * @type {Array<string>}\n     */\n    this.sarr = []\n    this.s = ''\n    this.lensE = new UintOptRleEncoder()\n  }\n\n  /**\n   * @param {string} string\n   */\n  write (string) {\n    this.s += string\n    if (this.s.length > 19) {\n      this.sarr.push(this.s)\n      this.s = ''\n    }\n    this.lensE.write(string.length)\n  }\n\n  toUint8Array () {\n    const encoder = new Encoder()\n    this.sarr.push(this.s)\n    this.s = ''\n    writeVarString(encoder, this.sarr.join(''))\n    writeUint8Array(encoder, this.lensE.toUint8Array())\n    return toUint8Array(encoder)\n  }\n}\n","/**\n * Observable class prototype.\n *\n * @module observable\n */\n\nimport * as map from './map.js'\nimport * as set from './set.js'\nimport * as array from './array.js'\n\n/**\n * Handles named events.\n *\n * @template N\n */\nexport class Observable {\n  constructor () {\n    /**\n     * Some desc.\n     * @type {Map<N, any>}\n     */\n    this._observers = map.create()\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  on (name, f) {\n    map.setIfUndefined(this._observers, name, set.create).add(f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  once (name, f) {\n    /**\n     * @param  {...any} args\n     */\n    const _f = (...args) => {\n      this.off(name, _f)\n      f(...args)\n    }\n    this.on(name, _f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  off (name, f) {\n    const observers = this._observers.get(name)\n    if (observers !== undefined) {\n      observers.delete(f)\n      if (observers.size === 0) {\n        this._observers.delete(name)\n      }\n    }\n  }\n\n  /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @param {N} name The event name.\n   * @param {Array<any>} args The arguments that are applied to the event listener.\n   */\n  emit (name, args) {\n    // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n    return array.from((this._observers.get(name) || map.create()).values()).forEach(f => f(...args))\n  }\n\n  destroy () {\n    this._observers = map.create()\n  }\n}\n","/**\n * Utility module to work with sets.\n *\n * @module set\n */\n\nexport const create = () => new Set()\n\n/**\n * @template T\n * @param {Set<T>} set\n * @return {Array<T>}\n */\nexport const toArray = set => Array.from(set)\n","/**\n * Utility module to work with time.\n *\n * @module time\n */\n\nimport * as metric from './metric.js'\nimport * as math from './math.js'\n\n/**\n * Return current time.\n *\n * @return {Date}\n */\nexport const getDate = () => new Date()\n\n/**\n * Return current unix time.\n *\n * @return {number}\n */\nexport const getUnixTime = Date.now\n\n/**\n * Transform time (in ms) to a human readable format. E.g. 1100 => 1.1s. 60s => 1min. .001 => 10μs.\n *\n * @param {number} d duration in milliseconds\n * @return {string} humanized approximation of time\n */\nexport const humanizeDuration = d => {\n  if (d < 60000) {\n    const p = metric.prefix(d, -1)\n    return math.round(p.n * 100) / 100 + p.prefix + 's'\n  }\n  d = math.floor(d / 1000)\n  const seconds = d % 60\n  const minutes = math.floor(d / 60) % 60\n  const hours = math.floor(d / 3600) % 24\n  const days = math.floor(d / 86400)\n  if (days > 0) {\n    return days + 'd' + ((hours > 0 || minutes > 30) ? ' ' + (minutes > 30 ? hours + 1 : hours) + 'h' : '')\n  }\n  if (hours > 0) {\n    /* istanbul ignore next */\n    return hours + 'h' + ((minutes > 0 || seconds > 30) ? ' ' + (seconds > 30 ? minutes + 1 : minutes) + 'min' : '')\n  }\n  return minutes + 'min' + (seconds > 0 ? ' ' + seconds + 's' : '')\n}\n"],"sourceRoot":""}