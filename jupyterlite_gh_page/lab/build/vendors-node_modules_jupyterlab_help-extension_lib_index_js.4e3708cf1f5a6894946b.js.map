{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/help-extension/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/help-extension/lib/licenses.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAC0D;AACuF;AACtF;AACV;AACK;AACsD;AAC7E;AACO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW;AAC1B,eAAe,iEAAe;AAC9B;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gDAAmB,UAAU,qCAAqC;AACvG,oBAAoB,gDAAmB,UAAU,gCAAgC;AACjF,+BAA+B,gDAAmB,UAAU,+BAA+B;AAC3F,oBAAoB,gDAAmB,CAAC,wEAAiB,GAAG,qDAAqD;AACjH,oBAAoB,gDAAmB,SAAS,oCAAoC;AACpF,wBAAwB,gDAAmB,CAAC,mFAA4B,GAAG,iCAAiC;AAC5G;AACA;AACA;AACA;AACA,uCAAuC,gDAAmB,UAAU,sCAAsC;AAC1G,oBAAoB,gDAAmB,OAAO,mGAAmG;AACjJ,oBAAoB,gDAAmB,OAAO,8FAA8F;AAC5I,mCAAmC,gDAAmB,UAAU,kCAAkC;AAClG,8BAA8B,gDAAmB,SAAS,6BAA6B;AACvF;AACA;AACA,uBAAuB,gEAAU;AACjC;AACA;AACA;AACA,wBAAwB,qEAAmB;AAC3C;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,6BAA6B,sCAAsC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW;AAC1B,eAAe,iEAAe;AAC9B;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA,4BAA4B,wEAAqB;AACjD;AACA,SAAS;AACT;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW;AAC1B,eAAe,iEAAe;AAC9B;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6BAA6B,6CAA6C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS,EAAE,gEAAW;AACrC,eAAe,iEAAe,EAAE,oEAAe;AAC/C;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAqB;AAC7C,eAAe,kCAAkC;AACjD,4BAA4B,+DAAa,EAAE,YAAY;AACvD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wDAAM;AACtC;AACA,aAAa;AACb;AACA;AACA;AACA,4BAA4B,UAAU,GAAG,UAAU;AACnD,+BAA+B,gEAAc,EAAE,UAAU;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mDAAmD,KAAK;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,gDAAmB,SAAS,qBAAqB;AAC5F,uCAAuC,gDAAmB,UAAU,+BAA+B;AACnG;AACA,4BAA4B,gDAAmB,SAAS,oCAAoC;AAC5F,uCAAuC,gDAAmB;AAC1D,qCAAqC,gDAAmB,SAAS,6BAA6B;AAC9F,+BAA+B,gEAAU;AACzC;AACA;AACA;AACA,gCAAgC,qEAAmB;AACnD;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB,oCAAoC,yBAAyB;AAC7D;AACA;AACA;AACA,mDAAmD,KAAK,GAAG,UAAU;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,sCAAsC,qBAAqB;AAC3D,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,+DAAY;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iCAAiC,2CAA2C;AAC5E,aAAa;AACb;AACA,uBAAuB,eAAe;AACtC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW;AAC1B,eAAe,2DAAS,EAAE,iEAAe,EAAE,oEAAe;AAC1D;AACA;AACA,aAAa,uEAAoB;AACjC;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8DAAW,CAAC,wEAAqB,IAAI,uEAAoB;AACrF;AACA,oCAAoC,+DAAa;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oBAAoB,8DAAuB;AAC3C,gBAAgB,8DAAuB,CAAC,8DAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA,sCAAsC,qDAAc,+BAA+B,UAAU;AAC7F,0EAA0E;AAC1E,gCAAgC,+CAAQ,EAAE,uBAAuB;AACjE,4BAA4B,kBAAkB,GAAG,UAAU;AAC3D;AACA,iCAAiC,oEAAa;AAC9C,6BAA6B,gEAAc;AAC3C;AACA;AACA,aAAa;AACb,yDAAyD,sEAAoB;AAC7E;AACA,uBAAuB,aAAa;AACpC;AACA,aAAa;AACb,2CAA2C,0EAAwB;AACnE,6CAA6C,8DAAuB;AACpE,mCAAmC,sEAAoB;AACvD;AACA,2BAA2B,qBAAqB;AAChD;AACA,iBAAiB;AACjB,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,kEAAW;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kDAAkD,YAAY;AAC9D,0BAA0B,eAAe,GAAG,aAAa;AACzD,aAAa;AACb;AACA,kDAAkD,YAAY;AAC9D,0BAA0B,eAAe,GAAG,aAAa;AACzD,aAAa;AACb;AACA,kDAAkD,YAAY;AAC9D;AACA,aAAa;AACb;AACA;AACA,kDAAkD,YAAY;AAC9D;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA,gCAAgC,+BAA+B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wDAAwD;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;AACvB,iC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACteA;AACA;AAC+D;AACP;AAC4B;AAChC;AACT;AACJ;AAC6B;AACrC;AAC/B;AACA;AACA;AACO,uBAAuB,uDAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAK;AACnC;AACA;AACA,QAAQ,kEAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAM;AAClC;AACA;AACA,SAAS;AACT;AACA,QAAQ,kEAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA,4BAA4B,mDAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAY;AAC9B,SAAS;AACT;AACA;AACA;AACA,kBAAkB,sEAAe;AACjC,SAAS;AACT;AACA;AACA;AACA,kBAAkB,+DAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAS;AACjC;AACA;AACA,+CAA+C,qDAAM;AACrD,2CAA2C,qDAAM;AACjD;AACA,sCAAsC,8DAAe;AACrD;AACA;AACA;AACA;AACA,0CAA0C,+EAA6B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8EAA4B,sBAAsB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB,UAAU,eAAe;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kHAAkH;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8BAA8B,GAAG,2BAA2B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAmB,WAAW,wGAAwG;AAC9J;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC,yEAAyE,8BAA8B,gBAAgB;AACvH;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,oBAAoB,gDAAmB;AACvC,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB;AACvC,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB;AAC3C;AACA,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB;AAC3C;AACA,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB;AAC3C;AACA,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4DAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oDAAI,EAAE,wCAAwC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA,mBAAmB,uDAAO,GAAG,KAAK,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8DAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAmB,QAAQ,gFAAgF;AACnI,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB,WAAW,kGAAkG;AACxJ,oBAAoB,gDAAmB;AACvC,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB;AAC3C,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oCAAoC;AACvD;AACA;AACA;AACA;AACA,wBAAwB,gDAAmB;AAC3C,oBAAoB,gDAAmB;AACvC;AACA,oBAAoB,gDAAmB;AACvC,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB;AAC3C,4BAA4B,gDAAmB;AAC/C,4BAA4B,gDAAmB;AAC/C,4BAA4B,gDAAmB;AAC/C,4BAA4B,gDAAmB;AAC/C,oBAAoB,gDAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA,uBAAuB,8CAA8C;AACrE,0BAA0B,KAAK,IAAI,YAAY;AAC/C,2BAA2B,oBAAoB,IAAI,6CAA6C;AAChG;AACA;AACA;AACA,gBAAgB,gDAAmB,QAAQ,YAAY;AACvD,gBAAgB,gDAAmB,gBAAgB,eAAe;AAClE,oBAAoB,gDAAmB;AACvC,gBAAgB,gDAAmB,UAAU,cAAc;AAC3D;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B,oC","file":"vendors-node_modules_jupyterlab_help-extension_lib_index_js.4e3708cf1f5a6894946b.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module help-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { CommandToolbarButton, Dialog, ICommandPalette, IFrame, MainAreaWidget, showDialog, Toolbar, WidgetTracker } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { copyrightIcon, jupyterIcon, jupyterlabWordmarkIcon, refreshIcon } from '@jupyterlab/ui-components';\nimport * as React from 'react';\nimport { Licenses } from './licenses';\n/**\n * The command IDs used by the help plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.open = 'help:open';\n    CommandIDs.about = 'help:about';\n    CommandIDs.activate = 'help:activate';\n    CommandIDs.close = 'help:close';\n    CommandIDs.show = 'help:show';\n    CommandIDs.hide = 'help:hide';\n    CommandIDs.launchClassic = 'help:launch-classic-notebook';\n    CommandIDs.jupyterForum = 'help:jupyter-forum';\n    CommandIDs.licenses = 'help:licenses';\n    CommandIDs.licenseReport = 'help:license-report';\n    CommandIDs.refreshLicenses = 'help:licenses-refresh';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A flag denoting whether the application is loaded over HTTPS.\n */\nconst LAB_IS_SECURE = window.location.protocol === 'https:';\n/**\n * The class name added to the help widget.\n */\nconst HELP_CLASS = 'jp-Help';\n/**\n * Add a command to show an About dialog.\n */\nconst about = {\n    id: '@jupyterlab/help-extension:about',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette],\n    activate: (app, translator, palette) => {\n        const { commands } = app;\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Help');\n        commands.addCommand(CommandIDs.about, {\n            label: trans.__('About %1', app.name),\n            execute: () => {\n                // Create the header of the about dialog\n                const versionNumber = trans.__('Version %1', app.version);\n                const versionInfo = (React.createElement(\"span\", { className: \"jp-About-version-info\" },\n                    React.createElement(\"span\", { className: \"jp-About-version\" }, versionNumber)));\n                const title = (React.createElement(\"span\", { className: \"jp-About-header\" },\n                    React.createElement(jupyterIcon.react, { margin: \"7px 9.5px\", height: \"auto\", width: \"58px\" }),\n                    React.createElement(\"div\", { className: \"jp-About-header-info\" },\n                        React.createElement(jupyterlabWordmarkIcon.react, { height: \"auto\", width: \"196px\" }),\n                        versionInfo)));\n                // Create the body of the about dialog\n                const jupyterURL = 'https://jupyter.org/about.html';\n                const contributorsURL = 'https://github.com/jupyterlab/jupyterlab/graphs/contributors';\n                const externalLinks = (React.createElement(\"span\", { className: \"jp-About-externalLinks\" },\n                    React.createElement(\"a\", { href: contributorsURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('CONTRIBUTOR LIST')),\n                    React.createElement(\"a\", { href: jupyterURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('ABOUT PROJECT JUPYTER'))));\n                const copyright = (React.createElement(\"span\", { className: \"jp-About-copyright\" }, trans.__('© 2015-2021 Project Jupyter Contributors')));\n                const body = (React.createElement(\"div\", { className: \"jp-About-body\" },\n                    externalLinks,\n                    copyright));\n                return showDialog({\n                    title,\n                    body,\n                    buttons: [\n                        Dialog.createButton({\n                            label: trans.__('Dismiss'),\n                            className: 'jp-About-button jp-mod-reject jp-mod-styled'\n                        })\n                    ]\n                });\n            }\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.about, category });\n        }\n    }\n};\n/**\n * A plugin to add a command to open the Classic Notebook interface.\n */\nconst launchClassic = {\n    id: '@jupyterlab/help-extension:launch-classic',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette],\n    activate: (app, translator, palette) => {\n        const { commands } = app;\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Help');\n        commands.addCommand(CommandIDs.launchClassic, {\n            label: trans.__('Launch Classic Notebook'),\n            execute: () => {\n                window.open(PageConfig.getBaseUrl() + 'tree');\n            }\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.launchClassic, category });\n        }\n    }\n};\n/**\n * A plugin to add a command to open the Jupyter Forum.\n */\nconst jupyterForum = {\n    id: '@jupyterlab/help-extension:jupyter-forum',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette],\n    activate: (app, translator, palette) => {\n        const { commands } = app;\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Help');\n        commands.addCommand(CommandIDs.jupyterForum, {\n            label: trans.__('Jupyter Forum'),\n            execute: () => {\n                window.open('https://discourse.jupyter.org/c/jupyterlab');\n            }\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.jupyterForum, category });\n        }\n    }\n};\n/**\n * A plugin to add a list of resources to the help menu.\n */\nconst resources = {\n    id: '@jupyterlab/help-extension:resources',\n    autoStart: true,\n    requires: [IMainMenu, ITranslator],\n    optional: [ICommandPalette, ILayoutRestorer],\n    activate: (app, mainMenu, translator, palette, restorer) => {\n        const trans = translator.load('jupyterlab');\n        let counter = 0;\n        const category = trans.__('Help');\n        const namespace = 'help-doc';\n        const baseUrl = PageConfig.getBaseUrl();\n        const { commands, shell, serviceManager } = app;\n        const tracker = new WidgetTracker({ namespace });\n        const resources = [\n            {\n                text: trans.__('JupyterLab Reference'),\n                url: 'https://jupyterlab.readthedocs.io/en/stable/'\n            },\n            {\n                text: trans.__('JupyterLab FAQ'),\n                url: 'https://jupyterlab.readthedocs.io/en/stable/getting_started/faq.html'\n            },\n            {\n                text: trans.__('Jupyter Reference'),\n                url: 'https://jupyter.org/documentation'\n            },\n            {\n                text: trans.__('Markdown Reference'),\n                url: 'https://commonmark.org/help/'\n            }\n        ];\n        resources.sort((a, b) => {\n            return a.text.localeCompare(b.text);\n        });\n        // Handle state restoration.\n        if (restorer) {\n            void restorer.restore(tracker, {\n                command: CommandIDs.open,\n                args: widget => ({\n                    url: widget.content.url,\n                    text: widget.content.title.label\n                }),\n                name: widget => widget.content.url\n            });\n        }\n        /**\n         * Create a new HelpWidget widget.\n         */\n        function newHelpWidget(url, text) {\n            // Allow scripts and forms so that things like\n            // readthedocs can use their search functionality.\n            // We *don't* allow same origin requests, which\n            // can prevent some content from being loaded onto the\n            // help pages.\n            const content = new IFrame({\n                sandbox: ['allow-scripts', 'allow-forms']\n            });\n            content.url = url;\n            content.addClass(HELP_CLASS);\n            content.title.label = text;\n            content.id = `${namespace}-${++counter}`;\n            const widget = new MainAreaWidget({ content });\n            widget.addClass('jp-Help');\n            return widget;\n        }\n        // Populate the Help menu.\n        const helpMenu = mainMenu.helpMenu;\n        const resourcesGroup = resources.map(args => ({\n            args,\n            command: CommandIDs.open\n        }));\n        helpMenu.addGroup(resourcesGroup, 10);\n        // Generate a cache of the kernel help links.\n        const kernelInfoCache = new Map();\n        serviceManager.sessions.runningChanged.connect((m, sessions) => {\n            var _a;\n            // If a new session has been added, it is at the back\n            // of the session list. If one has changed or stopped,\n            // it does not hurt to check it.\n            if (!sessions.length) {\n                return;\n            }\n            const sessionModel = sessions[sessions.length - 1];\n            if (!sessionModel.kernel ||\n                kernelInfoCache.has(sessionModel.kernel.name)) {\n                return;\n            }\n            const session = serviceManager.sessions.connectTo({\n                model: sessionModel,\n                kernelConnectionOptions: { handleComms: false }\n            });\n            void ((_a = session.kernel) === null || _a === void 0 ? void 0 : _a.info.then(kernelInfo => {\n                var _a, _b;\n                const name = session.kernel.name;\n                // Check the cache second time so that, if two callbacks get scheduled,\n                // they don't try to add the same commands.\n                if (kernelInfoCache.has(name)) {\n                    return;\n                }\n                // Set the Kernel Info cache.\n                kernelInfoCache.set(name, kernelInfo);\n                // Utility function to check if the current widget\n                // has registered itself with the help menu.\n                const usesKernel = () => {\n                    let result = false;\n                    const widget = app.shell.currentWidget;\n                    if (!widget) {\n                        return result;\n                    }\n                    helpMenu.kernelUsers.forEach(u => {\n                        var _a;\n                        if (u.tracker.has(widget) && ((_a = u.getKernel(widget)) === null || _a === void 0 ? void 0 : _a.name) === name) {\n                            result = true;\n                        }\n                    });\n                    return result;\n                };\n                // Add the kernel banner to the Help Menu.\n                const bannerCommand = `help-menu-${name}:banner`;\n                const spec = (_b = (_a = serviceManager.kernelspecs) === null || _a === void 0 ? void 0 : _a.specs) === null || _b === void 0 ? void 0 : _b.kernelspecs[name];\n                if (!spec) {\n                    return;\n                }\n                const kernelName = spec.display_name;\n                let kernelIconUrl = spec.resources['logo-64x64'];\n                if (kernelIconUrl) {\n                    const index = kernelIconUrl.indexOf('kernelspecs');\n                    kernelIconUrl = baseUrl + kernelIconUrl.slice(index);\n                }\n                commands.addCommand(bannerCommand, {\n                    label: trans.__('About the %1 Kernel', kernelName),\n                    isVisible: usesKernel,\n                    isEnabled: usesKernel,\n                    execute: () => {\n                        // Create the header of the about dialog\n                        const headerLogo = React.createElement(\"img\", { src: kernelIconUrl });\n                        const title = (React.createElement(\"span\", { className: \"jp-About-header\" },\n                            headerLogo,\n                            React.createElement(\"div\", { className: \"jp-About-header-info\" }, kernelName)));\n                        const banner = React.createElement(\"pre\", null, kernelInfo.banner);\n                        const body = React.createElement(\"div\", { className: \"jp-About-body\" }, banner);\n                        return showDialog({\n                            title,\n                            body,\n                            buttons: [\n                                Dialog.createButton({\n                                    label: trans.__('Dismiss'),\n                                    className: 'jp-About-button jp-mod-reject jp-mod-styled'\n                                })\n                            ]\n                        });\n                    }\n                });\n                helpMenu.addGroup([{ command: bannerCommand }], 20);\n                // Add the kernel info help_links to the Help menu.\n                const kernelGroup = [];\n                (kernelInfo.help_links || []).forEach(link => {\n                    const commandId = `help-menu-${name}:${link.text}`;\n                    commands.addCommand(commandId, {\n                        label: link.text,\n                        isVisible: usesKernel,\n                        isEnabled: usesKernel,\n                        execute: () => {\n                            return commands.execute(CommandIDs.open, link);\n                        }\n                    });\n                    kernelGroup.push({ command: commandId });\n                });\n                helpMenu.addGroup(kernelGroup, 21);\n                // Dispose of the session object since we no longer need it.\n                session.dispose();\n            }));\n        });\n        commands.addCommand(CommandIDs.open, {\n            label: args => args['text'],\n            execute: args => {\n                const url = args['url'];\n                const text = args['text'];\n                const newBrowserTab = args['newBrowserTab'] || false;\n                // If help resource will generate a mixed content error, load externally.\n                if (newBrowserTab ||\n                    (LAB_IS_SECURE && URLExt.parse(url).protocol !== 'https:')) {\n                    window.open(url);\n                    return;\n                }\n                const widget = newHelpWidget(url, text);\n                void tracker.add(widget);\n                shell.add(widget, 'main');\n                return widget;\n            }\n        });\n        if (palette) {\n            resources.forEach(args => {\n                palette.addItem({ args, command: CommandIDs.open, category });\n            });\n            palette.addItem({\n                args: { reload: true },\n                command: 'apputils:reset',\n                category\n            });\n        }\n    }\n};\n/**\n * A plugin to add a licenses reporting tools.\n */\nconst licenses = {\n    id: '@jupyterlab/help-extension:licenses',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [IMainMenu, ICommandPalette, ILayoutRestorer],\n    activate: (app, translator, menu, palette, restorer) => {\n        // bail if no license API is available from the server\n        if (!PageConfig.getOption('licensesUrl')) {\n            return;\n        }\n        const { commands, shell } = app;\n        const trans = translator.load('jupyterlab');\n        // translation strings\n        const category = trans.__('Help');\n        const downloadAsText = trans.__('Download All Licenses as');\n        const licensesText = trans.__('Licenses');\n        const refreshLicenses = trans.__('Refresh Licenses');\n        // an incrementer for license widget ids\n        let counter = 0;\n        const licensesUrl = URLExt.join(PageConfig.getBaseUrl(), PageConfig.getOption('licensesUrl')) + '/';\n        const licensesNamespace = 'help-licenses';\n        const licensesTracker = new WidgetTracker({\n            namespace: licensesNamespace\n        });\n        /**\n         * Return a full license report format based on a format name\n         */\n        function formatOrDefault(format) {\n            return (Licenses.REPORT_FORMATS[format] ||\n                Licenses.REPORT_FORMATS[Licenses.DEFAULT_FORMAT]);\n        }\n        /**\n         * Create a MainAreaWidget for a license viewer\n         */\n        function createLicenseWidget(args) {\n            const licensesModel = new Licenses.Model(Object.assign(Object.assign({}, args), { licensesUrl,\n                trans, serverSettings: app.serviceManager.serverSettings }));\n            const content = new Licenses({ model: licensesModel });\n            content.id = `${licensesNamespace}-${++counter}`;\n            content.title.label = licensesText;\n            content.title.icon = copyrightIcon;\n            const main = new MainAreaWidget({\n                content,\n                reveal: licensesModel.licensesReady\n            });\n            main.toolbar.addItem('refresh-licenses', new CommandToolbarButton({\n                id: CommandIDs.refreshLicenses,\n                args: { noLabel: 1 },\n                commands\n            }));\n            main.toolbar.addItem('spacer', Toolbar.createSpacerItem());\n            for (const format of Object.keys(Licenses.REPORT_FORMATS)) {\n                const button = new CommandToolbarButton({\n                    id: CommandIDs.licenseReport,\n                    args: { format, noLabel: 1 },\n                    commands\n                });\n                main.toolbar.addItem(`download-${format}`, button);\n            }\n            return main;\n        }\n        // register license-related commands\n        commands.addCommand(CommandIDs.licenses, {\n            label: licensesText,\n            execute: (args) => {\n                const licenseMain = createLicenseWidget(args);\n                shell.add(licenseMain, 'main');\n                // add to tracker so it can be restored, and update when choices change\n                void licensesTracker.add(licenseMain);\n                licenseMain.content.model.trackerDataChanged.connect(() => {\n                    void licensesTracker.save(licenseMain);\n                });\n                return licenseMain;\n            }\n        });\n        commands.addCommand(CommandIDs.refreshLicenses, {\n            label: args => (args.noLabel ? '' : refreshLicenses),\n            caption: refreshLicenses,\n            icon: refreshIcon,\n            execute: async () => {\n                var _a;\n                return (_a = licensesTracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.model.initLicenses();\n            }\n        });\n        commands.addCommand(CommandIDs.licenseReport, {\n            label: args => {\n                if (args.noLabel) {\n                    return '';\n                }\n                const format = formatOrDefault(`${args.format}`);\n                return `${downloadAsText} ${format.title}`;\n            },\n            caption: args => {\n                const format = formatOrDefault(`${args.format}`);\n                return `${downloadAsText} ${format.title}`;\n            },\n            icon: args => {\n                const format = formatOrDefault(`${args.format}`);\n                return format.icon;\n            },\n            execute: async (args) => {\n                var _a;\n                const format = formatOrDefault(`${args.format}`);\n                return await ((_a = licensesTracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.model.download({\n                    format: format.id\n                }));\n            }\n        });\n        // handle optional integrations\n        if (palette) {\n            palette.addItem({ command: CommandIDs.licenses, category });\n        }\n        if (menu) {\n            const helpMenu = menu.helpMenu;\n            helpMenu.addGroup([{ command: CommandIDs.licenses }], 0);\n        }\n        if (restorer) {\n            void restorer.restore(licensesTracker, {\n                command: CommandIDs.licenses,\n                name: widget => 'licenses',\n                args: widget => {\n                    const { currentBundleName, currentPackageIndex, packageFilter } = widget.content.model;\n                    const args = {\n                        currentBundleName,\n                        currentPackageIndex,\n                        packageFilter\n                    };\n                    return args;\n                }\n            });\n        }\n    }\n};\nconst plugins = [\n    about,\n    launchClassic,\n    jupyterForum,\n    resources,\n    licenses\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { jsonIcon, markdownIcon, spreadsheetIcon } from '@jupyterlab/ui-components';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { h } from '@lumino/virtualdom';\nimport { Panel, SplitPanel, TabBar, Widget } from '@lumino/widgets';\nimport * as React from 'react';\n/**\n * A license viewer\n */\nexport class Licenses extends SplitPanel {\n    constructor(options) {\n        super();\n        this.addClass('jp-Licenses');\n        this.model = options.model;\n        this.initLeftPanel();\n        this.initFilters();\n        this.initBundles();\n        this.initGrid();\n        this.initLicenseText();\n        this.setRelativeSizes([1, 2, 3]);\n        void this.model.initLicenses().then(() => this._updateBundles());\n        this.model.trackerDataChanged.connect(() => {\n            this.title.label = this.model.title;\n        });\n    }\n    /**\n     * Handle disposing of the widget\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._bundles.currentChanged.disconnect(this.onBundleSelected, this);\n        this.model.dispose();\n        super.dispose();\n    }\n    /**\n     * Initialize the left area for filters and bundles\n     */\n    initLeftPanel() {\n        this._leftPanel = new Panel();\n        this._leftPanel.addClass('jp-Licenses-FormArea');\n        this.addWidget(this._leftPanel);\n        SplitPanel.setStretch(this._leftPanel, 1);\n    }\n    /**\n     * Initialize the filters\n     */\n    initFilters() {\n        this._filters = new Licenses.Filters(this.model);\n        SplitPanel.setStretch(this._filters, 1);\n        this._leftPanel.addWidget(this._filters);\n    }\n    /**\n     * Initialize the listing of available bundles\n     */\n    initBundles() {\n        this._bundles = new TabBar({\n            orientation: 'vertical',\n            renderer: new Licenses.BundleTabRenderer(this.model)\n        });\n        this._bundles.addClass('jp-Licenses-Bundles');\n        SplitPanel.setStretch(this._bundles, 1);\n        this._leftPanel.addWidget(this._bundles);\n        this._bundles.currentChanged.connect(this.onBundleSelected, this);\n        this.model.stateChanged.connect(() => this._bundles.update());\n    }\n    /**\n     * Initialize the listing of packages within the current bundle\n     */\n    initGrid() {\n        this._grid = new Licenses.Grid(this.model);\n        SplitPanel.setStretch(this._grid, 1);\n        this.addWidget(this._grid);\n    }\n    /**\n     * Initialize the full text of the current package\n     */\n    initLicenseText() {\n        this._licenseText = new Licenses.FullText(this.model);\n        SplitPanel.setStretch(this._grid, 1);\n        this.addWidget(this._licenseText);\n    }\n    /**\n     * Event handler for updating the model with the current bundle\n     */\n    onBundleSelected() {\n        var _a;\n        if ((_a = this._bundles.currentTitle) === null || _a === void 0 ? void 0 : _a.label) {\n            this.model.currentBundleName = this._bundles.currentTitle.label;\n        }\n    }\n    /**\n     * Update the bundle tabs.\n     */\n    _updateBundles() {\n        this._bundles.clearTabs();\n        let i = 0;\n        const { currentBundleName } = this.model;\n        let currentIndex = 0;\n        for (const bundle of this.model.bundleNames) {\n            const tab = new Widget();\n            tab.title.label = bundle;\n            if (bundle === currentBundleName) {\n                currentIndex = i;\n            }\n            this._bundles.insertTab(++i, tab.title);\n        }\n        this._bundles.currentIndex = currentIndex;\n    }\n}\n/** A namespace for license components */\n(function (Licenses) {\n    /**\n     * License report formats understood by the server (once lower-cased)\n     */\n    Licenses.REPORT_FORMATS = {\n        markdown: {\n            id: 'markdown',\n            title: 'Markdown',\n            icon: markdownIcon\n        },\n        csv: {\n            id: 'csv',\n            title: 'CSV',\n            icon: spreadsheetIcon\n        },\n        json: {\n            id: 'csv',\n            title: 'JSON',\n            icon: jsonIcon\n        }\n    };\n    /**\n     * The default format (most human-readable)\n     */\n    Licenses.DEFAULT_FORMAT = 'markdown';\n    /**\n     * A model for license data\n     */\n    class Model extends VDomModel {\n        constructor(options) {\n            super();\n            this._selectedPackageChanged = new Signal(this);\n            this._trackerDataChanged = new Signal(this);\n            this._currentPackageIndex = 0;\n            this._licensesReady = new PromiseDelegate();\n            this._packageFilter = {};\n            this._trans = options.trans;\n            this._licensesUrl = options.licensesUrl;\n            this._serverSettings =\n                options.serverSettings || ServerConnection.makeSettings();\n            if (options.currentBundleName) {\n                this._currentBundleName = options.currentBundleName;\n            }\n            if (options.packageFilter) {\n                this._packageFilter = options.packageFilter;\n            }\n            if (options.currentPackageIndex) {\n                this._currentPackageIndex = options.currentPackageIndex;\n            }\n        }\n        /**\n         * Handle the initial request for the licenses from the server.\n         */\n        async initLicenses() {\n            try {\n                const response = await ServerConnection.makeRequest(this._licensesUrl, {}, this._serverSettings);\n                this._serverResponse = await response.json();\n                this._licensesReady.resolve();\n                this.stateChanged.emit(void 0);\n            }\n            catch (err) {\n                this._licensesReady.reject(err);\n            }\n        }\n        /**\n         * Create a temporary download link, and emulate clicking it to trigger a named\n         * file download.\n         */\n        async download(options) {\n            const url = `${this._licensesUrl}?format=${options.format}&download=1`;\n            const element = document.createElement('a');\n            element.href = url;\n            element.download = '';\n            document.body.appendChild(element);\n            element.click();\n            document.body.removeChild(element);\n            return void 0;\n        }\n        /**\n         * A promise that resolves when the licenses from the server change\n         */\n        get selectedPackageChanged() {\n            return this._selectedPackageChanged;\n        }\n        /**\n         * A promise that resolves when the trackable data changes\n         */\n        get trackerDataChanged() {\n            return this._trackerDataChanged;\n        }\n        /**\n         * The names of the license bundles available\n         */\n        get bundleNames() {\n            var _a;\n            return Object.keys(((_a = this._serverResponse) === null || _a === void 0 ? void 0 : _a.bundles) || {});\n        }\n        /**\n         * The current license bundle\n         */\n        get currentBundleName() {\n            if (this._currentBundleName) {\n                return this._currentBundleName;\n            }\n            if (this.bundleNames.length) {\n                return this.bundleNames[0];\n            }\n            return null;\n        }\n        /**\n         * Set the current license bundle, and reset the selected index\n         */\n        set currentBundleName(currentBundleName) {\n            if (this._currentBundleName !== currentBundleName) {\n                this._currentBundleName = currentBundleName;\n                this.stateChanged.emit(void 0);\n                this._trackerDataChanged.emit(void 0);\n            }\n        }\n        /**\n         * A promise that resolves when the licenses are available from the server\n         */\n        get licensesReady() {\n            return this._licensesReady.promise;\n        }\n        /**\n         * All the license bundles, keyed by the distributing packages\n         */\n        get bundles() {\n            var _a;\n            return ((_a = this._serverResponse) === null || _a === void 0 ? void 0 : _a.bundles) || {};\n        }\n        /**\n         * The index of the currently-selected package within its license bundle\n         */\n        get currentPackageIndex() {\n            return this._currentPackageIndex;\n        }\n        /**\n         * Update the currently-selected package within its license bundle\n         */\n        set currentPackageIndex(currentPackageIndex) {\n            if (this._currentPackageIndex === currentPackageIndex) {\n                return;\n            }\n            this._currentPackageIndex = currentPackageIndex;\n            this._selectedPackageChanged.emit(void 0);\n            this.stateChanged.emit(void 0);\n            this._trackerDataChanged.emit(void 0);\n        }\n        /**\n         * The license data for the currently-selected package\n         */\n        get currentPackage() {\n            var _a;\n            if (this.currentBundleName &&\n                this.bundles &&\n                this._currentPackageIndex != null) {\n                return this.getFilteredPackages(((_a = this.bundles[this.currentBundleName]) === null || _a === void 0 ? void 0 : _a.packages) || [])[this._currentPackageIndex];\n            }\n            return null;\n        }\n        /**\n         * A translation bundle\n         */\n        get trans() {\n            return this._trans;\n        }\n        get title() {\n            return `${this._currentBundleName || ''} ${this._trans.__('Licenses')}`.trim();\n        }\n        /**\n         * The current package filter\n         */\n        get packageFilter() {\n            return this._packageFilter;\n        }\n        set packageFilter(packageFilter) {\n            this._packageFilter = packageFilter;\n            this.stateChanged.emit(void 0);\n            this._trackerDataChanged.emit(void 0);\n        }\n        /**\n         * Get filtered packages from current bundle where at least one token of each\n         * key is present.\n         */\n        getFilteredPackages(allRows) {\n            let rows = [];\n            let filters = Object.entries(this._packageFilter)\n                .filter(([k, v]) => v && `${v}`.trim().length)\n                .map(([k, v]) => [k, `${v}`.toLowerCase().trim().split(' ')]);\n            for (const row of allRows) {\n                let keyHits = 0;\n                for (const [key, bits] of filters) {\n                    let bitHits = 0;\n                    let rowKeyValue = `${row[key]}`.toLowerCase();\n                    for (const bit of bits) {\n                        if (rowKeyValue.includes(bit)) {\n                            bitHits += 1;\n                        }\n                    }\n                    if (bitHits) {\n                        keyHits += 1;\n                    }\n                }\n                if (keyHits === filters.length) {\n                    rows.push(row);\n                }\n            }\n            return Object.values(rows);\n        }\n    }\n    Licenses.Model = Model;\n    /**\n     * A filter form for limiting the packages displayed\n     */\n    class Filters extends VDomRenderer {\n        constructor(model) {\n            super(model);\n            /**\n             * Render a filter input\n             */\n            this.renderFilter = (key) => {\n                const value = this.model.packageFilter[key] || '';\n                return (React.createElement(\"input\", { type: \"text\", name: key, defaultValue: value, className: \"jp-mod-styled\", onInput: this.onFilterInput }));\n            };\n            /**\n             * Handle a filter input changing\n             */\n            this.onFilterInput = (evt) => {\n                const input = evt.currentTarget;\n                const { name, value } = input;\n                this.model.packageFilter = Object.assign(Object.assign({}, this.model.packageFilter), { [name]: value });\n            };\n            this.addClass('jp-Licenses-Filters');\n            this.addClass('jp-RenderedHTMLCommon');\n        }\n        render() {\n            const { trans } = this.model;\n            return (React.createElement(\"div\", null,\n                React.createElement(\"label\", null,\n                    React.createElement(\"strong\", null, trans.__('Filter Licenses By'))),\n                React.createElement(\"ul\", null,\n                    React.createElement(\"li\", null,\n                        React.createElement(\"label\", null, trans.__('Package')),\n                        this.renderFilter('name')),\n                    React.createElement(\"li\", null,\n                        React.createElement(\"label\", null, trans.__('Version')),\n                        this.renderFilter('versionInfo')),\n                    React.createElement(\"li\", null,\n                        React.createElement(\"label\", null, trans.__('License')),\n                        this.renderFilter('licenseId'))),\n                React.createElement(\"label\", null,\n                    React.createElement(\"strong\", null, trans.__('Distributions')))));\n        }\n    }\n    Licenses.Filters = Filters;\n    /**\n     * A fancy bundle renderer with the package count\n     */\n    class BundleTabRenderer extends TabBar.Renderer {\n        constructor(model) {\n            super();\n            this.closeIconSelector = '.lm-TabBar-tabCloseIcon';\n            this.model = model;\n        }\n        /**\n         * Render a full bundle\n         */\n        renderTab(data) {\n            let title = data.title.caption;\n            let key = this.createTabKey(data);\n            let style = this.createTabStyle(data);\n            let className = this.createTabClass(data);\n            let dataset = this.createTabDataset(data);\n            return h.li({ key, className, title, style, dataset }, this.renderIcon(data), this.renderLabel(data), this.renderCountBadge(data));\n        }\n        /**\n         * Render the package count\n         */\n        renderCountBadge(data) {\n            const bundle = data.title.label;\n            const { bundles } = this.model;\n            const packages = this.model.getFilteredPackages((bundles && bundle ? bundles[bundle].packages : []) || []);\n            return h.label({}, `${packages.length}`);\n        }\n    }\n    Licenses.BundleTabRenderer = BundleTabRenderer;\n    /**\n     * A grid of licenses\n     */\n    class Grid extends VDomRenderer {\n        constructor(model) {\n            super(model);\n            /**\n             * Render a single package's license information\n             */\n            this.renderRow = (row, index) => {\n                const selected = index === this.model.currentPackageIndex;\n                const onCheck = () => (this.model.currentPackageIndex = index);\n                return (React.createElement(\"tr\", { key: row.name, className: selected ? 'jp-mod-selected' : '', onClick: onCheck },\n                    React.createElement(\"td\", null,\n                        React.createElement(\"input\", { type: \"radio\", name: \"show-package-license\", value: index, onChange: onCheck, checked: selected })),\n                    React.createElement(\"th\", null, row.name),\n                    React.createElement(\"td\", null,\n                        React.createElement(\"code\", null, row.versionInfo)),\n                    React.createElement(\"td\", null,\n                        React.createElement(\"code\", null, row.licenseId))));\n            };\n            this.addClass('jp-Licenses-Grid');\n            this.addClass('jp-RenderedHTMLCommon');\n        }\n        /**\n         * Render a grid of package license information\n         */\n        render() {\n            var _a;\n            const { bundles, currentBundleName, trans } = this.model;\n            const filteredPackages = this.model.getFilteredPackages(bundles && currentBundleName\n                ? ((_a = bundles[currentBundleName]) === null || _a === void 0 ? void 0 : _a.packages) || []\n                : []);\n            if (!filteredPackages.length) {\n                return (React.createElement(\"blockquote\", null,\n                    React.createElement(\"em\", null, trans.__('No Packages found'))));\n            }\n            return (React.createElement(\"form\", null,\n                React.createElement(\"table\", null,\n                    React.createElement(\"thead\", null,\n                        React.createElement(\"tr\", null,\n                            React.createElement(\"td\", null),\n                            React.createElement(\"th\", null, trans.__('Package')),\n                            React.createElement(\"th\", null, trans.__('Version')),\n                            React.createElement(\"th\", null, trans.__('License')))),\n                    React.createElement(\"tbody\", null, filteredPackages.map(this.renderRow)))));\n        }\n    }\n    Licenses.Grid = Grid;\n    /**\n     * A package's full license text\n     */\n    class FullText extends VDomRenderer {\n        constructor(model) {\n            super(model);\n            this.addClass('jp-Licenses-Text');\n            this.addClass('jp-RenderedHTMLCommon');\n            this.addClass('jp-RenderedMarkdown');\n        }\n        /**\n         * Render the license text, or a null state if no package is selected\n         */\n        render() {\n            const { currentPackage, trans } = this.model;\n            let head = '';\n            let quote = trans.__('No Package selected');\n            let code = '';\n            if (currentPackage) {\n                const { name, versionInfo, licenseId, extractedText } = currentPackage;\n                head = `${name} v${versionInfo}`;\n                quote = `${trans.__('License')}: ${licenseId || trans.__('No License ID found')}`;\n                code = extractedText || trans.__('No License Text found');\n            }\n            return [\n                React.createElement(\"h1\", { key: \"h1\" }, head),\n                React.createElement(\"blockquote\", { key: \"quote\" },\n                    React.createElement(\"em\", null, quote)),\n                React.createElement(\"code\", { key: \"code\" }, code)\n            ];\n        }\n    }\n    Licenses.FullText = FullText;\n})(Licenses || (Licenses = {}));\n//# sourceMappingURL=licenses.js.map"],"sourceRoot":""}