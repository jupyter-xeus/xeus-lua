{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/markdownviewer-extension/lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAC0D;AACL;AACL;AAC2D;AACrB;AACvB;AACT;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8EAAsB;AACpC,eAAe,uEAAmB,EAAE,gEAAW;AAC/C,eAAe,oEAAe,EAAE,yEAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC;AACA,0BAA0B,2EAAuB;AACjD;AACA,wBAAwB,+DAAa;AACrC;AACA,KAAK;AACL,iCAAiC,EAAE,oFAA4B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,wBAAwB,6EAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,8BAA8B,8CAA8C;AAC5E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,+BAA+B,kEAAe;AAC9C,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;AACtB,iC","file":"node_modules_jupyterlab_markdownviewer-extension_lib_index_js-_836e0.e592d96bdc8f33b5a59c.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module markdownviewer-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { WidgetTracker } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { IMarkdownViewerTracker, MarkdownViewer, MarkdownViewerFactory } from '@jupyterlab/markdownviewer';\nimport { IRenderMimeRegistry, markdownRendererFactory } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\n/**\n * The command IDs used by the markdownviewer plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.markdownPreview = 'markdownviewer:open';\n    CommandIDs.markdownEditor = 'markdownviewer:edit';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the factory that creates markdown viewer widgets.\n */\nconst FACTORY = 'Markdown Preview';\n/**\n * The markdown viewer plugin.\n */\nconst plugin = {\n    activate,\n    id: '@jupyterlab/markdownviewer-extension:plugin',\n    provides: IMarkdownViewerTracker,\n    requires: [IRenderMimeRegistry, ITranslator],\n    optional: [ILayoutRestorer, ISettingRegistry],\n    autoStart: true\n};\n/**\n * Activate the markdown viewer plugin.\n */\nfunction activate(app, rendermime, translator, restorer, settingRegistry) {\n    const trans = translator.load('jupyterlab');\n    const { commands, docRegistry } = app;\n    // Add the markdown renderer factory.\n    rendermime.addFactory(markdownRendererFactory);\n    const namespace = 'markdownviewer-widget';\n    const tracker = new WidgetTracker({\n        namespace\n    });\n    let config = Object.assign({}, MarkdownViewer.defaultConfig);\n    /**\n     * Update the settings of a widget.\n     */\n    function updateWidget(widget) {\n        Object.keys(config).forEach((k) => {\n            var _a;\n            widget.setOption(k, (_a = config[k]) !== null && _a !== void 0 ? _a : null);\n        });\n    }\n    if (settingRegistry) {\n        const updateSettings = (settings) => {\n            config = settings.composite;\n            tracker.forEach(widget => {\n                updateWidget(widget.content);\n            });\n        };\n        // Fetch the initial state of the settings.\n        settingRegistry\n            .load(plugin.id)\n            .then((settings) => {\n            settings.changed.connect(() => {\n                updateSettings(settings);\n            });\n            updateSettings(settings);\n        })\n            .catch((reason) => {\n            console.error(reason.message);\n        });\n    }\n    // Register the MarkdownViewer factory.\n    const factory = new MarkdownViewerFactory({\n        rendermime,\n        name: FACTORY,\n        primaryFileType: docRegistry.getFileType('markdown'),\n        fileTypes: ['markdown'],\n        defaultRendered: ['markdown']\n    });\n    factory.widgetCreated.connect((sender, widget) => {\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        // Handle the settings of new widgets.\n        updateWidget(widget.content);\n        void tracker.add(widget);\n    });\n    docRegistry.addWidgetFactory(factory);\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({ path: widget.context.path, factory: FACTORY }),\n            name: widget => widget.context.path\n        });\n    }\n    commands.addCommand(CommandIDs.markdownPreview, {\n        label: trans.__('Markdown Preview'),\n        execute: args => {\n            const path = args['path'];\n            if (typeof path !== 'string') {\n                return;\n            }\n            return commands.execute('docmanager:open', {\n                path,\n                factory: FACTORY,\n                options: args['options']\n            });\n        }\n    });\n    commands.addCommand(CommandIDs.markdownEditor, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const path = widget.context.path;\n            return commands.execute('docmanager:open', {\n                path,\n                factory: 'Editor',\n                options: {\n                    mode: 'split-right'\n                }\n            });\n        },\n        isVisible: () => {\n            const widget = tracker.currentWidget;\n            return ((widget && PathExt.extname(widget.context.path) === '.md') || false);\n        },\n        label: trans.__('Show Markdown Editor')\n    });\n    return tracker;\n}\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}