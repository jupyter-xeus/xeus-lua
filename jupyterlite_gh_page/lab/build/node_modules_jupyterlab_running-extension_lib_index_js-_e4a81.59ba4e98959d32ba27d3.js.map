{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/running-extension/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/running-extension/lib/kernels.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/running-extension/lib/opentabs.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACqE;AACkC;AACjD;AACE;AACG;AACJ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wEAAuB;AACrC,eAAe,gEAAW;AAC1B,eAAe,oEAAe,EAAE,8DAAS;AACzC;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;AACtB;AACA;AACA;AACA;AACA;AACA,uCAAuC,uEAAsB;AAC7D,wBAAwB,gEAAe;AACvC;AACA;AACA,yBAAyB,kEAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oEAAyB;AACjC;AACA,IAAI,wEAA8B;AAClC;AACA;AACA,oCAAoC,YAAY;AAChD;AACA;AACA,iC;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACgD;AACgC;AACpC;AAC5C;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,6BAA6B,mEAAgB;AAC7C;AACA;AACA;AACA;AACA,mBAAmB,0DAAO;AAC1B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA,2DAA2D,OAAO;AAClE;AACA;AACA,8DAA8D,OAAO;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC,yBAAyB,mEAAgB;AACzC,uBAAuB,mEAAY;AACnC;AACA;AACA,uBAAuB,kEAAW;AAClC;AACA,mBAAmB,+DAAQ;AAC3B;AACA;AACA,uCAAuC,mEAAgB;AACvD;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACyD;AACK;AAClB;AACD;AAC3C;AACA;AACA;AACA;AACA;AACA,gCAAgC,qDAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAAO;AAC1B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,YAAY,0DAAO;AACnB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8DAAO,gBAAgB,+DAAQ;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mEAAc;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC","file":"node_modules_jupyterlab_running-extension_lib_index_js-_e4a81.59ba4e98959d32ba27d3.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module running-extension\n */\nimport { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\nimport { IRunningSessionManagers, RunningSessionManagers, RunningSessions } from '@jupyterlab/running';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { runningIcon } from '@jupyterlab/ui-components';\nimport { addKernelRunningSessionManager } from './kernels';\nimport { addOpenTabsSessionManager } from './opentabs';\n/**\n * The default running sessions extension.\n */\nconst plugin = {\n    activate,\n    id: '@jupyterlab/running-extension:plugin',\n    provides: IRunningSessionManagers,\n    requires: [ITranslator],\n    optional: [ILayoutRestorer, ILabShell],\n    autoStart: true\n};\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n/**\n * Activate the running plugin.\n */\nfunction activate(app, translator, restorer, labShell) {\n    const trans = translator.load('jupyterlab');\n    const runningSessionManagers = new RunningSessionManagers();\n    const running = new RunningSessions(runningSessionManagers, translator);\n    running.id = 'jp-running-sessions';\n    running.title.caption = trans.__('Running Terminals and Kernels');\n    running.title.icon = runningIcon;\n    running.node.setAttribute('role', 'region');\n    running.node.setAttribute('aria-label', trans.__('Running Sessions section'));\n    // Let the application restorer track the running panel for restoration of\n    // application state (e.g. setting the running panel as the current side bar\n    // widget).\n    if (restorer) {\n        restorer.add(running, 'running-sessions');\n    }\n    if (labShell) {\n        addOpenTabsSessionManager(runningSessionManagers, translator, labShell);\n    }\n    addKernelRunningSessionManager(runningSessionManagers, translator, app);\n    // Rank has been chosen somewhat arbitrarily to give priority to the running\n    // sessions widget in the sidebar.\n    app.shell.add(running, 'left', { rank: 200 });\n    return runningSessionManagers;\n}\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { consoleIcon, fileIcon, notebookIcon } from '@jupyterlab/ui-components';\nimport { toArray } from '@lumino/algorithm';\n/**\n * Add the running kernel manager (notebooks & consoles) to the running panel.\n */\nexport function addKernelRunningSessionManager(managers, translator, app) {\n    const trans = translator.load('jupyterlab');\n    const manager = app.serviceManager.sessions;\n    const specsManager = app.serviceManager.kernelspecs;\n    function filterSessions(m) {\n        return !!((m.name || PathExt.basename(m.path)).indexOf('.') !== -1 || m.name);\n    }\n    managers.add({\n        name: trans.__('Kernels'),\n        running: () => {\n            return toArray(manager.running())\n                .filter(filterSessions)\n                .map(model => new RunningKernel(model));\n        },\n        shutdownAll: () => manager.shutdownAll(),\n        refreshRunning: () => manager.refreshRunning(),\n        runningChanged: manager.runningChanged,\n        shutdownLabel: trans.__('Shut Down'),\n        shutdownAllLabel: trans.__('Shut Down All'),\n        shutdownAllConfirmationText: trans.__('Are you sure you want to permanently shut down all running kernels?')\n    });\n    class RunningKernel {\n        constructor(model) {\n            this._model = model;\n        }\n        open() {\n            const { path, type } = this._model;\n            if (type.toLowerCase() === 'console') {\n                void app.commands.execute('console:open', { path });\n            }\n            else {\n                void app.commands.execute('docmanager:open', { path });\n            }\n        }\n        shutdown() {\n            return manager.shutdown(this._model.id);\n        }\n        icon() {\n            const { name, path, type } = this._model;\n            if ((name || PathExt.basename(path)).indexOf('.ipynb') !== -1) {\n                return notebookIcon;\n            }\n            else if (type.toLowerCase() === 'console') {\n                return consoleIcon;\n            }\n            return fileIcon;\n        }\n        label() {\n            return this._model.name || PathExt.basename(this._model.path);\n        }\n        labelTitle() {\n            const { kernel, path } = this._model;\n            let kernelName = kernel === null || kernel === void 0 ? void 0 : kernel.name;\n            if (kernelName && specsManager.specs) {\n                const spec = specsManager.specs.kernelspecs[kernelName];\n                kernelName = spec ? spec.display_name : 'unknown';\n            }\n            return trans.__('Path: %1\\nKernel: %2', path, kernelName);\n        }\n    }\n}\n//# sourceMappingURL=kernels.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { fileIcon, LabIcon } from '@jupyterlab/ui-components';\nimport { toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n/**\n * A class used to consolidate the signals used to rerender the open tabs section.\n */\nclass OpenTabsSignaler {\n    constructor(labShell) {\n        this._tabsChanged = new Signal(this);\n        this._widgets = [];\n        this._labShell = labShell;\n        this._labShell.layoutModified.connect(this._emitTabsChanged, this);\n    }\n    /**\n     * A signal that fires when the open tabs section should be rerendered.\n     */\n    get tabsChanged() {\n        return this._tabsChanged;\n    }\n    /**\n     * Add a widget to watch for title changing.\n     *\n     * @param widget A widget whose title may change.\n     */\n    addWidget(widget) {\n        widget.title.changed.connect(this._emitTabsChanged, this);\n        this._widgets.push(widget);\n    }\n    /**\n     * Emit the main signal that indicates the open tabs should be rerendered.\n     */\n    _emitTabsChanged() {\n        this._widgets.forEach(widget => {\n            widget.title.changed.disconnect(this._emitTabsChanged, this);\n        });\n        this._widgets = [];\n        this._tabsChanged.emit(void 0);\n    }\n}\n/**\n * Add the open tabs section to the running panel.\n *\n * @param managers - The IRunningSessionManagers used to register this section.\n * @param translator - The translator to use.\n * @param labShell - The ILabShell.\n */\nexport function addOpenTabsSessionManager(managers, translator, labShell) {\n    const signaler = new OpenTabsSignaler(labShell);\n    const trans = translator.load('jupyterlab');\n    managers.add({\n        name: trans.__('Open Tabs'),\n        running: () => {\n            return toArray(labShell.widgets('main')).map((widget) => {\n                signaler.addWidget(widget);\n                return new OpenTab(widget);\n            });\n        },\n        shutdownAll: () => {\n            toArray(labShell.widgets('main')).forEach((widget) => {\n                widget.close();\n            });\n        },\n        refreshRunning: () => {\n            return void 0;\n        },\n        runningChanged: signaler.tabsChanged,\n        shutdownLabel: trans.__('Close'),\n        shutdownAllLabel: trans.__('Close All'),\n        shutdownAllConfirmationText: trans.__('Are you sure you want to close all open tabs?')\n    });\n    class OpenTab {\n        constructor(widget) {\n            this._widget = widget;\n        }\n        open() {\n            labShell.activateById(this._widget.id);\n        }\n        shutdown() {\n            this._widget.close();\n        }\n        icon() {\n            const widgetIcon = this._widget.title.icon;\n            return widgetIcon instanceof LabIcon ? widgetIcon : fileIcon;\n        }\n        label() {\n            return this._widget.title.label;\n        }\n        labelTitle() {\n            let labelTitle;\n            if (this._widget instanceof DocumentWidget) {\n                labelTitle = this._widget.context.path;\n            }\n            else {\n                labelTitle = this._widget.title.label;\n            }\n            return labelTitle;\n        }\n    }\n}\n//# sourceMappingURL=opentabs.js.map"],"sourceRoot":""}