{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/json-extension/lib/component.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/json-extension/lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACyD;AACF;AACX;AACb;AACW;AACH;AACvC;AACA;AACA;AACO,wBAAwB,4CAAe;AAC9C;AACA;AACA,sBAAsB;AACtB;AACA;AACA,mBAAmB,QAAQ;AAC3B,2BAA2B,QAAQ;AACnC;AACA;AACA,+BAA+B,gBAAgB;AAC/C,aAAa;AACb;AACA;AACA;AACA,oDAAoD,mEAAc;AAClE;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB,SAAS,yBAAyB;AACrE,YAAY,gDAAmB,CAAC,iEAAU,GAAG,+JAA+J;AAC5M,YAAY,gDAAmB,CAAC,wDAAQ,GAAG;AAC3C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,gBAAgB,gDAAmB;AACnC;AACA;AACA;AACA,oEAAoE;AACpE,gBAAgB,gDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gDAAmB,UAAU,0BAA0B;AACnF,wBAAwB,gDAAmB,CAAC,0DAAS,GAAG,yCAAyC,4BAA4B,EAAE,KAAK,MAAM;AAC1I,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gDAAmB,UAAU,uBAAuB;AAChF,wBAAwB,gDAAmB,CAAC,0DAAS,GAAG,yCAAyC,4BAA4B,EAAE,KAAK,IAAI;AACxI,iBAAiB;AACjB;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,+DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AACA;AACA;AACA;AACgD;AACS;AAChB;AACV;AACO;AACE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO,2BAA2B,mDAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mEAAc;AAC9D;AACA,KAAK,iEAAe;AACpB,qBAAqB,sEAAoB;AACzC;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD,8DAA8D;AAC9D;AACA,YAAY,6CAAe,CAAC,gDAAmB,CAAC,iDAAS,GAAG,8DAA8D;AAC1H;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAA+B;AACvC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;AAC1B,iC","file":"node_modules_jupyterlab_json-extension_lib_index_js.4562242774763345490e.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { InputGroup } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport * as React from 'react';\nimport Highlight from 'react-highlighter';\nimport JSONTree from 'react-json-tree';\n/**\n * A component that renders JSON data as a collapsible tree.\n */\nexport class Component extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = { filter: '', value: '' };\n        this.timer = 0;\n        this.handleChange = (event) => {\n            const { value } = event.target;\n            this.setState({ value });\n            window.clearTimeout(this.timer);\n            this.timer = window.setTimeout(() => {\n                this.setState({ filter: value });\n            }, 300);\n        };\n    }\n    render() {\n        const translator = this.props.translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const { data, metadata } = this.props;\n        const root = metadata && metadata.root ? metadata.root : 'root';\n        const keyPaths = this.state.filter\n            ? filterPaths(data, this.state.filter, [root])\n            : [root];\n        return (React.createElement(\"div\", { className: \"container\" },\n            React.createElement(InputGroup, { className: \"filter\", type: \"text\", placeholder: trans.__('Filterâ€¦'), onChange: this.handleChange, value: this.state.value, rightIcon: \"ui-components:search\" }),\n            React.createElement(JSONTree, { data: data, collectionLimit: 100, theme: {\n                    extend: theme,\n                    valueLabel: 'cm-variable',\n                    valueText: 'cm-string',\n                    nestedNodeItemString: 'cm-comment'\n                }, invertTheme: false, keyPath: [root], getItemString: (type, data, itemType, itemString) => Array.isArray(data) ? (\n                // Always display array type and the number of items i.e. \"[] 2 items\".\n                React.createElement(\"span\", null,\n                    itemType,\n                    \" \",\n                    itemString)) : Object.keys(data).length === 0 ? (\n                // Only display object type when it's empty i.e. \"{}\".\n                React.createElement(\"span\", null, itemType)) : (null // Upstream typings don't accept null, but it should be ok\n                ), labelRenderer: ([label, type]) => {\n                    // let className = 'cm-variable';\n                    // if (type === 'root') {\n                    //   className = 'cm-variable-2';\n                    // }\n                    // if (type === 'array') {\n                    //   className = 'cm-variable-2';\n                    // }\n                    // if (type === 'Object') {\n                    //   className = 'cm-variable-3';\n                    // }\n                    return (React.createElement(\"span\", { className: \"cm-keyword\" },\n                        React.createElement(Highlight, { search: this.state.filter, matchStyle: { backgroundColor: 'yellow' } }, `${label}: `)));\n                }, valueRenderer: raw => {\n                    let className = 'cm-string';\n                    if (typeof raw === 'number') {\n                        className = 'cm-number';\n                    }\n                    if (raw === 'true' || raw === 'false') {\n                        className = 'cm-keyword';\n                    }\n                    return (React.createElement(\"span\", { className: className },\n                        React.createElement(Highlight, { search: this.state.filter, matchStyle: { backgroundColor: 'yellow' } }, `${raw}`)));\n                }, shouldExpandNode: (keyPath, data, level) => metadata && metadata.expanded\n                    ? true\n                    : keyPaths.join(',').includes(keyPath.join(',')) })));\n    }\n}\n// Provide an invalid theme object (this is on purpose!) to invalidate the\n// react-json-tree's inline styles that override CodeMirror CSS classes\nconst theme = {\n    scheme: 'jupyter',\n    base00: 'invalid',\n    base01: 'invalid',\n    base02: 'invalid',\n    base03: 'invalid',\n    base04: 'invalid',\n    base05: 'invalid',\n    base06: 'invalid',\n    base07: 'invalid',\n    base08: 'invalid',\n    base09: 'invalid',\n    base0A: 'invalid',\n    base0B: 'invalid',\n    base0C: 'invalid',\n    base0D: 'invalid',\n    base0E: 'invalid',\n    base0F: 'invalid',\n    author: 'invalid'\n};\nfunction objectIncludes(data, query) {\n    return JSON.stringify(data).includes(query);\n}\nfunction filterPaths(data, query, parent = ['root']) {\n    if (JSONExt.isArray(data)) {\n        return data.reduce((result, item, index) => {\n            if (item && typeof item === 'object' && objectIncludes(item, query)) {\n                return [\n                    ...result,\n                    [index, ...parent].join(','),\n                    ...filterPaths(item, query, [index, ...parent])\n                ];\n            }\n            return result;\n        }, []);\n    }\n    if (JSONExt.isObject(data)) {\n        return Object.keys(data).reduce((result, key) => {\n            const item = data[key];\n            if (item &&\n                typeof item === 'object' &&\n                (key.includes(query) || objectIncludes(item, query))) {\n                return [\n                    ...result,\n                    [key, ...parent].join(','),\n                    ...filterPaths(item, query, [key, ...parent])\n                ];\n            }\n            return result;\n        }, []);\n    }\n    return [];\n}\n//# sourceMappingURL=component.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module json-extension\n */\nimport { Printing } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Component } from './component';\n/**\n * The CSS class to add to the JSON Widget.\n */\nconst CSS_CLASS = 'jp-RenderedJSON';\n/**\n * The MIME type for JSON.\n */\nexport const MIME_TYPE = 'application/json';\n/**\n * A renderer for JSON data.\n */\nexport class RenderedJSON extends Widget {\n    /**\n     * Create a new widget for rendering JSON.\n     */\n    constructor(options) {\n        super();\n        this.addClass(CSS_CLASS);\n        this.addClass('CodeMirror');\n        this.addClass('cm-s-jupyter');\n        this._mimeType = options.mimeType;\n        this.translator = options.translator || nullTranslator;\n    }\n    [Printing.symbol]() {\n        return () => Printing.printWidget(this);\n    }\n    /**\n     * Render JSON into this widget's node.\n     */\n    renderModel(model) {\n        const data = (model.data[this._mimeType] || {});\n        const metadata = (model.metadata[this._mimeType] || {});\n        return new Promise((resolve, reject) => {\n            ReactDOM.render(React.createElement(Component, { data: data, metadata: metadata, translator: this.translator }), this.node, () => {\n                resolve();\n            });\n        });\n    }\n    /**\n     * Called before the widget is detached from the DOM.\n     */\n    onBeforeDetach(msg) {\n        // Unmount the component so it can tear down.\n        ReactDOM.unmountComponentAtNode(this.node);\n    }\n}\n/**\n * A mime renderer factory for JSON data.\n */\nexport const rendererFactory = {\n    safe: true,\n    mimeTypes: [MIME_TYPE],\n    createRenderer: options => new RenderedJSON(options)\n};\nconst extensions = [\n    {\n        id: '@jupyterlab/json-extension:factory',\n        rendererFactory,\n        rank: 0,\n        dataType: 'json',\n        documentWidgetFactoryOptions: {\n            name: 'JSON',\n            primaryFileType: 'json',\n            fileTypes: ['json', 'notebook', 'geojson'],\n            defaultFor: ['json']\n        }\n    }\n];\nexport default extensions;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}