{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/dummyconnector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/handler.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/kernelconnector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/contextconnector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/connector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/tokens.js"],"names":["DummyConnector","DataConnector","fetch","_","Promise","reject","COMPLETER_ENABLED_CLASS","COMPLETER_ACTIVE_CLASS","CompletionHandler","constructor","options","this","_editor","_enabled","_pending","_isDisposed","completer","selected","connect","onCompletionSelected","visibilityChanged","onVisibilityChanged","_connector","connector","newValue","editor","isDisposed","model","host","classList","remove","selections","changed","disconnect","onSelectionsChanged","value","onTextChanged","reset","dispose","Signal","invoke","MessageLoop","Msg","InvokeRequest","processMessage","msg","type","onInvokeRequest","getState","position","text","lineHeight","charWidth","line","column","val","patch","createPatch","start","end","sharedModel","updateSource","original","_makeRequest","getCursorPosition","catch","reason","console","warn","subsetMatch","getLine","getSelection","slice","match","add","handleCursorChange","handleTextChange","isHidden","focus","Error","offset","Text","getOffsetAt","pending","state","request","_isICompletionItemsConnector","then","reply","_validate","_onFetchItemsReply","_onFailure","_onReply","responseType","ICompletionItemsResponseType","_updateModel","cursor","matches","matchSet","Set","forEach","push","types","metadata","_jupyter_types_experimental","typeMap","item","has","setOptions","setCompletionItems","items","Message","KernelConnector","super","_session","session","_a","kernel","contents","code","cursor_pos","response","requestComplete","content","status","cursor_start","cursor_end","ContextConnector","resolve","Private","contextHint","token","getTokenForPosition","completionList","getTokens","filter","t","indexOf","getCompletionTokens","map","Array","from","length","CompletionConnector","_kernel","_context","all","context","mergeReplies","memo","reduce","acc","Object","assign","CompleterModel","_current","_cursor","_completionItems","_options","_original","_query","_subsetMatch","_typeMap","_orderedTypes","_stateChanged","JSONExt","_reset","emit","undefined","current","originalLine","split","currentLine","query","substring","ending","lastIndexOf","completionItems","_markup","findOrderedCompletionItemTypes","_filter","iter","orderedTypes","values","toArray","findOrderedTypes","change","cursorDelta","inputDelta","last","hard","results","index","label","prefix","StringExt","marked","indices","mark","documentation","join","insertText","score","sort","scoreCmp2","x","option","raw","scoreCmp","result","KNOWN_TYPES","KNOWN_MAP","a","b","delta","localeCompare","_b","_c","newTypeSet","includes","newTypes","concat","filtered","keys","key","ITEM_CLASS","ACTIVE_CLASS","USE_CAPTURE","Completer","Widget","node","document","createElement","_activeIndex","_model","_resetFlag","_selected","_visibilityChanged","_indexChanged","_lastSubsetMatch","_renderer","renderer","defaultRenderer","addClass","stateChanged","onModelStateChanged","handleEvent","event","_evtKeydown","_evtMousedown","_evtScroll","selectActive","active","querySelector","getAttribute","onAfterAttach","addEventListener","onBeforeDetach","removeEventListener","isAttached","update","onUpdateRequest","hide","completionItemList","_createCompletionItemNode","_createIItemNode","querySelectorAll","docPanel","className","appendChild","_updateDocPanel","_populateSubset","show","_setGeometry","textContent","ul","createCompletionItemNode","li","createItemNode","_cycle","direction","boxHeight","getBoundingClientRect","height","itemHeight","pageLength","Math","floor","min","max","ElementExt","contains","target","keyCode","preventDefault","stopPropagation","stopImmediatePropagation","populated","shiftKey","cycle","keyCodeMap","nonstandardClick","documentElement","parentElement","requestAnimationFrame","subset","commonSubset","itemValues","getPositionAt","anchor","getCoordinateForPosition","style","window","getComputedStyle","borderLeft","parseInt","borderLeftWidth","paddingLeft","HoverBox","maxHeight","minHeight","horizontal","privilege","setAttribute","activeItem","createDocumentationNode","Renderer","baseNode","_createBaseNode","deprecated","_constructNode","_createMatchNode","icon","pre","matchNode","innerHTML","defaultSanitizer","allowedTags","typesExist","iconNode","element","typeNode","toLowerCase","colorIndex","toString","dummyNode","title","typeExtendedNode","toLocaleLowerCase","dummyTypeExtendedNode","len","strlen","i","ch","j","attr","button","altKey","ctrlKey","metaKey","ICompletionManager","Token"],"mappings":"gWAQO,MAAMA,UAAuB,EAAAC,cAChCC,MAAMC,GACF,OAAOC,QAAQC,OAAO,0FCD9B,MAAMC,EAA0B,2BAI1BC,EAAyB,0BAIxB,MAAMC,EAITC,YAAYC,GACRC,KAAKC,QAAU,KACfD,KAAKE,UAAW,EAChBF,KAAKG,SAAW,EAChBH,KAAKI,aAAc,EACnBJ,KAAKK,UAAYN,EAAQM,UACzBL,KAAKK,UAAUC,SAASC,QAAQP,KAAKQ,qBAAsBR,MAC3DA,KAAKK,UAAUI,kBAAkBF,QAAQP,KAAKU,oBAAqBV,MACnEA,KAAKW,WAAaZ,EAAQa,UAY9B,gBACI,MAAI,iBAAkBZ,KAAKW,WAChB,IAAItB,EAERW,KAAKW,WAEhB,cAAcC,GACVZ,KAAKW,WAAaC,EAKtB,aACI,OAAOZ,KAAKC,QAEhB,WAAWY,GACP,GAAIA,IAAab,KAAKC,QAClB,OAEJ,IAAIa,EAASd,KAAKC,QAElB,GAAIa,IAAWA,EAAOC,WAAY,CAC9B,MAAMC,EAAQF,EAAOE,MACrBF,EAAOG,KAAKC,UAAUC,OAAOxB,GAC7BmB,EAAOG,KAAKC,UAAUC,OAAOvB,GAC7BoB,EAAMI,WAAWC,QAAQC,WAAWtB,KAAKuB,oBAAqBvB,MAC9DgB,EAAMQ,MAAMH,QAAQC,WAAWtB,KAAKyB,cAAezB,MAOvD,GAJAA,KAAKK,UAAUqB,QACf1B,KAAKK,UAAUS,OAASD,EAExBC,EAASd,KAAKC,QAAUY,EACpBC,EAAQ,CACR,MAAME,EAAQF,EAAOE,MACrBhB,KAAKE,UAAW,EAChBc,EAAMI,WAAWC,QAAQd,QAAQP,KAAKuB,oBAAqBvB,MAC3DgB,EAAMQ,MAAMH,QAAQd,QAAQP,KAAKyB,cAAezB,MAEhDA,KAAKuB,uBAMb,iBACI,OAAOvB,KAAKI,YAKhBuB,UACQ3B,KAAKe,aAGTf,KAAKI,aAAc,EACnB,EAAAwB,OAAA,UAAiB5B,OAKrB6B,SACI,EAAAC,YAAA,YAAwB9B,KAAMH,EAAkBkC,IAAIC,eAKxDC,eAAeC,GACX,OAAQA,EAAIC,MACR,KAAKtC,EAAkBkC,IAAIC,cAAcG,KACrCnC,KAAKoC,gBAAgBF,IASjCG,SAASvB,EAAQwB,GACb,MAAO,CACHC,KAAMzB,EAAOE,MAAMQ,MAAMe,KACzBC,WAAY1B,EAAO0B,WACnBC,UAAW3B,EAAO2B,UAClBC,KAAMJ,EAASI,KACfC,OAAQL,EAASK,QAMzBnC,qBAAqBH,EAAWuC,GAC5B,MAAM5B,EAAQX,EAAUW,MAClBF,EAASd,KAAKC,QACpB,IAAKa,IAAWE,EACZ,OAEJ,MAAM6B,EAAQ7B,EAAM8B,YAAYF,GAChC,IAAKC,EACD,OAEJ,MAAM,MAAEE,EAAK,IAAEC,EAAG,MAAExB,GAAUqB,EAE9B/B,EAAOE,MAAMiC,YAAYC,aAAaH,EAAOC,EAAKxB,GAKtDY,gBAAgBF,GAEZ,IAAKlC,KAAKK,UAAUW,MAChB,OAGJ,GAAIhB,KAAKK,UAAUW,MAAMmC,SACrB,OAEJ,MAAMrC,EAASd,KAAKC,QAChBa,GACAd,KAAKoD,aAAatC,EAAOuC,qBAAqBC,OAAMC,IAChDC,QAAQC,KAAK,wBAAyBF,MA2BlDhC,sBACI,MAAMP,EAAQhB,KAAKK,UAAUW,MACvBF,EAASd,KAAKC,QACpB,IAAKa,EACD,OAEJ,MAAMG,EAAOH,EAAOG,KAEpB,IAAKD,EAGD,OAFAhB,KAAKE,UAAW,OAChBe,EAAKC,UAAUC,OAAOxB,GAK1B,GAAIqB,EAAM0C,YACN,OAEJ,MAAMpB,EAAWxB,EAAOuC,oBAClBX,EAAO5B,EAAO6C,QAAQrB,EAASI,MACrC,IAAKA,EAID,OAHA1C,KAAKE,UAAW,EAChBc,EAAMU,OAAM,QACZT,EAAKC,UAAUC,OAAOxB,GAG1B,MAAM,MAAEoD,EAAK,IAAEC,GAAQlC,EAAO8C,eAE9B,OAAIb,EAAMJ,SAAWK,EAAIL,QAAUI,EAAML,OAASM,EAAIN,MAOlDA,EAAKmB,MAAM,EAAGvB,EAASK,QAAQmB,MAAM,UANrC9D,KAAKE,UAAW,EAChBc,EAAMU,OAAM,QACZT,EAAKC,UAAUC,OAAOxB,KAWrBK,KAAKE,WACNF,KAAKE,UAAW,EAChBe,EAAKC,UAAU6C,IAAIpE,SAGvBqB,EAAMgD,mBAAmBhE,KAAKqC,SAASvB,EAAQA,EAAOuC,uBAK1D5B,gBACI,MAAMT,EAAQhB,KAAKK,UAAUW,MAC7B,IAAKA,IAAUhB,KAAKE,SAChB,OAGJ,MAAMY,EAASd,KAAKc,OACpB,IAAKA,EACD,OAEJ,MAAM,MAAEiC,EAAK,IAAEC,GAAQlC,EAAO8C,eAC1Bb,EAAMJ,SAAWK,EAAIL,QAAUI,EAAML,OAASM,EAAIN,MAItD1B,EAAMiD,iBAAiBjE,KAAKqC,SAASvB,EAAQA,EAAOuC,sBAKxD3C,oBAAoBL,GAEZA,EAAUU,YAAcV,EAAU6D,SAC9BlE,KAAKC,UACLD,KAAKC,QAAQgB,KAAKC,UAAUC,OAAOvB,GACnCI,KAAKC,QAAQkE,SAKjBnE,KAAKC,SACLD,KAAKC,QAAQgB,KAAKC,UAAU6C,IAAInE,GAMxCwD,aAAad,GACT,MAAMxB,EAASd,KAAKc,OACpB,IAAKA,EACD,OAAOrB,QAAQC,OAAO,IAAI0E,MAAM,qBAEpC,MAAM7B,EAAOzB,EAAOE,MAAMQ,MAAMe,KAC1B8B,EAAS,EAAAC,KAAA,mBAAwBxD,EAAOyD,YAAYjC,GAAWC,GAC/DiC,IAAYxE,KAAKG,SACjBsE,EAAQzE,KAAKqC,SAASvB,EAAQwB,GAC9BoC,EAAU,CAAEnC,OAAM8B,UACxB,OAAIrE,KAAK2E,6BAA6B3E,KAAKW,YAChCX,KAAKW,WACPpB,MAAMmF,GACNE,MAAKC,IAEN,GADA7E,KAAK8E,UAAUN,EAASE,IACnBG,EACD,MAAM,IAAIT,MAAM,oBAAoBM,KAExC1E,KAAK+E,mBAAmBN,EAAOI,MAE9BvB,OAAM9D,IACPQ,KAAKgF,gBAGNhF,KAAKW,WACPpB,MAAMmF,GACNE,MAAKC,IAEN,GADA7E,KAAK8E,UAAUN,EAASE,IACnBG,EACD,MAAM,IAAIT,MAAM,oBAAoBM,KAExC1E,KAAKiF,SAASR,EAAOI,MAEpBvB,OAAM9D,IACPQ,KAAKgF,gBAGbL,6BAA6B/D,GACzB,OAAQA,EACHsE,eAAiBrF,EAAkBsF,6BAE5CL,UAAUN,EAASE,GACf,GAAI1E,KAAKe,WACL,MAAM,IAAIqD,MAAM,uBAGpB,GAAII,IAAYxE,KAAKG,SACjB,MAAM,IAAIiE,MAAM,yCAMxBgB,aAAaX,EAAO1B,EAAOC,GACvB,MAAMhC,EAAQhB,KAAKK,UAAUW,MACvBuB,EAAOkC,EAAMlC,KACnB,OAAKvB,GAILA,EAAMmC,SAAWsB,EAEjBzD,EAAMqE,OAAS,CACXtC,MAAO,EAAAuB,KAAA,mBAAwBvB,EAAOR,GACtCS,IAAK,EAAAsB,KAAA,mBAAwBtB,EAAKT,IAE/BvB,GATI,KAkBfiE,SAASR,EAAOI,GACZ,MAAM7D,EAAQhB,KAAKoF,aAAaX,EAAOI,EAAM9B,MAAO8B,EAAM7B,KAC1D,IAAKhC,EACD,OAGJ,MAAMsE,EAAU,GACVC,EAAW,IAAIC,IAAIX,EAAMS,SAAW,IACtCT,EAAMS,SACNC,EAASE,SAAQ3B,IACbwB,EAAQI,KAAK5B,MASrB,MACM6B,GADWd,EAAMe,UAAY,IACZC,4BACjBC,EAAU,GACZH,GACAA,EAAMF,SAASM,IAIX,MAAMxD,EAAOwD,EAAKxD,KACZJ,EAAO4D,EAAK5D,KACdoD,EAASS,IAAIzD,IAAkB,cAATJ,IACtB2D,EAAQvD,GAAQJ,MAK5BnB,EAAMiF,WAAWX,EAASQ,GAS9Bf,mBAAmBN,EAAOI,GACtB,MAAM7D,EAAQhB,KAAKoF,aAAaX,EAAOI,EAAM9B,MAAO8B,EAAM7B,KACrDhC,GAGDA,EAAMkF,oBACNlF,EAAMkF,mBAAmBrB,EAAMsB,OAMvCnB,aACI,MAAMhE,EAAQhB,KAAKK,UAAUW,MACzBA,GACAA,EAAMU,OAAM,KAOxB,SAAW7B,GAKP,IAAIkC,EAJJlC,EAAkBsF,6BAA+B,wBAKjD,SAAWpD,GAKPA,EAAIC,cAAgB,IAAI,EAAAoE,QAAQ,kBALpC,CAOGrE,EAAMlC,EAAkBkC,MAAQlC,EAAkBkC,IAAM,KAb/D,CAcGlC,IAAsBA,EAAoB,KC1atC,MAAMwG,UAAwB,EAAA/G,cAMjCQ,YAAYC,GACRuG,QACAtG,KAAKuG,SAAWxG,EAAQyG,QAO5B,YAAY9B,GACR,IAAI+B,EACJ,MAAMC,EAAkC,QAAxBD,EAAKzG,KAAKuG,gBAA6B,IAAPE,OAAgB,EAASA,EAAGC,OAC5E,IAAKA,EACD,MAAM,IAAItC,MAAM,qCAEpB,MAAMuC,EAAW,CACbC,KAAMlC,EAAQnC,KACdsE,WAAYnC,EAAQL,QAGlByC,SADYJ,EAAOK,gBAAgBJ,IACpBK,QACrB,GAAwB,OAApBF,EAASG,OACT,MAAM,IAAI7C,MAAM,mDAEpB,MAAO,CACHrB,MAAO+D,EAASI,aAChBlE,IAAK8D,EAASK,WACd7B,QAASwB,EAASxB,QAClBM,SAAUkB,EAASlB,WClCxB,MAAMwB,UAAyB,EAAA9H,cAMlCQ,YAAYC,GACRuG,QACAtG,KAAKC,QAAUF,EAAQe,OAO3BvB,MAAMmF,GACF,OAAK1E,KAAKC,QAGH,IAAIR,SAAQ4H,IACfA,EAAQC,EAAQC,YAAYvH,KAAKC,aAH1BR,QAAQC,OAAO,cAUlC,IAAI4H,ECCA,GDAJ,SAAWA,GAuBPA,EAAQC,YAlBR,SAAqBzG,GAEjB,MAAMuE,EAASvE,EAAOuC,oBAChBmE,EAAQ1G,EAAO2G,oBAAoBpC,GAKnCqC,EAeV,SAA6BF,EAAO1G,GAIhC,OAHmBA,EAAO6G,YAGRC,QAAOC,GAAsC,IAAjCA,EAAErG,MAAMsG,QAAQN,EAAMhG,QAAgBqG,EAAErG,QAAUgG,EAAMhG,QAtBpEuG,CAAoBP,EAAO1G,GAGZ8G,QAAOC,GAAKA,EAAE1F,OAAM6F,KAAIH,GAAKA,EAAErG,QAE1D8D,EAAU2C,MAAMC,KAAK,IAAI1C,IAAIkC,IACnC,MAAO,CACH3E,MAAOyE,EAAMnD,OACbrB,IAAKwE,EAAMnD,OAASmD,EAAMhG,MAAM2G,OAChC7C,UACAM,SAAU,KApBtB,CAkCG0B,IAAYA,EAAU,KC5DlB,MAAMc,UAA4B,EAAA9I,cAMrCQ,YAAYC,GACRuG,QACAtG,KAAKqI,QAAU,IAAIhC,EAAgBtG,GACnCC,KAAKsI,SAAW,IAAIlB,EAAiBrH,GAOzCR,MAAMmF,GACF,OAAOjF,QAAQ8I,IAAI,CACfvI,KAAKqI,QAAQ9I,MAAMmF,GACnB1E,KAAKsI,SAAS/I,MAAMmF,KACrBE,MAAK,EAAE8B,EAAQ8B,KAAa,EAAQC,aAAa/B,EAAQ8B,OAOpE,SAAWlB,GAuCPA,EAAQmB,aAvBR,SAAsB/B,EAAQ8B,GAE1B,GAA8B,IAA1B9B,EAAOpB,QAAQ6C,OACf,OAAOK,EAEN,GAA+B,IAA3BA,EAAQlD,QAAQ6C,OACrB,OAAOzB,EAGX,MAAMpB,EAAUoB,EAAOpB,QAAQzB,QAEzB6E,EAAOpD,EAAQqD,QAAO,CAACC,EAAKhG,KAC9BgG,EAAIhG,GAAO,KACJgG,IACR,IAOH,OALAJ,EAAQlD,QAAQG,SAAQ3B,IACdA,KAAS4E,GACXpD,EAAQI,KAAK5B,MAGd+E,OAAOC,OAAOD,OAAOC,OAAO,GAAIpC,GAAS,CAAEpB,aArC1D,CAwCG,IAAY,EAAU,K,IC8UrB,E,qBAjZG,MAAMyD,EACTjJ,cACIE,KAAKgJ,SAAW,KAChBhJ,KAAKiJ,QAAU,KACfjJ,KAAKI,aAAc,EACnBJ,KAAKkJ,iBAAmB,GACxBlJ,KAAKmJ,SAAW,GAChBnJ,KAAKoJ,UAAY,KACjBpJ,KAAKqJ,OAAS,GACdrJ,KAAKsJ,cAAe,EACpBtJ,KAAKuJ,SAAW,GAChBvJ,KAAKwJ,cAAgB,GACrBxJ,KAAKyJ,cAAgB,IAAI,EAAA7H,OAAO5B,MAKpC,mBACI,OAAOA,KAAKyJ,cAKhB,eACI,OAAOzJ,KAAKoJ,UAEhB,aAAavI,GACSb,KAAKoJ,YAAcvI,GAChCb,KAAKoJ,WACFvI,GACA,EAAA6I,QAAA,UAAkB7I,EAAUb,KAAKoJ,aAIzCpJ,KAAK2J,SAEL3J,KAAKgJ,SAAWhJ,KAAKoJ,UAAYvI,EACjCb,KAAKyJ,cAAcG,UAAKC,IAK5B,cACI,OAAO7J,KAAKgJ,SAEhB,YAAYnI,GAGR,GAFkBb,KAAKgJ,WAAanI,GAC/Bb,KAAKgJ,UAAYnI,GAAY,EAAA6I,QAAA,UAAkB7I,EAAUb,KAAKgJ,UAE/D,OAEJ,MAAM7F,EAAWnD,KAAKoJ,UAGtB,IAAKjG,EACD,OAEJ,MAAMkC,EAASrF,KAAKiJ,QAIpB,IAAK5D,EACD,OAEJ,MAAMyE,EAAW9J,KAAKgJ,SAAWnI,EACjC,IAAKiJ,EAED,YADA9J,KAAKyJ,cAAcG,UAAKC,GAG5B,MAAME,EAAe5G,EAASZ,KAAKyH,MAAM,MAAM7G,EAAST,MAClDuH,EAAcH,EAAQvH,KAAKyH,MAAM,MAAMF,EAAQpH,MAGrD,IAAK1C,KAAKsJ,cAAgBW,EAAY9B,OAAS4B,EAAa5B,OAExD,YADAnI,KAAK0B,OAAM,GAGf,MAAM,MAAEqB,EAAK,IAAEC,GAAQqC,EAEvB,IAAI6E,EAAQJ,EAAQvH,KAAK4H,UAAUpH,GAEnC,MAAMqH,EAASjH,EAASZ,KAAK4H,UAAUnH,GACvCkH,EAAQA,EAAMC,UAAU,EAAGD,EAAMG,YAAYD,IAC7CpK,KAAKqJ,OAASa,EACdlK,KAAKyJ,cAAcG,UAAKC,GAK5B,aACI,OAAO7J,KAAKiJ,QAEhB,WAAWpI,GAGFb,KAAKmD,WAGVnD,KAAKiJ,QAAUpI,GAKnB,YACI,OAAOb,KAAKqJ,OAEhB,UAAUxI,GACNb,KAAKqJ,OAASxI,EAKlB,kBACI,OAAOb,KAAKsJ,aAEhB,gBAAgBzI,GACZb,KAAKsJ,aAAezI,EAKxB,iBACI,OAAOb,KAAKI,YAKhBuB,UAEQ3B,KAAKI,cAGTJ,KAAKI,aAAc,EACnB,EAAAwB,OAAA,UAAiB5B,OAQrBsK,kBACI,IAAIJ,EAAQlK,KAAKqJ,OACjB,OAAIa,EACOlK,KAAKuK,QAAQL,GAEjBlK,KAAKkJ,iBAMhBhD,mBAAmBrF,GACX,EAAA6I,QAAA,UAAkB7I,EAAUb,KAAKkJ,oBAGrClJ,KAAKkJ,iBAAmBrI,EACxBb,KAAKwJ,cAAgB,EAAQgB,+BAA+BxK,KAAKkJ,kBACjElJ,KAAKyJ,cAAcG,UAAKC,IAS5B1D,QACI,OAAOnG,KAAKyK,UAKhB1K,UACI,OAAO,IAAA2K,MAAK1K,KAAKmJ,UAYrBrD,UACI,OAAO9F,KAAKuJ,SAehBoB,eACI,OAAO3K,KAAKwJ,cAKhBvD,WAAWpF,EAAUiF,GACjB,MAAM8E,GAAS,IAAAC,SAAQhK,GAAY,IAC7B8E,EAAQG,GAAW,GACrB,EAAA4D,QAAA,UAAkBkB,EAAQ5K,KAAKmJ,WAC/B,EAAAO,QAAA,UAAkB/D,EAAO3F,KAAKuJ,YAG9BqB,EAAOzC,QACPnI,KAAKmJ,SAAWyB,EAChB5K,KAAKuJ,SAAW5D,EAChB3F,KAAKwJ,cAAgB,EAAQsB,iBAAiBnF,KAG9C3F,KAAKmJ,SAAW,GAChBnJ,KAAKuJ,SAAW,GAChBvJ,KAAKwJ,cAAgB,IAEzBxJ,KAAKyJ,cAAcG,UAAKC,IAK5B7F,mBAAmB+G,GAEf,IAAK/K,KAAKoJ,UACN,OAEJ,MAAM,OAAEzG,EAAM,KAAED,GAASqI,GACnB,QAAEjB,EAAO,SAAE3G,GAAanD,KAC9B,IAAKmD,EACD,OAIJ,GAAIT,IAASS,EAAST,KAElB,YADA1C,KAAK0B,OAAM,GAKf,GAAIiB,EAASQ,EAASR,OAElB,YADA3C,KAAK0B,OAAM,GAGf,MAAM,OAAE2D,GAAWrF,KACnB,IAAKqF,IAAWyE,EACZ,OAIJ,MAAMkB,EAAc3F,EAAOrC,IAAMqC,EAAOtC,MAClCgH,EAAe5G,EAASZ,KAAKyH,MAAM,MAAM7G,EAAST,MAElDuI,EADcnB,EAAQvH,KAAKyH,MAAM,MAAMF,EAAQpH,MACtByF,OAAS4B,EAAa5B,OACjDxF,EAASQ,EAASR,OAASqI,EAAcC,GACzCjL,KAAK0B,OAAM,GAOnBuC,iBAAiB8G,GACb,MAAM5H,EAAWnD,KAAKoJ,UAEtB,IAAKjG,EACD,OAEJ,MAAM,KAAEZ,EAAI,OAAEI,EAAM,KAAED,GAASqI,EACzBG,EAAO3I,EAAKyH,MAAM,MAAMtH,GAAMC,EAAS,GAGxCuI,GAAQA,EAAKpH,MAAM,OAAUiH,EAAOpI,QAAUQ,EAASR,OACxD3C,KAAK8J,QAAUiB,EAInB/K,KAAK0B,OAAM,GASfoB,YAAYD,GACR,MAAMM,EAAWnD,KAAKoJ,UAChB/D,EAASrF,KAAKiJ,QACda,EAAU9J,KAAKgJ,SACrB,IAAK7F,IAAakC,IAAWyE,EACzB,OAEJ,IAAI,MAAE/G,EAAK,IAAEC,GAAQqC,EAIrB,OADArC,GAAa8G,EAAQvH,KAAK4F,OAAShF,EAASZ,KAAK4F,OAC1C,CAAEpF,QAAOC,MAAKxB,MAAOqB,GAOhCnB,MAAMyJ,GAAO,IAIJA,GAAQnL,KAAKsJ,eAGlBtJ,KAAK2J,SACL3J,KAAKyJ,cAAcG,UAAKC,IAM5BU,QAAQL,GACJ,MAAM/D,EAAQnG,KAAKkJ,iBACnB,IAAIkC,EAAU,GACd,IAAK,IAAIrF,KAAQI,EAAO,CAKpB,MAAMkF,EAAQtF,EAAKuF,MAAMxD,QAAQ,KAC3ByD,EAASF,GAAS,EAAItF,EAAKuF,MAAMnB,UAAU,EAAGkB,GAAStF,EAAKuF,MAClE,IAAIxH,EAAQ,EAAA0H,UAAA,kBAA4BD,EAAQrB,GAEhD,GAAIpG,EAAO,CAEP,IAAI2H,EAAS,EAAAD,UAAA,UAAoBzF,EAAKuF,MAAOxH,EAAM4H,QAAS,EAAQC,MACpEP,EAAQ1F,KAAKmD,OAAOC,OAAOD,OAAOC,OAAO,GAAI/C,GAAO,CAEhD6F,cAAe7F,EAAK6F,cAAeN,MAAOG,EAAOI,KAAK,IAGtDC,WAAY/F,EAAK+F,WAAa/F,EAAK+F,WAAa/F,EAAKuF,MAAOS,MAAOjI,EAAMiI,UASrF,OANAX,EAAQY,KAAK,EAAQC,WAGrBb,EAAQ3F,SAAQyG,WACLA,EAAEH,SAENX,EAKXX,UACI,MAAM1K,EAAUC,KAAKmJ,UAAY,GAC3Be,EAAQlK,KAAKqJ,OACnB,IAAKa,EACD,OAAO,IAAAlC,KAAIjI,GAASoM,IAAU,CAAGC,IAAKD,EAAQ5J,KAAM4J,MAExD,MAAMf,EAAU,GAChB,IAAK,MAAMe,KAAUpM,EAAS,CAC1B,MAAM+D,EAAQ,EAAA0H,UAAA,kBAA4BW,EAAQjC,GAClD,GAAIpG,EAAO,CACP,MAAM2H,EAAS,EAAAD,UAAA,UAAoBW,EAAQrI,EAAM4H,QAAS,EAAQC,MAClEP,EAAQ1F,KAAK,CACT0G,IAAKD,EACLJ,MAAOjI,EAAMiI,MACbxJ,KAAMkJ,EAAOI,KAAK,OAI9B,OAAO,IAAA7D,KAAIoD,EAAQY,KAAK,EAAQK,WAAWC,IAAU,CACjD/J,KAAM+J,EAAO/J,KACb6J,IAAKE,EAAOF,QAMpBzC,SACI3J,KAAKgJ,SAAW,KAChBhJ,KAAKiJ,QAAU,KACfjJ,KAAKkJ,iBAAmB,GACxBlJ,KAAKmJ,SAAW,GAChBnJ,KAAKoJ,UAAY,KACjBpJ,KAAKqJ,OAAS,GACdrJ,KAAKsJ,cAAe,EACpBtJ,KAAKuJ,SAAW,GAChBvJ,KAAKwJ,cAAgB,KAO7B,SAAWlC,GAIP,MAAMiF,EAAc,CAAC,WAAY,WAAY,QAAS,SAAU,WAI1DC,EAAYD,EAAY5D,QAAO,CAACC,EAAKzG,KACvCyG,EAAIzG,GAAQ,KACLyG,IACR,IAOHtB,EAAQqE,KAHR,SAAcnK,GACV,MAAO,SAASA,YAiBpB8F,EAAQ+E,SAPR,SAAkBI,EAAGC,GACjB,MAAMC,EAAQF,EAAEV,MAAQW,EAAEX,MAC1B,OAAc,IAAVY,EACOA,EAEJF,EAAEL,IAAIQ,cAAcF,EAAEN,MAkBjC9E,EAAQ2E,UARR,SAAmBQ,EAAGC,GAClB,IAAIjG,EAAIoG,EAAIC,EACZ,MAAMH,EAAQF,EAAEV,MAAQW,EAAEX,MAC1B,OAAc,IAAVY,EACOA,EAE0I,QAA7IG,EAA6B,QAAvBrG,EAAKgG,EAAEX,kBAA+B,IAAPrF,OAAgB,EAASA,EAAGmG,cAAsC,QAAvBC,EAAKH,EAAEZ,kBAA+B,IAAPe,EAAgBA,EAAK,WAAwB,IAAPC,EAAgBA,EAAK,GA2BtLxF,EAAQkD,+BAbR,SAAwCrE,GACpC,MAAM4G,EAAa,IAAIvH,IACvBW,EAAMV,SAAQM,KACNA,EAAK5D,MACJoK,EAAYS,SAASjH,EAAK5D,OAC1B4K,EAAW/G,IAAID,EAAK5D,OACrB4K,EAAWhJ,IAAIgC,EAAK5D,SAG5B,MAAM8K,EAAWhF,MAAMC,KAAK6E,GAE5B,OADAE,EAASjB,MAAK,CAACS,EAAGC,IAAMD,EAAEG,cAAcF,KACjCH,EAAYW,OAAOD,IAoB9B3F,EAAQwD,iBAPR,SAA0BhF,GACtB,MAAMqH,EAAWtE,OAAOuE,KAAKtH,GACxBkC,KAAIqF,GAAOvH,EAAQuH,KACnBzF,QAAQpG,KAAYA,KAAWA,KAASgL,KACxCR,MAAK,CAACS,EAAGC,IAAMD,EAAEG,cAAcF,KACpC,OAAOH,EAAYW,OAAOC,IA1FlC,CA6FG,IAAY,EAAU,K,qCC5ezB,MAAMG,EAAa,oBAIbC,EAAe,gBAYfC,GAAc,EAeb,MAAMC,UAAkB,EAAAC,OAI3B5N,YAAYC,GACRuG,MAAM,CAAEqH,KAAMC,SAASC,cAAc,SACrC7N,KAAK8N,aAAe,EACpB9N,KAAKC,QAAU,KACfD,KAAK+N,OAAS,KACd/N,KAAKgO,YAAa,EAClBhO,KAAKiO,UAAY,IAAI,EAAArM,OAAO5B,MAC5BA,KAAKkO,mBAAqB,IAAI,EAAAtM,OAAO5B,MACrCA,KAAKmO,cAAgB,IAAI,EAAAvM,OAAO5B,MAChCA,KAAKoO,iBAAmB,GACxBpO,KAAKqO,UAAYtO,EAAQuO,UAAYb,EAAUc,gBAC/CvO,KAAKgB,MAAQjB,EAAQiB,OAAS,KAC9BhB,KAAKc,OAASf,EAAQe,QAAU,KAChCd,KAAKwO,SAAS,gBAKlB,kBACI,OAAOxO,KAAK8N,aAKhB,aACI,OAAO9N,KAAKC,QAEhB,WAAWY,GACPb,KAAKC,QAAUY,EAKnB,eACI,OAAOb,KAAKiO,UAShB,wBACI,OAAOjO,KAAKkO,mBAKhB,mBACI,OAAOlO,KAAKmO,cAKhB,YACI,OAAOnO,KAAK+N,OAEhB,UAAU/M,IACAA,GAAUhB,KAAK+N,SAAW/M,IAAUhB,KAAK+N,SAG3C/N,KAAK+N,QACL/N,KAAK+N,OAAOU,aAAanN,WAAWtB,KAAK0O,oBAAqB1O,MAElEA,KAAK+N,OAAS/M,EACVhB,KAAK+N,QACL/N,KAAK+N,OAAOU,aAAalO,QAAQP,KAAK0O,oBAAqB1O,OAMnE2B,UACI3B,KAAK+N,OAAS,KACdzH,MAAM3E,UAYVgN,YAAYC,GACR,IAAI5O,KAAKkE,UAAalE,KAAKC,QAG3B,OAAQ2O,EAAMzM,MACV,IAAK,UACDnC,KAAK6O,YAAYD,GACjB,MACJ,IAAK,YACD5O,KAAK8O,cAAcF,GACnB,MACJ,IAAK,SACD5O,KAAK+O,WAAWH,IAS5BlN,QACI1B,KAAK8N,aAAe,EACpB9N,KAAKoO,iBAAmB,GACpBpO,KAAK+N,QACL/N,KAAK+N,OAAOrM,OAAM,GAM1BsN,eACI,MAAMC,EAASjP,KAAK2N,KAAKuB,cAAc,kBAClCD,GAILjP,KAAKiO,UAAUrE,KAAKqF,EAAOE,aAAa,eACxCnP,KAAK0B,SAJD1B,KAAK0B,QASb0N,cAAclN,GACV0L,SAASyB,iBAAiB,UAAWrP,KAAMwN,GAC3CI,SAASyB,iBAAiB,YAAarP,KAAMwN,GAC7CI,SAASyB,iBAAiB,SAAUrP,KAAMwN,GAK9C8B,eAAepN,GACX0L,SAAS2B,oBAAoB,UAAWvP,KAAMwN,GAC9CI,SAAS2B,oBAAoB,YAAavP,KAAMwN,GAChDI,SAAS2B,oBAAoB,SAAUvP,KAAMwN,GAKjDkB,sBACQ1O,KAAKwP,aACLxP,KAAK8N,aAAe,EACpB9N,KAAKyP,UAMbC,gBAAgBxN,GACZ,MAAMlB,EAAQhB,KAAK+N,OACnB,IAAK/M,EACD,OAEJ,GAAIhB,KAAKgO,WAML,OALAhO,KAAKgO,YAAa,OACbhO,KAAKkE,WACNlE,KAAK2P,OACL3P,KAAKkO,mBAAmBtE,UAAKC,KAIrC,IAAI8D,EAAO,KACPiC,EAAqB5O,EAAMsJ,iBAAmBtJ,EAAMsJ,kBAOxD,GALIqD,EADAiC,GAAsBA,EAAmBzH,OAClCnI,KAAK6P,0BAA0B7O,EAAO4O,GAGtC5P,KAAK8P,iBAAiB9O,IAE5B2M,EACD,OAESA,EAAKoC,iBAAiB,IAAIzC,KAActN,KAAK8N,cACnD5M,UAAU6C,IAAIwJ,GAErB,IAAIyC,EAAWpC,SAASC,cAAc,OACtCmC,EAASC,UAAY,wBACrBtC,EAAKuC,YAAYF,GACjBhQ,KAAKmQ,kBAGAnP,EAAMkJ,QACWlK,KAAKoQ,kBAMvBpQ,KAAKkE,UACLlE,KAAKqQ,OACLrQ,KAAKsQ,eACLtQ,KAAKkO,mBAAmBtE,UAAKC,IAG7B7J,KAAKsQ,eAVDtQ,KAAKyP,SAajBI,0BAA0B7O,EAAOmF,GAE7B,IAAKA,EAAMgC,OAOP,OANAnI,KAAKgO,YAAa,EAClBhO,KAAK0B,QACA1B,KAAKkE,WACNlE,KAAK2P,OACL3P,KAAKkO,mBAAmBtE,UAAKC,IAE1B,KAGX,IAAI8D,EAAO3N,KAAK2N,KAChBA,EAAK4C,YAAc,GAGnB,IAAI5F,EAAe3J,EAAM2J,eAErB6F,EAAK5C,SAASC,cAAc,MAChC2C,EAAGP,UAAY,oBACf,IAAK,IAAIlK,KAAQI,EAAO,CACpB,IAAKnG,KAAKqO,UAAUoC,yBAChB,OAAO,KAEX,IAAIC,EAAK1Q,KAAKqO,UAAUoC,yBAAyB1K,EAAM4E,GACvD6F,EAAGN,YAAYQ,GAGnB,OADA/C,EAAKuC,YAAYM,GACV7C,EAEXmC,iBAAiB9O,GACb,MAAMmF,GAAQ,IAAA0E,SAAQ7J,EAAMmF,SAE5B,IAAKA,IAAUA,EAAMgC,OAOjB,OANAnI,KAAKgO,YAAa,EAClBhO,KAAK0B,QACA1B,KAAKkE,WACNlE,KAAK2P,OACL3P,KAAKkO,mBAAmBtE,UAAKC,IAE1B,KAMX,MAAM9J,GAAU,IAAA8K,SAAQ7J,EAAMjB,WAC9B,GAAuB,IAAnBA,EAAQoI,OAGR,OAFAnI,KAAKiO,UAAUrE,KAAK7J,EAAQ,IAC5BC,KAAK0B,QACE,KAGX,MAAMiM,EAAO3N,KAAK2N,KAClBA,EAAK4C,YAAc,GAGnB,MAAM5F,EAAe3J,EAAM2J,eAE3B,IAAI6F,EAAK5C,SAASC,cAAc,MAChC2C,EAAGP,UAAY,oBACf,IAAK,MAAMlK,KAAQI,EAAO,CACtB,MAAMuK,EAAK1Q,KAAKqO,UAAUsC,eAAe5K,EAAM/E,EAAM8E,UAAW6E,GAChE6F,EAAGN,YAAYQ,GAGnB,OADA/C,EAAKuC,YAAYM,GACV7C,EAUXiD,OAAOC,GACH,MAAM1K,EAAQnG,KAAK2N,KAAKoC,iBAAiB,IAAIzC,KACvCjC,EAAQrL,KAAK8N,aACnB,IAAImB,EAASjP,KAAK2N,KAAKuB,cAAc,kBAErC,GADAD,EAAO/N,UAAUC,OAAOoM,GACN,OAAdsD,EACA7Q,KAAK8N,aAAyB,IAAVzC,EAAclF,EAAMgC,OAAS,EAAIkD,EAAQ,OAE5D,GAAkB,SAAdwF,EACL7Q,KAAK8N,aAAezC,EAAQlF,EAAMgC,OAAS,EAAIkD,EAAQ,EAAI,MAE1D,CAED,MAAMyF,EAAY9Q,KAAK2N,KAAKoD,wBAAwBC,OAC9CC,EAAahC,EAAO8B,wBAAwBC,OAC5CE,EAAaC,KAAKC,MAAMN,EAAYG,GAGtCjR,KAAK8N,aADS,WAAd+C,EACoBxF,EAAQ6F,EAGR7F,EAAQ6F,EAGhClR,KAAK8N,aAAeqD,KAAKE,IAAIF,KAAKG,IAAI,EAAGtR,KAAK8N,cAAe3H,EAAMgC,OAAS,GAEhF8G,EAAS9I,EAAMnG,KAAK8N,cACpBmB,EAAO/N,UAAU6C,IAAIwJ,GACrB,IAAI7F,EAAiB1H,KAAK2N,KAAKuB,cAAc,sBAC7C,EAAAqC,WAAA,uBAAkC7J,EAAgBuH,GAClDjP,KAAKmO,cAAcvE,KAAK5J,KAAK8N,cAC7B9N,KAAKmQ,kBAKTtB,YAAYD,GACR,IAAI5O,KAAKkE,UAAalE,KAAKC,QAG3B,GAAKD,KAAKC,QAAQgB,KAAKuQ,SAAS5C,EAAM6C,QAItC,OAAQ7C,EAAM8C,SACV,KAAK,EAAG,CAEJ9C,EAAM+C,iBACN/C,EAAMgD,kBACNhD,EAAMiD,2BACN,MAAM7Q,EAAQhB,KAAK+N,OACnB,IAAK/M,EACD,OAGJ,MAAMmF,EAAQnF,EAAMsJ,iBAAmBtJ,EAAMsJ,kBAC7C,GAAInE,GAA0B,IAAjBA,EAAMgC,OAGf,OAFAnI,KAAKiO,UAAUrE,KAAKzD,EAAM,GAAG2F,YAAc3F,EAAM,GAAGmF,YACpDtL,KAAK0B,QAGT,MAAMoQ,EAAY9R,KAAKoQ,kBAiBvB,OAXIpP,EAAMkJ,OAASlJ,EAAMkJ,OAASlK,KAAKoO,mBACnCpN,EAAM0C,aAAc,EACpB1D,KAAKiO,UAAUrE,KAAK5I,EAAMkJ,OAC1BlJ,EAAM0C,aAAc,EACpB1D,KAAKoO,iBAAmBpN,EAAMkJ,OAG9B4H,GACA9R,KAAKyP,cAETzP,KAAK4Q,OAAOhC,EAAMmD,SAAW,KAAO,QAGxC,KAAK,GAKD,OAJAnD,EAAM+C,iBACN/C,EAAMgD,kBACNhD,EAAMiD,gCACN7R,KAAK0B,QAET,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAAI,CAELkN,EAAM+C,iBACN/C,EAAMgD,kBACNhD,EAAMiD,2BACN,MAAMG,EAAQ,EAAQC,WAAWrD,EAAM8C,SAEvC,YADA1R,KAAK4Q,OAAOoB,GAGhB,QACI,YA1DJhS,KAAK0B,QAgEboN,cAAcF,GACV,GAAI5O,KAAKkE,WAAalE,KAAKC,QACvB,OAEJ,GAAI,EAAQiS,iBAAiBtD,GAEzB,YADA5O,KAAK0B,QAGT,IAAI+P,EAAS7C,EAAM6C,OACnB,KAAOA,IAAW7D,SAASuE,iBAAiB,CAExC,GAAIV,EAAOvQ,UAAUsQ,SAASlE,GAM1B,OALAsB,EAAM+C,iBACN/C,EAAMgD,kBACNhD,EAAMiD,2BACN7R,KAAKiO,UAAUrE,KAAK6H,EAAOtC,aAAa,oBACxCnP,KAAK0B,QAIT,GAAI+P,IAAWzR,KAAK2N,KAIhB,OAHAiB,EAAM+C,iBACN/C,EAAMgD,uBACNhD,EAAMiD,2BAGVJ,EAASA,EAAOW,cAEpBpS,KAAK0B,QAKTqN,WAAWH,GACP,GAAI5O,KAAKkE,WAAalE,KAAKC,QACvB,OAEJ,MAAM,KAAE0N,GAAS3N,KAIb2N,EAAK6D,SAAS5C,EAAM6C,SAIxBY,uBAAsB,KAClBrS,KAAKsQ,kBAQbF,kBACI,MAAM,MAAEpP,GAAUhB,KAClB,IAAKgB,EACD,OAAO,EAEX,MAAMmF,EAAQnG,KAAK2N,KAAKoC,iBAAiB,IAAIzC,KACvCgF,EAAS,EAAQC,aAAa,EAAQC,WAAWrM,KACjD,MAAE+D,GAAUlJ,EAElB,SAAIsR,GAAUA,IAAWpI,GAAmC,IAA1BoI,EAAOxK,QAAQoC,KAC7ClJ,EAAMkJ,MAAQoI,EACP,IAOfhC,eACI,MAAM,KAAE3C,GAAS3N,KACXgB,EAAQhB,KAAK+N,OACbjN,EAASd,KAAKC,QAIpB,KAAKa,GAAWE,GAAUA,EAAMmC,UAAanC,EAAMqE,QAC/C,OAEJ,MAAMtC,EAAQ/B,EAAMqE,OAAOtC,MACrBT,EAAWxB,EAAO2R,cAAc1P,GAChC2P,EAAS5R,EAAO6R,yBAAyBrQ,GACzCsQ,EAAQC,OAAOC,iBAAiBnF,GAChCoF,EAAaC,SAASJ,EAAMK,gBAAiB,KAAO,EACpDC,EAAcF,SAASJ,EAAMM,YAAa,KAAO,EAEvD,EAAAC,SAAA,YAAqB,CACjBT,SACAzR,KAAMH,EAAOG,KACbmS,UApfO,IAqfPC,UAzfO,GA0fP1F,KAAMA,EACNtJ,OAAQ,CAAEiP,WAAYP,EAAaG,GACnCK,UAAW,QACXX,MAAOA,IAMfzC,kBACI,IAAI1J,EAAIoG,EACR,IAAImD,EAAWhQ,KAAK2N,KAAKuB,cAAc,0BACvC,IAAKc,EACD,OAEJ,KAA4B,QAArBvJ,EAAKzG,KAAKgB,aAA0B,IAAPyF,OAAgB,EAASA,EAAG6D,iBAC5D,OAEJ,IAAInE,EAA8B,QAArB0G,EAAK7M,KAAKgB,aAA0B,IAAP6L,OAAgB,EAASA,EAAGvC,kBACtE,IAAKnE,EAED,YADA6J,EAASwD,aAAa,QAAS,gBAGnC,IAAIC,EAAatN,EAAMnG,KAAK8N,cAC5B,GAAK2F,EAKL,GADAzD,EAASO,YAAc,GACnBkD,EAAW7H,cAAe,CAC1B,IAAI+B,EAKAA,EAJC3N,KAAKqO,UAAUqF,wBAIT1T,KAAKqO,UAAUqF,wBAAwBD,GAHvChG,EAAUc,gBAAgBmF,wBAAwBD,GAK7DzD,EAASE,YAAYvC,GACrBqC,EAASwD,aAAa,QAAS,SAG/BxD,EAASwD,aAAa,QAAS,qBAhB/BxD,EAASwD,aAAa,QAAS,iBAgI3C,IAAI,GA5GJ,SAAW/F,GAIP,MAAMkG,EAIFlD,yBAAyB1K,EAAM4E,GAC3B,IAAIiJ,EAAW5T,KAAK6T,gBAAgB9N,EAAK+F,YAAc/F,EAAKuF,OAI5D,OAHIvF,EAAK+N,YACLF,EAAS1S,UAAU6C,IAAI,2BAEpB/D,KAAK+T,eAAeH,EAAU5T,KAAKgU,iBAAiBjO,EAAKuF,SAAUvF,EAAK5D,KAAM4D,EAAK5D,KAAMwI,EAAc5E,EAAKkO,MAKvHtD,eAAe5K,EAAMD,EAAS6E,GAC1B,OAAO3K,KAAK+T,eAAe/T,KAAK6T,gBAAgB9N,EAAKqG,KAAMpM,KAAKgU,iBAAiBjO,EAAKxD,OAAQ,EAAAmH,QAAA,UAAkB5D,EAAS,IAAKA,EAAQC,EAAKqG,MAAQ,GAAIzB,GAK3J+I,wBAAwBD,GACpB,IAAIS,EAAMtG,SAASC,cAAc,OAEjC,OADAqG,EAAI3D,YAAckD,EAAW7H,eAAiB,GACvCsI,EAKXL,gBAAgBrS,GACZ,MAAMkP,EAAK9C,SAASC,cAAc,MAIlC,OAHA6C,EAAGT,UAAY3C,EAEfoD,EAAG8C,aAAa,aAAchS,GACvBkP,EAKXsD,iBAAiB1H,GACb,MAAM6H,EAAYvG,SAASC,cAAc,QAMzC,OALAsG,EAAUlE,UAAY,qBAEtBkE,EAAUC,UAAY,EAAAC,iBAAA,SAA0B/H,EAAQ,CACpDgI,YAAa,CAAC,UAEXH,EAKXJ,eAAerD,EAAIyD,EAAWI,EAAYpS,EAAMwI,EAAcsJ,GAE1D,GAAIA,EAAM,CACN,MAAMO,EAAWP,EAAKQ,QAAQ,CAC1BxE,UAAW,wCAEfS,EAAGR,YAAYsE,QAEd,GAAID,EAAY,CACjB,MAAMG,EAAW9G,SAASC,cAAc,QACxC6G,EAASnE,aAAepO,EAAK,IAAM,IAAIwS,cACvC,MAAMC,EAAcjK,EAAa7C,QAAQ3F,GA3lBxC,GA2lB4D,EAC7DuS,EAASzE,UAAY,0CACrByE,EAASlB,aAAa,mBAAoBoB,EAAWC,YACrDnE,EAAGR,YAAYwE,OAEd,CAKD,MAAMI,EAAYlH,SAASC,cAAc,QACzCiH,EAAU7E,UAAY,wBACtBS,EAAGR,YAAY4E,GAInB,GAFApE,EAAGR,YAAYiE,GAEXI,EAAY,CACZ7D,EAAGqE,MAAQ5S,EACX,MAAM6S,EAAmBpH,SAASC,cAAc,QAChDmH,EAAiB/E,UAAY,4BAC7B+E,EAAiBzE,YAAcpO,EAAK8S,oBACpCvE,EAAGR,YAAY8E,OAEd,CAID,MAAME,EAAwBtH,SAASC,cAAc,QACrDqH,EAAsBjF,UAAY,4BAClCS,EAAGR,YAAYgF,GAEnB,OAAOxE,GAGfjD,EAAUkG,SAAWA,EAIrBlG,EAAUc,gBAAkB,IAAIoF,EAvGpC,CAwGGlG,IAAcA,EAAY,KAK7B,SAAWnG,GAIPA,EAAQ2K,WAAa,CACjB,GAAI,KACJ,GAAI,OACJ,GAAI,SACJ,GAAI,YAuBR3K,EAAQiL,aAlBR,SAAsB3H,GAClB,MAAMuK,EAAMvK,EAAOzC,OACnB,IAAImK,EAAS,GACb,GAAI6C,EAAM,EACN,OAAO7C,EAEX,MAAM8C,EAASxK,EAAO,GAAGzC,OACzB,IAAK,IAAIkN,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAC7B,MAAMC,EAAK1K,EAAO,GAAGyK,GACrB,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAKI,IACrB,GAAI3K,EAAO2K,GAAGF,KAAOC,EACjB,OAAOhD,EAGfA,GAAUgD,EAEd,OAAOhD,GAgBXhL,EAAQkL,WAVR,SAAoBrM,GAChB,MAAMyE,EAAS,GACf,IAAK,IAAIyK,EAAI,EAAGF,EAAMhP,EAAMgC,OAAQkN,EAAIF,EAAKE,IAAK,CAC9C,MAAMG,EAAOrP,EAAMkP,GAAGlG,aAAa,cAC/BqG,GACA5K,EAAOlF,KAAK8P,GAGpB,OAAO5K,GAaXtD,EAAQ4K,iBAPR,SAA0BtD,GACtB,OAAyB,IAAjBA,EAAM6G,QACV7G,EAAM8G,QACN9G,EAAM+G,SACN/G,EAAMmD,UACNnD,EAAMgH,SAtDlB,CAyDG,IAAY,EAAU,KCztBlB,MAAMC,EAAqB,IAAI,EAAAC,MAAM","file":"1570.5778c7bb7f87962d806b.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DataConnector } from '@jupyterlab/statedb';\n/**\n * DummyConnector's fetch method always returns a rejected Promise.\n * This class is only instantiated if both CompletionHandler._connector and\n * CompletionHandler._fetchItems are undefined.\n */\nexport class DummyConnector extends DataConnector {\n    fetch(_) {\n        return Promise.reject('Attempting to fetch with DummyConnector. Please ensure connector responseType is set.');\n    }\n}\n//# sourceMappingURL=dummyconnector.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Text } from '@jupyterlab/coreutils';\nimport { Message, MessageLoop } from '@lumino/messaging';\nimport { Signal } from '@lumino/signaling';\nimport { DummyConnector } from './dummyconnector';\n/**\n * A class added to editors that can host a completer.\n */\nconst COMPLETER_ENABLED_CLASS = 'jp-mod-completer-enabled';\n/**\n * A class added to editors that have an active completer.\n */\nconst COMPLETER_ACTIVE_CLASS = 'jp-mod-completer-active';\n/**\n * A completion handler for editors.\n */\nexport class CompletionHandler {\n    /**\n     * Construct a new completion handler for a widget.\n     */\n    constructor(options) {\n        this._editor = null;\n        this._enabled = false;\n        this._pending = 0;\n        this._isDisposed = false;\n        this.completer = options.completer;\n        this.completer.selected.connect(this.onCompletionSelected, this);\n        this.completer.visibilityChanged.connect(this.onVisibilityChanged, this);\n        this._connector = options.connector;\n    }\n    /**\n     * The data connector used to populate completion requests.\n     * @deprecated will be removed, or will return `CompletionHandler.ICompletionItemsConnector`\n     * instead of `IDataConnector` in future versions\n     *\n     * #### Notes\n     * The only method of this connector that will ever be called is `fetch`, so\n     * it is acceptable for the other methods to be simple functions that return\n     * rejected promises.\n     */\n    get connector() {\n        if ('responseType' in this._connector) {\n            return new DummyConnector();\n        }\n        return this._connector;\n    }\n    set connector(connector) {\n        this._connector = connector;\n    }\n    /**\n     * The editor used by the completion handler.\n     */\n    get editor() {\n        return this._editor;\n    }\n    set editor(newValue) {\n        if (newValue === this._editor) {\n            return;\n        }\n        let editor = this._editor;\n        // Clean up and disconnect from old editor.\n        if (editor && !editor.isDisposed) {\n            const model = editor.model;\n            editor.host.classList.remove(COMPLETER_ENABLED_CLASS);\n            editor.host.classList.remove(COMPLETER_ACTIVE_CLASS);\n            model.selections.changed.disconnect(this.onSelectionsChanged, this);\n            model.value.changed.disconnect(this.onTextChanged, this);\n        }\n        // Reset completer state.\n        this.completer.reset();\n        this.completer.editor = newValue;\n        // Update the editor and signal connections.\n        editor = this._editor = newValue;\n        if (editor) {\n            const model = editor.model;\n            this._enabled = false;\n            model.selections.changed.connect(this.onSelectionsChanged, this);\n            model.value.changed.connect(this.onTextChanged, this);\n            // On initial load, manually check the cursor position.\n            this.onSelectionsChanged();\n        }\n    }\n    /**\n     * Get whether the completion handler is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the handler.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * Invoke the handler and launch a completer.\n     */\n    invoke() {\n        MessageLoop.sendMessage(this, CompletionHandler.Msg.InvokeRequest);\n    }\n    /**\n     * Process a message sent to the completion handler.\n     */\n    processMessage(msg) {\n        switch (msg.type) {\n            case CompletionHandler.Msg.InvokeRequest.type:\n                this.onInvokeRequest(msg);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Get the state of the text editor at the given position.\n     */\n    getState(editor, position) {\n        return {\n            text: editor.model.value.text,\n            lineHeight: editor.lineHeight,\n            charWidth: editor.charWidth,\n            line: position.line,\n            column: position.column\n        };\n    }\n    /**\n     * Handle a completion selected signal from the completion widget.\n     */\n    onCompletionSelected(completer, val) {\n        const model = completer.model;\n        const editor = this._editor;\n        if (!editor || !model) {\n            return;\n        }\n        const patch = model.createPatch(val);\n        if (!patch) {\n            return;\n        }\n        const { start, end, value } = patch;\n        // we need to update the shared model in a single transaction so that the undo manager works as expected\n        editor.model.sharedModel.updateSource(start, end, value);\n    }\n    /**\n     * Handle `invoke-request` messages.\n     */\n    onInvokeRequest(msg) {\n        // If there is no completer model, bail.\n        if (!this.completer.model) {\n            return;\n        }\n        // If a completer session is already active, bail.\n        if (this.completer.model.original) {\n            return;\n        }\n        const editor = this._editor;\n        if (editor) {\n            this._makeRequest(editor.getCursorPosition()).catch(reason => {\n                console.warn('Invoke request bailed', reason);\n            });\n        }\n    }\n    /**\n     * Handle selection changed signal from an editor.\n     *\n     * #### Notes\n     * If a sub-class reimplements this method, then that class must either call\n     * its super method or it must take responsibility for adding and removing\n     * the completer completable class to the editor host node.\n     *\n     * Despite the fact that the editor widget adds a class whenever there is a\n     * primary selection, this method checks independently for two reasons:\n     *\n     * 1. The editor widget connects to the same signal to add that class, so\n     *    there is no guarantee that the class will be added before this method\n     *    is invoked so simply checking for the CSS class's existence is not an\n     *    option. Secondarily, checking the editor state should be faster than\n     *    querying the DOM in either case.\n     * 2. Because this method adds a class that indicates whether completer\n     *    functionality ought to be enabled, relying on the behavior of the\n     *    `jp-mod-has-primary-selection` to filter out any editors that have\n     *    a selection means the semantic meaning of `jp-mod-completer-enabled`\n     *    is obscured because there may be cases where the enabled class is added\n     *    even though the completer is not available.\n     */\n    onSelectionsChanged() {\n        const model = this.completer.model;\n        const editor = this._editor;\n        if (!editor) {\n            return;\n        }\n        const host = editor.host;\n        // If there is no model, return.\n        if (!model) {\n            this._enabled = false;\n            host.classList.remove(COMPLETER_ENABLED_CLASS);\n            return;\n        }\n        // If we are currently performing a subset match,\n        // return without resetting the completer.\n        if (model.subsetMatch) {\n            return;\n        }\n        const position = editor.getCursorPosition();\n        const line = editor.getLine(position.line);\n        if (!line) {\n            this._enabled = false;\n            model.reset(true);\n            host.classList.remove(COMPLETER_ENABLED_CLASS);\n            return;\n        }\n        const { start, end } = editor.getSelection();\n        // If there is a text selection, return.\n        if (start.column !== end.column || start.line !== end.line) {\n            this._enabled = false;\n            model.reset(true);\n            host.classList.remove(COMPLETER_ENABLED_CLASS);\n            return;\n        }\n        // If the part of the line before the cursor is white space, return.\n        if (line.slice(0, position.column).match(/^\\s*$/)) {\n            this._enabled = false;\n            model.reset(true);\n            host.classList.remove(COMPLETER_ENABLED_CLASS);\n            return;\n        }\n        // Enable completion.\n        if (!this._enabled) {\n            this._enabled = true;\n            host.classList.add(COMPLETER_ENABLED_CLASS);\n        }\n        // Dispatch the cursor change.\n        model.handleCursorChange(this.getState(editor, editor.getCursorPosition()));\n    }\n    /**\n     * Handle a text changed signal from an editor.\n     */\n    onTextChanged() {\n        const model = this.completer.model;\n        if (!model || !this._enabled) {\n            return;\n        }\n        // If there is a text selection, no completion is allowed.\n        const editor = this.editor;\n        if (!editor) {\n            return;\n        }\n        const { start, end } = editor.getSelection();\n        if (start.column !== end.column || start.line !== end.line) {\n            return;\n        }\n        // Dispatch the text change.\n        model.handleTextChange(this.getState(editor, editor.getCursorPosition()));\n    }\n    /**\n     * Handle a visibility change signal from a completer widget.\n     */\n    onVisibilityChanged(completer) {\n        // Completer is not active.\n        if (completer.isDisposed || completer.isHidden) {\n            if (this._editor) {\n                this._editor.host.classList.remove(COMPLETER_ACTIVE_CLASS);\n                this._editor.focus();\n            }\n            return;\n        }\n        // Completer is active.\n        if (this._editor) {\n            this._editor.host.classList.add(COMPLETER_ACTIVE_CLASS);\n        }\n    }\n    /**\n     * Make a completion request.\n     */\n    _makeRequest(position) {\n        const editor = this.editor;\n        if (!editor) {\n            return Promise.reject(new Error('No active editor'));\n        }\n        const text = editor.model.value.text;\n        const offset = Text.jsIndexToCharIndex(editor.getOffsetAt(position), text);\n        const pending = ++this._pending;\n        const state = this.getState(editor, position);\n        const request = { text, offset };\n        if (this._isICompletionItemsConnector(this._connector)) {\n            return this._connector\n                .fetch(request)\n                .then(reply => {\n                this._validate(pending, request);\n                if (!reply) {\n                    throw new Error(`Invalid request: ${request}`);\n                }\n                this._onFetchItemsReply(state, reply);\n            })\n                .catch(_ => {\n                this._onFailure();\n            });\n        }\n        return this._connector\n            .fetch(request)\n            .then(reply => {\n            this._validate(pending, request);\n            if (!reply) {\n                throw new Error(`Invalid request: ${request}`);\n            }\n            this._onReply(state, reply);\n        })\n            .catch(_ => {\n            this._onFailure();\n        });\n    }\n    _isICompletionItemsConnector(connector) {\n        return (connector\n            .responseType === CompletionHandler.ICompletionItemsResponseType);\n    }\n    _validate(pending, request) {\n        if (this.isDisposed) {\n            throw new Error('Handler is disposed');\n        }\n        // If a newer completion request has created a pending request, bail.\n        if (pending !== this._pending) {\n            throw new Error('A newer completion request is pending');\n        }\n    }\n    /**\n     * Updates model with text state and current cursor position.\n     */\n    _updateModel(state, start, end) {\n        const model = this.completer.model;\n        const text = state.text;\n        if (!model) {\n            return null;\n        }\n        // Update the original request.\n        model.original = state;\n        // Update the cursor.\n        model.cursor = {\n            start: Text.charIndexToJsIndex(start, text),\n            end: Text.charIndexToJsIndex(end, text)\n        };\n        return model;\n    }\n    /**\n     * Receive a completion reply from the connector.\n     *\n     * @param state - The state of the editor when completion request was made.\n     *\n     * @param reply - The API response returned for a completion request.\n     */\n    _onReply(state, reply) {\n        const model = this._updateModel(state, reply.start, reply.end);\n        if (!model) {\n            return;\n        }\n        // Dedupe the matches.\n        const matches = [];\n        const matchSet = new Set(reply.matches || []);\n        if (reply.matches) {\n            matchSet.forEach(match => {\n                matches.push(match);\n            });\n        }\n        // Extract the optional type map. The current implementation uses\n        // _jupyter_types_experimental which provide string type names. We make no\n        // assumptions about the names of the types, so other kernels can provide\n        // their own types.\n        // Even though the `metadata` field is required, it has historically not\n        // been used. Defensively check if it exists.\n        const metadata = reply.metadata || {};\n        const types = metadata._jupyter_types_experimental;\n        const typeMap = {};\n        if (types) {\n            types.forEach((item) => {\n                // For some reason the _jupyter_types_experimental list has two entries\n                // for each match, with one having a type of \"<unknown>\". Discard those\n                // and use undefined to indicate an unknown type.\n                const text = item.text;\n                const type = item.type;\n                if (matchSet.has(text) && type !== '<unknown>') {\n                    typeMap[text] = type;\n                }\n            });\n        }\n        // Update the options, including the type map.\n        model.setOptions(matches, typeMap);\n    }\n    /**\n     * Receive completion items from provider.\n     *\n     * @param state - The state of the editor when completion request was made.\n     *\n     * @param reply - The API response returned for a completion request.\n     */\n    _onFetchItemsReply(state, reply) {\n        const model = this._updateModel(state, reply.start, reply.end);\n        if (!model) {\n            return;\n        }\n        if (model.setCompletionItems) {\n            model.setCompletionItems(reply.items);\n        }\n    }\n    /**\n     * If completion request fails, reset model and fail silently.\n     */\n    _onFailure() {\n        const model = this.completer.model;\n        if (model) {\n            model.reset(true);\n        }\n    }\n}\n/**\n * A namespace for cell completion handler statics.\n */\n(function (CompletionHandler) {\n    CompletionHandler.ICompletionItemsResponseType = 'ICompletionItemsReply';\n    /**\n     * A namespace for completion handler messages.\n     */\n    let Msg;\n    (function (Msg) {\n        /* tslint:disable */\n        /**\n         * A singleton `'invoke-request'` message.\n         */\n        Msg.InvokeRequest = new Message('invoke-request');\n        /* tslint:enable */\n    })(Msg = CompletionHandler.Msg || (CompletionHandler.Msg = {}));\n})(CompletionHandler || (CompletionHandler = {}));\n//# sourceMappingURL=handler.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DataConnector } from '@jupyterlab/statedb';\n/**\n * A kernel connector for completion handlers.\n */\nexport class KernelConnector extends DataConnector {\n    /**\n     * Create a new kernel connector for completion requests.\n     *\n     * @param options - The instantiation options for the kernel connector.\n     */\n    constructor(options) {\n        super();\n        this._session = options.session;\n    }\n    /**\n     * Fetch completion requests.\n     *\n     * @param request - The completion request text and details.\n     */\n    async fetch(request) {\n        var _a;\n        const kernel = (_a = this._session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            throw new Error('No kernel for completion request.');\n        }\n        const contents = {\n            code: request.text,\n            cursor_pos: request.offset\n        };\n        const msg = await kernel.requestComplete(contents);\n        const response = msg.content;\n        if (response.status !== 'ok') {\n            throw new Error('Completion fetch failed to return successfully.');\n        }\n        return {\n            start: response.cursor_start,\n            end: response.cursor_end,\n            matches: response.matches,\n            metadata: response.metadata\n        };\n    }\n}\n//# sourceMappingURL=kernelconnector.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DataConnector } from '@jupyterlab/statedb';\n/**\n * A context connector for completion handlers.\n */\nexport class ContextConnector extends DataConnector {\n    /**\n     * Create a new context connector for completion requests.\n     *\n     * @param options - The instantiation options for the context connector.\n     */\n    constructor(options) {\n        super();\n        this._editor = options.editor;\n    }\n    /**\n     * Fetch completion requests.\n     *\n     * @param request - The completion request text and details.\n     */\n    fetch(request) {\n        if (!this._editor) {\n            return Promise.reject('No editor');\n        }\n        return new Promise(resolve => {\n            resolve(Private.contextHint(this._editor));\n        });\n    }\n}\n/**\n * A namespace for Private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get a list of completion hints from a tokenization\n     * of the editor.\n     */\n    function contextHint(editor) {\n        // Find the token at the cursor\n        const cursor = editor.getCursorPosition();\n        const token = editor.getTokenForPosition(cursor);\n        // Get the list of matching tokens.\n        const tokenList = getCompletionTokens(token, editor);\n        // Only choose the ones that have a non-empty type\n        // field, which are likely to be of interest.\n        const completionList = tokenList.filter(t => t.type).map(t => t.value);\n        // Remove duplicate completions from the list\n        const matches = Array.from(new Set(completionList));\n        return {\n            start: token.offset,\n            end: token.offset + token.value.length,\n            matches,\n            metadata: {}\n        };\n    }\n    Private.contextHint = contextHint;\n    /**\n     * Get a list of tokens that match the completion request,\n     * but are not identical to the completion request.\n     */\n    function getCompletionTokens(token, editor) {\n        const candidates = editor.getTokens();\n        // Only get the tokens that have a common start, but\n        // are not identical.\n        return candidates.filter(t => t.value.indexOf(token.value) === 0 && t.value !== token.value);\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=contextconnector.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { ContextConnector } from './contextconnector';\nimport { KernelConnector } from './kernelconnector';\n/**\n * A context+kernel connector for completion handlers.\n */\nexport class CompletionConnector extends DataConnector {\n    /**\n     * Create a new connector for completion requests.\n     *\n     * @param options - The instantiation options for the connector.\n     */\n    constructor(options) {\n        super();\n        this._kernel = new KernelConnector(options);\n        this._context = new ContextConnector(options);\n    }\n    /**\n     * Fetch completion requests.\n     *\n     * @param request - The completion request text and details.\n     */\n    fetch(request) {\n        return Promise.all([\n            this._kernel.fetch(request),\n            this._context.fetch(request)\n        ]).then(([kernel, context]) => Private.mergeReplies(kernel, context));\n    }\n}\n/**\n * A namespace for private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Merge results from kernel and context completions.\n     *\n     * @param kernel - The kernel reply being merged.\n     *\n     * @param context - The context reply being merged.\n     *\n     * @returns A reply with a superset of kernel and context matches.\n     *\n     * #### Notes\n     * The kernel and context matches are merged with a preference for kernel\n     * results. Both lists are known to contain unique, non-repeating items;\n     * so this function returns a non-repeating superset by filtering out\n     * duplicates from the context list that appear in the kernel list.\n     */\n    function mergeReplies(kernel, context) {\n        // If one is empty, return the other.\n        if (kernel.matches.length === 0) {\n            return context;\n        }\n        else if (context.matches.length === 0) {\n            return kernel;\n        }\n        // Populate the result with a copy of the kernel matches.\n        const matches = kernel.matches.slice();\n        // Cache all the kernel matches in a memo.\n        const memo = matches.reduce((acc, val) => {\n            acc[val] = null;\n            return acc;\n        }, {});\n        // Add each context match that is not in the memo to the result.\n        context.matches.forEach(match => {\n            if (!(match in memo)) {\n                matches.push(match);\n            }\n        });\n        return Object.assign(Object.assign({}, kernel), { matches });\n    }\n    Private.mergeReplies = mergeReplies;\n})(Private || (Private = {}));\n//# sourceMappingURL=connector.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { iter, map, StringExt, toArray } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * An implementation of a completer model.\n */\nexport class CompleterModel {\n    constructor() {\n        this._current = null;\n        this._cursor = null;\n        this._isDisposed = false;\n        this._completionItems = [];\n        this._options = [];\n        this._original = null;\n        this._query = '';\n        this._subsetMatch = false;\n        this._typeMap = {};\n        this._orderedTypes = [];\n        this._stateChanged = new Signal(this);\n    }\n    /**\n     * A signal emitted when state of the completer menu changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * The original completion request details.\n     */\n    get original() {\n        return this._original;\n    }\n    set original(newValue) {\n        const unchanged = this._original === newValue ||\n            (this._original &&\n                newValue &&\n                JSONExt.deepEqual(newValue, this._original));\n        if (unchanged) {\n            return;\n        }\n        this._reset();\n        // Set both the current and original to the same value when original is set.\n        this._current = this._original = newValue;\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * The current text change details.\n     */\n    get current() {\n        return this._current;\n    }\n    set current(newValue) {\n        const unchanged = this._current === newValue ||\n            (this._current && newValue && JSONExt.deepEqual(newValue, this._current));\n        if (unchanged) {\n            return;\n        }\n        const original = this._original;\n        // Original request must always be set before a text change. If it isn't\n        // the model fails silently.\n        if (!original) {\n            return;\n        }\n        const cursor = this._cursor;\n        // Cursor must always be set before a text change. This happens\n        // automatically in the completer handler, but since `current` is a public\n        // attribute, this defensive check is necessary.\n        if (!cursor) {\n            return;\n        }\n        const current = (this._current = newValue);\n        if (!current) {\n            this._stateChanged.emit(undefined);\n            return;\n        }\n        const originalLine = original.text.split('\\n')[original.line];\n        const currentLine = current.text.split('\\n')[current.line];\n        // If the text change means that the original start point has been preceded,\n        // then the completion is no longer valid and should be reset.\n        if (!this._subsetMatch && currentLine.length < originalLine.length) {\n            this.reset(true);\n            return;\n        }\n        const { start, end } = cursor;\n        // Clip the front of the current line.\n        let query = current.text.substring(start);\n        // Clip the back of the current line by calculating the end of the original.\n        const ending = original.text.substring(end);\n        query = query.substring(0, query.lastIndexOf(ending));\n        this._query = query;\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * The cursor details that the API has used to return matching options.\n     */\n    get cursor() {\n        return this._cursor;\n    }\n    set cursor(newValue) {\n        // Original request must always be set before a cursor change. If it isn't\n        // the model fails silently.\n        if (!this.original) {\n            return;\n        }\n        this._cursor = newValue;\n    }\n    /**\n     * The query against which items are filtered.\n     */\n    get query() {\n        return this._query;\n    }\n    set query(newValue) {\n        this._query = newValue;\n    }\n    /**\n     * A flag that is true when the model value was modified by a subset match.\n     */\n    get subsetMatch() {\n        return this._subsetMatch;\n    }\n    set subsetMatch(newValue) {\n        this._subsetMatch = newValue;\n    }\n    /**\n     * Get whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * The list of visible items in the completer menu.\n     *\n     * #### Notes\n     * This is a read-only property.\n     */\n    completionItems() {\n        let query = this._query;\n        if (query) {\n            return this._markup(query);\n        }\n        return this._completionItems;\n    }\n    /**\n     * Set the list of visible items in the completer menu, and append any\n     * new types to KNOWN_TYPES.\n     */\n    setCompletionItems(newValue) {\n        if (JSONExt.deepEqual(newValue, this._completionItems)) {\n            return;\n        }\n        this._completionItems = newValue;\n        this._orderedTypes = Private.findOrderedCompletionItemTypes(this._completionItems);\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * The list of visible items in the completer menu.\n     * @deprecated use `completionItems` instead\n     *\n     * #### Notes\n     * This is a read-only property.\n     */\n    items() {\n        return this._filter();\n    }\n    /**\n     * The unfiltered list of all available options in a completer menu.\n     */\n    options() {\n        return iter(this._options);\n    }\n    /**\n     * The map from identifiers (a.b) to types (function, module, class, instance,\n     * etc.).\n     *\n     * #### Notes\n     * A type map is currently only provided by the latest IPython kernel using\n     * the completer reply metadata field `_jupyter_types_experimental`. The\n     * values are completely up to the kernel.\n     *\n     */\n    typeMap() {\n        return this._typeMap;\n    }\n    /**\n     * An ordered list of all the known types in the typeMap.\n     *\n     * #### Notes\n     * To visually encode the types of the completer matches, we assemble an\n     * ordered list. This list begins with:\n     * ```\n     * ['function', 'instance', 'class', 'module', 'keyword']\n     * ```\n     * and then has any remaining types listed alphabetically. This will give\n     * reliable visual encoding for these known types, but allow kernels to\n     * provide new types.\n     */\n    orderedTypes() {\n        return this._orderedTypes;\n    }\n    /**\n     * Set the available options in the completer menu.\n     */\n    setOptions(newValue, typeMap) {\n        const values = toArray(newValue || []);\n        const types = typeMap || {};\n        if (JSONExt.deepEqual(values, this._options) &&\n            JSONExt.deepEqual(types, this._typeMap)) {\n            return;\n        }\n        if (values.length) {\n            this._options = values;\n            this._typeMap = types;\n            this._orderedTypes = Private.findOrderedTypes(types);\n        }\n        else {\n            this._options = [];\n            this._typeMap = {};\n            this._orderedTypes = [];\n        }\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * Handle a cursor change.\n     */\n    handleCursorChange(change) {\n        // If there is no active completion, return.\n        if (!this._original) {\n            return;\n        }\n        const { column, line } = change;\n        const { current, original } = this;\n        if (!original) {\n            return;\n        }\n        // If a cursor change results in a the cursor being on a different line\n        // than the original request, cancel.\n        if (line !== original.line) {\n            this.reset(true);\n            return;\n        }\n        // If a cursor change results in the cursor being set to a position that\n        // precedes the original column, cancel.\n        if (column < original.column) {\n            this.reset(true);\n            return;\n        }\n        const { cursor } = this;\n        if (!cursor || !current) {\n            return;\n        }\n        // If a cursor change results in the cursor being set to a position beyond\n        // the end of the area that would be affected by completion, cancel.\n        const cursorDelta = cursor.end - cursor.start;\n        const originalLine = original.text.split('\\n')[original.line];\n        const currentLine = current.text.split('\\n')[current.line];\n        const inputDelta = currentLine.length - originalLine.length;\n        if (column > original.column + cursorDelta + inputDelta) {\n            this.reset(true);\n            return;\n        }\n    }\n    /**\n     * Handle a text change.\n     */\n    handleTextChange(change) {\n        const original = this._original;\n        // If there is no active completion, return.\n        if (!original) {\n            return;\n        }\n        const { text, column, line } = change;\n        const last = text.split('\\n')[line][column - 1];\n        // If last character entered is not whitespace or if the change column is\n        // greater than or equal to the original column, update completion.\n        if ((last && last.match(/\\S/)) || change.column >= original.column) {\n            this.current = change;\n            return;\n        }\n        // If final character is whitespace, reset completion.\n        this.reset(false);\n    }\n    /**\n     * Create a resolved patch between the original state and a patch string.\n     *\n     * @param patch - The patch string to apply to the original value.\n     *\n     * @returns A patched text change or undefined if original value did not exist.\n     */\n    createPatch(patch) {\n        const original = this._original;\n        const cursor = this._cursor;\n        const current = this._current;\n        if (!original || !cursor || !current) {\n            return undefined;\n        }\n        let { start, end } = cursor;\n        // Also include any filtering/additional-typing that has occurred\n        // since the completion request in the patched length.\n        end = end + (current.text.length - original.text.length);\n        return { start, end, value: patch };\n    }\n    /**\n     * Reset the state of the model and emit a state change signal.\n     *\n     * @param hard - Reset even if a subset match is in progress.\n     */\n    reset(hard = false) {\n        // When the completer detects a common subset prefix for all options,\n        // it updates the model and sets the model source to that value, triggering\n        // a reset. Unless explicitly a hard reset, this should be ignored.\n        if (!hard && this._subsetMatch) {\n            return;\n        }\n        this._reset();\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * Check if CompletionItem matches against query.\n     * Highlight matching prefix by adding <mark> tags.\n     */\n    _markup(query) {\n        const items = this._completionItems;\n        let results = [];\n        for (let item of items) {\n            // See if label matches query string\n            // With ICompletionItems, the label may include parameters, so we exclude them from the matcher.\n            // e.g. Given label `foo(b, a, r)` and query `bar`,\n            // don't count parameters, `b`, `a`, and `r` as matches.\n            const index = item.label.indexOf('(');\n            const prefix = index > -1 ? item.label.substring(0, index) : item.label;\n            let match = StringExt.matchSumOfSquares(prefix, query);\n            // Filter non-matching items.\n            if (match) {\n                // Highlight label text if there's a match\n                let marked = StringExt.highlight(item.label, match.indices, Private.mark);\n                results.push(Object.assign(Object.assign({}, item), { \n                    // Allow for lazily retrieved documentation (with a getter)\n                    documentation: item.documentation, label: marked.join(''), \n                    // If no insertText is present, preserve original label value\n                    // by setting it as the insertText.\n                    insertText: item.insertText ? item.insertText : item.label, score: match.score }));\n            }\n        }\n        results.sort(Private.scoreCmp2);\n        // Delete the extra score attribute to not leak implementation details\n        // to JavaScript callers.\n        results.forEach(x => {\n            delete x.score;\n        });\n        return results;\n    }\n    /**\n     * Apply the query to the complete options list to return the matching subset.\n     */\n    _filter() {\n        const options = this._options || [];\n        const query = this._query;\n        if (!query) {\n            return map(options, option => ({ raw: option, text: option }));\n        }\n        const results = [];\n        for (const option of options) {\n            const match = StringExt.matchSumOfSquares(option, query);\n            if (match) {\n                const marked = StringExt.highlight(option, match.indices, Private.mark);\n                results.push({\n                    raw: option,\n                    score: match.score,\n                    text: marked.join('')\n                });\n            }\n        }\n        return map(results.sort(Private.scoreCmp), result => ({\n            text: result.text,\n            raw: result.raw\n        }));\n    }\n    /**\n     * Reset the state of the model.\n     */\n    _reset() {\n        this._current = null;\n        this._cursor = null;\n        this._completionItems = [];\n        this._options = [];\n        this._original = null;\n        this._query = '';\n        this._subsetMatch = false;\n        this._typeMap = {};\n        this._orderedTypes = [];\n    }\n}\n/**\n * A namespace for completer model private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The list of known type annotations of completer matches.\n     */\n    const KNOWN_TYPES = ['function', 'instance', 'class', 'module', 'keyword'];\n    /**\n     * The map of known type annotations of completer matches.\n     */\n    const KNOWN_MAP = KNOWN_TYPES.reduce((acc, type) => {\n        acc[type] = null;\n        return acc;\n    }, {});\n    /**\n     * Mark a highlighted chunk of text.\n     */\n    function mark(value) {\n        return `<mark>${value}</mark>`;\n    }\n    Private.mark = mark;\n    /**\n     * A sort comparison function for item match scores.\n     *\n     * #### Notes\n     * This orders the items first based on score (lower is better), then\n     * by locale order of the item text.\n     */\n    function scoreCmp(a, b) {\n        const delta = a.score - b.score;\n        if (delta !== 0) {\n            return delta;\n        }\n        return a.raw.localeCompare(b.raw);\n    }\n    Private.scoreCmp = scoreCmp;\n    /**\n     * A sort comparison function for item match scores.\n     *\n     * #### Notes\n     * This orders the items first based on score (lower is better), then\n     * by locale order of the item text.\n     */\n    function scoreCmp2(a, b) {\n        var _a, _b, _c;\n        const delta = a.score - b.score;\n        if (delta !== 0) {\n            return delta;\n        }\n        return (_c = (_a = a.insertText) === null || _a === void 0 ? void 0 : _a.localeCompare((_b = b.insertText) !== null && _b !== void 0 ? _b : '')) !== null && _c !== void 0 ? _c : 0;\n    }\n    Private.scoreCmp2 = scoreCmp2;\n    /**\n     * Compute a reliably ordered list of types for ICompletionItems.\n     *\n     * #### Notes\n     * The resulting list always begins with the known types:\n     * ```\n     * ['function', 'instance', 'class', 'module', 'keyword']\n     * ```\n     * followed by other types in alphabetical order.\n     *\n     */\n    function findOrderedCompletionItemTypes(items) {\n        const newTypeSet = new Set();\n        items.forEach(item => {\n            if (item.type &&\n                !KNOWN_TYPES.includes(item.type) &&\n                !newTypeSet.has(item.type)) {\n                newTypeSet.add(item.type);\n            }\n        });\n        const newTypes = Array.from(newTypeSet);\n        newTypes.sort((a, b) => a.localeCompare(b));\n        return KNOWN_TYPES.concat(newTypes);\n    }\n    Private.findOrderedCompletionItemTypes = findOrderedCompletionItemTypes;\n    /**\n     * Compute a reliably ordered list of types.\n     *\n     * #### Notes\n     * The resulting list always begins with the known types:\n     * ```\n     * ['function', 'instance', 'class', 'module', 'keyword']\n     * ```\n     * followed by other types in alphabetical order.\n     */\n    function findOrderedTypes(typeMap) {\n        const filtered = Object.keys(typeMap)\n            .map(key => typeMap[key])\n            .filter((value) => !!value && !(value in KNOWN_MAP))\n            .sort((a, b) => a.localeCompare(b));\n        return KNOWN_TYPES.concat(filtered);\n    }\n    Private.findOrderedTypes = findOrderedTypes;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { defaultSanitizer, HoverBox } from '@jupyterlab/apputils';\nimport { toArray } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to completer menu items.\n */\nconst ITEM_CLASS = 'jp-Completer-item';\n/**\n * The class name added to an active completer menu item.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The minimum height of a completer widget.\n */\nconst MIN_HEIGHT = 20;\n/**\n * The maximum height of a completer widget.\n */\nconst MAX_HEIGHT = 300;\n/**\n * A flag to indicate that event handlers are caught in the capture phase.\n */\nconst USE_CAPTURE = true;\n/**\n * The number of colors defined for the completer type annotations.\n * These are listed in completer/style/index.css#102-152.\n */\nconst N_COLORS = 10;\n/**\n * A widget that enables text completion.\n *\n * #### Notes\n * The completer is intended to be absolutely positioned on the\n * page and hover over any other content, so it should be attached directly\n * to `document.body`, or a node that is the full size of `document.body`.\n * Attaching it to other nodes may incorrectly locate the completer.\n */\nexport class Completer extends Widget {\n    /**\n     * Construct a text completer menu widget.\n     */\n    constructor(options) {\n        super({ node: document.createElement('div') });\n        this._activeIndex = 0;\n        this._editor = null;\n        this._model = null;\n        this._resetFlag = false;\n        this._selected = new Signal(this);\n        this._visibilityChanged = new Signal(this);\n        this._indexChanged = new Signal(this);\n        this._lastSubsetMatch = '';\n        this._renderer = options.renderer || Completer.defaultRenderer;\n        this.model = options.model || null;\n        this.editor = options.editor || null;\n        this.addClass('jp-Completer');\n    }\n    /**\n     * The active index.\n     */\n    get activeIndex() {\n        return this._activeIndex;\n    }\n    /**\n     * The editor used by the completion widget.\n     */\n    get editor() {\n        return this._editor;\n    }\n    set editor(newValue) {\n        this._editor = newValue;\n    }\n    /**\n     * A signal emitted when a selection is made from the completer menu.\n     */\n    get selected() {\n        return this._selected;\n    }\n    /**\n     * A signal emitted when the completer widget's visibility changes.\n     *\n     * #### Notes\n     * This signal is useful when there are multiple floating widgets that may\n     * contend with the same space and ought to be mutually exclusive.\n     */\n    get visibilityChanged() {\n        return this._visibilityChanged;\n    }\n    /**\n     * A signal emitted when the active index changes.\n     */\n    get indexChanged() {\n        return this._indexChanged;\n    }\n    /**\n     * The model used by the completer widget.\n     */\n    get model() {\n        return this._model;\n    }\n    set model(model) {\n        if ((!model && !this._model) || model === this._model) {\n            return;\n        }\n        if (this._model) {\n            this._model.stateChanged.disconnect(this.onModelStateChanged, this);\n        }\n        this._model = model;\n        if (this._model) {\n            this._model.stateChanged.connect(this.onModelStateChanged, this);\n        }\n    }\n    /**\n     * Dispose of the resources held by the completer widget.\n     */\n    dispose() {\n        this._model = null;\n        super.dispose();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        if (this.isHidden || !this._editor) {\n            return;\n        }\n        switch (event.type) {\n            case 'keydown':\n                this._evtKeydown(event);\n                break;\n            case 'mousedown':\n                this._evtMousedown(event);\n                break;\n            case 'scroll':\n                this._evtScroll(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Reset the widget.\n     */\n    reset() {\n        this._activeIndex = 0;\n        this._lastSubsetMatch = '';\n        if (this._model) {\n            this._model.reset(true);\n        }\n    }\n    /**\n     * Emit the selected signal for the current active item and reset.\n     */\n    selectActive() {\n        const active = this.node.querySelector(`.${ACTIVE_CLASS}`);\n        if (!active) {\n            this.reset();\n            return;\n        }\n        this._selected.emit(active.getAttribute('data-value'));\n        this.reset();\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        document.addEventListener('keydown', this, USE_CAPTURE);\n        document.addEventListener('mousedown', this, USE_CAPTURE);\n        document.addEventListener('scroll', this, USE_CAPTURE);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        document.removeEventListener('keydown', this, USE_CAPTURE);\n        document.removeEventListener('mousedown', this, USE_CAPTURE);\n        document.removeEventListener('scroll', this, USE_CAPTURE);\n    }\n    /**\n     * Handle model state changes.\n     */\n    onModelStateChanged() {\n        if (this.isAttached) {\n            this._activeIndex = 0;\n            this.update();\n        }\n    }\n    /**\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        const model = this._model;\n        if (!model) {\n            return;\n        }\n        if (this._resetFlag) {\n            this._resetFlag = false;\n            if (!this.isHidden) {\n                this.hide();\n                this._visibilityChanged.emit(undefined);\n            }\n            return;\n        }\n        let node = null;\n        let completionItemList = model.completionItems && model.completionItems();\n        if (completionItemList && completionItemList.length) {\n            node = this._createCompletionItemNode(model, completionItemList);\n        }\n        else {\n            node = this._createIItemNode(model);\n        }\n        if (!node) {\n            return;\n        }\n        let active = node.querySelectorAll(`.${ITEM_CLASS}`)[this._activeIndex];\n        active.classList.add(ACTIVE_CLASS);\n        // Add the documentation panel\n        let docPanel = document.createElement('div');\n        docPanel.className = 'jp-Completer-docpanel';\n        node.appendChild(docPanel);\n        this._updateDocPanel();\n        // If this is the first time the current completer session has loaded,\n        // populate any initial subset match.\n        if (!model.query) {\n            const populated = this._populateSubset();\n            if (populated) {\n                this.update();\n                return;\n            }\n        }\n        if (this.isHidden) {\n            this.show();\n            this._setGeometry();\n            this._visibilityChanged.emit(undefined);\n        }\n        else {\n            this._setGeometry();\n        }\n    }\n    _createCompletionItemNode(model, items) {\n        // If there are no items, reset and bail.\n        if (!items.length) {\n            this._resetFlag = true;\n            this.reset();\n            if (!this.isHidden) {\n                this.hide();\n                this._visibilityChanged.emit(undefined);\n            }\n            return null;\n        }\n        // Clear the node.\n        let node = this.node;\n        node.textContent = '';\n        // Compute an ordered list of all the types in the typeMap, this is computed\n        // once by the model each time new data arrives for efficiency.\n        let orderedTypes = model.orderedTypes();\n        // Populate the completer items.\n        let ul = document.createElement('ul');\n        ul.className = 'jp-Completer-list';\n        for (let item of items) {\n            if (!this._renderer.createCompletionItemNode) {\n                return null;\n            }\n            let li = this._renderer.createCompletionItemNode(item, orderedTypes);\n            ul.appendChild(li);\n        }\n        node.appendChild(ul);\n        return node;\n    }\n    _createIItemNode(model) {\n        const items = toArray(model.items());\n        // If there are no items, reset and bail.\n        if (!items || !items.length) {\n            this._resetFlag = true;\n            this.reset();\n            if (!this.isHidden) {\n                this.hide();\n                this._visibilityChanged.emit(undefined);\n            }\n            return null;\n        }\n        // If there is only one option, signal and bail.\n        // We don't test the filtered `items`, as that\n        // is too aggressive of completer behavior, it can\n        // lead to double typing of an option.\n        const options = toArray(model.options());\n        if (options.length === 1) {\n            this._selected.emit(options[0]);\n            this.reset();\n            return null;\n        }\n        // Clear the node.\n        const node = this.node;\n        node.textContent = '';\n        // Compute an ordered list of all the types in the typeMap, this is computed\n        // once by the model each time new data arrives for efficiency.\n        const orderedTypes = model.orderedTypes();\n        // Populate the completer items.\n        let ul = document.createElement('ul');\n        ul.className = 'jp-Completer-list';\n        for (const item of items) {\n            const li = this._renderer.createItemNode(item, model.typeMap(), orderedTypes);\n            ul.appendChild(li);\n        }\n        node.appendChild(ul);\n        return node;\n    }\n    /**\n     * Cycle through the available completer items.\n     *\n     * #### Notes\n     * When the user cycles all the way `down` to the last index, subsequent\n     * `down` cycles will cycle to the first index. When the user cycles `up` to\n     * the first item, subsequent `up` cycles will cycle to the last index.\n     */\n    _cycle(direction) {\n        const items = this.node.querySelectorAll(`.${ITEM_CLASS}`);\n        const index = this._activeIndex;\n        let active = this.node.querySelector(`.${ACTIVE_CLASS}`);\n        active.classList.remove(ACTIVE_CLASS);\n        if (direction === 'up') {\n            this._activeIndex = index === 0 ? items.length - 1 : index - 1;\n        }\n        else if (direction === 'down') {\n            this._activeIndex = index < items.length - 1 ? index + 1 : 0;\n        }\n        else {\n            // Measure the number of items on a page.\n            const boxHeight = this.node.getBoundingClientRect().height;\n            const itemHeight = active.getBoundingClientRect().height;\n            const pageLength = Math.floor(boxHeight / itemHeight);\n            // Update the index\n            if (direction === 'pageUp') {\n                this._activeIndex = index - pageLength;\n            }\n            else {\n                this._activeIndex = index + pageLength;\n            }\n            // Clamp to the length of the list.\n            this._activeIndex = Math.min(Math.max(0, this._activeIndex), items.length - 1);\n        }\n        active = items[this._activeIndex];\n        active.classList.add(ACTIVE_CLASS);\n        let completionList = this.node.querySelector('.jp-Completer-list');\n        ElementExt.scrollIntoViewIfNeeded(completionList, active);\n        this._indexChanged.emit(this._activeIndex);\n        this._updateDocPanel();\n    }\n    /**\n     * Handle keydown events for the widget.\n     */\n    _evtKeydown(event) {\n        if (this.isHidden || !this._editor) {\n            return;\n        }\n        if (!this._editor.host.contains(event.target)) {\n            this.reset();\n            return;\n        }\n        switch (event.keyCode) {\n            case 9: {\n                // Tab key\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                const model = this._model;\n                if (!model) {\n                    return;\n                }\n                // Autoinsert single completions on manual request (tab)\n                const items = model.completionItems && model.completionItems();\n                if (items && items.length === 1) {\n                    this._selected.emit(items[0].insertText || items[0].label);\n                    this.reset();\n                    return;\n                }\n                const populated = this._populateSubset();\n                // If the common subset was found and set on `query`,\n                // or if there is a `query` in the initialization options,\n                // then emit a completion signal with that `query` (=subset match),\n                // but only if the query has actually changed.\n                // See: https://github.com/jupyterlab/jupyterlab/issues/10439#issuecomment-875189540\n                if (model.query && model.query != this._lastSubsetMatch) {\n                    model.subsetMatch = true;\n                    this._selected.emit(model.query);\n                    model.subsetMatch = false;\n                    this._lastSubsetMatch = model.query;\n                }\n                // If the query changed, update rendering of the options.\n                if (populated) {\n                    this.update();\n                }\n                this._cycle(event.shiftKey ? 'up' : 'down');\n                return;\n            }\n            case 27: // Esc key\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                this.reset();\n                return;\n            case 33: // PageUp\n            case 34: // PageDown\n            case 38: // Up arrow key\n            case 40: {\n                // Down arrow key\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                const cycle = Private.keyCodeMap[event.keyCode];\n                this._cycle(cycle);\n                return;\n            }\n            default:\n                return;\n        }\n    }\n    /**\n     * Handle mousedown events for the widget.\n     */\n    _evtMousedown(event) {\n        if (this.isHidden || !this._editor) {\n            return;\n        }\n        if (Private.nonstandardClick(event)) {\n            this.reset();\n            return;\n        }\n        let target = event.target;\n        while (target !== document.documentElement) {\n            // If the user has made a selection, emit its value and reset the widget.\n            if (target.classList.contains(ITEM_CLASS)) {\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                this._selected.emit(target.getAttribute('data-value'));\n                this.reset();\n                return;\n            }\n            // If the mouse event happened anywhere else in the widget, bail.\n            if (target === this.node) {\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                return;\n            }\n            target = target.parentElement;\n        }\n        this.reset();\n    }\n    /**\n     * Handle scroll events for the widget\n     */\n    _evtScroll(event) {\n        if (this.isHidden || !this._editor) {\n            return;\n        }\n        const { node } = this;\n        // All scrolls except scrolls in the actual hover box node may cause the\n        // referent editor that anchors the node to move, so the only scroll events\n        // that can safely be ignored are ones that happen inside the hovering node.\n        if (node.contains(event.target)) {\n            return;\n        }\n        // Set the geometry of the node asynchronously.\n        requestAnimationFrame(() => {\n            this._setGeometry();\n        });\n    }\n    /**\n     * Populate the completer up to the longest initial subset of items.\n     *\n     * @returns `true` if a subset match was found and populated.\n     */\n    _populateSubset() {\n        const { model } = this;\n        if (!model) {\n            return false;\n        }\n        const items = this.node.querySelectorAll(`.${ITEM_CLASS}`);\n        const subset = Private.commonSubset(Private.itemValues(items));\n        const { query } = model;\n        // If a common subset exists and it is not the current query, highlight it.\n        if (subset && subset !== query && subset.indexOf(query) === 0) {\n            model.query = subset;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Set the visible dimensions of the widget.\n     */\n    _setGeometry() {\n        const { node } = this;\n        const model = this._model;\n        const editor = this._editor;\n        // This is an overly defensive test: `cursor` will always exist if\n        // `original` exists, except in contrived tests. But since it is possible\n        // to generate a runtime error, the check occurs here.\n        if (!editor || !model || !model.original || !model.cursor) {\n            return;\n        }\n        const start = model.cursor.start;\n        const position = editor.getPositionAt(start);\n        const anchor = editor.getCoordinateForPosition(position);\n        const style = window.getComputedStyle(node);\n        const borderLeft = parseInt(style.borderLeftWidth, 10) || 0;\n        const paddingLeft = parseInt(style.paddingLeft, 10) || 0;\n        // Calculate the geometry of the completer.\n        HoverBox.setGeometry({\n            anchor,\n            host: editor.host,\n            maxHeight: MAX_HEIGHT,\n            minHeight: MIN_HEIGHT,\n            node: node,\n            offset: { horizontal: borderLeft + paddingLeft },\n            privilege: 'below',\n            style: style\n        });\n    }\n    /**\n     * Update the display-state and contents of the documentation panel\n     */\n    _updateDocPanel() {\n        var _a, _b;\n        let docPanel = this.node.querySelector('.jp-Completer-docpanel');\n        if (!docPanel) {\n            return;\n        }\n        if (!((_a = this.model) === null || _a === void 0 ? void 0 : _a.completionItems)) {\n            return;\n        }\n        let items = (_b = this.model) === null || _b === void 0 ? void 0 : _b.completionItems();\n        if (!items) {\n            docPanel.setAttribute('style', 'display:none');\n            return;\n        }\n        let activeItem = items[this._activeIndex];\n        if (!activeItem) {\n            docPanel.setAttribute('style', 'display:none');\n            return;\n        }\n        docPanel.textContent = '';\n        if (activeItem.documentation) {\n            let node;\n            if (!this._renderer.createDocumentationNode) {\n                node = Completer.defaultRenderer.createDocumentationNode(activeItem);\n            }\n            else {\n                node = this._renderer.createDocumentationNode(activeItem);\n            }\n            docPanel.appendChild(node);\n            docPanel.setAttribute('style', '');\n        }\n        else {\n            docPanel.setAttribute('style', 'display:none');\n        }\n    }\n}\n(function (Completer) {\n    /**\n     * The default implementation of an `IRenderer`.\n     */\n    class Renderer {\n        /**\n         * Create an item node from an ICompletionItem for a text completer menu.\n         */\n        createCompletionItemNode(item, orderedTypes) {\n            let baseNode = this._createBaseNode(item.insertText || item.label);\n            if (item.deprecated) {\n                baseNode.classList.add('jp-Completer-deprecated');\n            }\n            return this._constructNode(baseNode, this._createMatchNode(item.label), !!item.type, item.type, orderedTypes, item.icon);\n        }\n        /**\n         * Create an item node for a text completer menu.\n         */\n        createItemNode(item, typeMap, orderedTypes) {\n            return this._constructNode(this._createBaseNode(item.raw), this._createMatchNode(item.text), !JSONExt.deepEqual(typeMap, {}), typeMap[item.raw] || '', orderedTypes);\n        }\n        /**\n         * Create a documentation node for documentation panel.\n         */\n        createDocumentationNode(activeItem) {\n            let pre = document.createElement('pre');\n            pre.textContent = activeItem.documentation || '';\n            return pre;\n        }\n        /**\n         * Create base node with the value to be inserted\n         */\n        _createBaseNode(value) {\n            const li = document.createElement('li');\n            li.className = ITEM_CLASS;\n            // Set the raw, un-marked up value as a data attribute.\n            li.setAttribute('data-value', value);\n            return li;\n        }\n        /**\n         * Create match node to highlight potential prefix match within result.\n         */\n        _createMatchNode(result) {\n            const matchNode = document.createElement('code');\n            matchNode.className = 'jp-Completer-match';\n            // Use innerHTML because search results include <mark> tags.\n            matchNode.innerHTML = defaultSanitizer.sanitize(result, {\n                allowedTags: ['mark']\n            });\n            return matchNode;\n        }\n        /**\n         * Attaches type and match nodes to base node.\n         */\n        _constructNode(li, matchNode, typesExist, type, orderedTypes, icon) {\n            // Add the icon or type monogram\n            if (icon) {\n                const iconNode = icon.element({\n                    className: 'jp-Completer-type jp-Completer-icon'\n                });\n                li.appendChild(iconNode);\n            }\n            else if (typesExist) {\n                const typeNode = document.createElement('span');\n                typeNode.textContent = (type[0] || '').toLowerCase();\n                const colorIndex = (orderedTypes.indexOf(type) % N_COLORS) + 1;\n                typeNode.className = 'jp-Completer-type jp-Completer-monogram';\n                typeNode.setAttribute(`data-color-index`, colorIndex.toString());\n                li.appendChild(typeNode);\n            }\n            else {\n                // Create empty span to ensure consistent list styling.\n                // Otherwise, in a list of two items,\n                // if one item has an icon, but the other has type,\n                // the icon grows out of its bounds.\n                const dummyNode = document.createElement('span');\n                dummyNode.className = 'jp-Completer-monogram';\n                li.appendChild(dummyNode);\n            }\n            li.appendChild(matchNode);\n            // If there is a type, add the type extension and title\n            if (typesExist) {\n                li.title = type;\n                const typeExtendedNode = document.createElement('code');\n                typeExtendedNode.className = 'jp-Completer-typeExtended';\n                typeExtendedNode.textContent = type.toLocaleLowerCase();\n                li.appendChild(typeExtendedNode);\n            }\n            else {\n                // If no type is present on the right,\n                // the highlighting of the completion item\n                // doesn't cover the entire row.\n                const dummyTypeExtendedNode = document.createElement('span');\n                dummyTypeExtendedNode.className = 'jp-Completer-typeExtended';\n                li.appendChild(dummyTypeExtendedNode);\n            }\n            return li;\n        }\n    }\n    Completer.Renderer = Renderer;\n    /**\n     * The default `IRenderer` instance.\n     */\n    Completer.defaultRenderer = new Renderer();\n})(Completer || (Completer = {}));\n/**\n * A namespace for completer widget private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Mapping from keyCodes to scrollTypes.\n     */\n    Private.keyCodeMap = {\n        38: 'up',\n        40: 'down',\n        33: 'pageUp',\n        34: 'pageDown'\n    };\n    /**\n     * Returns the common subset string that a list of strings shares.\n     */\n    function commonSubset(values) {\n        const len = values.length;\n        let subset = '';\n        if (len < 2) {\n            return subset;\n        }\n        const strlen = values[0].length;\n        for (let i = 0; i < strlen; i++) {\n            const ch = values[0][i];\n            for (let j = 1; j < len; j++) {\n                if (values[j][i] !== ch) {\n                    return subset;\n                }\n            }\n            subset += ch;\n        }\n        return subset;\n    }\n    Private.commonSubset = commonSubset;\n    /**\n     * Returns the list of raw item values currently in the DOM.\n     */\n    function itemValues(items) {\n        const values = [];\n        for (let i = 0, len = items.length; i < len; i++) {\n            const attr = items[i].getAttribute('data-value');\n            if (attr) {\n                values.push(attr);\n            }\n        }\n        return values;\n    }\n    Private.itemValues = itemValues;\n    /**\n     * Returns true for any modified click event (i.e., not a left-click).\n     */\n    function nonstandardClick(event) {\n        return (event.button !== 0 ||\n            event.altKey ||\n            event.ctrlKey ||\n            event.shiftKey ||\n            event.metaKey);\n    }\n    Private.nonstandardClick = nonstandardClick;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The completion manager token.\n */\nexport const ICompletionManager = new Token('@jupyterlab/completer:ICompletionManager');\n//# sourceMappingURL=tokens.js.map"],"sourceRoot":""}