{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/latex/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/is_markdown.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/registry.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/options_manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/sanitizer_options.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/render.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/toolbar_generator.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/generate_numbering.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/parse_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/get_rendered_headings.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/get_headings.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/is_heading_filtered.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/append_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/append_markdown_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/append_collapsible_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/get_code_cell_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/get_last_heading_level.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/get_markdown_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/get_rendered_html_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/options_manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/codemirror.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/render.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/tag.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/tag_list.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/toolbar_generator.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/is_dom.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/python/render.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/python/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/toc_item.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/toc_tree.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/toc.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/headings.js"],"names":["LATEX_LEVELS","part","chapter","section","subsection","subsubsection","paragraph","subparagraph","isEnabled","editor","mime","content","model","mimeType","generate","lines","value","text","split","arr","i","length","toEntries","headings","RE","match","push","level","onClick","line","setCursorPosition","column","createLatexGenerator","tracker","usesLatex","isMarkdown","ITableOfContentsRegistry","Token","TableOfContentsRegistry","constructor","this","_collapseChanged","Signal","_generators","find","widget","gen","has","add","generator","collapseChanged","connect","sender","args","emit","IOptionsManager","OptionsManager","options","super","_numbering","numbering","_numberingH1","numberingH1","_widget","translator","nullTranslator","sanitizer","update","initializeOptions","sanitizerOptions","allowedTags","allowedAttributes","code","span","div","p","pre","render","item","jsx","fontSizeClass","html","sanitize","dangerouslySetInnerHTML","__html","className","toolbar","props","state","_trans","load","toggleNumbering","setState","icon","event","role","__","title","numberingIcon","generateNumbering","dict","l","j","parseHeading","str","replace","type","parseInt","heading","scrollIntoView","undefined","FLG","indexOf","getHeadings","createMarkdownGenerator","settings","composite","changed","toolbarGenerator","itemRenderer","createRenderedMarkdownGenerator","node","nodes","querySelectorAll","tagName","textContent","hide","getElementsByClassName","removeChild","innerHTML","nstr","nhtml","getRenderedHeadings","isHeadingFiltered","tags","cellRef","ctags","metadata","get","name","k","appendHeading","prev","collapseLevel","hasChild","appendMarkdownHeading","collapsed","showMarkdown","cellCollapseMetadata","len","parent","appendCollapsibleHeading","getCodeCellHeading","executionCount","lastLevel","index","console","warn","Math","min","prompt","getLastHeadingLevel","loc","getMarkdownHeadings","callback","getRenderedHTMLHeadings","el","classList","contains","nodeName","toLowerCase","document","createElement","insertBefore","firstChild","notebook","_preRenderedToolbar","_filtered","_showCode","_showMarkdown","_showTags","_tagTool","_includeOutput","includeOutput","_syncCollapseState","syncCollapseState","_notebook","storeTags","tagTool","currentWidget","set","notebookMetadata","filtered","updateWidget","updateAndCollapse","showCode","showTags","CodeComponent","UNSAFE_componentWillReceiveProps","nextProps","host","previousHeader","toc","activeCellIndex","tocIndexOfNextHeader","TagComponent","tag","key","Date","toLocaleTimeString","TagListComponent","selectedTagWithName","selectedTags","selectionStateHandler","renderTagComponents","map","tagClass","tabIndex","selected","TagsToolComponent","changeSelectionState","newState","filterTags","deselectAll","selectAllCellsWithCurrentTags","panel","widgets","changedActive","forEach","cell","ix","every","containsTag","select","updateFilters","tmp","idx","inputFilter","tagList","UNSAFE_componentWillUpdate","command","onKeyDown","createNotebookGenerator","activeCellChanged","context","ready","then","toggleCode","toggleMarkdown","toggleTagDropdown","loadTags","cells","Set","list","Array","isArray","from","codeToggleIcon","codeIcon","markdownToggleIcon","markdownIcon","numberingToggleIcon","tagDropdown","tagToggleIcon","tagIcon","ref","MARKDOWN_HEADING_COLLAPSED","button","stopPropagation","ellipseButton","ellipsesIcon","activeCell","NotebookActions","delete","collapsedState","tocType","mcell","rendered","inputHidden","mode","htmlHeadings","markdownHeadings","count","outputs","m","dtypes","Object","keys","data","filter","t","outputArea","processingImports","trim","slice","createPythonGenerator","TOCItem","_a","preventDefault","entryClicked","onContextMenu","TOCTree","Toolbar","TableOfContents","Widget","_docmanager","docmanager","_rendermime","rendermime","_headings","_entryClicked","activeEntry","_current","_toolbar","_monitor","dispose","contextForWidget","Error","ActivityMonitor","signal","contentChanged","timeout","activityStopped","onUpdateRequest","msg","PathExt","localPath","latexTypesetter","typeset","_activeEntry","onAfterShow","runNestedCodeCells","h","isNotebookHeading","runCode","CodeCell","sessionContext"],"mappings":"qaAWA,MAAMA,EAAe,CACjBC,KAAM,EACNC,QAAS,EACTC,QAAS,EACTC,WAAY,EACZC,cAAe,EACfC,UAAW,EACXC,aAAc,GA0BlB,SAASC,EAAUC,GAEf,IAAIC,EAAOD,EAAOE,QAAQC,MAAMC,SAChC,MAAgB,iBAATH,GAAoC,gBAATA,EAStC,SAASI,EAASL,GAEd,IAAIM,EAAQN,EAAOE,QAAQC,MAAMI,MAAMC,KAAKC,MAAM,MAElDH,EA7BJ,SAAmBI,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAIE,OAAQD,IAC5BD,EAAIC,GAAK,CAACD,EAAIC,GAAIA,GAEtB,OAAOD,EAyBCG,CAAUP,GAElB,IAAIQ,EAAW,GACf,IAAK,IAAIH,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IAAK,CACnC,MAAMI,EAAK,iDACLC,EAAQV,EAAMK,GAAG,GAAGK,MAAMD,GAC5BC,GACAF,EAASG,KAAK,CACVT,KAAMQ,EAAM,GACZE,MAAO3B,EAAayB,EAAM,IAC1BG,QAASA,EAAQb,EAAMK,GAAG,MAItC,OAAOG,EAQP,SAASK,EAAQC,GACb,MAAO,KACHpB,EAAOE,QAAQF,OAAOqB,kBAAkB,CACpCD,KAAMA,EACNE,OAAQ,MAYxB,SAASC,EAAqBC,GAC1B,MAAO,CACHA,UACAC,WAAW,EACX1B,UAAWA,EACXM,SAAUA,G,eCtFlB,SAASqB,EAAWzB,GAChB,MAAiB,sBAATA,GACK,oBAATA,GACS,eAATA,GACS,kBAATA,E,yBCbD,MAAM0B,EAA2B,IAAI,EAAAC,MAAM,4CAK3C,MAAMC,EACTC,cACIC,KAAKC,iBAAmB,IAAI,EAAAC,OAAOF,MACnCA,KAAKG,YAAc,GAYvBC,KAAKC,GACD,IAAK,IAAIzB,EAAI,EAAGA,EAAIoB,KAAKG,YAAYtB,OAAQD,IAAK,CAC9C,MAAM0B,EAAMN,KAAKG,YAAYvB,GAC7B,GAAI0B,EAAIb,QAAQc,IAAIF,GAAS,CACzB,GAAIC,EAAItC,YAAcsC,EAAItC,UAAUqC,GAChC,SAEJ,OAAOC,IASnBE,IAAIC,GACIA,EAAUC,iBAEVD,EAAUC,gBAAgBC,SAAQ,CAACC,EAAQC,KACvCb,KAAKC,iBAAiBa,KAAKD,MAGnCb,KAAKG,YAAYjB,KAAKuB,GAE1B,sBACI,OAAOT,KAAKC,mBAMpB,SAAWH,GAMPA,EAAwBiB,gBAFxB,QAJJ,CAOGjB,IAA4BA,EAA0B,KC1DzD,MAAMkB,UAAuB,kBAQzBjB,YAAYM,EAAQY,GAChBC,QACAlB,KAAKmB,WAAaF,EAAQG,UAC1BpB,KAAKqB,aAAeJ,EAAQK,YAC5BtB,KAAKuB,QAAUlB,EACfL,KAAKwB,WAAaP,EAAQO,YAAc,EAAAC,eACxCzB,KAAK0B,UAAYT,EAAQS,UAK7B,cAAclD,GACVwB,KAAKmB,WAAa3C,EAClBwB,KAAKuB,QAAQI,SAEjB,gBACI,OAAO3B,KAAKmB,WAKhB,gBAAgB3C,GACRwB,KAAKqB,cAAgB7C,IACrBwB,KAAKqB,aAAe7C,EACpBwB,KAAKuB,QAAQI,UAGrB,kBACI,OAAO3B,KAAKqB,aAWhBO,kBAAkBR,EAAWE,GACzBtB,KAAKmB,WAAaC,EAClBpB,KAAKqB,aAAeC,EACpBtB,KAAKuB,QAAQI,U,cChDrB,MAAME,EAAmB,CACrBC,YAAa,CACT,IACA,aACA,IACA,IACA,SACA,KACA,SACA,OACA,KACA,MACA,OACA,MACA,OAEJC,kBAAmB,CAEfC,KAAM,CAAC,SAEPC,KAAM,CAAC,SAEPC,IAAK,CAAC,SAENC,EAAG,CAAC,SAEJC,IAAK,CAAC,WCzBd,SAASC,EAAOpB,EAASqB,GACrB,IAIIC,EAJAC,EAAgB,kBAAoBF,EAAKnD,MAEzCiC,EAAYkB,EAAKlB,WAAaH,EAAQG,UAAYkB,EAAKlB,UAAY,GAGvE,GAAIkB,EAAKG,KAAM,CACX,IAAIA,EAAOxB,EAAQS,UAAUgB,SAASJ,EAAKG,KAAMZ,GACjDU,EAAO,gBAAoB,OAAQ,CAAEI,wBAAyB,CAAEC,OAAQxB,EAAYqB,GAAQI,UAAW,qBAAuBL,SAG9HD,EAAM,gBAAoB,OAAQ,CAAEM,UAAWL,GAC3C,IACApB,EAAYkB,EAAK7D,MAEzB,OAAO8D,E,eChBX,SAASO,EAAQ7B,GACb,OAAO,cAAsB,YAOzBlB,YAAYgD,GACR7B,MAAM6B,GACN/C,KAAKgD,MAAQ,CAAE5B,WAAW,GAC1BH,EAAQW,mBAAkB,EAAOX,EAAQK,aACzCtB,KAAKiD,OAAShC,EAAQO,WAAW0B,KAAK,cAO1Cb,SACI,MAAMc,EAAkB,KACpBlC,EAAQG,WAAaH,EAAQG,UAC7BpB,KAAKoD,SAAS,CAAEhC,UAAWH,EAAQG,aAEjCiC,EAAQ,gBAAoB,MAAO,CAAEjE,QAASkE,GAASH,IAAmBI,KAAM,OAAQ,aAAcvD,KAAKiD,OAAOO,GAAG,yBAA0BC,MAAOzD,KAAKiD,OAAOO,GAAG,yBAA0BX,UAAW7C,KAAKgD,MAAM5B,UACjN,4BACA,oBACN,gBAAoB,EAAAsC,cAAA,MAAqB,OAC7C,OAAQ,gBAAoB,MAAO,KAC/B,gBAAoB,MAAO,CAAEb,UAAW,eAAiBQ,MCFzE,SAASM,EAAkBC,EAAMzE,GAC7B,GAAa,OAATyE,EACA,OAEJ,IAAIxC,EAAY,GAEhB,GADAwC,EA3BJ,SAAgBA,EAAMzE,GAClB,IAAK,IAAI0E,EAAI1E,EAAQ,EAAG0E,GAdF,EAc0BA,SAC5B,IAAZD,EAAKC,KACLD,EAAKC,QAAK,GASlB,YANoB,IAAhBD,EAAKzE,GACLyE,EAAKzE,GAAS,EAGdyE,EAAKzE,IAAU,EAEZyE,EAeAjC,CAAOiC,EAAMzE,GAChBA,GAAS,EAAG,CACZ,IAAK,IAAI2E,EAAI,EAAGA,GAAK3E,EAAO2E,IACxB1C,SAA0B,IAAZwC,EAAKE,GAAgB,IAAMF,EAAKE,IAAM,IAExD1C,GAAa,IAEjB,OAAOA,ECGX,SAAS2C,EAAaC,GAClB,MAAMzF,EAAQyF,EAAItF,MAAM,MAExB,IAAIO,EAAQV,EAAM,GAAGU,MAAM,oBAC3B,OAAIA,EACO,CACHR,KAAMQ,EAAM,GAAGgF,QAAQ,kBAAmB,MAC1C9E,MAAOF,EAAM,GAAGJ,OAChBqF,KAAM,YAIV3F,EAAMM,OAAS,IACfI,EAAQV,EAAM,GAAGU,MAAM,gCACnBA,GACO,CACHR,KAAMF,EAAM,GAAG0F,QAAQ,kBAAmB,MAC1C9E,MAAuB,MAAhBF,EAAM,GAAG,GAAa,EAAI,EACjCiF,KAAM,iBAKlBjF,EAAQV,EAAM,GAAGU,MAAM,4BACnBA,EACO,CACHR,KAAMQ,EAAM,GACZE,MAAOgF,SAASlF,EAAM,GAAI,IAC1BiF,KAAM,QAGP,MCzEX,SAAS9E,EAAQgF,GACb,MAAO,KACHA,EAAQC,kBCGhB,SAAS,EAAUpG,GAEf,OAAO0B,EAAW1B,EAAOE,QAAQC,MAAMC,UAU3C,SAAS,EAASJ,EAAQgD,GACtB,IACIK,GAAc,EAIlB,YAHgBgD,IAAZrD,IACAK,EAAcL,EAAQK,aClB9B,SAAqB7C,EAAMW,EAASwE,EAAMtC,GAEtC,MAAM/C,EAAQE,EAAKC,MAAM,MAEzB,IACI6F,EADAxF,EAAW,GAEf,IAAK,IAAIH,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IAAK,CACnC,IAAIS,EAAOd,EAAMK,GAKjB,GAH4B,IAAxBS,EAAKmF,QAAQ,SACbD,GAAOA,GAEPA,EACA,SAEJlF,GAAQd,EAAMK,EAAI,GAAK,KAAOL,EAAMK,EAAI,GAAK,GAC7C,MAAMwF,EAAUL,EAAa1E,GAC7B,GAAI+E,EAAS,CACT,IAAIjF,EAAQiF,EAAQjF,MACfmC,IACDnC,GAAS,GAEbJ,EAASG,KAAK,CACVT,KAAM2F,EAAQ3F,KACd2C,UAAWuC,EAAkBC,EAAMzE,GACnCA,MAAOiF,EAAQjF,MACfC,QAASA,EAAQR,MAI7B,OAAOG,EDVA0F,CAAYxG,EAAOE,QAAQC,MAAMI,MAAMC,MAQ9C,SAAiBY,GACb,MAAO,KACHpB,EAAOE,QAAQF,OAAOqB,kBAAkB,CACpCD,KAAMA,EACNE,OAAQ,OAjBT,GAKwD+B,GA2BvE,SAASoD,EAAwBjF,EAASY,EAAQqB,EAAWF,EAAYmD,GACrE,IAAIrD,GAAc,EACdqD,IACArD,EAAcqD,EAASC,UAAUtD,aAErC,MAAML,EAAU,IAAID,EAAeX,EAAQ,CACvCe,WAAW,EACXE,YAAaA,EACbI,YACAF,WAAYA,GAAc,EAAAC,iBAO9B,OALIkD,GACAA,EAASE,QAAQlE,SAAQ,KACrBM,EAAQK,YAAcqD,EAASC,UAAUtD,eAG1C,CACH7B,UACAC,WAAW,EACXuB,QAASA,EACT6D,iBAWJ,WACI,OAAOhC,EAAQ7B,IAXf8D,aAoBJ,SAAoBzC,GAChB,OAAOD,EAAOpB,EAASqB,IApBvBtE,UAAW,EACXM,SAAU,GA+BlB,SAAS0G,EAAgCvF,EAASY,EAAQqB,EAAWF,EAAYmD,GAC7E,IAAIrD,GAAc,EACdqD,IACArD,EAAcqD,EAASC,UAAUtD,aAErC,MAAML,EAAU,IAAID,EAAeX,EAAQ,CACvCe,WAAW,EACXE,YAAaA,EACbI,YACAF,WAAYA,GAAc,EAAAC,iBAO9B,OALIkD,GACAA,EAASE,QAAQlE,SAAQ,KACrBM,EAAQK,YAAcqD,EAASC,UAAUtD,eAG1C,CACH7B,UACAC,WAAW,EACXuB,QAASA,EACT6D,iBAUJ,WACI,OAAOhC,EAAQ7B,IAVf8D,aAmBJ,SAAoBzC,GAChB,OAAOD,EAAOpB,EAASqB,IAnBvBhE,SA4BJ,SAAkB+B,GAEd,OD5IR,SAA6B4E,EAAMvD,EAAWkC,EAAMxC,GAAY,EAAME,GAAc,GAChF,IAAI4D,EAAQD,EAAKE,iBAAiB,0BAC9BpG,EAAW,GACf,IAAK,IAAIH,EAAI,EAAGA,EAAIsG,EAAMrG,OAAQD,IAAK,CACnC,MAAMwF,EAAUc,EAAMtG,GACtB,IAAIO,EAAQgF,SAASC,EAAQgB,QAAQ,GAAI,IACrC3G,EAAO2F,EAAQiB,YAAcjB,EAAQiB,YAAc,GACnDC,GAAQlE,EAERgD,EAAQmB,uBAAuB,mBAAmB1G,OAAS,GAC3DuF,EAAQoB,YAAYpB,EAAQmB,uBAAuB,mBAAmB,IAE1E,IAAI9C,EAAOf,EAAUgB,SAAS0B,EAAQqB,UAAW5D,GACjDY,EAAOA,EAAKwB,QAAQ,IAAK,IAEpB3C,IACDnC,GAAS,GAEb,IAAIuG,EAAO/B,EAAkBC,EAAMzE,GAE/BwG,EAAQ,GACPL,IACDK,EAAQ,iCAAmCD,EAAO,WAGtDtB,EAAQqB,UAAYE,EAAQlD,EAC5B1D,EAASG,KAAK,CACVC,QACAV,KAAMA,EAAKwF,QAAQ,IAAK,IACxB7C,UAAWsE,EACXjD,OACArD,QAASA,EAAQgF,KAGzB,OAAOrF,EC0GI6G,CAAoBvF,EAAOlC,QAAQ8G,KAAMvD,EADrC,GACsDT,EAAQG,UAAWH,EAAQK,e,eE7JpG,SAASuE,EAAkBzB,EAAS0B,GAChC,GAAoB,IAAhBA,EAAKjH,OACL,OAAO,EAEX,GAAIuF,GAAWA,EAAQ2B,QAAS,CAC5B,IACIC,EADO5B,EAAQ2B,QAAQ3H,MAAM6H,SAChBC,IAAI,QACrB,GAAIF,EACA,IAAK,IAAIlC,EAAI,EAAGA,EAAIkC,EAAMnH,OAAQiF,IAAK,CACnC,IAAIqC,EAAOH,EAAMlC,GACjB,IAAK,IAAIsC,EAAI,EAAGA,EAAIN,EAAKjH,OAAQuH,IAC7B,GAAIN,EAAKM,KAAOD,EACZ,OAAO,GAM3B,OAAO,ECdX,SAASE,EAActH,EAAUqF,EAASkC,EAAMC,EAAeT,GAC3D,GAAI1B,IAAYyB,EAAkBzB,EAAS0B,IAAS1B,EAAQ3F,KAAM,CAE9D,GAAI6H,GAAsB,WAAdA,EAAKpC,KACb,IAAK,IAAIJ,EAAI/E,EAASF,OAAS,EAAGiF,GAAK,EAAGA,IAClC/E,EAAS+E,KAAOwC,IAEhBvH,EAAS+E,GAAG0C,UAAW,GAI/BD,EAAgB,GAChBxH,EAASG,KAAKkF,GAElBkC,EAAOlC,EAEX,MAAO,CAACrF,EAAUuH,GCZtB,SAASG,EAAsBrC,EAASrF,EAAUuH,EAAMC,EAAeT,EAAMY,EAAWC,EAAcC,GAQlG,OAPIxC,GAA4B,aAAjBA,EAAQF,MAAuByC,GAEzC5H,EAAUuH,GAAQD,EAActH,EAAUqF,EAASkC,EAAMC,EAAeT,GAEpE1B,GAA4B,WAAjBA,EAAQF,QACvBnF,EAAUuH,EAAMC,GCRzB,SAAkCxH,EAAUqF,EAASkC,EAAMC,EAAeT,EAAMY,EAAWE,GACvF,MAAMC,EAAM9H,EAASF,OACrB,GAAKgH,EAAkBzB,EAAS0B,IAiB3B,GAAIQ,GAAQlC,EAAQjF,OAASmH,EAAKnH,MAAO,CAE1C,IAAI2H,GAAS,EACTV,EAAIS,EAAM,EACd,KAAOT,GAAK,EAAGA,IACX,GAAIrH,EAASqH,GAAGjH,MAAQiF,EAAQjF,MAAO,CACnCmH,EAAOvH,EAASqH,GAChBU,GAAS,EACT,MAIJA,EAEAP,EADoBxH,EAASqH,EAAI,GAAGL,QAAQ3H,MAAM6H,SAASC,IAAIU,GACjC7H,EAASqH,EAAI,GAAGjH,OAAS,GAGvDmH,EAAO,KACPC,GAAiB,QAnCc,CAEnC,GAAID,GAAsB,WAAdA,EAAKpC,MAAqBoC,EAAKnH,MAAQiF,EAAQjF,MACvD,IAAK,IAAI2E,EAAI+C,EAAM,EAAG/C,GAAK,EAAGA,IACtB/E,EAAS+E,KAAOwC,IAEhBvH,EAAS+E,GAAG0C,UAAW,IAK/BD,GAAiBnC,EAAQjF,OAASoH,EAAgB,KAClDxH,EAASG,KAAKkF,GACdmC,EAAgBG,EAAYtC,EAAQjF,OAAS,GAEjDmH,EAAOlC,EAuBX,MAAO,CAACrF,EAAUuH,EAAMC,GDhCcQ,CAAyBhI,EAAUqF,EAASkC,EAAMC,EAAeT,EAAMY,EAAWE,IAEjH,CAAC7H,EAAUuH,EAAMC,GEZ5B,SAASS,EAAmBvI,EAAMW,EAAS6H,EAAgBC,EAAWnB,EAASoB,GAAQ,GACnF,IAAIpI,EAAW,GAIf,IAHe,IAAXoI,GACAC,QAAQC,KAAK,iFAEb5I,EAAM,CACN,MAAMF,EAAQE,EAAKC,MAAM,MACnBmI,EAAMS,KAAKC,IAAIhJ,EAAMM,OAAQ,GACnC,IAAImF,EAAM,GACNpF,EAAI,EACR,KAAOA,EAAIiI,EAAM,EAAGjI,IAChBoF,GAAOzF,EAAMK,GAAK,KAEtBoF,GAAOzF,EAAMK,GACbG,EAASG,KAAK,CACVT,KAAMuF,EACN7E,MAAO+H,EAAY,EACnB9H,QAASA,EAAQ,GACjB8E,KAAM,OACNsD,OAAQP,EACRlB,QAASA,EACTS,UAAU,EACVW,MAAOA,IAGf,OAAOpI,EAAS,GC9BpB,SAAS0I,EAAoB1I,GACzB,GAAIA,EAASF,OAAS,EAAG,CACrB,IAAI6I,EAAM3I,EAASF,OAAS,EAC5B,KAAO6I,GAAO,GAAG,CACb,GAA2B,WAAvB3I,EAAS2I,GAAKxD,KACd,OAAOnF,EAAS2I,GAAKvI,MAEzBuI,GAAO,GAGf,OAAO,ECHX,SAASC,EAAoBlJ,EAAMW,EAASwE,EAAMsD,EAAWnB,EAASoB,GAAQ,GAC1E,MAAMS,EAAWxI,EAAQ,GACzB,IAAIL,EAAW,IACA,IAAXoI,GACAC,QAAQC,KAAK,iFAEjB,IAAK,MAAMhI,KAAQZ,EAAKC,MAAM,MAAO,CACjC,MAAM0F,EAAUL,EAAa1E,GACzB+E,EACArF,EAASG,KAAK,CACVT,KAAM2F,EAAQ3F,KACdU,MAAOiF,EAAQjF,MACfiC,UAAWuC,EAAkBC,EAAMQ,EAAQjF,OAC3CC,QAASwI,EACT1D,KAAM,SACN6B,QAASA,EACTS,UAAU,EACVW,UAIJpI,EAASG,KAAK,CACVT,KAAMA,EACNU,MAAO+H,EAAY,EACnB9H,QAASwI,EACT1D,KAAM,WACN6B,QAASA,EACTS,UAAU,EACVW,UAIZ,OAAOpI,EC9BX,SAAS8I,EAAwB5C,EAAM7F,EAASsC,EAAWkC,EAAMsD,EAAW9F,GAAY,EAAOE,GAAc,EAAMyE,EAASoB,GAAQ,GAChI,IAAIjC,EAAQD,EAAKE,iBAAiB,8BACnB,IAAXgC,GACAC,QAAQC,KAAK,iFAEjB,IAAItI,EAAW,GACf,IAAK,MAAM+I,KAAM5C,EAAO,CACpB,GAAI4C,EAAGC,UAAUC,SAAS,iBAEtB,SAEJ,GAAkC,MAA9BF,EAAGG,SAASC,cAAuB,CACnC,GAAIJ,EAAGrC,UAAW,CACd,IAAIhD,EAAOf,EAAUgB,SAASoF,EAAGrC,UAAW5D,GAC5C9C,EAASG,KAAK,CACVC,MAAO+H,EAAY,EACnBzE,KAAMA,EAAKwB,QAAQ,IAAK,IACxBxF,KAAMqJ,EAAGzC,YAAcyC,EAAGzC,YAAc,GACxCjG,QAASA,EAAQ0I,GACjB5D,KAAM,WACN6B,QAASA,EACTS,UAAU,EACVW,MAAOA,IAGf,SAEAW,EAAGvC,uBAAuB,mBAAmB1G,OAAS,GACtDiJ,EAAGtC,YAAYsC,EAAGvC,uBAAuB,mBAAmB,IAEhE,IAAI9C,EAAOf,EAAUgB,SAASoF,EAAGrC,UAAW5D,GAC5CY,EAAOA,EAAKwB,QAAQ,IAAK,IACzB,IAAI9E,EAAQgF,SAAS2D,EAAG1C,QAAQ,GAAI,IAC/B9D,IACDnC,GAAS,GAEb,IAAIuG,EAAO/B,EAAkBC,EAAMzE,GACnC,GAAIiC,EAAW,CACX,MAAMuE,EAAQwC,SAASC,cAAc,QACrCzC,EAAMoC,UAAUvH,IAAI,mBACpBmF,EAAMN,YAAcK,QAAmCA,EAAO,GAC9DoC,EAAGO,aAAa1C,EAAOmC,EAAGQ,YAE9BvJ,EAASG,KAAK,CACVC,MAAOA,EACPV,KAAMqJ,EAAGzC,YAAcyC,EAAGzC,YAAc,GACxCjE,UAAWsE,EACXjD,KAAMA,EACNrD,QAASA,EAAQ0I,GACjB5D,KAAM,SACN6B,QAASA,EACTS,UAAU,EACVW,MAAOA,IAGf,OAAOpI,EC/DX,MAAM,UAAuB,kBASzBgB,YAAYM,EAAQkI,EAAUtH,GAC1BC,QACAlB,KAAKwI,oBAAsB,KAC3BxI,KAAKyI,UAAY,GACjBzI,KAAK0I,WAAY,EACjB1I,KAAK2I,eAAgB,EACrB3I,KAAK4I,WAAY,EACjB5I,KAAK6I,SAAW,KAChB7I,KAAKmB,WAAaF,EAAQG,UAC1BpB,KAAKqB,aAAeJ,EAAQK,YAC5BtB,KAAK8I,eAAiB7H,EAAQ8H,cAC9B/I,KAAKgJ,mBAAqB/H,EAAQgI,kBAClCjJ,KAAKuB,QAAUlB,EACfL,KAAKkJ,UAAYX,EACjBvI,KAAK0B,UAAYT,EAAQS,UACzB1B,KAAKmJ,UAAY,GACjBnJ,KAAKwB,WAAaP,EAAQO,YAAc,EAAAC,eACxCzB,KAAKC,iBAAmB,IAAI,EAAAC,OAAOF,MAKvC,YAAYoJ,GACRpJ,KAAK6I,SAAWO,EAEpB,cACI,OAAOpJ,KAAK6I,SAKhB,qBAAqBrK,GACmB,MAAhCwB,KAAKkJ,UAAUG,eACfrJ,KAAKkJ,UAAUG,cAAcjL,MAAM6H,SAASqD,IAAI9K,EAAM,GAAIA,EAAM,IAMxE,cAAcA,GACVwB,KAAKmB,WAAa3C,EAClBwB,KAAKuB,QAAQI,SACb3B,KAAKuJ,iBAAmB,CAAC,oBAAqBvJ,KAAKmB,YAEvD,gBACI,OAAOnB,KAAKmB,WAKhB,gBAAgB3C,GACRwB,KAAKqB,cAAgB7C,IACrBwB,KAAKqB,aAAe7C,EACpBwB,KAAKuB,QAAQI,UAGrB,kBACI,OAAO3B,KAAKqB,aAKhB,kBAAkB7C,GACVwB,KAAK8I,gBAAkBtK,IACvBwB,KAAK8I,eAAiBtK,EACtBwB,KAAKuB,QAAQI,UAGrB,oBACI,OAAO3B,KAAK8I,eAKhB,sBAAsBtK,GACdwB,KAAKgJ,oBAAsBxK,IAC3BwB,KAAKgJ,mBAAqBxK,EAC1BwB,KAAKuB,QAAQI,UAGrB,wBACI,OAAO3B,KAAKgJ,mBAKhB,aAAaxK,GACTwB,KAAK0I,UAAYlK,EACjBwB,KAAKuJ,iBAAmB,CAAC,eAAgBvJ,KAAK0I,WAC9C1I,KAAKuB,QAAQI,SAEjB,eACI,OAAO3B,KAAK0I,UAKhB,iBAAiBlK,GACbwB,KAAK2I,cAAgBnK,EACrBwB,KAAKuJ,iBAAmB,CAAC,sBAAuBvJ,KAAK2I,eACrD3I,KAAKuB,QAAQI,SAEjB,mBACI,OAAO3B,KAAK2I,cAKhB,sBACI,OAAO3I,KAAKC,iBAKhB,aAAazB,GACTwB,KAAK4I,UAAYpK,EACjBwB,KAAKuJ,iBAAmB,CAAC,eAAgBvJ,KAAK4I,WAC9C5I,KAAKuB,QAAQI,SAEjB,eACI,OAAO3B,KAAK4I,UAKhB,eAUI,OATI5I,KAAKoJ,QACLpJ,KAAKyI,UAAYzI,KAAKoJ,QAAQI,SAEzBxJ,KAAKmJ,UAAUtK,OAAS,EAC7BmB,KAAKyI,UAAYzI,KAAKmJ,UAGtBnJ,KAAKyI,UAAY,GAEdzI,KAAKyI,UAKhB,uBAAuBjK,GACnBwB,KAAKwI,oBAAsBhK,EAE/B,yBACI,OAAOwB,KAAKwI,oBAKhBiB,eACIzJ,KAAKuB,QAAQI,SAQjB+H,kBAAkB7I,GACdb,KAAKC,iBAAiBa,KAAKD,GAC3Bb,KAAKuB,QAAQI,SAiBjBC,kBAAkBR,EAAWE,EAAayH,EAAeE,EAAmBU,EAAUhD,EAAciD,GAChG5J,KAAKmB,WAAaC,EAClBpB,KAAKqB,aAAeC,EACpBtB,KAAK8I,eAAiBC,EACtB/I,KAAKgJ,mBAAqBC,EAC1BjJ,KAAK0I,UAAYiB,EACjB3J,KAAK2I,cAAgBhC,EACrB3G,KAAK4I,UAAYgB,EACjB5J,KAAKuB,QAAQI,U,eCnMrB,MAAMkI,UAAsB,YAOxB9J,YAAYgD,GACR7B,MAAM6B,GACN/C,KAAKgD,MAAQ,CAAEoB,QAASrB,EAAMqB,SAOlC0F,iCAAiCC,GAC7B/J,KAAKoD,SAAS,CAAEgB,QAAS2F,EAAU3F,UAOvC/B,SAEI,IAAII,EAAOzC,KAAKgD,MAAMoB,QAAQ2B,QAAQ9H,OAAO+L,KAAKvE,UAGlD,OADAhD,EAAOzC,KAAK+C,MAAMrB,UAAUgB,SAASD,EAAMZ,GACnC,gBAAoB,MAAO,CAAEgB,UAAW,SAAUF,wBAAyB,CAAEC,OAAQH,MCkHrG,SAASwH,EAAexK,EAAS6C,EAAM4H,GACnC,GAAI5H,EAAK6E,OAAS,IAAM+C,aAAiC,EAASA,EAAIrL,QAAS,CAC3E,IAAIsL,EAAkB1K,EAAQ4J,cAAclL,QAAQgM,gBAGpD,GAFkB7H,EAAK6E,MAELgD,EAAiB,CAC/B,IAAIC,EAAuBF,EAAI1F,QAAQlC,GAAQ,EAE/C,GAAI8H,GAAwBF,EAAIrL,OAC5B,OAAO,EAIX,IADsBqL,aAAiC,EAASA,EAAIE,GAAsBjD,OACpEgD,EAClB,OAAO,GAInB,OAAO,EClKX,MAAME,UAAqB,YAOvBtK,YAAYgD,GACR7B,MAAM6B,GAOVV,SACI,MAAMiI,EAAMtK,KAAK+C,MAAMuH,IACvB,OAAQ,gBAAoB,MAAO,KAC/B,gBAAoB,QAAS,CAAEzH,UAAW,gBAAiB0H,KAAK,IAAIC,MAAOC,sBAAwBH,KCjB/G,MAAMI,UAAyB,YAO3B3K,YAAYgD,GACR7B,MAAM6B,GAMN/C,KAAK2K,oBAAuBxE,IACpBnG,KAAK+C,MAAM6H,aAAapG,QAAQ2B,IAAS,EACzCnG,KAAK+C,MAAM8H,sBAAsB1E,GAAM,GAGvCnG,KAAK+C,MAAM8H,sBAAsB1E,GAAM,IAQ/CnG,KAAK8K,oBAAuBhF,IACxB,MAAM8E,EAAe5K,KAAK+C,MAAM6H,aAC1BD,EAAsB3K,KAAK2K,oBACjC,OAAO7E,EAAKiF,KAAI,CAACT,EAAKnD,KAClB,MAAM6D,EAAWJ,EAAapG,QAAQ8F,IAAQ,EACxC,2BACA,6BACN,OAAQ,gBAAoB,MAAO,CAAEC,IAAKD,EAAKzH,UAAWmI,EAAU5L,QAASkE,IACrEqH,EAAoBL,IACrBW,SAAU,GACb,gBAAoBZ,EAAc,CAAEQ,sBAAuB7K,KAAK+C,MAAM8H,sBAAuBD,aAAc5K,KAAK+C,MAAM6H,aAAcN,IAAKA,SAGrJtK,KAAKgD,MAAQ,CAAEkI,SAAUlL,KAAK+C,MAAM6H,cAOxCvI,SACI,IAAIyD,EAAO9F,KAAK+C,MAAM+C,KAClBvD,EAAM,KAIV,OAHIuD,IACAvD,EAAMvC,KAAK8K,oBAAoBhF,IAE5B,gBAAoB,MAAO,CAAEjD,UAAW,kBAAoBN,ICpD3E,MAAM4I,UAA0B,YAO5BpL,YAAYgD,GACR7B,MAAM6B,GAON/C,KAAKoL,qBAAuB,CAACC,EAAU7K,KACnC,IAAIsF,EAAO9F,KAAKgD,MAAMkI,SACtB,GAAI1K,EACAsF,EAAK5G,KAAKmM,GACVrL,KAAKoD,SAAS,CAAE8H,SAAUpF,IAC1B9F,KAAKsL,WAAWxF,OAEf,CACD,IAAIoF,EAAW,GACf,IAAK,IAAItM,EAAI,EAAGA,EAAIkH,EAAKjH,OAAQD,IACzBkH,EAAKlH,KAAOyM,GACZH,EAAShM,KAAK4G,EAAKlH,IAG3BoB,KAAKoD,SAAS,CAAE8H,SAAUA,IAC1BlL,KAAKsL,WAAWJ,KAMxBlL,KAAKuL,YAAc,KACfvL,KAAKoD,SAAS,CAAE8H,SAAU,KAC1BlL,KAAK+C,MAAM9B,QAAQwI,gBAKvBzJ,KAAKwL,8BAAgC,KACjC,MAAM1F,EAAO9F,KAAKgD,MAAMkI,SAClBO,EAAQzL,KAAK+C,MAAMtD,QAAQ4J,cAC3BqC,EAAUD,aAAqC,EAASA,EAAMtN,QAAQuN,QAC5ED,SAA8CA,EAAMtN,QAAQoN,cAC5D,IAAII,GAAgB,EACpBD,SAAkDA,EAAQE,SAAQ,CAACC,EAAMC,KAC3ChG,EAAKiG,OAAMzB,GAAOtK,KAAKgM,YAAY1B,EAAKuB,OAEzDF,IACGF,IACAA,EAAMtN,QAAQgM,gBAAkB2B,GAEpCH,GAAgB,GAEpBF,SAA8CA,EAAMtN,QAAQ8N,OAAOJ,QAS/E7L,KAAKsL,WAAcJ,IACflL,KAAKoD,SAAS,CAAE8H,aAChBlL,KAAK+C,MAAM9B,QAAQwI,gBAKvBzJ,KAAKkM,cAAgB,KACjB,IAAIC,EAAM,GACNC,EAAM,EACNzK,GAAS,EACb,IAAK,IAAI/C,EAAI,EAAGA,EAAIoB,KAAKgD,MAAMkI,SAASrM,OAAQD,IACxCoB,KAAK+C,MAAM+C,KAAKtB,QAAQxE,KAAKgD,MAAMkI,SAAStM,KAAO,GACnDuN,EAAIC,GAAOpM,KAAKgD,MAAMkI,SAAStM,GAC/BwN,GAAO,IAE8B,IAAhCpM,KAAK+C,MAAM9B,QAAQ2I,WACxBjI,GAAS,GAGbA,IACA3B,KAAKsL,WAAWa,GAChBnM,KAAKoD,SAAS,CAAE8H,SAAUiB,MAGlCnM,KAAKgD,MAAQ,CACTkI,SAAUlL,KAAK+C,MAAMsJ,aAEzB,MAAM7K,EAAaxB,KAAK+C,MAAMvB,YAAc,EAAAC,eAC5CzB,KAAKiD,OAASzB,EAAW0B,KAAK,cAOlC,eACI,OAAOlD,KAAKgD,MAAMkI,SAStBc,YAAY1B,EAAKuB,GACb,GAAa,OAATA,EACA,OAAO,EAEX,IAAIS,EAAUT,EAAKzN,MAAM6H,SAASC,IAAI,QACtC,GAAIoG,EAAS,CACT,IAAK,IAAI1N,EAAI,EAAGA,EAAI0N,EAAQzN,OAAQD,IAChC,GAAI0N,EAAQ1N,KAAO0L,EACf,OAAO,EAGf,OAAO,GAMfiC,6BACIvM,KAAKkM,gBAOT7J,SACI,IACI5D,EAkBA+N,EAnBAjK,EAAO,gBAAoB,MAAO,CAAEM,UAAW,mBAAqB7C,KAAKiD,OAAOO,GAAG,sBAgCvF,OA7BI/E,EAD+B,IAA/BuB,KAAKgD,MAAMkI,SAASrM,OACZ,gBAAoB,OAAQ,CAAEgE,UAAW,wBAA0B7C,KAAKiD,OAAOO,GAAG,kBAEtD,IAA/BxD,KAAKgD,MAAMkI,SAASrM,OACjB,gBAAoB,OAAQ,CAAEgE,UAAW,oBAAqBzD,QAAS,IAAMY,KAAKuL,eACtF,IACA,iBACA,KAGI,gBAAoB,OAAQ,CAAE1I,UAAW,oBAAqBzD,QAAS,IAAMY,KAAKuL,eACtF,IACA,SACAvL,KAAKgD,MAAMkI,SAASrM,OACpB,WACA,KAIJ2N,EAD+B,IAA/BxM,KAAKgD,MAAMkI,SAASrM,OACT,gBAAoB,OAAQ,CAAEgE,UAAW,uBAAwBU,KAAM,OAAQ,aAAcvD,KAAKiD,OAAOO,GAAG,sCAAuCC,MAAOzD,KAAKiD,OAAOO,GAAG,uCAAyCxD,KAAKiD,OAAOO,GAAG,uCAGjO,gBAAoB,OAAQ,CAAEX,UAAW,oBAAqBU,KAAM,SAAU,aAAcvD,KAAKiD,OAAOO,GAAG,sCAAuCC,MAAOzD,KAAKiD,OAAOO,GAAG,sCAAuCpE,QAASY,KAAKwL,8BAA+BiB,UAAWzM,KAAKwL,+BAAiCxL,KAAKiD,OAAOO,GAAG,uCAEvUxD,KAAK+C,MAAM+C,MAAQ9F,KAAK+C,MAAM+C,KAAKjH,OAAS,IAC5C0D,EAAO,gBAAoB,MAAO,CAAEM,UAAW,sBAC3C,gBAAoB6H,EAAkB,CAAE5E,KAAM9F,KAAK+C,MAAM+C,KAAM+E,sBAAuB7K,KAAKoL,qBAAsBR,aAAc5K,KAAKgD,MAAMkI,WAC1IzM,EACA+N,IAEDjK,GC3Jf,SAASmK,EAAwBjN,EAASY,EAAQqB,EAAWF,EAAYmD,GACrE,IAAIrD,GAAc,EACdyH,GAAgB,EAChBE,GAAoB,EACpBtE,IACArD,EAAcqD,EAASC,UAAUtD,YACjCyH,EAAgBpE,EAASC,UAAUmE,cACnCE,EAAoBtE,EAASC,UAAUqE,mBAE3C,MAAMhI,EAAU,IAAI,EAAeZ,EAAQZ,EAAS,CAChD2B,WAAW,EACXE,YAAaA,EACbyH,cAAeA,EACfE,kBAAmBA,EACnBvH,UAAWA,EACXF,WAAYA,GAAc,EAAAC,iBAa9B,OAXIkD,GACAA,EAASE,QAAQlE,SAAQ,KACrBM,EAAQK,YAAcqD,EAASC,UAAUtD,YACzCL,EAAQ8H,cAAgBpE,EAASC,UAAUmE,cAC3C9H,EAAQgI,kBAAoBtE,EAASC,UAChCqE,qBAGbxJ,EAAQkN,kBAAkBhM,SAAQ,CAACC,EAAQC,KACvCR,EAAOsB,YAEJ,CACHlC,UACAC,WAAW,EACXuB,QAASA,EACT6D,iBAWJ,WACI,OCzDR,SAAiB7D,EAASxB,GACtB,OAAO,cAAsB,YAOzBM,YAAYgD,GACR7B,MAAM6B,GACN/C,KAAKiD,OAAShC,EAAQO,WAAW0B,KAAK,cACtClD,KAAKoJ,QAAU,KACfpJ,KAAKgD,MAAQ,CACT2G,UAAU,EACVhD,cAAc,EACdiD,UAAU,EACVxI,WAAW,GAEX3B,EAAQ4J,eAEH5J,EAAQ4J,cAAcuD,QAAQC,MAAMC,MAAK,KAC1C,GAAIrN,EAAQ4J,cAAe,CACvB5J,EAAQ4J,cAAclL,QAAQwO,kBAAkBhM,SAAQ,KACpDM,EAAQwI,kBAEZ,MAAMrI,EAAY3B,EAAQ4J,cAAcjL,MAAM6H,SAASC,IAAI,qBACrDyD,EAAWlK,EAAQ4J,cAAcjL,MAAM6H,SAASC,IAAI,gBACpDS,EAAelH,EAAQ4J,cAAcjL,MAAM6H,SAASC,IAAI,uBACxD0D,EAAWnK,EAAQ4J,cAAcjL,MAAM6H,SAASC,IAAI,gBAC1DjF,EAAQW,kBAAkBR,GAAaH,EAAQG,UAAWH,EAAQK,YAAaL,EAAQ8H,cAAe9H,EAAQgI,kBAAmBU,GAAY1I,EAAQ0I,SAAUhD,GAAgB1F,EAAQ0F,aAAciD,GAAY3I,EAAQ2I,UACzN5J,KAAKoD,SAAS,CACVuG,SAAU1I,EAAQ0I,SAClBhD,aAAc1F,EAAQ0F,aACtBiD,SAAU3I,EAAQ2I,SAClBxI,UAAWH,EAAQG,YAEvBpB,KAAK8F,KAAO,OAQ5BiH,aACI9L,EAAQ0I,UAAY1I,EAAQ0I,SAC5B3J,KAAKoD,SAAS,CAAEuG,SAAU1I,EAAQ0I,WAKtCqD,iBACI/L,EAAQ0F,cAAgB1F,EAAQ0F,aAChC3G,KAAKoD,SAAS,CAAEuD,aAAc1F,EAAQ0F,eAK1CxD,kBACIlC,EAAQG,WAAaH,EAAQG,UAC7BpB,KAAKoD,SAAS,CAAEhC,UAAWH,EAAQG,YAKvC6L,oBACQhM,EAAQ2I,UAAY5J,KAAKoJ,UACzBnI,EAAQkI,UAAYnJ,KAAKoJ,QAAQpG,MAAMkI,UAE3CjK,EAAQ2I,UAAY3I,EAAQ2I,SAC5B5J,KAAKoD,SAAS,CAAEwG,SAAU3I,EAAQ2I,WAKtCsD,WACI,MAAM3E,EAAW9I,EAAQ4J,cACzB,GAAId,EAAU,CACV,MAAM4E,EAAQ5E,EAASnK,MAAM+O,MACvBrH,EAAO,IAAIsH,IACjBpN,KAAK8F,KAAO,GACZ,IAAK,IAAIlH,EAAI,EAAGA,EAAIuO,EAAMtO,OAAQD,IAAK,CACnC,MACMyO,EADOF,EAAMjH,IAAItH,GACLqH,SAASC,IAAI,QAC3BoH,MAAMC,QAAQF,IACdA,EAAKzB,SAAStB,GAAQA,GAAOxE,EAAKtF,IAAI8J,KAG9CtK,KAAK8F,KAAOwH,MAAME,KAAK1H,IAQ/BzD,SACI,MAAMoL,EAAkB,gBAAoB,MAAO,CAAErO,QAASkE,GAAStD,KAAK+M,aAAcxJ,KAAM,OAAQ,aAAcvD,KAAKiD,OAAOO,GAAG,qBAAsBC,MAAOzD,KAAKiD,OAAOO,GAAG,qBAAsBX,UAAW7C,KAAKgD,MAAM2G,SACnN,kDACA,0CACN,gBAAoB,EAAA+D,SAAA,MAAgB,OAClCC,EAAsB,gBAAoB,MAAO,CAAEvO,QAASkE,GAAStD,KAAKgN,iBAAkBzJ,KAAM,OAAQ,aAAcvD,KAAKiD,OAAOO,GAAG,8BAA+BC,MAAOzD,KAAKiD,OAAOO,GAAG,8BAA+BX,UAAW7C,KAAKgD,MAAM2D,aAC7O,4BACA,oBACN,gBAAoB,EAAAiH,aAAA,MAAoB,OACtCC,EAAuB,gBAAoB,MAAO,CAAEzO,QAASkE,GAAStD,KAAKmD,kBAAmBI,KAAM,OAAQ,aAAcvD,KAAKiD,OAAOO,GAAG,yBAA0BC,MAAOzD,KAAKiD,OAAOO,GAAG,yBAA0BX,UAAW7C,KAAKgD,MAAM5B,UACrO,4BACA,oBACN,gBAAoB,EAAAsC,cAAA,MAAqB,OAC7C,IAAIoK,EAAc,gBAAoB,MAAO,MACzCC,EAAiB,gBAAoB,MAAO,CAAExK,KAAM,OAAQ,aAAcvD,KAAKiD,OAAOO,GAAG,kBAAmBC,MAAOzD,KAAKiD,OAAOO,GAAG,kBAAmBX,UAAW7C,KAAKgD,MAAM4G,SACrK,4BACA,oBACN,gBAAoB,EAAAoE,QAAA,MAAe,OACvC,GAAIhO,KAAKgD,MAAM4G,SAAU,CACrB5J,KAAKkN,WACL,MAAM9D,EAAW,gBAAoB+B,EAAmB,CAAErF,KAAM9F,KAAK8F,KAAMrG,QAASA,EAASwB,QAASA,EAASoL,YAAapL,EAAQkI,UAAW3H,WAAYP,EAAQO,WAAYyM,IAAK7E,GAAYpJ,KAAKoJ,QAAUA,IAC/MnI,EAAQmI,QAAUpJ,KAAKoJ,QACvB0E,EAAc,gBAAoB,MAAO,CAAEjL,UAAW,oBAClD,IACAuG,EACA,KAER,OAAQ,gBAAoB,MAAO,KAC/B,gBAAoB,MAAO,CAAEvG,UAAW,eACpC4K,EACAE,EACAE,EACA,gBAAoB,MAAO,CAAEhL,UAAW,0BAA2BzD,QAASkE,GAAStD,KAAKiN,qBAAuBc,IACrHD,KDxED,CAAQ7M,EAASxB,IAXxBsF,aAqBJ,SAAoBzC,EAAM4H,EAAM,IAC5B,OJ/DR,SAAgBjJ,EAASxB,EAAS6C,EAAM4H,EAAM,IAC1C,IAAI3H,EACJ,GAAkB,aAAdD,EAAK4B,MAAqC,WAAd5B,EAAK4B,KAAmB,CACpD,IAAI1B,EAAgB,yBAChBpB,EAAYkB,EAAKlB,WAAaH,EAAQG,UAAYkB,EAAKlB,UAAY,GACnEwF,EAAuB3F,EAAQgI,kBAC7B,EAAAiF,2BACA,mBAIN,GAHkB,WAAd5L,EAAK4B,OACL1B,EAAgB,kBAAoBF,EAAKnD,OAEzCmD,EAAKG,OAAuB,WAAdH,EAAK4B,MAAqBjD,EAAQ0F,cAAe,CAM/D,GALApE,EAAO,gBAAoB,OAAQ,CAAEI,wBAAyB,CACtDC,OAAQxB,EACJH,EAAQS,UAAUgB,SAASJ,EAAKG,KAAMZ,IAC3CgB,UAAWP,EAAK4B,KAAO,wBAEZ,WAAd5B,EAAK4B,KAAmB,CACxB,IAKIwC,EALAyH,EAAU,gBAAoB,MAAO,CAAEtL,UAAW,kCAAmCzD,QAAUkE,IAC3FA,EAAM8K,kBACNhP,EAAQK,EAASmH,EAAsBtE,KAE3C,gBAAoB,MAAO,CAAEO,UAAW,yBAExCP,EAAKyD,QAAQ3H,MAAM6H,SAAS1F,IAAIqG,KAChCF,EAAYpE,EAAKyD,QAAQ3H,MAAM6H,SAASC,IAAIU,IAEhD,IAAIyH,EAAgB3H,EAAa,gBAAoB,MAAO,CAAE7D,UAAW,eAAgBzD,QAAUkE,IAC3FA,EAAM8K,kBACNhP,EAAQK,EAASmH,EAAsBtE,KAE3C,gBAAoB,EAAAgM,aAAA,MAAoB,OAAW,gBAAoB,MAAO,MAElF/L,EAAO,gBAAoB,MAAO,CAAEM,UAAW,oBACvCL,GACC/C,EAAQ8O,aAAejM,EAAKyD,SAEvBkE,EAAexK,EAAS6C,EAAM4H,GAD9B,mBAGI,KACdiE,EACA5L,EACA8L,GAER,OAAO9L,EAEX,GAAkB,WAAdD,EAAK4B,MAAqBjD,EAAQ0F,aAAc,CAGhD,GADApE,EAAO,gBAAoB,OAAQ,CAAEM,UAAWP,EAAK4B,KAAO,uBAAyB9C,EAAYkB,EAAK7D,MACpF,WAAd6D,EAAK4B,KAAmB,CACxB,IAKIwC,EALAyH,EAAU,gBAAoB,MAAO,CAAEtL,UAAW,kCAAmCzD,QAAUkE,IAC3FA,EAAM8K,kBACNhP,EAAQK,EAASmH,EAAsBtE,KAE3C,gBAAoB,MAAO,CAAEO,UAAW,yBAExCP,EAAKyD,QAAQ3H,MAAM6H,SAAS1F,IAAIqG,KAChCF,EAAYpE,EAAKyD,QAAQ3H,MAAM6H,SAASC,IAAIU,IAEhD,IAAIyH,EAAgB3H,EAAa,gBAAoB,MAAO,CAAE7D,UAAW,eAAgBzD,QAAUkE,IAC3FA,EAAM8K,kBACNhP,EAAQK,EAASmH,EAAsBtE,KAE3C,gBAAoB,EAAAgM,aAAA,MAAoB,OAAW,gBAAoB,MAAO,MAClF/L,EAAO,gBAAoB,MAAO,CAAEM,UAAW,oBACvCL,GACC/C,EAAQ8O,aAAejM,EAAKyD,SAEvBkE,EAAexK,EAAS6C,EAAM4H,GAD9B,mBAGI,KACdiE,EACA5L,EACA8L,GAER,OAAO9L,EAEX,OAAO,KAEX,MAAkB,SAAdD,EAAK4B,MAAmBjD,EAAQ0I,SAExB,gBAAoB,MAAO,CAAE9G,UAAW,qBAC5C,gBAAoB,MAAO,CAAEA,UAAW,wBAA0BP,EAAKkF,QACvE,gBAAoB,OAAQ,CAAE3E,UAAW,iBACrC,gBAAoBgH,EAAe,CAAEnI,UAAWT,EAAQS,UAAW0C,QAAS9B,MAEjF,KAOP,SAASlD,EAAQK,EAASmH,EAAsBxC,GAC5C,IAAIsC,GAAY,EACZuC,EAAoBhI,EAAQgI,kBAC5B7E,EAAQ2B,QAAQ3H,MAAM6H,SAASC,IAAIU,KACnCF,EAAYtC,EAAQ2B,QAAQ3H,MAAM6H,SAASC,IAAIU,IAE/CxC,GACI6E,EAEIxJ,EAAQ4J,eACR,EAAAmF,gBAAA,mBAAmCpK,EAAQ2B,SAAUW,EAAWjH,EAAQ4J,cAAclL,SAItFuI,EACAtC,EAAQ2B,QAAQ3H,MAAM6H,SAASwI,OAAO7H,GAGtCxC,EAAQ2B,QAAQ3H,MAAM6H,SAASqD,IAAI1C,GAAsB,GAGjE3F,EAAQyI,kBAAkB,CACtBtF,QAASA,EACTsK,eAAgBhI,EAChBiI,QAAS,cAIb1N,EAAQwI,gBI1DL,CAAOxI,EAASxB,EAAS6C,EAAM4H,IArBtC5L,SA8BJ,SAAkBmN,GACd,IAAI1M,EAAW,GACXwH,GAAiB,EACjB3C,EAAO,GAEP0C,EAAO,KAEX,IAAK,IAAI1H,EAAI,EAAGA,EAAI6M,EAAMtN,QAAQuN,QAAQ7M,OAAQD,IAAK,CACnD,IAAIiN,EAAOJ,EAAMtN,QAAQuN,QAAQ9M,GAC7BR,EAAQyN,EAAKzN,MACbwI,EAAuB3F,EAAQgI,kBAC7B,EAAAiF,2BACA,mBACFxH,EAAYtI,EAAM6H,SAASC,IAAIU,GAEnC,GADAF,EAAYA,IAAa,EACN,SAAftI,EAAM8F,MAqCV,GAAmB,aAAf9F,EAAM8F,KAAqB,CAC3B,IACIE,EADAwK,EAAQ/C,EAER3E,EAAYO,EAAoB1I,GAEpC,GAAI6P,EAAMC,WAAaD,EAAME,YAAa,CACtC,MAAM1P,EAAW0I,GACN,KACE8G,EAAMC,UAKPpD,EAAMtN,QAAQ4Q,KAAO,UACrBlD,EAAK5G,KAAKZ,iBACVoH,EAAMtN,QAAQgM,gBAAkBvL,IANhC6M,EAAMtN,QAAQgM,gBAAkBvL,EAChCkJ,EAAGzD,mBAST2K,EAAenH,EAAwBgE,EAAK5G,KAAM7F,EAASsC,EAAWkC,EAAMsD,EAAWjG,EAAQG,UAAWH,EAAQK,YAAauK,EAAMjN,GAC3I,IAAKwF,KAAW4K,GACXjQ,EAAUuH,EAAMC,GAAiBE,EAAsBrC,EAASrF,EAAUuH,EAAMC,EAAetF,EAAQuI,SAAU9C,EAAWzF,EAAQ0F,aAAcC,OAItJ,CACD,MAAMxH,EAAWC,GACN,KACHoM,EAAMtN,QAAQgM,gBAAkBvL,EAChCiN,EAAK5G,KAAKZ,kBAGZ4K,EAAmBtH,EAAoBvJ,EAAMI,MAAMC,KAAMW,EAASwE,EAAMsD,EAAW2E,EAAMjN,GAC/F,IAAKwF,KAAW6K,GACXlQ,EAAUuH,EAAMC,GAAiBE,EAAsBrC,EAASrF,EAAUuH,EAAMC,EAAetF,EAAQuI,SAAU9C,EAAWzF,EAAQ0F,aAAcC,SAvE/J,CACI,IAAKvG,GAAWA,GAAUY,EAAQ0I,SAAW,CACzC,MAAMvK,EAAWC,GACN,KACHoM,EAAMtN,QAAQgM,gBAAkBvL,EAChCiN,EAAK5G,KAAKZ,kBAGlB,IAAI6K,EAAQrD,EAAKzN,MAAM6I,eACnBA,EAA2B,OAAViI,EAAiB,IAAMA,EAAQ,MAAQ,QACxD9K,EAAU4C,EAAmB5I,EAAMI,MAAMC,KAAMW,EAAS6H,EAAgBQ,EAAoB1I,GAAW8M,EAAMjN,IAChHG,EAAUuH,GAAQD,EAActH,EAAUqF,EAASkC,EAAMC,EAAetF,EAAQuI,UAErF,GAAIvI,EAAQ8H,cAER,IAAK,IAAIjF,EAAI,EAAGA,EAAI1F,EAAM+Q,QAAQtQ,OAAQiF,IAAK,CAC3C,MAAMsL,EAAIhR,EAAM+Q,QAAQjJ,IAAIpC,GAC5B,IAAIuL,EAASC,OAAOC,KAAKH,EAAEI,MAE3B,GADAH,EAASA,EAAOI,QAAOC,IAAK/P,SAAW+P,IEzG3C,8BADLxR,EF0G4DwR,IEzGhB,cAATxR,EADlD,IAAeA,MF2GcmR,EAAOxQ,OACR,SAEJ,MAAMO,EAAW0I,GACN,KACH2D,EAAMtN,QAAQgM,gBAAkBvL,EAChC6M,EAAMtN,QAAQ4Q,KAAO,UACrBjH,EAAGzD,kBAGX,IAAI2K,EAAenH,EAAwBgE,EAAK8D,WAAWjE,QAAQ5H,GAAGmB,KAAM7F,EAASsC,EAAWkC,EAAM6D,EAAoB1I,GAAWkC,EAAQG,UAAWH,EAAQK,YAAauK,EAAMjN,GACnL,IAAK,MAAMwF,KAAW4K,GACjBjQ,EAAUuH,EAAMC,GAAiBE,EAAsBrC,EAASrF,EAAUuH,EAAMC,EAAetF,EAAQuI,SAAU9C,EAAWzF,EAAQ0F,aAAcC,KA6CvK,OAAO7H,GAxHP2B,gBAAiBO,EAAQP,iBGnDjC,SAAS,EAAO4B,GACZ,IAAIE,EAAgB,kBAAoBF,EAAKnD,MAC7C,OAAQ,gBAAoB,MAAO,CAAE0D,UAAWL,EAAgB,qBAC5D,gBAAoB,MAAO,CAAEK,UAAW,mCACpC,gBAAoB,MAAO,CAAEA,UAAW,yBAC5C,gBAAoB,OAAQ,CAAEA,UAAW,6BACrC,IACAP,EAAK7D,KACL,MCRZ,SAAS,EAASR,GAEd,IAAIM,EAAQN,EAAOE,QAAQC,MAAMI,MAAMC,KAAKC,MAAM,MAE9CK,EAAW,GACX6Q,GAAoB,EACxB,IAAK,IAAIhR,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IAAK,CACnC,IAAIS,EAAOd,EAAMK,GAAGiR,OACS,IAAzBxQ,EAAKmF,QAAQ,SACboL,GAAoB,EACpB7Q,EAASG,KAAK,CACVT,KAAMY,EAAKyQ,MAAM,GAAI,GACrB3Q,MAAO,EACPC,QAASA,EAAQR,MAGW,IAA3BS,EAAKmF,QAAQ,WAClBoL,GAAoB,EACpB7Q,EAASG,KAAK,CACVT,KAAMY,EAAKyQ,MAAM,GAAI,GACrB3Q,MAAO,EACPC,QAASA,EAAQR,MAGW,GAA3BS,EAAKmF,QAAQ,YAAoBoL,IACtCA,GAAoB,EACpB7Q,EAASG,KAAK,CACVT,KAAMY,EACNF,MAAO,EACPC,QAASA,EAAQR,MAI7B,OAAOG,EAQP,SAASK,EAAQC,GACb,MAAO,KACHpB,EAAOE,QAAQF,OAAOqB,kBAAkB,CACpCD,KAAMA,EACNE,OAAQ,MAYxB,SAAS,EAAUtB,GACf,IAAIC,EAAOD,EAAOE,QAAQC,MAAMC,SAChC,MAAgB,8BAATH,GAAiD,kBAATA,EASnD,SAAS6R,EAAsBtQ,GAC3B,MAAO,CACHA,UACAzB,UAAW,EACX+G,aAAc,EACdzG,SAAU,G,qCC3ElB,MAAM0R,UAAgB,YAMlB3N,SACI,MAAM,QAAE+B,EAAO,IAAE8F,GAAQlK,KAAK+C,MAU9B,IAAI5E,EAAU6B,KAAK+C,MAAMgC,aAAaX,EAAS8F,GAC/C,OAAK/L,EAGG,gBAAoB,KAAM,CAAE0E,UAAW,aAAczD,QAX5CkE,IACb,IAAI2M,EACJ3M,EAAM4M,iBACN5M,EAAM8K,kBAC6B,QAAlC6B,EAAKjQ,KAAK+C,MAAMoN,oBAAiC,IAAPF,GAAyBA,EAAGnP,KAAKd,MAC5EoE,EAAQhF,WAMmEgR,cAAgB9M,IACvF,IAAI2M,EAC+B,QAAlCA,EAAKjQ,KAAK+C,MAAMoN,oBAAiC,IAAPF,GAAyBA,EAAGnP,KAAKd,MAC5EoE,EAAQhF,YACPjB,GANE,MClBnB,MAAMkS,UAAgB,YAIlBhO,SACI,MAAMiO,EAAUtQ,KAAK+C,MAAMD,QAE3B,IAAIlE,EAAI,EACJyO,EAAOrN,KAAK+C,MAAMmH,IAAIa,KAAIjD,GAClB,gBAAoBkI,EAAS,CAAE5L,QAAS0D,EAAIoC,IAAKlK,KAAK+C,MAAMmH,IAAKiG,aAAcnQ,KAAK+C,MAAMoN,aAAcpL,aAAc/E,KAAK+C,MAAMgC,aAAcwF,IAAK,GAAGzC,EAAGrJ,QAAQqJ,EAAG3I,SAASP,UAE1L,OAAQ,gBAAoB,MAAO,CAAEiE,UAAW,sBAC5C,gBAAoB,MAAO,CAAEA,UAAW,yBAA2B7C,KAAK+C,MAAMU,OAC9E6M,GAAW,gBAAoBA,EAAS,MACxC,gBAAoB,KAAM,CAAEzN,UAAW,8BAAgCwK,KCL5E,MAAMkD,UAAwB,EAAAC,OAOjCzQ,YAAYkB,GACRC,QACAlB,KAAKwB,WAAaP,EAAQO,YAAc,EAAAC,eACxCzB,KAAKyQ,YAAcxP,EAAQyP,WAC3B1Q,KAAK2Q,YAAc1P,EAAQ2P,WAC3B5Q,KAAKiD,OAASjD,KAAKwB,WAAW0B,KAAK,cACnClD,KAAK6Q,UAAY,GACjB7Q,KAAK8Q,cAAgB,IAAI,EAAA5Q,OAAOF,MAChCA,KAAK8Q,cAAcnQ,SAAQ,CAACuJ,EAAK5H,KAC7BtC,KAAK+Q,YAAczO,EAAKS,MAAMqB,WAE9BpE,KAAKgR,WACLhR,KAAK6Q,UAAY7Q,KAAKgR,SAASvQ,UAAUnC,SAAS0B,KAAKgR,SAAS3Q,OAAQL,KAAKgR,SAASvQ,UAAUQ,UAMxG,cACI,OAAOjB,KAAKgR,SAEhB,YAAYxS,GAER,GAAIA,GACAwB,KAAKgR,UACLhR,KAAKgR,SAAS3Q,SAAW7B,EAAM6B,QAC/BL,KAAKgR,SAASvQ,YAAcjC,EAAMiC,UAClC,OAiBJ,GAfAT,KAAKgR,SAAWxS,EACZwB,KAAKS,YACDT,KAAKS,UAAUqE,iBACf9E,KAAKiR,SAAWjR,KAAKS,UAAUqE,mBAG/B9E,KAAKiR,SAAW,MAIpBjR,KAAKkR,WACLlR,KAAKkR,SAASC,UACdnR,KAAKkR,SAAW,OAGflR,KAAKgR,SAEN,YADAhR,KAAK2B,SAIT,MAAMiL,EAAU5M,KAAKyQ,YAAYW,iBAAiBpR,KAAKgR,SAAS3Q,QAChE,IAAKuM,IAAYA,EAAQxO,MACrB,MAAMiT,MAAM,sDAGhBrR,KAAKkR,SAAW,IAAI,EAAAI,gBAAgB,CAChCC,OAAQ3E,EAAQxO,MAAMoT,eACtBC,QAnEW,MAqEfzR,KAAKkR,SAASQ,gBAAgB/Q,QAAQX,KAAK2B,OAAQ3B,MACnDA,KAAK2B,SAOT,gBACI,OAAI3B,KAAKgR,SACEhR,KAAKgR,SAASvQ,UAElB,KAOXkR,gBAAgBC,GACZ,IAAInO,EAAQzD,KAAKiD,OAAOO,GAAG,qBAC3B,GAAIxD,KAAKgR,SAAU,CACfhR,KAAK6Q,UAAY7Q,KAAKgR,SAASvQ,UAAUnC,SAAS0B,KAAKgR,SAAS3Q,OAAQL,KAAKgR,SAASvQ,UAAUQ,SAChG,MAAM2L,EAAU5M,KAAKyQ,YAAYW,iBAAiBpR,KAAKgR,SAAS3Q,QAC5DuM,IACAnJ,EAAQ,EAAAoO,QAAA,SAAiBjF,EAAQkF,YAGzC,IAAI/M,EAAgBzC,GACT,gBAAoB,OAAQ,KAAMA,EAAK7D,MAE9CuB,KAAKgR,UAAYhR,KAAKgR,SAASvQ,UAAUsE,eACzCA,EAAe/E,KAAKgR,SAASvQ,UAAUsE,cAE3C,IAAIxC,EAAO,gBAAoB,MAAO,CAAEM,UAAW,sBAC/C,gBAAoB,MAAO,CAAEA,UAAW,yBAA2BY,IACnEzD,KAAKgR,UAAYhR,KAAKgR,SAASvQ,YAC/B8B,EAAO,gBAAoB8N,EAAS,CAAE5M,MAAOA,EAAOyG,IAAKlK,KAAK6Q,UAAWV,aAAcnQ,KAAK8Q,cAAerQ,UAAWT,KAAKS,UAAWsE,aAAcA,EAAcjC,QAAS9C,KAAKiR,YAEpL,SAAgB1O,EAAKvC,KAAKiF,MAAM,KACxBjF,KAAKgR,WACiC,IAAtChR,KAAKgR,SAASvQ,UAAUf,WACxBM,KAAK2Q,YAAYoB,iBACjB/R,KAAK2Q,YAAYoB,gBAAgBC,QAAQhS,KAAKiF,SAS1D,kBACI,OAAOjF,KAAKiS,aAEhB,gBAAgBzT,GACZwB,KAAKiS,aAAezT,EAOxB,eACI,OAAOwB,KAAK6Q,UAOhBqB,YAAYN,GACR5R,KAAK2B,UClJb,MAUMwQ,EAAqB,CAACpT,EAAUqF,KAClC,IAAI6L,EACJ,IAAImC,EACAxT,EACJ,IAdsB,CAACwF,QACCE,IAAjBF,EAAQF,WAA0CI,IAApBF,EAAQ2B,QAaxCsM,CAAkBjO,GACnB,OAEJ,IAAIkO,EAAU,GAKd,GAHA1T,EAAIG,EAASyF,QAAQJ,GAErBgO,EAAIhO,EACW,SAAXgO,EAAElO,KACFoO,EAAQpT,KAAKkT,OAEZ,CAED,MAAMjT,EAAQiF,EAAQjF,MACtB,IAAKP,GAAQ,EAAGA,EAAIG,EAASF,SACzBuT,EAAIrT,EAASH,KACTwT,EAAEjT,OAASA,IAFkBP,IAKlB,SAAXwT,EAAElO,MACFoO,EAAQpT,KAAKkT,GAKzB,IAAKxT,EAAI,EAAGA,EAAI0T,EAAQzT,OAAQD,IAC5B,GAAI0T,EAAQ1T,GAAGmH,QAAS,CACpB,MAAM8F,EAAOyG,EAAQ1T,GAAGmH,QAClB0F,EAA+B,QAAtBwE,EAAKpE,EAAK/E,cAA2B,IAAPmJ,OAAgB,EAASA,EAAGnJ,OACrE2E,GACK,EAAA8G,SAAA,QAAiB1G,EAAMJ,EAAM+G","file":"218.c91b93ef8a99588dacc3.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Maps LaTeX section headings to HTML header levels.\n *\n * ## Notes\n *\n * -   As `part` and `chapter` section headings appear to be less common, assign them to heading level 1.\n *\n * @private\n */\nconst LATEX_LEVELS = {\n    part: 1,\n    chapter: 1,\n    section: 1,\n    subsection: 2,\n    subsubsection: 3,\n    paragraph: 4,\n    subparagraph: 5\n};\n/**\n * Converts array elements to \"entries\".\n *\n * @private\n * @param arr - input array\n * @returns input array\n *\n * @example\n * const arr = toEntries([4,5,6]);\n * // returns [[4,0], [5,1], [6,2]]\n */\nfunction toEntries(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = [arr[i], i];\n    }\n    return arr;\n}\n/**\n * Returns a boolean indicating whether this ToC generator is enabled.\n *\n * @private\n * @param editor - editor widget\n * @returns boolean indicating whether this ToC generator is enabled\n */\nfunction isEnabled(editor) {\n    // Only enable this if the editor MIME type matches one of a few LaTeX variants:\n    let mime = editor.content.model.mimeType;\n    return mime === 'text/x-latex' || mime === 'text/x-stex';\n}\n/**\n * Generates a table of contents.\n *\n * @private\n * @param editor - editor widget\n * @returns a list of headings\n */\nfunction generate(editor) {\n    // Split the text into lines:\n    let lines = editor.content.model.value.text.split('\\n');\n    // Convert the list into \"entries\" so we can use the line number to scroll the editor upon ToC item click:\n    lines = toEntries(lines);\n    // Iterate over the lines to get the heading level and text for each line:\n    let headings = [];\n    for (let i = 0; i < lines.length; i++) {\n        const RE = /^\\s*\\\\(section|subsection|subsubsection){(.+)}/;\n        const match = lines[i][0].match(RE);\n        if (match) {\n            headings.push({\n                text: match[2],\n                level: LATEX_LEVELS[match[1]],\n                onClick: onClick(lines[i][1])\n            });\n        }\n    }\n    return headings;\n    /**\n     * Returns a \"click\" handler.\n     *\n     * @private\n     * @param line - line number\n     * @returns click handler\n     */\n    function onClick(line) {\n        return () => {\n            editor.content.editor.setCursorPosition({\n                line: line,\n                column: 0\n            });\n        };\n    }\n}\n/**\n * Returns a ToC generator for LaTeX files.\n *\n * @private\n * @param tracker - file editor tracker\n * @returns ToC generator capable of parsing LaTeX files\n */\nfunction createLatexGenerator(tracker) {\n    return {\n        tracker,\n        usesLatex: true,\n        isEnabled: isEnabled,\n        generate: generate\n    };\n}\n/**\n * Exports.\n */\nexport { createLatexGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns whether a MIME type corresponds to a Markdown flavor.\n *\n * @private\n * @param mime - MIME type string\n * @returns boolean indicating whether a provided MIME type corresponds to a Markdown flavor\n *\n * @example\n * const bool = isMarkdown('text/markdown');\n * // returns true\n *\n * @example\n * const bool = isMarkdown('text/plain');\n * // returns false\n */\nfunction isMarkdown(mime) {\n    return (mime === 'text/x-ipythongfm' ||\n        mime === 'text/x-markdown' ||\n        mime === 'text/x-gfm' ||\n        mime === 'text/markdown');\n}\n/**\n * Exports.\n */\nexport { isMarkdown };\n//# sourceMappingURL=is_markdown.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/* tslint:disable */\n/**\n * Table of contents registry token.\n */\nexport const ITableOfContentsRegistry = new Token('@jupyterlab/toc:ITableOfContentsRegistry');\n/* tslint:enable */\n/**\n * Class for registering widgets for which we can generate a table of contents.\n */\nexport class TableOfContentsRegistry {\n    constructor() {\n        this._collapseChanged = new Signal(this);\n        this._generators = [];\n    }\n    /**\n     * Finds a table of contents generator for a widget.\n     *\n     * ## Notes\n     *\n     * -   If unable to find a table of contents generator, the method return `undefined`.\n     *\n     * @param widget - widget\n     * @returns table of contents generator\n     */\n    find(widget) {\n        for (let i = 0; i < this._generators.length; i++) {\n            const gen = this._generators[i];\n            if (gen.tracker.has(widget)) {\n                if (gen.isEnabled && !gen.isEnabled(widget)) {\n                    continue;\n                }\n                return gen;\n            }\n        }\n    }\n    /**\n     * Adds a table of contents generator to the registry.\n     *\n     * @param generator - table of contents generator\n     */\n    add(generator) {\n        if (generator.collapseChanged) {\n            // If there is a collapseChanged for a given generator, propagate the arguments through the registry's signal\n            generator.collapseChanged.connect((sender, args) => {\n                this._collapseChanged.emit(args);\n            });\n        }\n        this._generators.push(generator);\n    }\n    get collapseChanged() {\n        return this._collapseChanged;\n    }\n}\n/**\n * Static registry methods.\n */\n(function (TableOfContentsRegistry) {\n    /**\n     * Abstract class for managing options affecting how a table of contents is generated for a particular widget type.\n     */\n    class IOptionsManager {\n    }\n    TableOfContentsRegistry.IOptionsManager = IOptionsManager;\n})(TableOfContentsRegistry || (TableOfContentsRegistry = {}));\n//# sourceMappingURL=registry.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { TableOfContentsRegistry as Registry } from '../../registry';\n/**\n * Class for managing Markdown ToC generator options.\n *\n * @private\n */\nclass OptionsManager extends Registry.IOptionsManager {\n    /**\n     * Returns an options manager.\n     *\n     * @param widget - table of contents widget\n     * @param options - generator options\n     * @returns options manager\n     */\n    constructor(widget, options) {\n        super();\n        this._numbering = options.numbering;\n        this._numberingH1 = options.numberingH1;\n        this._widget = widget;\n        this.translator = options.translator || nullTranslator;\n        this.sanitizer = options.sanitizer;\n    }\n    /**\n     * Gets/sets ToC generator numbering.\n     */\n    set numbering(value) {\n        this._numbering = value;\n        this._widget.update();\n    }\n    get numbering() {\n        return this._numbering;\n    }\n    /**\n     * Gets/sets ToC generator numbering h1 headers.\n     */\n    set numberingH1(value) {\n        if (this._numberingH1 != value) {\n            this._numberingH1 = value;\n            this._widget.update();\n        }\n    }\n    get numberingH1() {\n        return this._numberingH1;\n    }\n    /**\n     * Initializes options.\n     *\n     * ## Notes\n     *\n     * -  This will **not** change notebook meta-data.\n     *\n     * @param numbering - boolean indicating whether to number items\n     */\n    initializeOptions(numbering, numberingH1) {\n        this._numbering = numbering;\n        this._numberingH1 = numberingH1;\n        this._widget.update();\n    }\n}\n/**\n * Exports.\n */\nexport { OptionsManager };\n//# sourceMappingURL=options_manager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Allowed HTML tags and associated attributes for ToC entries when sanitizing HTML headings.\n *\n * ## Notes\n *\n * -   We specifically disallow anchor tags, since we are adding our own.\n *\n * @private\n */\nconst sanitizerOptions = {\n    allowedTags: [\n        'p',\n        'blockquote',\n        'b',\n        'i',\n        'strong',\n        'em',\n        'strike',\n        'code',\n        'br',\n        'div',\n        'span',\n        'pre',\n        'del'\n    ],\n    allowedAttributes: {\n        // Allow \"class\" attribute for <code> tags.\n        code: ['class'],\n        // Allow \"class\" attribute for <span> tags.\n        span: ['class'],\n        // Allow \"class\" attribute for <div> tags.\n        div: ['class'],\n        // Allow \"class\" attribute for <p> tags.\n        p: ['class'],\n        // Allow \"class\" attribute for <pre> tags.\n        pre: ['class']\n    }\n};\n/**\n * Exports.\n */\nexport { sanitizerOptions };\n//# sourceMappingURL=sanitizer_options.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Renders a Markdown table of contents item.\n *\n * @private\n * @param options - generator options\n * @param item - numbered heading\n * @returns rendered item\n */\nfunction render(options, item) {\n    let fontSizeClass = 'toc-level-size-' + item.level;\n    // Render item numbering:\n    let numbering = item.numbering && options.numbering ? item.numbering : '';\n    // Render the item:\n    let jsx;\n    if (item.html) {\n        let html = options.sanitizer.sanitize(item.html, sanitizerOptions);\n        jsx = (React.createElement(\"span\", { dangerouslySetInnerHTML: { __html: numbering + html }, className: 'toc-markdown-cell ' + fontSizeClass }));\n    }\n    else {\n        jsx = React.createElement(\"span\", { className: fontSizeClass },\n            \" \",\n            numbering + item.text);\n    }\n    return jsx;\n}\n/**\n * Exports.\n */\nexport { render };\n//# sourceMappingURL=render.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { numberingIcon } from '@jupyterlab/ui-components';\nimport * as React from 'react';\n/**\n * Returns a component for rendering a Markdown table of contents toolbar.\n *\n * @private\n * @param options - generator options\n * @returns toolbar component\n */\nfunction toolbar(options) {\n    return class Toolbar extends React.Component {\n        /**\n         * Returns a component for rendering a Markdown table of contents toolbar.\n         *\n         * @param props - toolbar properties\n         * @returns toolbar component\n         */\n        constructor(props) {\n            super(props);\n            this.state = { numbering: false };\n            options.initializeOptions(false, options.numberingH1);\n            this._trans = options.translator.load('jupyterlab');\n        }\n        /**\n         * Renders a toolbar.\n         *\n         * @returns rendered toolbar\n         */\n        render() {\n            const toggleNumbering = () => {\n                options.numbering = !options.numbering;\n                this.setState({ numbering: options.numbering });\n            };\n            const icon = (React.createElement(\"div\", { onClick: event => toggleNumbering(), role: \"text\", \"aria-label\": this._trans.__('Toggle Auto-Numbering'), title: this._trans.__('Toggle Auto-Numbering'), className: this.state.numbering\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(numberingIcon.react, null)));\n            return (React.createElement(\"div\", null,\n                React.createElement(\"div\", { className: 'toc-toolbar' }, icon)));\n        }\n    };\n}\n/**\n * Exports.\n */\nexport { toolbar };\n//# sourceMappingURL=toolbar_generator.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n// Maximum heading level:\nconst MAX_HEADING_LEVEL = 6;\n/**\n * Updates numbering dictionary levels.\n *\n * ## Notes\n *\n * -   Mutates a provided dictionary.\n *\n * @private\n * @param dict - numbering dictionary\n * @param level - current level\n * @returns input dictionary\n */\nfunction update(dict, level) {\n    for (let l = level + 1; l <= MAX_HEADING_LEVEL; l++) {\n        if (dict[l] !== void 0) {\n            dict[l] = void 0;\n        }\n    }\n    if (dict[level] === void 0) {\n        dict[level] = 1;\n    }\n    else {\n        dict[level] += 1;\n    }\n    return dict;\n}\n/**\n * Generate the current numbering based on a provided numbering dictionary and the current level.\n *\n * @private\n * @param dict - numbering dictionary\n * @param level - current level\n * @returns numbering\n */\nfunction generateNumbering(dict, level) {\n    if (dict === null) {\n        return;\n    }\n    let numbering = '';\n    dict = update(dict, level);\n    if (level >= 1) {\n        for (let j = 1; j <= level; j++) {\n            numbering += (dict[j] === void 0 ? '0' : dict[j]) + '.';\n        }\n        numbering += ' ';\n    }\n    return numbering;\n}\n/**\n * Exports.\n */\nexport { generateNumbering };\n//# sourceMappingURL=generate_numbering.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Parses a heading, if one exists, from a provided string.\n *\n * ## Notes\n *\n * -   Heading examples:\n *\n *     -   Markdown heading:\n *\n *         ```\n *         # Foo\n *         ```\n *\n *     -   Markdown heading (alternative style):\n *\n *         ```\n *         Foo\n *         ===\n *         ```\n *\n *         ```\n *         Foo\n *         ---\n *         ```\n *\n *     -   HTML heading:\n *\n *         ```\n *         <h3>Foo</h3>\n *         ```\n *\n * @private\n * @param str - input text\n * @returns heading info\n *\n * @example\n * const out = parseHeading('### Foo\\n');\n * // returns {'text': 'Foo', 'level': 3, 'type': 'markdown'}\n *\n * @example\n * const out = parseHeading('Foo\\n===\\n');\n * // returns {'text': 'Foo', 'level': 1, 'type': 'markdown-alt'}\n *\n * @example\n * const out = parseHeading('<h4>Foo</h4>\\n');\n * // returns {'text': 'Foo', 'level': 4, 'type': 'html'}\n *\n * @example\n * const out = parseHeading('Foo');\n * // returns null\n */\nfunction parseHeading(str) {\n    const lines = str.split('\\n');\n    // Case: Markdown heading\n    let match = lines[0].match(/^([#]{1,6}) (.*)/);\n    if (match) {\n        return {\n            text: match[2].replace(/\\[(.+)\\]\\(.+\\)/g, '$1'),\n            level: match[1].length,\n            type: 'markdown'\n        };\n    }\n    // Case: Markdown heading (alternative style)\n    if (lines.length > 1) {\n        match = lines[1].match(/^ {0,3}([=]{2,}|[-]{2,})\\s*$/);\n        if (match) {\n            return {\n                text: lines[0].replace(/\\[(.+)\\]\\(.+\\)/g, '$1'),\n                level: match[1][0] === '=' ? 1 : 2,\n                type: 'markdown-alt'\n            };\n        }\n    }\n    // Case: HTML heading (WARNING: this is not particularly robust, as HTML headings can span multiple lines)\n    match = lines[0].match(/<h([1-6]).*>(.*)<\\/h\\1>/i);\n    if (match) {\n        return {\n            text: match[2],\n            level: parseInt(match[1], 10),\n            type: 'html'\n        };\n    }\n    return null;\n}\n/**\n * Exports.\n */\nexport { parseHeading };\n//# sourceMappingURL=parse_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Returns a \"click\" handler.\n *\n * @private\n * @param heading - heading element\n * @returns \"click\" handler\n */\nfunction onClick(heading) {\n    return () => {\n        heading.scrollIntoView();\n    };\n}\n/**\n * Processes an HTML element containing rendered Markdown and returns a list of headings.\n *\n * @private\n * @param node - HTML element\n * @param sanitizer - HTML sanitizer\n * @param dict - numbering dictionary\n * @param numbering - boolean indicating whether to enable numbering\n * @param numberingH1 - whether first level header should be numbered\n * @returns list of headings\n */\nfunction getRenderedHeadings(node, sanitizer, dict, numbering = true, numberingH1 = true) {\n    let nodes = node.querySelectorAll('h1, h2, h3, h4, h5, h6');\n    let headings = [];\n    for (let i = 0; i < nodes.length; i++) {\n        const heading = nodes[i];\n        let level = parseInt(heading.tagName[1], 10);\n        let text = heading.textContent ? heading.textContent : '';\n        let hide = !numbering;\n        // Show/hide numbering DOM element based on user settings:\n        if (heading.getElementsByClassName('numbering-entry').length > 0) {\n            heading.removeChild(heading.getElementsByClassName('numbering-entry')[0]);\n        }\n        let html = sanitizer.sanitize(heading.innerHTML, sanitizerOptions);\n        html = html.replace('¶', ''); // remove the anchor symbol\n        // Generate a numbering string:\n        if (!numberingH1) {\n            level -= 1;\n        }\n        let nstr = generateNumbering(dict, level);\n        // Generate the numbering DOM element:\n        let nhtml = '';\n        if (!hide) {\n            nhtml = '<span class=\"numbering-entry\">' + nstr + '</span>';\n        }\n        // Append the numbering element to the document:\n        heading.innerHTML = nhtml + html;\n        headings.push({\n            level,\n            text: text.replace('¶', ''),\n            numbering: nstr,\n            html,\n            onClick: onClick(heading)\n        });\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getRenderedHeadings };\n//# sourceMappingURL=get_rendered_headings.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { isMarkdown } from '../../utils/is_markdown';\nimport { OptionsManager } from './options_manager';\nimport { render } from './render';\nimport { toolbar } from './toolbar_generator';\nimport { getHeadings } from './get_headings';\nimport { getRenderedHeadings } from './get_rendered_headings';\n/**\n * Returns a boolean indicating whether this ToC generator is enabled.\n *\n * @private\n * @param editor - editor widget\n * @returns boolean indicating whether this ToC generator is enabled\n */\nfunction isEnabled(editor) {\n    // Only enable this if the editor MIME type matches one of a few Markdown variants:\n    return isMarkdown(editor.content.model.mimeType);\n}\n/**\n * Generates a table of contents.\n *\n * @private\n * @param editor - editor widget\n * @param options - manage Markdown ToC generator options\n * @returns a list of headings\n */\nfunction generate(editor, options) {\n    let dict = {};\n    let numberingH1 = true;\n    if (options !== undefined) {\n        numberingH1 = options.numberingH1;\n    }\n    return getHeadings(editor.content.model.value.text, onClick, dict, numberingH1);\n    /**\n     * Returns a \"click\" handler.\n     *\n     * @private\n     * @param line - line number\n     * @returns click handler\n     */\n    function onClick(line) {\n        return () => {\n            editor.content.editor.setCursorPosition({\n                line: line,\n                column: 0\n            });\n        };\n    }\n}\n/**\n * Returns a ToC generator for Markdown files.\n *\n * @private\n * @param tracker - file editor tracker\n * @param widget - table of contents widget\n * @param sanitizer - HTML sanitizer\n * @param settings - advanced settings for toc extension\n * @returns ToC generator capable of parsing Markdown files\n */\nfunction createMarkdownGenerator(tracker, widget, sanitizer, translator, settings) {\n    let numberingH1 = true;\n    if (settings) {\n        numberingH1 = settings.composite.numberingH1;\n    }\n    const options = new OptionsManager(widget, {\n        numbering: true,\n        numberingH1: numberingH1,\n        sanitizer,\n        translator: translator || nullTranslator\n    });\n    if (settings) {\n        settings.changed.connect(() => {\n            options.numberingH1 = settings.composite.numberingH1;\n        });\n    }\n    return {\n        tracker,\n        usesLatex: true,\n        options: options,\n        toolbarGenerator: generateToolbar,\n        itemRenderer: renderItem,\n        isEnabled: isEnabled,\n        generate: generate\n    };\n    /**\n     * Returns a toolbar generator.\n     *\n     * @private\n     * @returns toolbar generator\n     */\n    function generateToolbar() {\n        return toolbar(options);\n    }\n    /**\n     * Renders a table of contents item.\n     *\n     * @private\n     * @param item - heading to render\n     * @returns rendered item\n     */\n    function renderItem(item) {\n        return render(options, item);\n    }\n}\n/**\n * Returns a ToC generator for rendered Markdown files.\n *\n * @param tracker - Markdown viewer tracker\n * @param sanitizer - HTML sanitizer\n * @param widget - table of contents widget\n * @param settings - advanced settings for toc extension\n * @returns ToC generator capable of parsing rendered Markdown files\n */\nfunction createRenderedMarkdownGenerator(tracker, widget, sanitizer, translator, settings) {\n    let numberingH1 = true;\n    if (settings) {\n        numberingH1 = settings.composite.numberingH1;\n    }\n    const options = new OptionsManager(widget, {\n        numbering: true,\n        numberingH1: numberingH1,\n        sanitizer,\n        translator: translator || nullTranslator\n    });\n    if (settings) {\n        settings.changed.connect(() => {\n            options.numberingH1 = settings.composite.numberingH1;\n        });\n    }\n    return {\n        tracker,\n        usesLatex: true,\n        options: options,\n        toolbarGenerator: generateToolbar,\n        itemRenderer: renderItem,\n        generate: generate\n    };\n    /**\n     * Returns a toolbar generator.\n     *\n     * @private\n     * @returns toolbar generator\n     */\n    function generateToolbar() {\n        return toolbar(options);\n    }\n    /**\n     * Renders a table of contents item.\n     *\n     * @private\n     * @param item - heading to render\n     * @returns rendered item\n     */\n    function renderItem(item) {\n        return render(options, item);\n    }\n    /**\n     * Generates a table of contents.\n     *\n     * @private\n     * @param widget - Markdown document widget\n     * @returns a list of headings\n     */\n    function generate(widget) {\n        let dict = {};\n        return getRenderedHeadings(widget.content.node, sanitizer, dict, options.numbering, options.numberingH1);\n    }\n}\n/**\n * Exports.\n */\nexport { createMarkdownGenerator };\nexport { createRenderedMarkdownGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { parseHeading } from '../../utils/parse_heading';\n/**\n * Parses a provided string and returns a list of headings.\n *\n * @private\n * @param text - input text\n * @param onClick - callback which returns a \"click\" handler\n * @param dict - numbering dictionary\n * @param numberingH1 - whether first level header should be numbered\n * @returns list of headings\n */\nfunction getHeadings(text, onClick, dict, numberingH1) {\n    // Split the text into lines:\n    const lines = text.split('\\n');\n    // Iterate over the lines to get the header level and text for each line:\n    let headings = [];\n    let FLG;\n    for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        // Don't check for Markdown headings if in a code block:\n        if (line.indexOf('```') === 0) {\n            FLG = !FLG;\n        }\n        if (FLG) {\n            continue;\n        }\n        line += lines[i + 1] ? '\\n' + lines[i + 1] : '';\n        const heading = parseHeading(line); // append the next line to capture alternative style Markdown headings\n        if (heading) {\n            let level = heading.level;\n            if (!numberingH1) {\n                level -= 1;\n            }\n            headings.push({\n                text: heading.text,\n                numbering: generateNumbering(dict, level),\n                level: heading.level,\n                onClick: onClick(i)\n            });\n        }\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getHeadings };\n//# sourceMappingURL=get_headings.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns a boolean indicating whether a heading is filtered out by selected tags.\n *\n * @private\n * @param heading - notebook heading\n * @param tags - list of tags\n * @returns boolean indicating whether a heading is filtered\n */\nfunction isHeadingFiltered(heading, tags) {\n    if (tags.length === 0) {\n        return false;\n    }\n    if (heading && heading.cellRef) {\n        let meta = heading.cellRef.model.metadata;\n        let ctags = meta.get('tags');\n        if (ctags) {\n            for (let j = 0; j < ctags.length; j++) {\n                let name = ctags[j];\n                for (let k = 0; k < tags.length; k++) {\n                    if (tags[k] === name) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n/**\n * Exports.\n */\nexport { isHeadingFiltered };\n//# sourceMappingURL=is_heading_filtered.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { isHeadingFiltered } from './is_heading_filtered';\n/**\n * Appends a notebook heading to a list of headings.\n *\n * @private\n * @param headings - list of notebook headings\n * @param heading - rendered heading\n * @param prev - previous heading\n * @param collapseLevel - collapse level\n * @param tags - filter tags\n * @returns result tuple\n */\nfunction appendHeading(headings, heading, prev, collapseLevel, tags) {\n    if (heading && !isHeadingFiltered(heading, tags) && heading.text) {\n        // Determine whether this heading is a child of a \"header\" notebook heading...\n        if (prev && prev.type === 'header') {\n            for (let j = headings.length - 1; j >= 0; j--) {\n                if (headings[j] === prev) {\n                    // TODO: can a heading be the child of multiple headings? If not, we can `break` here upon finding a parent heading, so we don't traverse the entire heading list...\n                    headings[j].hasChild = true;\n                }\n            }\n        }\n        if (collapseLevel < 0) {\n            headings.push(heading);\n        }\n        prev = heading;\n    }\n    return [headings, prev];\n}\n/**\n * Exports.\n */\nexport { appendHeading };\n//# sourceMappingURL=append_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { appendCollapsibleHeading } from './append_collapsible_heading';\nimport { appendHeading } from './append_heading';\n/**\n * Appends a Markdown notebook heading to a list of headings.\n *\n * @private\n * @param headings - list of notebook headings\n * @param heading - rendered heading\n * @param prev - previous heading\n * @param collapseLevel - collapse level\n * @param tags - filter tags\n * @param collapsed - boolean indicating whether a heading is collapsed\n * @param showMarkdown - boolean indicating whether to show Markdown previews\n * @param cellCollapseMetadata - indicates which metadata string to use based on the cellSyncSetting\n * @returns result tuple\n */\nfunction appendMarkdownHeading(heading, headings, prev, collapseLevel, tags, collapsed, showMarkdown, cellCollapseMetadata) {\n    if (heading && heading.type === 'markdown' && showMarkdown) {\n        // Append a Markdown preview heading:\n        [headings, prev] = appendHeading(headings, heading, prev, collapseLevel, tags);\n    }\n    else if (heading && heading.type === 'header') {\n        [headings, prev, collapseLevel] = appendCollapsibleHeading(headings, heading, prev, collapseLevel, tags, collapsed, cellCollapseMetadata);\n    }\n    return [headings, prev, collapseLevel];\n}\n/**\n * Exports.\n */\nexport { appendMarkdownHeading };\n//# sourceMappingURL=append_markdown_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { isHeadingFiltered } from './is_heading_filtered';\n/**\n * Appends a collapsible notebook heading to a list of headings.\n *\n * @private\n * @param headings - list of notebook headings\n * @param heading - rendered heading\n * @param prev - previous heading\n * @param collapseLevel - collapse level\n * @param tags - filter tags\n * @param collapsed - boolean indicating whether a heading is collapsed\n * @param cellCollapseMetadata - indicates which metadata string to use based on the cellSyncSetting\n * @returns result tuple\n */\nfunction appendCollapsibleHeading(headings, heading, prev, collapseLevel, tags, collapsed, cellCollapseMetadata) {\n    const len = headings.length;\n    if (!isHeadingFiltered(heading, tags)) {\n        // If the previous heading is a higher level heading, update the heading to note that it has a child heading...\n        if (prev && prev.type === 'header' && prev.level < heading.level) {\n            for (let j = len - 1; j >= 0; j--) {\n                if (headings[j] === prev) {\n                    // TODO: can a heading be the child of multiple headings? If not, we can `break` here upon finding a parent heading, so we don't traverse the entire heading list...\n                    headings[j].hasChild = true;\n                }\n            }\n        }\n        // If the collapse level doesn't include the heading, or, if there is no collapsing, add to headings and adjust the collapse level...\n        if (collapseLevel >= heading.level || collapseLevel < 0) {\n            headings.push(heading);\n            collapseLevel = collapsed ? heading.level : -1;\n        }\n        prev = heading;\n    }\n    else if (prev && heading.level <= prev.level) {\n        // If the heading is filtered out and has a lower level previous heading, determine if the heading has a parent...\n        let parent = false;\n        let k = len - 1;\n        for (; k >= 0; k--) {\n            if (headings[k].level < heading.level) {\n                prev = headings[k];\n                parent = true;\n                break;\n            }\n        }\n        // If there is no parent, reset collapsing...\n        if (parent) {\n            const isCollapsed = headings[k + 1].cellRef.model.metadata.get(cellCollapseMetadata);\n            collapseLevel = isCollapsed ? headings[k + 1].level : -1;\n        }\n        else {\n            prev = null;\n            collapseLevel = -1;\n        }\n    }\n    return [headings, prev, collapseLevel];\n}\n/**\n * Exports.\n */\nexport { appendCollapsibleHeading };\n//# sourceMappingURL=append_collapsible_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns a code entry notebook heading from a code string.\n *\n * @private\n * @param text - code string\n * @param onClick - callback which returns a \"click\" handler\n * @param executionCount - execution count\n * @param lastLevel - last heading level\n * @param cellRef - cell reference\n * @param index - index of referenced cell relative to other cells in the notebook\n * @returns notebook heading\n */\nfunction getCodeCellHeading(text, onClick, executionCount, lastLevel, cellRef, index = -1) {\n    let headings = [];\n    if (index === -1) {\n        console.warn('Deprecation warning! index argument will become mandatory in the next version');\n    }\n    if (text) {\n        const lines = text.split('\\n');\n        const len = Math.min(lines.length, 3);\n        let str = '';\n        let i = 0;\n        for (; i < len - 1; i++) {\n            str += lines[i] + '\\n';\n        }\n        str += lines[i];\n        headings.push({\n            text: str,\n            level: lastLevel + 1,\n            onClick: onClick(0),\n            type: 'code',\n            prompt: executionCount,\n            cellRef: cellRef,\n            hasChild: false,\n            index: index\n        });\n    }\n    return headings[0];\n}\n/**\n * Exports.\n */\nexport { getCodeCellHeading };\n//# sourceMappingURL=get_code_cell_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns the last heading level.\n *\n * @private\n * @param headings - list of notebook headings\n * @returns heading level\n */\nfunction getLastHeadingLevel(headings) {\n    if (headings.length > 0) {\n        let loc = headings.length - 1;\n        while (loc >= 0) {\n            if (headings[loc].type === 'header') {\n                return headings[loc].level;\n            }\n            loc -= 1;\n        }\n    }\n    return 0;\n}\n/**\n * Exports.\n */\nexport { getLastHeadingLevel };\n//# sourceMappingURL=get_last_heading_level.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { parseHeading } from '../../utils/parse_heading';\n/**\n * Parses a Markdown string and returns a notebook heading.\n *\n * @private\n * @param text - Markdown string\n * @param onClick - callback which returns a \"click\" handler\n * @param dict - numbering dictionary\n * @param lastLevel - last level\n * @param cellRef - cell reference\n * @param index - index of referenced cell relative to other cells in the notebook\n * @returns notebook heading\n */\nfunction getMarkdownHeadings(text, onClick, dict, lastLevel, cellRef, index = -1) {\n    const callback = onClick(0);\n    let headings = [];\n    if (index === -1) {\n        console.warn('Deprecation warning! index argument will become mandatory in the next version');\n    }\n    for (const line of text.split('\\n')) {\n        const heading = parseHeading(line);\n        if (heading) {\n            headings.push({\n                text: heading.text,\n                level: heading.level,\n                numbering: generateNumbering(dict, heading.level),\n                onClick: callback,\n                type: 'header',\n                cellRef: cellRef,\n                hasChild: false,\n                index\n            });\n        }\n        else {\n            headings.push({\n                text: text,\n                level: lastLevel + 1,\n                onClick: callback,\n                type: 'markdown',\n                cellRef: cellRef,\n                hasChild: false,\n                index\n            });\n        }\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getMarkdownHeadings };\n//# sourceMappingURL=get_markdown_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Returns a notebook heading from an HTML element.\n *\n * @private\n * @param node - HTML element\n * @param onClick - callback which returns a \"click\" handler\n * @param dict - numbering dictionary\n * @param lastLevel - last level\n * @param numbering - boolean indicating whether to enable numbering\n * @param numberingH1 - boolean indicating whether to enable first level headers numbering\n * @param cellRef - cell reference\n * @param index - index of referenced cell relative to other cells in the notebook\n * @returns notebook heading\n */\nfunction getRenderedHTMLHeadings(node, onClick, sanitizer, dict, lastLevel, numbering = false, numberingH1 = true, cellRef, index = -1) {\n    let nodes = node.querySelectorAll('h1, h2, h3, h4, h5, h6, p');\n    if (index === -1) {\n        console.warn('Deprecation warning! index argument will become mandatory in the next version');\n    }\n    let headings = [];\n    for (const el of nodes) {\n        if (el.classList.contains('jp-toc-ignore')) {\n            // skip this element if a special class name is included\n            continue;\n        }\n        if (el.nodeName.toLowerCase() === 'p') {\n            if (el.innerHTML) {\n                let html = sanitizer.sanitize(el.innerHTML, sanitizerOptions);\n                headings.push({\n                    level: lastLevel + 1,\n                    html: html.replace('¶', ''),\n                    text: el.textContent ? el.textContent : '',\n                    onClick: onClick(el),\n                    type: 'markdown',\n                    cellRef: cellRef,\n                    hasChild: false,\n                    index: index\n                });\n            }\n            continue;\n        }\n        if (el.getElementsByClassName('numbering-entry').length > 0) {\n            el.removeChild(el.getElementsByClassName('numbering-entry')[0]);\n        }\n        let html = sanitizer.sanitize(el.innerHTML, sanitizerOptions);\n        html = html.replace('¶', '');\n        let level = parseInt(el.tagName[1], 10);\n        if (!numberingH1) {\n            level -= 1;\n        }\n        let nstr = generateNumbering(dict, level);\n        if (numbering) {\n            const nhtml = document.createElement('span');\n            nhtml.classList.add('numbering-entry');\n            nhtml.textContent = nstr !== null && nstr !== void 0 ? nstr : '';\n            el.insertBefore(nhtml, el.firstChild);\n        }\n        headings.push({\n            level: level,\n            text: el.textContent ? el.textContent : '',\n            numbering: nstr,\n            html: html,\n            onClick: onClick(el),\n            type: 'header',\n            cellRef: cellRef,\n            hasChild: false,\n            index: index\n        });\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getRenderedHTMLHeadings };\n//# sourceMappingURL=get_rendered_html_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Signal } from '@lumino/signaling';\nimport { TableOfContentsRegistry as Registry } from '../../registry';\n/**\n * Class for managing notebook ToC generator options.\n *\n * @private\n */\nclass OptionsManager extends Registry.IOptionsManager {\n    /**\n     * Returns an options manager.\n     *\n     * @param widget - table of contents widget\n     * @param notebook - notebook tracker\n     * @param options - generator options\n     * @returns options manager\n     */\n    constructor(widget, notebook, options) {\n        super();\n        this._preRenderedToolbar = null;\n        this._filtered = [];\n        this._showCode = false;\n        this._showMarkdown = false;\n        this._showTags = false;\n        this._tagTool = null;\n        this._numbering = options.numbering;\n        this._numberingH1 = options.numberingH1;\n        this._includeOutput = options.includeOutput;\n        this._syncCollapseState = options.syncCollapseState;\n        this._widget = widget;\n        this._notebook = notebook;\n        this.sanitizer = options.sanitizer;\n        this.storeTags = [];\n        this.translator = options.translator || nullTranslator;\n        this._collapseChanged = new Signal(this);\n    }\n    /**\n     * Gets/sets the tag tool component.\n     */\n    set tagTool(tagTool) {\n        this._tagTool = tagTool;\n    }\n    get tagTool() {\n        return this._tagTool;\n    }\n    /**\n     * Sets notebook meta data.\n     */\n    set notebookMetadata(value) {\n        if (this._notebook.currentWidget != null) {\n            this._notebook.currentWidget.model.metadata.set(value[0], value[1]);\n        }\n    }\n    /**\n     * Gets/sets ToC generator numbering.\n     */\n    set numbering(value) {\n        this._numbering = value;\n        this._widget.update();\n        this.notebookMetadata = ['toc-autonumbering', this._numbering];\n    }\n    get numbering() {\n        return this._numbering;\n    }\n    /**\n     * Gets/sets ToC generator numbering h1 headers.\n     */\n    set numberingH1(value) {\n        if (this._numberingH1 != value) {\n            this._numberingH1 = value;\n            this._widget.update();\n        }\n    }\n    get numberingH1() {\n        return this._numberingH1;\n    }\n    /**\n     * Toggles whether cell outputs should be included in headings.\n     */\n    set includeOutput(value) {\n        if (this._includeOutput != value) {\n            this._includeOutput = value;\n            this._widget.update();\n        }\n    }\n    get includeOutput() {\n        return this._includeOutput;\n    }\n    /**\n     * Gets/sets option for ToC heading collapsing to be reflected in Notebook and vice versa\n     */\n    set syncCollapseState(value) {\n        if (this._syncCollapseState != value) {\n            this._syncCollapseState = value;\n            this._widget.update();\n        }\n    }\n    get syncCollapseState() {\n        return this._syncCollapseState;\n    }\n    /**\n     * Toggles whether to show code previews in the table of contents.\n     */\n    set showCode(value) {\n        this._showCode = value;\n        this.notebookMetadata = ['toc-showcode', this._showCode];\n        this._widget.update();\n    }\n    get showCode() {\n        return this._showCode;\n    }\n    /**\n     * Toggles whether to show Markdown previews in the table of contents.\n     */\n    set showMarkdown(value) {\n        this._showMarkdown = value;\n        this.notebookMetadata = ['toc-showmarkdowntxt', this._showMarkdown];\n        this._widget.update();\n    }\n    get showMarkdown() {\n        return this._showMarkdown;\n    }\n    /**\n     * Signal emitted when a \"collapse\" twist button is pressed in the ToC\n     */\n    get collapseChanged() {\n        return this._collapseChanged;\n    }\n    /**\n     * Toggles whether to show tags in the table of contents.\n     */\n    set showTags(value) {\n        this._showTags = value;\n        this.notebookMetadata = ['toc-showtags', this._showTags];\n        this._widget.update();\n    }\n    get showTags() {\n        return this._showTags;\n    }\n    /**\n     * Returns a list of selected tags.\n     */\n    get filtered() {\n        if (this.tagTool) {\n            this._filtered = this.tagTool.filtered;\n        }\n        else if (this.storeTags.length > 0) {\n            this._filtered = this.storeTags;\n        }\n        else {\n            this._filtered = [];\n        }\n        return this._filtered;\n    }\n    /**\n     * Gets/sets a pre-rendered a toolbar.\n     */\n    set preRenderedToolbar(value) {\n        this._preRenderedToolbar = value;\n    }\n    get preRenderedToolbar() {\n        return this._preRenderedToolbar;\n    }\n    /**\n     * Updates a table of contents widget.\n     */\n    updateWidget() {\n        this._widget.update();\n    }\n    /**\n     * Updates a table of contents widget and\n     * emits a signal in case an extension wants\n     * to perform an action when the collapse button\n     * is pressed.\n     */\n    updateAndCollapse(args) {\n        this._collapseChanged.emit(args);\n        this._widget.update();\n    }\n    /**\n     * Initializes options.\n     *\n     * ## Notes\n     *\n     * -  This will **not** change notebook meta-data.\n     *\n     * @param numbering - boolean indicating whether to number items\n     * @param numberingH1 - boolean indicating whether to number first level items\n     * @param includeOutput - boolean indicating whether cell outputs should be included in headings\n     * @param syncCollapseState - boolean indicating whether collapsing in ToC should be reflected in Notebook and vice versa\n     * @param showCode - boolean indicating whether to show code previews\n     * @param showMarkdown - boolean indicating whether to show Markdown previews\n     * @param showTags - boolean indicating whether to show tags\n     */\n    initializeOptions(numbering, numberingH1, includeOutput, syncCollapseState, showCode, showMarkdown, showTags) {\n        this._numbering = numbering;\n        this._numberingH1 = numberingH1;\n        this._includeOutput = includeOutput;\n        this._syncCollapseState = syncCollapseState;\n        this._showCode = showCode;\n        this._showMarkdown = showMarkdown;\n        this._showTags = showTags;\n        this._widget.update();\n    }\n}\n/**\n * Exports.\n */\nexport { OptionsManager };\n//# sourceMappingURL=options_manager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Class for rendering a code component.\n *\n * @private\n */\nclass CodeComponent extends React.Component {\n    /**\n     * Returns a code component.\n     *\n     * @param props - component properties\n     * @returns code component\n     */\n    constructor(props) {\n        super(props);\n        this.state = { heading: props.heading };\n    }\n    /**\n     * Updates code component state.\n     *\n     * @param props - component properties\n     */\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        this.setState({ heading: nextProps.heading });\n    }\n    /**\n     * Renders a code component.\n     *\n     * @returns rendered component\n     */\n    render() {\n        // Get the current rendered CodeMirror:\n        let html = this.state.heading.cellRef.editor.host.innerHTML;\n        // Sanitize the HTML:\n        html = this.props.sanitizer.sanitize(html, sanitizerOptions);\n        return (React.createElement(\"div\", { className: \"cm-toc\", dangerouslySetInnerHTML: { __html: html } }));\n    }\n}\n/**\n * Exports.\n */\nexport { CodeComponent };\n//# sourceMappingURL=codemirror.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { NotebookActions } from '@jupyterlab/notebook';\nimport { ellipsesIcon } from '@jupyterlab/ui-components';\nimport { MARKDOWN_HEADING_COLLAPSED } from '@jupyterlab/cells';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\nimport { CodeComponent } from './codemirror';\n/**\n * Renders a notebook table of contents item.\n *\n * @private\n * @param options - generator options\n * @param tracker - notebook tracker\n * @param item - notebook heading\n * @param toc - current list of notebook headings\n * @returns rendered item\n */\nfunction render(options, tracker, item, toc = []) {\n    let jsx;\n    if (item.type === 'markdown' || item.type === 'header') {\n        let fontSizeClass = 'toc-level-size-default';\n        let numbering = item.numbering && options.numbering ? item.numbering : '';\n        let cellCollapseMetadata = options.syncCollapseState\n            ? MARKDOWN_HEADING_COLLAPSED\n            : 'toc-hr-collapsed';\n        if (item.type === 'header') {\n            fontSizeClass = 'toc-level-size-' + item.level;\n        }\n        if (item.html && (item.type === 'header' || options.showMarkdown)) {\n            jsx = (React.createElement(\"span\", { dangerouslySetInnerHTML: {\n                    __html: numbering +\n                        options.sanitizer.sanitize(item.html, sanitizerOptions)\n                }, className: item.type + '-cell toc-cell-item' }));\n            // Render the headers:\n            if (item.type === 'header') {\n                let button = (React.createElement(\"div\", { className: \"jp-Collapser p-Widget lm-Widget\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(tracker, cellCollapseMetadata, item);\n                    } },\n                    React.createElement(\"div\", { className: \"toc-Collapser-child\" })));\n                let collapsed;\n                if (item.cellRef.model.metadata.has(cellCollapseMetadata)) {\n                    collapsed = item.cellRef.model.metadata.get(cellCollapseMetadata);\n                }\n                let ellipseButton = collapsed ? (React.createElement(\"div\", { className: \"toc-Ellipses\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(tracker, cellCollapseMetadata, item);\n                    } },\n                    React.createElement(ellipsesIcon.react, null))) : (React.createElement(\"div\", null));\n                // Render the heading item:\n                jsx = (React.createElement(\"div\", { className: 'toc-entry-holder ' +\n                        fontSizeClass +\n                        (tracker.activeCell === item.cellRef\n                            ? ' toc-active-cell'\n                            : previousHeader(tracker, item, toc)\n                                ? ' toc-active-cell'\n                                : '') },\n                    button,\n                    jsx,\n                    ellipseButton));\n            }\n            return jsx;\n        }\n        if (item.type === 'header' || options.showMarkdown) {\n            // Render headers/markdown for plain text:\n            jsx = (React.createElement(\"span\", { className: item.type + '-cell toc-cell-item' }, numbering + item.text));\n            if (item.type === 'header') {\n                let button = (React.createElement(\"div\", { className: \"jp-Collapser p-Widget lm-Widget\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(tracker, cellCollapseMetadata, item);\n                    } },\n                    React.createElement(\"div\", { className: \"toc-Collapser-child\" })));\n                let collapsed;\n                if (item.cellRef.model.metadata.has(cellCollapseMetadata)) {\n                    collapsed = item.cellRef.model.metadata.get(cellCollapseMetadata);\n                }\n                let ellipseButton = collapsed ? (React.createElement(\"div\", { className: \"toc-Ellipses\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(tracker, cellCollapseMetadata, item);\n                    } },\n                    React.createElement(ellipsesIcon.react, null))) : (React.createElement(\"div\", null));\n                jsx = (React.createElement(\"div\", { className: 'toc-entry-holder ' +\n                        fontSizeClass +\n                        (tracker.activeCell === item.cellRef\n                            ? ' toc-active-cell'\n                            : previousHeader(tracker, item, toc)\n                                ? ' toc-active-cell'\n                                : '') },\n                    button,\n                    jsx,\n                    ellipseButton));\n            }\n            return jsx;\n        }\n        return null;\n    }\n    if (item.type === 'code' && options.showCode) {\n        // Render code cells:\n        return (React.createElement(\"div\", { className: \"toc-code-cell-div\" },\n            React.createElement(\"div\", { className: \"toc-code-cell-prompt\" }, item.prompt),\n            React.createElement(\"span\", { className: 'toc-code-span' },\n                React.createElement(CodeComponent, { sanitizer: options.sanitizer, heading: item }))));\n    }\n    return null;\n    /**\n     * Callback invoked upon encountering a \"click\" event.\n     *\n     * @private\n     * @param heading - notebook heading that was clicked\n     */\n    function onClick(tracker, cellCollapseMetadata, heading) {\n        let collapsed = false;\n        let syncCollapseState = options.syncCollapseState;\n        if (heading.cellRef.model.metadata.get(cellCollapseMetadata)) {\n            collapsed = heading.cellRef.model.metadata.get(cellCollapseMetadata);\n        }\n        if (heading) {\n            if (syncCollapseState) {\n                // if collapse state is synced, update state here\n                if (tracker.currentWidget) {\n                    NotebookActions.setHeadingCollapse(heading.cellRef, !collapsed, tracker.currentWidget.content);\n                }\n            }\n            else {\n                if (collapsed) {\n                    heading.cellRef.model.metadata.delete(cellCollapseMetadata);\n                }\n                else {\n                    heading.cellRef.model.metadata.set(cellCollapseMetadata, true);\n                }\n            }\n            options.updateAndCollapse({\n                heading: heading,\n                collapsedState: collapsed,\n                tocType: 'notebook'\n            });\n        }\n        else {\n            options.updateWidget();\n        }\n    }\n}\n/**\n * Used to find the nearest above heading to an active notebook cell\n *\n * @private\n * @param tracker - notebook tracker\n * @param item - notebook heading\n * @param toc - current list of notebook headings\n * @returns true if heading is nearest above a selected cell, otherwise false\n */\nfunction previousHeader(tracker, item, toc) {\n    if (item.index > -1 || (toc === null || toc === void 0 ? void 0 : toc.length)) {\n        let activeCellIndex = tracker.currentWidget.content.activeCellIndex;\n        let headerIndex = item.index;\n        // header index has to be less than the active cell index\n        if (headerIndex < activeCellIndex) {\n            let tocIndexOfNextHeader = toc.indexOf(item) + 1;\n            // return true if header is the last header\n            if (tocIndexOfNextHeader >= toc.length) {\n                return true;\n            }\n            // return true if the next header cells index is greater than the active cells index\n            let nextHeaderIndex = toc === null || toc === void 0 ? void 0 : toc[tocIndexOfNextHeader].index;\n            if (nextHeaderIndex > activeCellIndex) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * Exports.\n */\nexport { render };\n//# sourceMappingURL=render.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * Abstract class defining a React component containing one tag label.\n *\n * @private\n */\nclass TagComponent extends React.Component {\n    /**\n     * Returns a React component.\n     *\n     * @param props - properties\n     * @returns component\n     */\n    constructor(props) {\n        super(props);\n    }\n    /**\n     * Renders a component.\n     *\n     * @returns rendered component\n     */\n    render() {\n        const tag = this.props.tag;\n        return (React.createElement(\"div\", null,\n            React.createElement(\"label\", { className: \"toc-tag-label\", key: new Date().toLocaleTimeString() }, tag)));\n    }\n}\n/**\n * Exports.\n */\nexport { TagComponent };\n//# sourceMappingURL=tag.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { TagComponent } from './tag';\n/**\n * Class for a React component that renders all tags in a list.\n *\n * @private\n */\nclass TagListComponent extends React.Component {\n    /**\n     * Returns a React component.\n     *\n     * @param props - properties\n     * @returns component\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Toggles whether a tag is selected when clicked.\n         *\n         * @param name - tag name\n         */\n        this.selectedTagWithName = (name) => {\n            if (this.props.selectedTags.indexOf(name) >= 0) {\n                this.props.selectionStateHandler(name, false);\n            }\n            else {\n                this.props.selectionStateHandler(name, true);\n            }\n        };\n        /**\n         * Renders a tag component for each tag within a list of tags.\n         *\n         * @param tags - list of tags\n         */\n        this.renderTagComponents = (tags) => {\n            const selectedTags = this.props.selectedTags;\n            const selectedTagWithName = this.selectedTagWithName;\n            return tags.map((tag, index) => {\n                const tagClass = selectedTags.indexOf(tag) >= 0\n                    ? 'toc-selected-tag toc-tag'\n                    : 'toc-unselected-tag toc-tag';\n                return (React.createElement(\"div\", { key: tag, className: tagClass, onClick: event => {\n                        selectedTagWithName(tag);\n                    }, tabIndex: 0 },\n                    React.createElement(TagComponent, { selectionStateHandler: this.props.selectionStateHandler, selectedTags: this.props.selectedTags, tag: tag })));\n            });\n        };\n        this.state = { selected: this.props.selectedTags };\n    }\n    /**\n     * Renders the list of tags in the ToC tags dropdown.\n     *\n     * @returns rendered list\n     */\n    render() {\n        let tags = this.props.tags;\n        let jsx = null;\n        if (tags) {\n            jsx = this.renderTagComponents(tags);\n        }\n        return React.createElement(\"div\", { className: \"toc-tag-holder\" }, jsx);\n    }\n}\n/**\n * Exports.\n */\nexport { TagListComponent };\n//# sourceMappingURL=tag_list.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport * as React from 'react';\nimport { TagListComponent } from './tag_list';\n/**\n * Tag dropdown React component.\n *\n * @private\n */\nclass TagsToolComponent extends React.Component {\n    /**\n     * Returns a component.\n     *\n     * @param props - component properties\n     * @returns component\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Changes the dropdown selection state.\n         *\n         * @param newState - new state\n         * @param add - boolean indicating whether to add to selection\n         */\n        this.changeSelectionState = (newState, add) => {\n            let tags = this.state.selected;\n            if (add) {\n                tags.push(newState);\n                this.setState({ selected: tags });\n                this.filterTags(tags);\n            }\n            else {\n                let selected = [];\n                for (let i = 0; i < tags.length; i++) {\n                    if (tags[i] !== newState) {\n                        selected.push(tags[i]);\n                    }\n                }\n                this.setState({ selected: selected });\n                this.filterTags(selected);\n            }\n        };\n        /**\n         * De-selects all tags in the dropdown and clear filters in the ToC.\n         */\n        this.deselectAll = () => {\n            this.setState({ selected: [] });\n            this.props.options.updateWidget();\n        };\n        /**\n         * Select all the cells that contains all of the current tags and activates the first of those cells.\n         */\n        this.selectAllCellsWithCurrentTags = () => {\n            const tags = this.state.selected;\n            const panel = this.props.tracker.currentWidget;\n            const widgets = panel === null || panel === void 0 ? void 0 : panel.content.widgets;\n            panel === null || panel === void 0 ? void 0 : panel.content.deselectAll();\n            let changedActive = false;\n            widgets === null || widgets === void 0 ? void 0 : widgets.forEach((cell, ix) => {\n                const hasAllCurrentTags = tags.every(tag => this.containsTag(tag, cell));\n                if (hasAllCurrentTags) {\n                    if (!changedActive) {\n                        if (panel) {\n                            panel.content.activeCellIndex = ix;\n                        }\n                        changedActive = true;\n                    }\n                    panel === null || panel === void 0 ? void 0 : panel.content.select(cell);\n                }\n            });\n        };\n        /**\n         * Filters the ToC by according to selected tags.\n         *\n         * @param selected - selected tags\n         */\n        this.filterTags = (selected) => {\n            this.setState({ selected });\n            this.props.options.updateWidget();\n        };\n        /**\n         * Updates filters.\n         */\n        this.updateFilters = () => {\n            let tmp = [];\n            let idx = 0;\n            let update = false;\n            for (let i = 0; i < this.state.selected.length; i++) {\n                if (this.props.tags.indexOf(this.state.selected[i]) > -1) {\n                    tmp[idx] = this.state.selected[i];\n                    idx += 1;\n                }\n                else if (this.props.options.showTags === true) {\n                    update = true;\n                }\n            }\n            if (update) {\n                this.filterTags(tmp);\n                this.setState({ selected: tmp });\n            }\n        };\n        this.state = {\n            selected: this.props.inputFilter\n        };\n        const translator = this.props.translator || nullTranslator;\n        this._trans = translator.load('jupyterlab');\n    }\n    /**\n     * Returns a list of selected tags.\n     *\n     * @returns tag list\n     */\n    get filtered() {\n        return this.state.selected;\n    }\n    /**\n     * Checks whether a cell has a provided tag.\n     *\n     * @param tag - tag\n     * @param cell - cell reference\n     * @returns boolean indicating whether a cell has a provided tag\n     */\n    containsTag(tag, cell) {\n        if (cell === null) {\n            return false;\n        }\n        let tagList = cell.model.metadata.get('tags');\n        if (tagList) {\n            for (let i = 0; i < tagList.length; i++) {\n                if (tagList[i] === tag) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    /**\n     * Updates filters.\n     */\n    UNSAFE_componentWillUpdate() {\n        this.updateFilters();\n    }\n    /**\n     * Renders the interior of the tag dropdown.\n     *\n     * @returns rendered component\n     */\n    render() {\n        let jsx = (React.createElement(\"div\", { className: \"toc-no-tags-div\" }, this._trans.__('No Tags Available')));\n        let text;\n        if (this.state.selected.length === 0) {\n            text = (React.createElement(\"span\", { className: 'toc-filter-button-na' }, this._trans.__('Clear Filters')));\n        }\n        else if (this.state.selected.length === 1) {\n            text = (React.createElement(\"span\", { className: 'toc-filter-button', onClick: () => this.deselectAll() },\n                ' ',\n                \"Clear 1 Filter\",\n                ' '));\n        }\n        else {\n            text = (React.createElement(\"span\", { className: 'toc-filter-button', onClick: () => this.deselectAll() },\n                ' ',\n                \"Clear \",\n                this.state.selected.length,\n                \" Filters\",\n                ' '));\n        }\n        let command;\n        if (this.state.selected.length === 0) {\n            command = (React.createElement(\"span\", { className: 'toc-filter-button-na', role: \"text\", \"aria-label\": this._trans.__('Select All Cells With Current Tags'), title: this._trans.__('Select All Cells With Current Tags') }, this._trans.__('Select All Cells With Current Tags')));\n        }\n        else {\n            command = (React.createElement(\"span\", { className: 'toc-filter-button', role: \"button\", \"aria-label\": this._trans.__('Select All Cells With Current Tags'), title: this._trans.__('Select All Cells With Current Tags'), onClick: this.selectAllCellsWithCurrentTags, onKeyDown: this.selectAllCellsWithCurrentTags }, this._trans.__('Select All Cells With Current Tags')));\n        }\n        if (this.props.tags && this.props.tags.length > 0) {\n            jsx = (React.createElement(\"div\", { className: 'toc-tags-container' },\n                React.createElement(TagListComponent, { tags: this.props.tags, selectionStateHandler: this.changeSelectionState, selectedTags: this.state.selected }),\n                text,\n                command));\n        }\n        return jsx;\n    }\n}\n/**\n * Exports.\n */\nexport { TagsToolComponent };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { MARKDOWN_HEADING_COLLAPSED } from '@jupyterlab/cells';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { isDOM } from '../../utils/is_dom';\nimport { isMarkdown } from '../../utils/is_markdown';\nimport { appendHeading } from './append_heading';\nimport { appendMarkdownHeading } from './append_markdown_heading';\nimport { getCodeCellHeading } from './get_code_cell_heading';\nimport { getLastHeadingLevel } from './get_last_heading_level';\nimport { getMarkdownHeadings } from './get_markdown_heading';\nimport { getRenderedHTMLHeadings } from './get_rendered_html_heading';\nimport { OptionsManager } from './options_manager';\nimport { render } from './render';\nimport { toolbar } from './toolbar_generator';\n/**\n * Returns a ToC generator for notebooks.\n *\n * @private\n * @param tracker - notebook tracker\n * @param widget - table of contents widget\n * @param sanitizer - HTML sanitizer\n * @param translator - Language translator\n * @param settings - advanced settings for toc extension\n * @returns ToC generator capable of parsing notebooks\n */\nfunction createNotebookGenerator(tracker, widget, sanitizer, translator, settings) {\n    let numberingH1 = true;\n    let includeOutput = true;\n    let syncCollapseState = false;\n    if (settings) {\n        numberingH1 = settings.composite.numberingH1;\n        includeOutput = settings.composite.includeOutput;\n        syncCollapseState = settings.composite.syncCollapseState;\n    }\n    const options = new OptionsManager(widget, tracker, {\n        numbering: false,\n        numberingH1: numberingH1,\n        includeOutput: includeOutput,\n        syncCollapseState: syncCollapseState,\n        sanitizer: sanitizer,\n        translator: translator || nullTranslator\n    });\n    if (settings) {\n        settings.changed.connect(() => {\n            options.numberingH1 = settings.composite.numberingH1;\n            options.includeOutput = settings.composite.includeOutput;\n            options.syncCollapseState = settings.composite\n                .syncCollapseState;\n        });\n    }\n    tracker.activeCellChanged.connect((sender, args) => {\n        widget.update();\n    });\n    return {\n        tracker,\n        usesLatex: true,\n        options: options,\n        toolbarGenerator: generateToolbar,\n        itemRenderer: renderItem,\n        generate: generate,\n        collapseChanged: options.collapseChanged\n    };\n    /**\n     * Returns a toolbar generator.\n     *\n     * @private\n     * @returns toolbar generator\n     */\n    function generateToolbar() {\n        return toolbar(options, tracker);\n    }\n    /**\n     * Renders a table of contents item.\n     *\n     * @private\n     * @param item - heading to render\n     * @param toc - list of all headers to render\n     * @returns rendered item\n     */\n    function renderItem(item, toc = []) {\n        return render(options, tracker, item, toc);\n    }\n    /**\n     * Generates a table of contents.\n     *\n     * @private\n     * @param panel - notebook widget\n     * @returns a list of headings\n     */\n    function generate(panel) {\n        let headings = [];\n        let collapseLevel = -1;\n        let dict = {};\n        // Initialize a variable for keeping track of the previous heading:\n        let prev = null;\n        // Generate headings by iterating through all notebook cells...\n        for (let i = 0; i < panel.content.widgets.length; i++) {\n            let cell = panel.content.widgets[i];\n            let model = cell.model;\n            let cellCollapseMetadata = options.syncCollapseState\n                ? MARKDOWN_HEADING_COLLAPSED\n                : 'toc-hr-collapsed';\n            let collapsed = model.metadata.get(cellCollapseMetadata);\n            collapsed = collapsed || false;\n            if (model.type === 'code') {\n                if (!widget || (widget && options.showCode)) {\n                    const onClick = (line) => {\n                        return () => {\n                            panel.content.activeCellIndex = i;\n                            cell.node.scrollIntoView();\n                        };\n                    };\n                    let count = cell.model.executionCount;\n                    let executionCount = count !== null ? '[' + count + ']: ' : '[ ]: ';\n                    let heading = getCodeCellHeading(model.value.text, onClick, executionCount, getLastHeadingLevel(headings), cell, i);\n                    [headings, prev] = appendHeading(headings, heading, prev, collapseLevel, options.filtered);\n                }\n                if (options.includeOutput) {\n                    // Iterate over the code cell outputs to check for Markdown or HTML from which we can generate ToC headings...\n                    for (let j = 0; j < model.outputs.length; j++) {\n                        const m = model.outputs.get(j);\n                        let dtypes = Object.keys(m.data);\n                        dtypes = dtypes.filter(t => isMarkdown(t) || isDOM(t));\n                        if (!dtypes.length) {\n                            continue;\n                        }\n                        const onClick = (el) => {\n                            return () => {\n                                panel.content.activeCellIndex = i;\n                                panel.content.mode = 'command';\n                                el.scrollIntoView();\n                            };\n                        };\n                        let htmlHeadings = getRenderedHTMLHeadings(cell.outputArea.widgets[j].node, onClick, sanitizer, dict, getLastHeadingLevel(headings), options.numbering, options.numberingH1, cell, i);\n                        for (const heading of htmlHeadings) {\n                            [headings, prev, collapseLevel] = appendMarkdownHeading(heading, headings, prev, collapseLevel, options.filtered, collapsed, options.showMarkdown, cellCollapseMetadata);\n                        }\n                    }\n                }\n                continue;\n            }\n            if (model.type === 'markdown') {\n                let mcell = cell;\n                let heading;\n                let lastLevel = getLastHeadingLevel(headings);\n                // If the cell is rendered, generate the ToC items from the HTML...\n                if (mcell.rendered && !mcell.inputHidden) {\n                    const onClick = (el) => {\n                        return () => {\n                            if (!mcell.rendered) {\n                                panel.content.activeCellIndex = i;\n                                el.scrollIntoView();\n                            }\n                            else {\n                                panel.content.mode = 'command';\n                                cell.node.scrollIntoView();\n                                panel.content.activeCellIndex = i;\n                            }\n                        };\n                    };\n                    const htmlHeadings = getRenderedHTMLHeadings(cell.node, onClick, sanitizer, dict, lastLevel, options.numbering, options.numberingH1, cell, i);\n                    for (heading of htmlHeadings) {\n                        [headings, prev, collapseLevel] = appendMarkdownHeading(heading, headings, prev, collapseLevel, options.filtered, collapsed, options.showMarkdown, cellCollapseMetadata);\n                    }\n                    // If not rendered, generate ToC items from the cell text...\n                }\n                else {\n                    const onClick = (line) => {\n                        return () => {\n                            panel.content.activeCellIndex = i;\n                            cell.node.scrollIntoView();\n                        };\n                    };\n                    const markdownHeadings = getMarkdownHeadings(model.value.text, onClick, dict, lastLevel, cell, i);\n                    for (heading of markdownHeadings) {\n                        [headings, prev, collapseLevel] = appendMarkdownHeading(heading, headings, prev, collapseLevel, options.filtered, collapsed, options.showMarkdown, cellCollapseMetadata);\n                    }\n                }\n            }\n        }\n        return headings;\n    }\n}\n/**\n * Exports.\n */\nexport { createNotebookGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { codeIcon, markdownIcon, numberingIcon, tagIcon } from '@jupyterlab/ui-components';\nimport * as React from 'react';\nimport { TagsToolComponent } from './tagstool';\n/**\n * Returns a component for rendering a notebook table of contents toolbar.\n *\n * @private\n * @param options - generator options\n * @param tracker - notebook tracker\n * @returns toolbar component\n */\nfunction toolbar(options, tracker) {\n    return class Toolbar extends React.Component {\n        /**\n         * Returns a component for rendering a notebook table of contents toolbar.\n         *\n         * @param props - toolbar properties\n         * @returns toolbar component\n         */\n        constructor(props) {\n            super(props);\n            this._trans = options.translator.load('jupyterlab');\n            this.tagTool = null;\n            this.state = {\n                showCode: true,\n                showMarkdown: false,\n                showTags: false,\n                numbering: false\n            };\n            if (tracker.currentWidget) {\n                // Read saved user settings in notebook meta data:\n                void tracker.currentWidget.context.ready.then(() => {\n                    if (tracker.currentWidget) {\n                        tracker.currentWidget.content.activeCellChanged.connect(() => {\n                            options.updateWidget();\n                        });\n                        const numbering = tracker.currentWidget.model.metadata.get('toc-autonumbering');\n                        const showCode = tracker.currentWidget.model.metadata.get('toc-showcode');\n                        const showMarkdown = tracker.currentWidget.model.metadata.get('toc-showmarkdowntxt');\n                        const showTags = tracker.currentWidget.model.metadata.get('toc-showtags');\n                        options.initializeOptions(numbering || options.numbering, options.numberingH1, options.includeOutput, options.syncCollapseState, showCode || options.showCode, showMarkdown || options.showMarkdown, showTags || options.showTags);\n                        this.setState({\n                            showCode: options.showCode,\n                            showMarkdown: options.showMarkdown,\n                            showTags: options.showTags,\n                            numbering: options.numbering\n                        });\n                        this.tags = [];\n                    }\n                });\n            }\n        }\n        /**\n         * Toggle whether to show code previews.\n         */\n        toggleCode() {\n            options.showCode = !options.showCode;\n            this.setState({ showCode: options.showCode });\n        }\n        /**\n         * Toggle whether to show Markdown previews.\n         */\n        toggleMarkdown() {\n            options.showMarkdown = !options.showMarkdown;\n            this.setState({ showMarkdown: options.showMarkdown });\n        }\n        /**\n         * Toggle whether to number headings.\n         */\n        toggleNumbering() {\n            options.numbering = !options.numbering;\n            this.setState({ numbering: options.numbering });\n        }\n        /**\n         * Toggle tag dropdown.\n         */\n        toggleTagDropdown() {\n            if (options.showTags && this.tagTool) {\n                options.storeTags = this.tagTool.state.selected;\n            }\n            options.showTags = !options.showTags;\n            this.setState({ showTags: options.showTags });\n        }\n        /**\n         * Loads all document tags.\n         */\n        loadTags() {\n            const notebook = tracker.currentWidget;\n            if (notebook) {\n                const cells = notebook.model.cells;\n                const tags = new Set();\n                this.tags = [];\n                for (let i = 0; i < cells.length; i++) {\n                    const cell = cells.get(i);\n                    const list = cell.metadata.get('tags');\n                    if (Array.isArray(list)) {\n                        list.forEach((tag) => tag && tags.add(tag));\n                    }\n                }\n                this.tags = Array.from(tags);\n            }\n        }\n        /**\n         * Renders a toolbar.\n         *\n         * @returns rendered toolbar\n         */\n        render() {\n            const codeToggleIcon = (React.createElement(\"div\", { onClick: event => this.toggleCode(), role: \"text\", \"aria-label\": this._trans.__('Toggle Code Cells'), title: this._trans.__('Toggle Code Cells'), className: this.state.showCode\n                    ? 'toc-toolbar-code-icon toc-toolbar-icon-selected'\n                    : 'toc-toolbar-code-icon toc-toolbar-icon' },\n                React.createElement(codeIcon.react, null)));\n            const markdownToggleIcon = (React.createElement(\"div\", { onClick: event => this.toggleMarkdown(), role: \"text\", \"aria-label\": this._trans.__('Toggle Markdown Text Cells'), title: this._trans.__('Toggle Markdown Text Cells'), className: this.state.showMarkdown\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(markdownIcon.react, null)));\n            const numberingToggleIcon = (React.createElement(\"div\", { onClick: event => this.toggleNumbering(), role: \"text\", \"aria-label\": this._trans.__('Toggle Auto-Numbering'), title: this._trans.__('Toggle Auto-Numbering'), className: this.state.numbering\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(numberingIcon.react, null)));\n            let tagDropdown = React.createElement(\"div\", null);\n            let tagToggleIcon = (React.createElement(\"div\", { role: \"text\", \"aria-label\": this._trans.__('Show Tags Menu'), title: this._trans.__('Show Tags Menu'), className: this.state.showTags\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(tagIcon.react, null)));\n            if (this.state.showTags) {\n                this.loadTags();\n                const tagTool = (React.createElement(TagsToolComponent, { tags: this.tags, tracker: tracker, options: options, inputFilter: options.storeTags, translator: options.translator, ref: tagTool => (this.tagTool = tagTool) }));\n                options.tagTool = this.tagTool;\n                tagDropdown = React.createElement(\"div\", { className: 'toc-tag-dropdown' },\n                    \" \",\n                    tagTool,\n                    \" \");\n            }\n            return (React.createElement(\"div\", null,\n                React.createElement(\"div\", { className: 'toc-toolbar' },\n                    codeToggleIcon,\n                    markdownToggleIcon,\n                    numberingToggleIcon,\n                    React.createElement(\"div\", { className: 'toc-tag-dropdown-button', onClick: event => this.toggleTagDropdown() }, tagToggleIcon)),\n                tagDropdown));\n        }\n    };\n}\n/**\n * Exports.\n */\nexport { toolbar };\n//# sourceMappingURL=toolbar_generator.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns whether a MIME type corresponds to either HTML or virtual DOM.\n *\n * @private\n * @param mime - MIME type string\n * @returns boolean indicating whether a provided MIME type corresponds to either HTML or virtual DOM\n *\n * @example\n * const bool = isDOM('text/html');\n * // returns true\n *\n * @example\n * const bool = isDOM('text/plain');\n * // returns false\n */\nfunction isDOM(mime) {\n    return mime === 'application/vdom.v1+json' || mime === 'text/html';\n}\n/**\n * Exports.\n */\nexport { isDOM };\n//# sourceMappingURL=is_dom.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * Renders a Python table of contents item.\n *\n * @private\n * @param item - numbered heading\n * @returns rendered item\n */\nfunction render(item) {\n    let fontSizeClass = 'toc-level-size-' + item.level;\n    return (React.createElement(\"div\", { className: fontSizeClass + ' toc-entry-holder' },\n        React.createElement(\"div\", { className: \"jp-Collapser p-Widget lm-Widget\" },\n            React.createElement(\"div\", { className: \"toc-Collapser-child\" })),\n        React.createElement(\"span\", { className: \"header-cell toc-cell-item\" },\n            \" \",\n            item.text,\n            \" \")));\n}\n/**\n * Exports.\n */\nexport { render };\n//# sourceMappingURL=render.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { render } from './render';\n/**\n * Generates a table of contents.\n *\n * @private\n * @param editor - editor widget\n * @returns a list of headings\n */\nfunction generate(editor) {\n    // Split the text into lines:\n    let lines = editor.content.model.value.text.split('\\n');\n    // Iterate over the lines to get the heading level and text for each line:\n    let headings = [];\n    let processingImports = false;\n    for (let i = 0; i < lines.length; i++) {\n        let line = lines[i].trim();\n        if (line.indexOf('def ') === 0) {\n            processingImports = false;\n            headings.push({\n                text: line.slice(0, -1),\n                level: 2,\n                onClick: onClick(i)\n            });\n        }\n        else if (line.indexOf('class ') === 0) {\n            processingImports = false;\n            headings.push({\n                text: line.slice(0, -1),\n                level: 1,\n                onClick: onClick(i)\n            });\n        }\n        else if (line.indexOf('import ') == 0 && !processingImports) {\n            processingImports = true;\n            headings.push({\n                text: line,\n                level: 2,\n                onClick: onClick(i)\n            });\n        }\n    }\n    return headings;\n    /**\n     * Returns a \"click\" handler.\n     *\n     * @private\n     * @param line - line number\n     * @returns click handler\n     */\n    function onClick(line) {\n        return () => {\n            editor.content.editor.setCursorPosition({\n                line: line,\n                column: 0\n            });\n        };\n    }\n}\n/**\n * Returns a boolean indicating whether this ToC generator is enabled.\n *\n * @private\n * @param editor - editor widget\n * @returns boolean indicating whether this ToC generator is enabled\n */\nfunction isEnabled(editor) {\n    let mime = editor.content.model.mimeType;\n    return mime === 'application/x-python-code' || mime === 'text/x-python';\n}\n/**\n * Returns a ToC generator for Python files.\n *\n * @private\n * @param tracker - file editor tracker\n * @returns ToC generator capable of parsing Python files\n */\nfunction createPythonGenerator(tracker) {\n    return {\n        tracker,\n        isEnabled: isEnabled,\n        itemRenderer: render,\n        generate: generate\n    };\n}\n/**\n * Exports.\n */\nexport { createPythonGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * React component for a table of contents entry.\n *\n * @private\n */\nclass TOCItem extends React.Component {\n    /**\n     * Renders a table of contents entry.\n     *\n     * @returns rendered entry\n     */\n    render() {\n        const { heading, toc } = this.props;\n        // Create an onClick handler for the TOC item\n        // that scrolls the anchor into view.\n        const onClick = (event) => {\n            var _a;\n            event.preventDefault();\n            event.stopPropagation();\n            (_a = this.props.entryClicked) === null || _a === void 0 ? void 0 : _a.emit(this);\n            heading.onClick();\n        };\n        let content = this.props.itemRenderer(heading, toc);\n        if (!content) {\n            return null;\n        }\n        return (React.createElement(\"li\", { className: \"jp-tocItem\", onClick: onClick, onContextMenu: (event) => {\n                var _a;\n                (_a = this.props.entryClicked) === null || _a === void 0 ? void 0 : _a.emit(this);\n                heading.onClick();\n            } }, content));\n    }\n}\n/**\n * Exports.\n */\nexport { TOCItem };\n//# sourceMappingURL=toc_item.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { TOCItem } from './toc_item';\n/**\n * React component for a table of contents tree.\n *\n * @private\n */\nclass TOCTree extends React.Component {\n    /**\n     * Renders a table of contents tree.\n     */\n    render() {\n        const Toolbar = this.props.toolbar;\n        // Map the heading objects onto a list of JSX elements...\n        let i = 0;\n        let list = this.props.toc.map(el => {\n            return (React.createElement(TOCItem, { heading: el, toc: this.props.toc, entryClicked: this.props.entryClicked, itemRenderer: this.props.itemRenderer, key: `${el.text}-${el.level}-${i++}` }));\n        });\n        return (React.createElement(\"div\", { className: \"jp-TableOfContents\" },\n            React.createElement(\"div\", { className: \"jp-stack-panel-header\" }, this.props.title),\n            Toolbar && React.createElement(Toolbar, null),\n            React.createElement(\"ul\", { className: \"jp-TableOfContents-content\" }, list)));\n    }\n}\n/**\n * Exports.\n */\nexport { TOCTree };\n//# sourceMappingURL=toc_tree.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ActivityMonitor, PathExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { TOCTree } from './toc_tree';\nimport { Signal } from '@lumino/signaling';\n/**\n * Timeout for throttling ToC rendering.\n *\n * @private\n */\nconst RENDER_TIMEOUT = 1000;\n/**\n * Widget for hosting a notebook table of contents.\n */\nexport class TableOfContents extends Widget {\n    /**\n     * Returns a new table of contents.\n     *\n     * @param options - options\n     * @returns widget\n     */\n    constructor(options) {\n        super();\n        this.translator = options.translator || nullTranslator;\n        this._docmanager = options.docmanager;\n        this._rendermime = options.rendermime;\n        this._trans = this.translator.load('jupyterlab');\n        this._headings = [];\n        this._entryClicked = new Signal(this);\n        this._entryClicked.connect((toc, item) => {\n            this.activeEntry = item.props.heading;\n        });\n        if (this._current) {\n            this._headings = this._current.generator.generate(this._current.widget, this._current.generator.options);\n        }\n    }\n    /**\n     * Current widget-generator tuple for the ToC.\n     */\n    get current() {\n        return this._current;\n    }\n    set current(value) {\n        // If they are the same as previously, do nothing...\n        if (value &&\n            this._current &&\n            this._current.widget === value.widget &&\n            this._current.generator === value.generator) {\n            return;\n        }\n        this._current = value;\n        if (this.generator) {\n            if (this.generator.toolbarGenerator) {\n                this._toolbar = this.generator.toolbarGenerator();\n            }\n            else {\n                this._toolbar = null;\n            }\n        }\n        // Dispose an old activity monitor if one existed...\n        if (this._monitor) {\n            this._monitor.dispose();\n            this._monitor = null;\n        }\n        // If we are wiping the ToC, update and return...\n        if (!this._current) {\n            this.update();\n            return;\n        }\n        // Find the document model associated with the widget:\n        const context = this._docmanager.contextForWidget(this._current.widget);\n        if (!context || !context.model) {\n            throw Error('Could not find a context for the Table of Contents');\n        }\n        // Throttle the rendering rate of the table of contents:\n        this._monitor = new ActivityMonitor({\n            signal: context.model.contentChanged,\n            timeout: RENDER_TIMEOUT\n        });\n        this._monitor.activityStopped.connect(this.update, this);\n        this.update();\n    }\n    /**\n     * Current table of contents generator.\n     *\n     * @returns table of contents generator\n     */\n    get generator() {\n        if (this._current) {\n            return this._current.generator;\n        }\n        return null;\n    }\n    /**\n     * Callback invoked upon an update request.\n     *\n     * @param msg - message\n     */\n    onUpdateRequest(msg) {\n        let title = this._trans.__('Table of Contents');\n        if (this._current) {\n            this._headings = this._current.generator.generate(this._current.widget, this._current.generator.options);\n            const context = this._docmanager.contextForWidget(this._current.widget);\n            if (context) {\n                title = PathExt.basename(context.localPath);\n            }\n        }\n        let itemRenderer = (item) => {\n            return React.createElement(\"span\", null, item.text);\n        };\n        if (this._current && this._current.generator.itemRenderer) {\n            itemRenderer = this._current.generator.itemRenderer;\n        }\n        let jsx = (React.createElement(\"div\", { className: \"jp-TableOfContents\" },\n            React.createElement(\"div\", { className: \"jp-stack-panel-header\" }, title)));\n        if (this._current && this._current.generator) {\n            jsx = (React.createElement(TOCTree, { title: title, toc: this._headings, entryClicked: this._entryClicked, generator: this.generator, itemRenderer: itemRenderer, toolbar: this._toolbar }));\n        }\n        ReactDOM.render(jsx, this.node, () => {\n            if (this._current &&\n                this._current.generator.usesLatex === true &&\n                this._rendermime.latexTypesetter) {\n                this._rendermime.latexTypesetter.typeset(this.node);\n            }\n        });\n    }\n    /**\n     * Current active entry.\n     *\n     * @returns table of contents active entry\n     */\n    get activeEntry() {\n        return this._activeEntry;\n    }\n    set activeEntry(value) {\n        this._activeEntry = value;\n    }\n    /**\n     * List of headings.\n     *\n     * @returns table of contents list of headings\n     */\n    get headings() {\n        return this._headings;\n    }\n    /**\n     * Callback invoked to re-render after showing a table of contents.\n     *\n     * @param msg - message\n     */\n    onAfterShow(msg) {\n        this.update();\n    }\n}\n//# sourceMappingURL=toc.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CodeCell } from '@jupyterlab/cells';\n/**\n * Tests whether a heading is a notebook heading.\n *\n * @param heading - heading to test\n * @returns boolean indicating whether a heading is a notebook heading\n */\nconst isNotebookHeading = (heading) => {\n    return heading.type !== undefined && heading.cellRef !== undefined;\n};\n/**\n * Runs runnable code cells.\n *\n * @private\n * @param headings - list of headings\n * @param heading - heading\n */\nconst runNestedCodeCells = (headings, heading) => {\n    var _a;\n    let h;\n    let i;\n    if (!isNotebookHeading(heading)) {\n        return;\n    }\n    let runCode = [];\n    // Find the heading in the list of headings...\n    i = headings.indexOf(heading);\n    // Check if the current heading is a \"code\" heading...\n    h = heading;\n    if (h.type === 'code') {\n        runCode.push(h);\n    }\n    else {\n        // Check for nested code headings...\n        const level = heading.level;\n        for (i = i + 1; i < headings.length; i++) {\n            h = headings[i];\n            if (h.level <= level) {\n                break;\n            }\n            if (h.type === 'code') {\n                runCode.push(h);\n            }\n        }\n    }\n    // Run each of the associated code cells...\n    for (i = 0; i < runCode.length; i++) {\n        if (runCode[i].cellRef) {\n            const cell = runCode[i].cellRef;\n            const panel = (_a = cell.parent) === null || _a === void 0 ? void 0 : _a.parent;\n            if (panel) {\n                void CodeCell.execute(cell, panel.sessionContext);\n            }\n        }\n    }\n};\nexport { runNestedCodeCells };\n//# sourceMappingURL=headings.js.map"],"sourceRoot":""}