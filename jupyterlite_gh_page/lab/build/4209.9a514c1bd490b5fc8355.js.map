{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/inspector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/splitpanel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/raweditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/plugineditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/pluginlist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/settingeditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/tokens.js"],"names":["Private","InspectorConnector","DataConnector","constructor","editor","translator","super","this","_current","nullTranslator","_editor","_trans","load","fetch","request","Promise","resolve","current","window","setTimeout","undefined","errors","_validate","text","data","__","metadata","render","raw","settings","id","schema","version","registry","validator","validateData","composite","user","renderError","error","_a","keyword","params","additionalProperty","message","dataPath","map","join","SplitPanel","arguments","handleMoved","Signal","handleEvent","event","type","emit","ERROR_CLASS","RawEditor","options","orientation","renderer","defaultRenderer","spacing","_canRevert","_canSave","_commandsChanged","_settings","_toolbar","Toolbar","commands","editorFactory","_commands","defaults","_defaults","CodeEditorWrapper","model","CodeEditor","factory","value","mimeType","setOption","_user","config","lineNumbers","addClass","changed","connect","_onTextChanged","_inspector","rendermime","trans","connector","inspector","InspectorPanel","initialContent","handler","InspectionHandler","RenderMimeRegistry","initialFactories","standardRendererFactories","source","createInspector","_onSaveError","onSaveError","addWidget","defaultsEditor","userEditor","_b","plugin","disconnect","_onSettingsChanged","update","relativeSizes","sizes","setRelativeSizes","dispose","isDisposed","revert","_updateToolbar","save","isDirty","then","catch","reason","onAfterAttach","msg","populateToolbar","onUpdateRequest","refresh","removeClass","validate","annotatedDefaults","widget","Widget","layout","BoxLayout","banner","bar","defaultTitle","node","innerText","insertItem","toolbar","addItem","forEach","name","item","CommandToolbarButton","userTitle","PluginEditor","_stateChanged","StackedLayout","_rawEditor","_onStateChanged","state","JSONExt","confirm","isHidden","isAttached","showDialog","title","body","buttons","Dialog","label","result","button","accept","Error","show","hide","stateChanged","console","PluginList","_changed","_scrollTop","_selection","_confirm","pluginChanged","querySelector","scrollTop","selection","_evtMousedown","addEventListener","onBeforeDetach","removeEventListener","translation","populateList","ul","preventDefault","target","getAttribute","parentElement","getHint","key","hint","properties","default","items","Object","keys","plugins","sort","a","b","localeCompare","sortPlugins","filter","deprecated","editable","length","extensible","additionalProperties","_p","itemTitle","description","icon","iconClass","iconTitle","className","LabIcon","settingsIcon","classes","tag","stylesheet","DEFAULT_LAYOUT","container","SettingEditor","_fetching","_saving","_state","PanelLayout","panel","_panel","instructions","_instructions","list","_list","when","populateInstructionsNode","_when","Array","isArray","all","setStretch","canRevert","canSave","commandsChanged","_fetchState","_setState","onCloseRequest","promises","normalizeState","_saveState","_setLayout","requestAnimationFrame","parent","numberArray","every","x","jupyterIcon","elementPosition","height","width","saved","ISettingEditorTracker","Token"],"mappings":"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","file":"4209.9a514c1bd490b5fc8355.js","sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { InspectionHandler, InspectorPanel } from '@jupyterlab/inspector';\nimport { RenderMimeRegistry, standardRendererFactories } from '@jupyterlab/rendermime';\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * Create a raw editor inspector.\n */\nexport function createInspector(editor, rendermime, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const connector = new InspectorConnector(editor, translator);\n    const inspector = new InspectorPanel({\n        initialContent: trans.__('Any errors will be listed here'),\n        translator: translator\n    });\n    const handler = new InspectionHandler({\n        connector,\n        rendermime: rendermime ||\n            new RenderMimeRegistry({\n                initialFactories: standardRendererFactories,\n                translator: translator\n            })\n    });\n    inspector.addClass('jp-SettingsDebug');\n    inspector.source = handler;\n    handler.editor = editor.source;\n    return inspector;\n}\n/**\n * The data connector used to populate a code inspector.\n *\n * #### Notes\n * This data connector debounces fetch requests to throttle them at no more than\n * one request per 100ms. This means that using the connector to populate\n * multiple client objects can lead to missed fetch responses.\n */\nclass InspectorConnector extends DataConnector {\n    constructor(editor, translator) {\n        super();\n        this._current = 0;\n        this.translator = translator || nullTranslator;\n        this._editor = editor;\n        this._trans = this.translator.load('jupyterlab');\n    }\n    /**\n     * Fetch inspection requests.\n     */\n    fetch(request) {\n        return new Promise(resolve => {\n            // Debounce requests at a rate of 100ms.\n            const current = (this._current = window.setTimeout(() => {\n                if (current !== this._current) {\n                    return resolve(undefined);\n                }\n                const errors = this._validate(request.text);\n                if (!errors) {\n                    return resolve({\n                        data: { 'text/markdown': this._trans.__('No errors found') },\n                        metadata: {}\n                    });\n                }\n                resolve({ data: Private.render(errors), metadata: {} });\n            }, 100));\n        });\n    }\n    _validate(raw) {\n        const editor = this._editor;\n        if (!editor.settings) {\n            return null;\n        }\n        const { id, schema, version } = editor.settings;\n        const data = { composite: {}, user: {} };\n        const validator = editor.registry.validator;\n        return validator.validateData({ data, id, raw, schema, version }, false);\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Render validation errors as an HTML string.\n     */\n    function render(errors) {\n        return { 'text/markdown': errors.map(renderError).join('') };\n    }\n    Private.render = render;\n    /**\n     * Render an individual validation error as a markdown string.\n     */\n    function renderError(error) {\n        var _a;\n        switch (error.keyword) {\n            case 'additionalProperties':\n                return `**\\`[additional property error]\\`**\n          \\`${(_a = error.params) === null || _a === void 0 ? void 0 : _a.additionalProperty}\\` is not a valid property`;\n            case 'syntax':\n                return `**\\`[syntax error]\\`** *${error.message}*`;\n            case 'type':\n                return `**\\`[type error]\\`**\n          \\`${error.dataPath}\\` ${error.message}`;\n            default:\n                return `**\\`[error]\\`** *${error.message}*`;\n        }\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=inspector.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Signal } from '@lumino/signaling';\nimport { SplitPanel as SPanel } from '@lumino/widgets';\n/**\n * A deprecated split panel that will be removed when the phosphor split panel\n * supports a handle moved signal. See https://github.com/phosphorjs/phosphor/issues/297.\n */\nexport class SplitPanel extends SPanel {\n    constructor() {\n        super(...arguments);\n        /**\n         * Emits when the split handle has moved.\n         */\n        this.handleMoved = new Signal(this);\n    }\n    handleEvent(event) {\n        super.handleEvent(event);\n        if (event.type === 'mouseup') {\n            this.handleMoved.emit(undefined);\n        }\n    }\n}\n//# sourceMappingURL=splitpanel.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandToolbarButton, Toolbar } from '@jupyterlab/apputils';\nimport { CodeEditor, CodeEditorWrapper } from '@jupyterlab/codeeditor';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Signal } from '@lumino/signaling';\nimport { BoxLayout, Widget } from '@lumino/widgets';\nimport { createInspector } from './inspector';\nimport { SplitPanel } from './splitpanel';\n/**\n * A class name added to all raw editors.\n */\nconst RAW_EDITOR_CLASS = 'jp-SettingsRawEditor';\n/**\n * A class name added to the user settings editor.\n */\nconst USER_CLASS = 'jp-SettingsRawEditor-user';\n/**\n * A class name added to the user editor when there are validation errors.\n */\nconst ERROR_CLASS = 'jp-mod-error';\n/**\n * A raw JSON settings editor.\n */\nexport class RawEditor extends SplitPanel {\n    /**\n     * Create a new plugin editor.\n     */\n    constructor(options) {\n        super({\n            orientation: 'horizontal',\n            renderer: SplitPanel.defaultRenderer,\n            spacing: 1\n        });\n        this._canRevert = false;\n        this._canSave = false;\n        this._commandsChanged = new Signal(this);\n        this._settings = null;\n        this._toolbar = new Toolbar();\n        const { commands, editorFactory, registry, translator } = options;\n        this.registry = registry;\n        this.translator = translator || nullTranslator;\n        this._commands = commands;\n        // Create read-only defaults editor.\n        const defaults = (this._defaults = new CodeEditorWrapper({\n            model: new CodeEditor.Model(),\n            factory: editorFactory\n        }));\n        defaults.editor.model.value.text = '';\n        defaults.editor.model.mimeType = 'text/javascript';\n        defaults.editor.setOption('readOnly', true);\n        // Create read-write user settings editor.\n        const user = (this._user = new CodeEditorWrapper({\n            model: new CodeEditor.Model(),\n            factory: editorFactory,\n            config: { lineNumbers: true }\n        }));\n        user.addClass(USER_CLASS);\n        user.editor.model.mimeType = 'text/javascript';\n        user.editor.model.value.changed.connect(this._onTextChanged, this);\n        // Create and set up an inspector.\n        this._inspector = createInspector(this, options.rendermime, this.translator);\n        this.addClass(RAW_EDITOR_CLASS);\n        // FIXME-TRANS: onSaveError must have an optional translator?\n        this._onSaveError = options.onSaveError;\n        this.addWidget(Private.defaultsEditor(defaults, this.translator));\n        this.addWidget(Private.userEditor(user, this._toolbar, this._inspector, this.translator));\n    }\n    /**\n     * Whether the raw editor revert functionality is enabled.\n     */\n    get canRevert() {\n        return this._canRevert;\n    }\n    /**\n     * Whether the raw editor save functionality is enabled.\n     */\n    get canSave() {\n        return this._canSave;\n    }\n    /**\n     * Emits when the commands passed in at instantiation change.\n     */\n    get commandsChanged() {\n        return this._commandsChanged;\n    }\n    /**\n     * Tests whether the settings have been modified and need saving.\n     */\n    get isDirty() {\n        var _a, _b;\n        return (_b = this._user.editor.model.value.text !== ((_a = this._settings) === null || _a === void 0 ? void 0 : _a.raw)) !== null && _b !== void 0 ? _b : '';\n    }\n    /**\n     * The plugin settings being edited.\n     */\n    get settings() {\n        return this._settings;\n    }\n    set settings(settings) {\n        if (!settings && !this._settings) {\n            return;\n        }\n        const samePlugin = settings && this._settings && settings.plugin === this._settings.plugin;\n        if (samePlugin) {\n            return;\n        }\n        const defaults = this._defaults;\n        const user = this._user;\n        // Disconnect old settings change handler.\n        if (this._settings) {\n            this._settings.changed.disconnect(this._onSettingsChanged, this);\n        }\n        if (settings) {\n            this._settings = settings;\n            this._settings.changed.connect(this._onSettingsChanged, this);\n            this._onSettingsChanged();\n        }\n        else {\n            this._settings = null;\n            defaults.editor.model.value.text = '';\n            user.editor.model.value.text = '';\n        }\n        this.update();\n    }\n    /**\n     * Get the relative sizes of the two editor panels.\n     */\n    get sizes() {\n        return this.relativeSizes();\n    }\n    set sizes(sizes) {\n        this.setRelativeSizes(sizes);\n    }\n    /**\n     * The inspectable source editor for user input.\n     */\n    get source() {\n        return this._user.editor;\n    }\n    /**\n     * Dispose of the resources held by the raw editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this._defaults.dispose();\n        this._user.dispose();\n    }\n    /**\n     * Revert the editor back to original settings.\n     */\n    revert() {\n        var _a, _b;\n        this._user.editor.model.value.text = (_b = (_a = this.settings) === null || _a === void 0 ? void 0 : _a.raw) !== null && _b !== void 0 ? _b : '';\n        this._updateToolbar(false, false);\n    }\n    /**\n     * Save the contents of the raw editor.\n     */\n    save() {\n        if (!this.isDirty || !this._settings) {\n            return Promise.resolve(undefined);\n        }\n        const settings = this._settings;\n        const source = this._user.editor.model.value.text;\n        return settings\n            .save(source)\n            .then(() => {\n            this._updateToolbar(false, false);\n        })\n            .catch(reason => {\n            this._updateToolbar(true, false);\n            this._onSaveError(reason, this.translator);\n        });\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        Private.populateToolbar(this._commands, this._toolbar);\n        this.update();\n    }\n    /**\n     * Handle `'update-request'` messages.\n     */\n    onUpdateRequest(msg) {\n        const settings = this._settings;\n        const defaults = this._defaults;\n        const user = this._user;\n        if (settings) {\n            defaults.editor.refresh();\n            user.editor.refresh();\n        }\n    }\n    /**\n     * Handle text changes in the underlying editor.\n     */\n    _onTextChanged() {\n        const raw = this._user.editor.model.value.text;\n        const settings = this._settings;\n        this.removeClass(ERROR_CLASS);\n        // If there are no settings loaded or there are no changes, bail.\n        if (!settings || settings.raw === raw) {\n            this._updateToolbar(false, false);\n            return;\n        }\n        const errors = settings.validate(raw);\n        if (errors) {\n            this.addClass(ERROR_CLASS);\n            this._updateToolbar(true, false);\n            return;\n        }\n        this._updateToolbar(true, true);\n    }\n    /**\n     * Handle updates to the settings.\n     */\n    _onSettingsChanged() {\n        var _a, _b;\n        const settings = this._settings;\n        const defaults = this._defaults;\n        const user = this._user;\n        defaults.editor.model.value.text = (_a = settings === null || settings === void 0 ? void 0 : settings.annotatedDefaults()) !== null && _a !== void 0 ? _a : '';\n        user.editor.model.value.text = (_b = settings === null || settings === void 0 ? void 0 : settings.raw) !== null && _b !== void 0 ? _b : '';\n    }\n    _updateToolbar(revert = this._canRevert, save = this._canSave) {\n        const commands = this._commands;\n        this._canRevert = revert;\n        this._canSave = save;\n        this._commandsChanged.emit([commands.revert, commands.save]);\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Returns the wrapped setting defaults editor.\n     */\n    function defaultsEditor(editor, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const widget = new Widget();\n        const layout = (widget.layout = new BoxLayout({ spacing: 0 }));\n        const banner = new Widget();\n        const bar = new Toolbar();\n        const defaultTitle = trans.__('System Defaults');\n        banner.node.innerText = defaultTitle;\n        bar.insertItem(0, 'banner', banner);\n        layout.addWidget(bar);\n        layout.addWidget(editor);\n        return widget;\n    }\n    Private.defaultsEditor = defaultsEditor;\n    /**\n     * Populate the raw editor toolbar.\n     */\n    function populateToolbar(commands, toolbar) {\n        const { registry, revert, save } = commands;\n        toolbar.addItem('spacer', Toolbar.createSpacerItem());\n        // Note the button order. The rationale here is that no matter what state\n        // the toolbar is in, the relative location of the revert button in the\n        // toolbar remains the same.\n        [revert, save].forEach(name => {\n            const item = new CommandToolbarButton({ commands: registry, id: name });\n            toolbar.addItem(name, item);\n        });\n    }\n    Private.populateToolbar = populateToolbar;\n    /**\n     * Returns the wrapped user overrides editor.\n     */\n    function userEditor(editor, toolbar, inspector, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const userTitle = trans.__('User Preferences');\n        const widget = new Widget();\n        const layout = (widget.layout = new BoxLayout({ spacing: 0 }));\n        const banner = new Widget();\n        banner.node.innerText = userTitle;\n        toolbar.insertItem(0, 'banner', banner);\n        layout.addWidget(toolbar);\n        layout.addWidget(editor);\n        layout.addWidget(inspector);\n        return widget;\n    }\n    Private.userEditor = userEditor;\n})(Private || (Private = {}));\n//# sourceMappingURL=raweditor.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { StackedLayout, Widget } from '@lumino/widgets';\nimport { RawEditor } from './raweditor';\n/**\n * The class name added to all plugin editors.\n */\nconst PLUGIN_EDITOR_CLASS = 'jp-PluginEditor';\n/**\n * An individual plugin settings editor.\n */\nexport class PluginEditor extends Widget {\n    /**\n     * Create a new plugin editor.\n     *\n     * @param options - The plugin editor instantiation options.\n     */\n    constructor(options) {\n        super();\n        this._settings = null;\n        this._stateChanged = new Signal(this);\n        this.addClass(PLUGIN_EDITOR_CLASS);\n        const { commands, editorFactory, registry, rendermime, translator } = options;\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        // TODO: Remove this layout. We were using this before when we\n        // when we had a way to switch between the raw and table editor\n        // Now, the raw editor is the only child and probably could merged into\n        // this class directly in the future.\n        const layout = (this.layout = new StackedLayout());\n        const { onSaveError } = Private;\n        this.raw = this._rawEditor = new RawEditor({\n            commands,\n            editorFactory,\n            onSaveError,\n            registry,\n            rendermime,\n            translator\n        });\n        this._rawEditor.handleMoved.connect(this._onStateChanged, this);\n        layout.addWidget(this._rawEditor);\n    }\n    /**\n     * Tests whether the settings have been modified and need saving.\n     */\n    get isDirty() {\n        return this._rawEditor.isDirty;\n    }\n    /**\n     * The plugin settings being edited.\n     */\n    get settings() {\n        return this._settings;\n    }\n    set settings(settings) {\n        if (this._settings === settings) {\n            return;\n        }\n        const raw = this._rawEditor;\n        this._settings = raw.settings = settings;\n        this.update();\n    }\n    /**\n     * The plugin editor layout state.\n     */\n    get state() {\n        const plugin = this._settings ? this._settings.id : '';\n        const { sizes } = this._rawEditor;\n        return { plugin, sizes };\n    }\n    set state(state) {\n        if (JSONExt.deepEqual(this.state, state)) {\n            return;\n        }\n        this._rawEditor.sizes = state.sizes;\n        this.update();\n    }\n    /**\n     * A signal that emits when editor layout state changes and needs to be saved.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * If the editor is in a dirty state, confirm that the user wants to leave.\n     */\n    confirm() {\n        if (this.isHidden || !this.isAttached || !this.isDirty) {\n            return Promise.resolve(undefined);\n        }\n        return showDialog({\n            title: this._trans.__('You have unsaved changes.'),\n            body: this._trans.__('Do you want to leave without saving?'),\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.okButton({ label: this._trans.__('Ok') })\n            ]\n        }).then(result => {\n            if (!result.button.accept) {\n                throw new Error('User canceled.');\n            }\n        });\n    }\n    /**\n     * Dispose of the resources held by the plugin editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this._rawEditor.dispose();\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        this.update();\n    }\n    /**\n     * Handle `'update-request'` messages.\n     */\n    onUpdateRequest(msg) {\n        const raw = this._rawEditor;\n        const settings = this._settings;\n        if (!settings) {\n            this.hide();\n            return;\n        }\n        this.show();\n        raw.show();\n    }\n    /**\n     * Handle layout state changes that need to be saved.\n     */\n    _onStateChanged() {\n        this.stateChanged.emit(undefined);\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Handle save errors.\n     */\n    function onSaveError(reason, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        console.error(`Saving setting editor value failed: ${reason.message}`);\n        void showDialog({\n            title: trans.__('Your changes were not saved.'),\n            body: reason.message,\n            buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n        });\n    }\n    Private.onSaveError = onSaveError;\n})(Private || (Private = {}));\n//# sourceMappingURL=plugineditor.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { classes, LabIcon, settingsIcon } from '@jupyterlab/ui-components';\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n/**\n * A list of plugins with editable settings.\n */\nexport class PluginList extends Widget {\n    /**\n     * Create a new plugin list.\n     */\n    constructor(options) {\n        super();\n        this._changed = new Signal(this);\n        this._scrollTop = 0;\n        this._selection = '';\n        this.registry = options.registry;\n        this.translator = options.translator || nullTranslator;\n        this.addClass('jp-PluginList');\n        this._confirm = options.confirm;\n        this.registry.pluginChanged.connect(() => {\n            this.update();\n        }, this);\n    }\n    /**\n     * A signal emitted when a list user interaction happens.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The selection value of the plugin list.\n     */\n    get scrollTop() {\n        var _a;\n        return (_a = this.node.querySelector('ul')) === null || _a === void 0 ? void 0 : _a.scrollTop;\n    }\n    /**\n     * The selection value of the plugin list.\n     */\n    get selection() {\n        return this._selection;\n    }\n    set selection(selection) {\n        if (this._selection === selection) {\n            return;\n        }\n        this._selection = selection;\n        this.update();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the plugin list's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMousedown(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `'after-attach'` messages.\n     */\n    onAfterAttach(msg) {\n        this.node.addEventListener('mousedown', this);\n        this.update();\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        this.node.removeEventListener('mousedown', this);\n    }\n    /**\n     * Handle `'update-request'` messages.\n     */\n    onUpdateRequest(msg) {\n        const { node, registry } = this;\n        const selection = this._selection;\n        const translation = this.translator;\n        Private.populateList(registry, selection, node, translation);\n        const ul = node.querySelector('ul');\n        if (ul && this._scrollTop !== undefined) {\n            ul.scrollTop = this._scrollTop;\n        }\n    }\n    /**\n     * Handle the `'mousedown'` event for the plugin list.\n     *\n     * @param event - The DOM event sent to the widget\n     */\n    _evtMousedown(event) {\n        event.preventDefault();\n        let target = event.target;\n        let id = target.getAttribute('data-id');\n        if (id === this._selection) {\n            return;\n        }\n        if (!id) {\n            while (!id && target !== this.node) {\n                target = target.parentElement;\n                id = target.getAttribute('data-id');\n            }\n        }\n        if (!id) {\n            return;\n        }\n        this._confirm()\n            .then(() => {\n            this._scrollTop = this.scrollTop;\n            this._selection = id;\n            this._changed.emit(undefined);\n            this.update();\n        })\n            .catch(() => {\n            /* no op */\n        });\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The JupyterLab plugin schema key for the setting editor\n     * icon class of a plugin.\n     */\n    const ICON_KEY = 'jupyter.lab.setting-icon';\n    /**\n     * The JupyterLab plugin schema key for the setting editor\n     * icon class of a plugin.\n     */\n    const ICON_CLASS_KEY = 'jupyter.lab.setting-icon-class';\n    /**\n     * The JupyterLab plugin schema key for the setting editor\n     * icon label of a plugin.\n     */\n    const ICON_LABEL_KEY = 'jupyter.lab.setting-icon-label';\n    /**\n     * Check the plugin for a rendering hint's value.\n     *\n     * #### Notes\n     * The order of priority for overridden hints is as follows, from most\n     * important to least:\n     * 1. Data set by the end user in a settings file.\n     * 2. Data set by the plugin author as a schema default.\n     * 3. Data set by the plugin author as a top-level key of the schema.\n     */\n    function getHint(key, registry, plugin) {\n        // First, give priority to checking if the hint exists in the user data.\n        let hint = plugin.data.user[key];\n        // Second, check to see if the hint exists in composite data, which folds\n        // in default values from the schema.\n        if (!hint) {\n            hint = plugin.data.composite[key];\n        }\n        // Third, check to see if the plugin schema has defined the hint.\n        if (!hint) {\n            hint = plugin.schema[key];\n        }\n        // Finally, use the defaults from the registry schema.\n        if (!hint) {\n            const { properties } = registry.schema;\n            hint = properties && properties[key] && properties[key].default;\n        }\n        return typeof hint === 'string' ? hint : '';\n    }\n    /**\n     * Populate the plugin list.\n     */\n    function populateList(registry, selection, node, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const plugins = sortPlugins(registry).filter(plugin => {\n            const { schema } = plugin;\n            const deprecated = schema['jupyter.lab.setting-deprecated'] === true;\n            const editable = Object.keys(schema.properties || {}).length > 0;\n            const extensible = schema.additionalProperties !== false;\n            return !deprecated && (editable || extensible);\n        });\n        const items = plugins.map(plugin => {\n            const { id, schema, version } = plugin;\n            const title = typeof schema.title === 'string'\n                ? trans._p('schema', schema.title)\n                : id;\n            const description = typeof schema.description === 'string'\n                ? trans._p('schema', schema.description)\n                : '';\n            const itemTitle = `${description}\\n${id}\\n${version}`;\n            const icon = getHint(ICON_KEY, registry, plugin);\n            const iconClass = getHint(ICON_CLASS_KEY, registry, plugin);\n            const iconTitle = getHint(ICON_LABEL_KEY, registry, plugin);\n            return (React.createElement(\"li\", { className: id === selection ? 'jp-mod-selected' : '', \"data-id\": id, key: id, title: itemTitle },\n                React.createElement(LabIcon.resolveReact, { icon: icon || (iconClass ? undefined : settingsIcon), iconClass: classes(iconClass, 'jp-Icon'), title: iconTitle, tag: \"span\", stylesheet: \"settingsEditor\" }),\n                React.createElement(\"span\", null, title)));\n        });\n        ReactDOM.unmountComponentAtNode(node);\n        ReactDOM.render(React.createElement(\"ul\", null, items), node);\n    }\n    Private.populateList = populateList;\n    /**\n     * Sort a list of plugins by title and ID.\n     */\n    function sortPlugins(registry) {\n        return Object.keys(registry.plugins)\n            .map(plugin => registry.plugins[plugin])\n            .sort((a, b) => {\n            return (a.schema.title || a.id).localeCompare(b.schema.title || b.id);\n        });\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=pluginlist.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { jupyterIcon } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { PluginEditor } from './plugineditor';\nimport { PluginList } from './pluginlist';\nimport { SplitPanel } from './splitpanel';\n/**\n * The ratio panes in the setting editor.\n */\nconst DEFAULT_LAYOUT = {\n    sizes: [1, 3],\n    container: {\n        editor: 'raw',\n        plugin: '',\n        sizes: [1, 1]\n    }\n};\n/**\n * An interface for modifying and saving application settings.\n */\nexport class SettingEditor extends Widget {\n    /**\n     * Create a new setting editor.\n     */\n    constructor(options) {\n        super();\n        this._fetching = null;\n        this._saving = false;\n        this._state = JSONExt.deepCopy(DEFAULT_LAYOUT);\n        this.translator = options.translator || nullTranslator;\n        this.addClass('jp-SettingEditor');\n        this.key = options.key;\n        this.state = options.state;\n        const { commands, editorFactory, rendermime } = options;\n        const layout = (this.layout = new PanelLayout());\n        const registry = (this.registry = options.registry);\n        const panel = (this._panel = new SplitPanel({\n            orientation: 'horizontal',\n            renderer: SplitPanel.defaultRenderer,\n            spacing: 1\n        }));\n        const instructions = (this._instructions = new Widget());\n        const editor = (this._editor = new PluginEditor({\n            commands,\n            editorFactory,\n            registry,\n            rendermime,\n            translator: this.translator\n        }));\n        const confirm = () => editor.confirm();\n        const list = (this._list = new PluginList({\n            confirm,\n            registry,\n            translator: this.translator\n        }));\n        const when = options.when;\n        instructions.addClass('jp-SettingEditorInstructions');\n        Private.populateInstructionsNode(instructions.node, this.translator);\n        if (when) {\n            this._when = Array.isArray(when) ? Promise.all(when) : when;\n        }\n        panel.addClass('jp-SettingEditor-main');\n        layout.addWidget(panel);\n        panel.addWidget(list);\n        panel.addWidget(instructions);\n        SplitPanel.setStretch(list, 0);\n        SplitPanel.setStretch(instructions, 1);\n        SplitPanel.setStretch(editor, 1);\n        editor.stateChanged.connect(this._onStateChanged, this);\n        list.changed.connect(this._onStateChanged, this);\n        panel.handleMoved.connect(this._onStateChanged, this);\n    }\n    /**\n     * Whether the raw editor revert functionality is enabled.\n     */\n    get canRevertRaw() {\n        return this._editor.raw.canRevert;\n    }\n    /**\n     * Whether the raw editor save functionality is enabled.\n     */\n    get canSaveRaw() {\n        return this._editor.raw.canSave;\n    }\n    /**\n     * Emits when the commands passed in at instantiation change.\n     */\n    get commandsChanged() {\n        return this._editor.raw.commandsChanged;\n    }\n    /**\n     * The currently loaded settings.\n     */\n    get settings() {\n        return this._editor.settings;\n    }\n    /**\n     * The inspectable raw user editor source for the currently loaded settings.\n     */\n    get source() {\n        return this._editor.raw.source;\n    }\n    /**\n     * Dispose of the resources held by the setting editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this._editor.dispose();\n        this._instructions.dispose();\n        this._list.dispose();\n        this._panel.dispose();\n    }\n    /**\n     * Revert raw editor back to original settings.\n     */\n    revert() {\n        this._editor.raw.revert();\n    }\n    /**\n     * Save the contents of the raw editor.\n     */\n    save() {\n        return this._editor.raw.save();\n    }\n    /**\n     * Handle `'after-attach'` messages.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this._panel.hide();\n        this._fetchState()\n            .then(() => {\n            this._panel.show();\n            this._setState();\n        })\n            .catch(reason => {\n            console.error('Fetching setting editor state failed', reason);\n            this._panel.show();\n            this._setState();\n        });\n    }\n    /**\n     * Handle `'close-request'` messages.\n     */\n    onCloseRequest(msg) {\n        this._editor\n            .confirm()\n            .then(() => {\n            super.onCloseRequest(msg);\n            this.dispose();\n        })\n            .catch(() => {\n            /* no op */\n        });\n    }\n    /**\n     * Get the state of the panel.\n     */\n    _fetchState() {\n        if (this._fetching) {\n            return this._fetching;\n        }\n        const { key, state } = this;\n        const promises = [state.fetch(key), this._when];\n        return (this._fetching = Promise.all(promises).then(([value]) => {\n            this._fetching = null;\n            if (this._saving) {\n                return;\n            }\n            this._state = Private.normalizeState(value, this._state);\n        }));\n    }\n    /**\n     * Handle root level layout state changes.\n     */\n    async _onStateChanged() {\n        this._state.sizes = this._panel.relativeSizes();\n        this._state.container = this._editor.state;\n        this._state.container.plugin = this._list.selection;\n        try {\n            await this._saveState();\n        }\n        catch (error) {\n            console.error('Saving setting editor state failed', error);\n        }\n        this._setState();\n    }\n    /**\n     * Set the state of the setting editor.\n     */\n    async _saveState() {\n        const { key, state } = this;\n        const value = this._state;\n        this._saving = true;\n        try {\n            await state.save(key, value);\n            this._saving = false;\n        }\n        catch (error) {\n            this._saving = false;\n            throw error;\n        }\n    }\n    /**\n     * Set the layout sizes.\n     */\n    _setLayout() {\n        const editor = this._editor;\n        const panel = this._panel;\n        const state = this._state;\n        editor.state = state.container;\n        // Allow the message queue (which includes fit requests that might disrupt\n        // setting relative sizes) to clear before setting sizes.\n        requestAnimationFrame(() => {\n            panel.setRelativeSizes(state.sizes);\n        });\n    }\n    /**\n     * Set the presets of the setting editor.\n     */\n    _setState() {\n        const editor = this._editor;\n        const list = this._list;\n        const panel = this._panel;\n        const { container } = this._state;\n        if (!container.plugin) {\n            editor.settings = null;\n            list.selection = '';\n            this._setLayout();\n            return;\n        }\n        if (editor.settings && editor.settings.id === container.plugin) {\n            this._setLayout();\n            return;\n        }\n        const instructions = this._instructions;\n        this.registry\n            .load(container.plugin)\n            .then(settings => {\n            if (instructions.isAttached) {\n                instructions.parent = null;\n            }\n            if (!editor.isAttached) {\n                panel.addWidget(editor);\n            }\n            editor.settings = settings;\n            list.selection = container.plugin;\n            this._setLayout();\n        })\n            .catch(reason => {\n            console.error(`Loading ${container.plugin} settings failed.`, reason);\n            list.selection = this._state.container.plugin = '';\n            editor.settings = null;\n            this._setLayout();\n        });\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Populate the instructions text node.\n     */\n    function populateInstructionsNode(node, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        ReactDOM.render(React.createElement(React.Fragment, null,\n            React.createElement(\"h2\", null,\n                React.createElement(jupyterIcon.react, { className: \"jp-SettingEditorInstructions-icon\", tag: \"span\", elementPosition: \"center\", height: \"auto\", width: \"60px\" }),\n                React.createElement(\"span\", { className: \"jp-SettingEditorInstructions-title\" }, \"Settings\")),\n            React.createElement(\"span\", { className: \"jp-SettingEditorInstructions-text\" }, trans.__('Select a plugin from the list to view and edit its preferences.'))), node);\n    }\n    Private.populateInstructionsNode = populateInstructionsNode;\n    /**\n     * Return a normalized restored layout state that defaults to the presets.\n     */\n    function normalizeState(saved, current) {\n        if (!saved) {\n            return JSONExt.deepCopy(DEFAULT_LAYOUT);\n        }\n        if (!('sizes' in saved) || !numberArray(saved.sizes)) {\n            saved.sizes = JSONExt.deepCopy(DEFAULT_LAYOUT.sizes);\n        }\n        if (!('container' in saved)) {\n            saved.container = JSONExt.deepCopy(DEFAULT_LAYOUT.container);\n            return saved;\n        }\n        const container = 'container' in saved &&\n            saved.container &&\n            typeof saved.container === 'object'\n            ? saved.container\n            : {};\n        saved.container = {\n            plugin: typeof container.plugin === 'string'\n                ? container.plugin\n                : DEFAULT_LAYOUT.container.plugin,\n            sizes: numberArray(container.sizes)\n                ? container.sizes\n                : JSONExt.deepCopy(DEFAULT_LAYOUT.container.sizes)\n        };\n        return saved;\n    }\n    Private.normalizeState = normalizeState;\n    /**\n     * Tests whether an array consists exclusively of numbers.\n     */\n    function numberArray(value) {\n        return Array.isArray(value) && value.every(x => typeof x === 'number');\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=settingeditor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The setting editor tracker token.\n */\nexport const ISettingEditorTracker = new Token('@jupyterlab/settingeditor:ISettingEditorTracker');\n//# sourceMappingURL=tokens.js.map"],"sourceRoot":""}