{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/latex/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/markdown/get_headings.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/markdown/get_rendered_headings.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/markdown/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/markdown/options_manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/markdown/render.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/markdown/toolbar_generator.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/append_collapsible_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/append_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/append_markdown_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/codemirror.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/get_code_cell_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/get_last_heading_level.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/get_markdown_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/get_rendered_html_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/is_heading_filtered.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/options_manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/render.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/tag.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/tag_list.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/notebook/toolbar_generator.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/python/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/generators/python/render.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/registry.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/toc.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/toc_item.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/toc_tree.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/utils/generate_numbering.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/utils/headings.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/utils/is_dom.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/utils/is_markdown.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/utils/parse_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/toc/lib/utils/sanitizer_options.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACwB;AACG;AACA;AACF;AACzB,iC;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,6DAA6D,KAAK;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACgC;AAChC,iC;;;;;;;;;;;;;;;;;AC9GA;AACA;AACmE;AACV;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAY,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4EAAiB;AAC5C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACuB;AACvB,wC;;;;;;;;;;;;;;;;;AClDA;AACA;AACmE;AACF;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,sEAAgB;AACzE,qCAAqC;AACrC;AACA;AACA;AACA;AACA,mBAAmB,4EAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AAC+B;AAC/B,iD;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACyD;AACJ;AACF;AACjB;AACY;AACD;AACiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,8DAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0DAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAc;AACtC;AACA;AACA;AACA,kCAAkC,mEAAc;AAChD,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAc;AACtC;AACA;AACA;AACA,kCAAkC,mEAAc;AAChD,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2EAAmB;AAClC;AACA;AACA;AACA;AACA;AACmC;AACQ;AAC3C,iC;;;;;;;;;;;;;;;;;;AC/KA;AACA;AACyD;AACY;AACrE;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAwB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mEAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0B;AAC1B,2C;;;;;;;;;;;;;;;;;;AClEA;AACA;AAC+B;AACkC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,sEAAgB;AACzE,eAAe,gDAAmB,UAAU,2BAA2B,2BAA2B,mDAAmD;AACrJ;AACA;AACA,cAAc,gDAAmB,UAAU,2BAA2B;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkB;AAClB,kC;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AAC0D;AAC3B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+BAA+B;AAC9D;AACA,0BAA0B,gDAAmB,SAAS;AACtD;AACA,0CAA0C;AAC1C,gBAAgB,gDAAmB,CAAC,0EAAmB;AACvD,oBAAoB,gDAAmB;AACvC,gBAAgB,gDAAmB,SAAS,2BAA2B;AACvE;AACA;AACA;AACA;AACA;AACA;AACmB;AACnB,6C;;;;;;;;;;;;;;;;AChDA;AACA;AAC0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uEAAiB;AAC1B;AACA;AACA,iCAAiC,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACpC,sD;;;;;;;;;;;;;;;;AC9DA;AACA;AAC0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uEAAiB;AACrC;AACA;AACA,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACyB;AACzB,0C;;;;;;;;;;;;;;;;;ACpCA;AACA;AACwE;AACvB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8DAAa;AACxC;AACA;AACA,0CAA0C,qFAAwB;AAClE;AACA;AACA;AACA;AACA;AACA;AACiC;AACjC,mD;;;;;;;;;;;;;;;;;;AChCA;AACA;AAC+B;AACkC;AACjE;AACA;AACA;AACA;AACA;AACA,4BAA4B,4CAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,sEAAgB;AACnE,gBAAgB,gDAAmB,SAAS,gDAAgD,eAAe,EAAE;AAC7G;AACA;AACA;AACA;AACA;AACyB;AACzB,sC;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AAC8B;AAC9B,iD;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC+B;AAC/B,kD;;;;;;;;;;;;;;;;;ACzBA;AACA;AACmE;AACV;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAY;AACpC;AACA;AACA;AACA;AACA,2BAA2B,4EAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AAC+B;AAC/B,gD;;;;;;;;;;;;;;;;;ACtDA;AACA;AACmE;AACF;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,sEAAgB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,sEAAgB;AACpE;AACA;AACA;AACA;AACA;AACA,mBAAmB,4EAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACmC;AACnC,qD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AAC+D;AACN;AACd;AACU;AACJ;AACiB;AACL;AACE;AACF;AACS;AACnB;AACjB;AACY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAc;AACtC;AACA;AACA;AACA;AACA;AACA,kCAAkC,mEAAc;AAChD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kCAAkC;AACzD;AACA;AACA;AACA,kBAAkB,yEAA0B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0EAAkB,4CAA4C,4EAAmB;AACnH,uCAAuC,8DAAa;AACpD;AACA;AACA;AACA,mCAAmC,0BAA0B;AAC7D;AACA;AACA,oDAAoD,8DAAU,OAAO,oDAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oFAAuB,4DAA4D,4EAAmB;AACjJ;AACA,8DAA8D,gFAAqB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4EAAmB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,oFAAuB;AAChE;AACA,0DAA0D,gFAAqB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2EAAmB;AAChE;AACA,0DAA0D,gFAAqB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmC;AACnC,iC;;;;;;;;;;;;;;;AC5LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6B;AAC7B,+C;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACyD;AACd;AAC0B;AACrE;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAwB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mEAAc;AAC9D,oCAAoC,qnNA;AACA;AAC+B;AACwB;AACE;AACM;AACE;AACpB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yEAA0B;AACxC;AACA;AACA;AACA;AACA;AACA,mBAAmB,gDAAmB,UAAU;AAChD;AACA,8DAA8D,sEAAgB;AAC9E,iBAAiB,gDAAgD;AACjE;AACA;AACA,8BAA8B,gDAAmB,SAAS;AAC1D;AACA;AACA,qBAAqB,EAAE;AACvB,oBAAoB,gDAAmB,SAAS,mCAAmC;AACnF;AACA;AACA;AACA;AACA,iDAAiD,gDAAmB,SAAS;AAC7E;AACA;AACA,qBAAqB,EAAE;AACvB,oBAAoB,gDAAmB,CAAC,yEAAkB,aAAa,gDAAmB;AAC1F;AACA,uBAAuB,gDAAmB,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gDAAmB,UAAU,+CAA+C;AAC/F;AACA,8BAA8B,gDAAmB,SAAS;AAC1D;AACA;AACA,qBAAqB,EAAE;AACvB,oBAAoB,gDAAmB,SAAS,mCAAmC;AACnF;AACA;AACA;AACA;AACA,iDAAiD,gDAAmB,SAAS;AAC7E;AACA;AACA,qBAAqB,EAAE;AACvB,oBAAoB,gDAAmB,CAAC,yEAAkB,aAAa,gDAAmB;AAC1F,uBAAuB,gDAAmB,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB,SAAS,iCAAiC;AAC7E,YAAY,gDAAmB,SAAS,oCAAoC;AAC5E,YAAY,gDAAmB,UAAU,6BAA6B;AACtE,gBAAgB,gDAAmB,CAAC,sDAAa,GAAG,8CAA8C;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oFAAkC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkB;AAClB,kC;;;;;;;;;;;;;;;;;;;;AChLA;AACA;AACyD;AAC1B;AACe;AAC9C;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gCAAgC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA,oDAAoD,mEAAc;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gDAAmB,SAAS,+BAA+B;AAC9E;AACA;AACA,oBAAoB,gDAAmB,UAAU,oCAAoC;AACrF;AACA;AACA,oBAAoB,gDAAmB,UAAU,oEAAoE;AACrH;AACA;AACA;AACA;AACA;AACA,oBAAoB,gDAAmB,UAAU,oEAAoE;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gDAAmB,UAAU,mLAAmL;AACvO;AACA;AACA,uBAAuB,gDAAmB,UAAU,8QAA8Q;AAClU;AACA;AACA,mBAAmB,gDAAmB,SAAS,kCAAkC;AACjF,gBAAgB,gDAAmB,CAAC,uDAAgB,GAAG,6GAA6G;AACpK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6B;AAC7B,iC;;;;;;;;;;;;;;;;;AC5LA;AACA;AAC+B;AAC/B;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB;AACnC,YAAY,gDAAmB,WAAW,mEAAmE;AAC7G;AACA;AACA;AACA;AACA;AACwB;AACxB,+B;;;;;;;;;;;;;;;;;;ACjCA;AACA;AAC+B;AACM;AACrC;AACA;AACA;AACA;AACA;AACA,+BAA+B,4CAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAmB,SAAS;AACpD;AACA,qBAAqB,eAAe;AACpC,oBAAoB,gDAAmB,CAAC,8CAAY,GAAG,2GAA2G;AAClK,aAAa;AACb;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAmB,SAAS,8BAA8B;AACzE;AACA;AACA;AACA;AACA;AAC4B;AAC5B,oC;;;;;;;;;;;;;;;;;;;;ACrEA;AACA;AAC2F;AAC5D;AACgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qCAAqC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gDAAmB,SAAS;AAChE;AACA,gEAAgE;AAChE,gBAAgB,gDAAmB,CAAC,qEAAc;AAClD,wCAAwC,gDAAmB,SAAS;AACpE;AACA,0CAA0C;AAC1C,gBAAgB,gDAAmB,CAAC,yEAAkB;AACtD,yCAAyC,gDAAmB,SAAS;AACrE;AACA,0CAA0C;AAC1C,gBAAgB,gDAAmB,CAAC,0EAAmB;AACvD,8BAA8B,gDAAmB;AACjD,iCAAiC,gDAAmB,SAAS;AAC7D;AACA,0CAA0C;AAC1C,gBAAgB,gDAAmB,CAAC,oEAAa;AACjD;AACA;AACA,iCAAiC,gDAAmB,CAAC,wDAAiB,GAAG,gKAAgK;AACzO;AACA,8BAA8B,gDAAmB,SAAS,gCAAgC;AAC1F;AACA;AACA;AACA;AACA,oBAAoB,gDAAmB;AACvC,gBAAgB,gDAAmB,SAAS,2BAA2B;AACvE;AACA;AACA;AACA,oBAAoB,gDAAmB,SAAS,mFAAmF;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACmB;AACnB,6C;;;;;;;;;;;;;;;;ACtJA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2CAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACiC;AACjC,iC;;;;;;;;;;;;;;;;;AC1FA;AACA;AAC+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gDAAmB,SAAS,iDAAiD;AACzF,QAAQ,gDAAmB,SAAS,+CAA+C;AACnF,YAAY,gDAAmB,SAAS,mCAAmC;AAC3E,QAAQ,gDAAmB,UAAU,yCAAyC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACkB;AAClB,kC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6B;AACF;AACL;AACK;AACM;AACjC,iC;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AAC0C;AACC;AAC3C;AACA;AACA;AACA;AACO,qCAAqC,oDAAK;AACjD;AACA;AACA;AACA;AACO;AACP;AACA,oCAAoC,qDAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D,oC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AACiE;AACR;AAChB;AACV;AACO;AACD;AACM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,8BAA8B,mDAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mEAAc;AAC9D;AACA;AACA;AACA;AACA,iCAAiC,qDAAM;AACvC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kEAAe;AAC3C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAgB;AACxC;AACA;AACA;AACA,mBAAmB,gDAAmB;AACtC;AACA;AACA;AACA;AACA,mBAAmB,gDAAmB,SAAS,kCAAkC;AACjF,YAAY,gDAAmB,SAAS,qCAAqC;AAC7E;AACA,mBAAmB,gDAAmB,CAAC,8CAAO,GAAG,qJAAqJ;AACtM;AACA,QAAQ,6CAAe;AACvB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+B;;;;;;;;;;;;;;;;;AC9JA;AACA;AAC+B;AAC/B;AACA;AACA;AACA;AACA;AACA,sBAAsB,4CAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB,QAAQ;AAC3C;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACmB;AACnB,oC;;;;;;;;;;;;;;;;;;ACxCA;AACA;AAC+B;AACM;AACrC;AACA;AACA;AACA;AACA;AACA,sBAAsB,4CAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gDAAmB,CAAC,8CAAO,GAAG,yHAAyH,QAAQ,GAAG,SAAS,GAAG,IAAI,GAAG;AACzM,SAAS;AACT,gBAAgB,gDAAmB,SAAS,kCAAkC;AAC9E,YAAY,gDAAmB,SAAS,qCAAqC;AAC7E,uBAAuB,gDAAmB;AAC1C,YAAY,gDAAmB,QAAQ,0CAA0C;AACjF;AACA;AACA;AACA;AACA;AACmB;AACnB,oC;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6B;AAC7B,8C;;;;;;;;;;;;;;;;;ACxDA;AACA;AAC6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA,qBAAqB,+DAAgB;AACrC;AACA;AACA;AACA;AAC8B;AAC9B,oC;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiB;AACjB,kC;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsB;AACtB,uC;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,IAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,IAAI,KAAK,GAAG,KAAK,GAAG;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwB;AACxB,yC;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4B;AAC5B,6C","file":"vendors-node_modules_jupyterlab_toc_lib_index_js.dc28ffacc2dd5f032604.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n// Note: keep in alphabetical order...\nexport * from './latex';\nexport * from './markdown';\nexport * from './notebook';\nexport * from './python';\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Maps LaTeX section headings to HTML header levels.\n *\n * ## Notes\n *\n * -   As `part` and `chapter` section headings appear to be less common, assign them to heading level 1.\n *\n * @private\n */\nconst LATEX_LEVELS = {\n    part: 1,\n    chapter: 1,\n    section: 1,\n    subsection: 2,\n    subsubsection: 3,\n    paragraph: 4,\n    subparagraph: 5\n};\n/**\n * Converts array elements to \"entries\".\n *\n * @private\n * @param arr - input array\n * @returns input array\n *\n * @example\n * const arr = toEntries([4,5,6]);\n * // returns [[4,0], [5,1], [6,2]]\n */\nfunction toEntries(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = [arr[i], i];\n    }\n    return arr;\n}\n/**\n * Returns a boolean indicating whether this ToC generator is enabled.\n *\n * @private\n * @param editor - editor widget\n * @returns boolean indicating whether this ToC generator is enabled\n */\nfunction isEnabled(editor) {\n    // Only enable this if the editor MIME type matches one of a few LaTeX variants:\n    let mime = editor.content.model.mimeType;\n    return mime === 'text/x-latex' || mime === 'text/x-stex';\n}\n/**\n * Generates a table of contents.\n *\n * @private\n * @param editor - editor widget\n * @returns a list of headings\n */\nfunction generate(editor) {\n    // Split the text into lines:\n    let lines = editor.content.model.value.text.split('\\n');\n    // Convert the list into \"entries\" so we can use the line number to scroll the editor upon ToC item click:\n    lines = toEntries(lines);\n    // Iterate over the lines to get the heading level and text for each line:\n    let headings = [];\n    for (let i = 0; i < lines.length; i++) {\n        const RE = /^\\s*\\\\(section|subsection|subsubsection){(.+)}/;\n        const match = lines[i][0].match(RE);\n        if (match) {\n            headings.push({\n                text: match[2],\n                level: LATEX_LEVELS[match[1]],\n                onClick: onClick(lines[i][1])\n            });\n        }\n    }\n    return headings;\n    /**\n     * Returns a \"click\" handler.\n     *\n     * @private\n     * @param line - line number\n     * @returns click handler\n     */\n    function onClick(line) {\n        return () => {\n            editor.content.editor.setCursorPosition({\n                line: line,\n                column: 0\n            });\n        };\n    }\n}\n/**\n * Returns a ToC generator for LaTeX files.\n *\n * @private\n * @param tracker - file editor tracker\n * @returns ToC generator capable of parsing LaTeX files\n */\nfunction createLatexGenerator(tracker) {\n    return {\n        tracker,\n        usesLatex: true,\n        isEnabled: isEnabled,\n        generate: generate\n    };\n}\n/**\n * Exports.\n */\nexport { createLatexGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { parseHeading } from '../../utils/parse_heading';\n/**\n * Parses a provided string and returns a list of headings.\n *\n * @private\n * @param text - input text\n * @param onClick - callback which returns a \"click\" handler\n * @param dict - numbering dictionary\n * @param numberingH1 - whether first level header should be numbered\n * @returns list of headings\n */\nfunction getHeadings(text, onClick, dict, numberingH1) {\n    // Split the text into lines:\n    const lines = text.split('\\n');\n    // Iterate over the lines to get the header level and text for each line:\n    let headings = [];\n    let FLG;\n    for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        // Don't check for Markdown headings if in a code block:\n        if (line.indexOf('```') === 0) {\n            FLG = !FLG;\n        }\n        if (FLG) {\n            continue;\n        }\n        line += lines[i + 1] ? '\\n' + lines[i + 1] : '';\n        const heading = parseHeading(line); // append the next line to capture alternative style Markdown headings\n        if (heading) {\n            let level = heading.level;\n            if (!numberingH1) {\n                level -= 1;\n            }\n            headings.push({\n                text: heading.text,\n                numbering: generateNumbering(dict, level),\n                level: heading.level,\n                onClick: onClick(i)\n            });\n        }\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getHeadings };\n//# sourceMappingURL=get_headings.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Returns a \"click\" handler.\n *\n * @private\n * @param heading - heading element\n * @returns \"click\" handler\n */\nfunction onClick(heading) {\n    return () => {\n        heading.scrollIntoView();\n    };\n}\n/**\n * Processes an HTML element containing rendered Markdown and returns a list of headings.\n *\n * @private\n * @param node - HTML element\n * @param sanitizer - HTML sanitizer\n * @param dict - numbering dictionary\n * @param numbering - boolean indicating whether to enable numbering\n * @param numberingH1 - whether first level header should be numbered\n * @returns list of headings\n */\nfunction getRenderedHeadings(node, sanitizer, dict, numbering = true, numberingH1 = true) {\n    let nodes = node.querySelectorAll('h1, h2, h3, h4, h5, h6');\n    let headings = [];\n    for (let i = 0; i < nodes.length; i++) {\n        const heading = nodes[i];\n        let level = parseInt(heading.tagName[1], 10);\n        let text = heading.textContent ? heading.textContent : '';\n        let hide = !numbering;\n        // Show/hide numbering DOM element based on user settings:\n        if (heading.getElementsByClassName('numbering-entry').length > 0) {\n            heading.removeChild(heading.getElementsByClassName('numbering-entry')[0]);\n        }\n        let html = sanitizer.sanitize(heading.innerHTML, sanitizerOptions);\n        html = html.replace('¶', ''); // remove the anchor symbol\n        // Generate a numbering string:\n        if (!numberingH1) {\n            level -= 1;\n        }\n        let nstr = generateNumbering(dict, level);\n        // Generate the numbering DOM element:\n        let nhtml = '';\n        if (!hide) {\n            nhtml = '<span class=\"numbering-entry\">' + nstr + '</span>';\n        }\n        // Append the numbering element to the document:\n        heading.innerHTML = nhtml + html;\n        headings.push({\n            level,\n            text: text.replace('¶', ''),\n            numbering: nstr,\n            html,\n            onClick: onClick(heading)\n        });\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getRenderedHeadings };\n//# sourceMappingURL=get_rendered_headings.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { isMarkdown } from '../../utils/is_markdown';\nimport { OptionsManager } from './options_manager';\nimport { render } from './render';\nimport { toolbar } from './toolbar_generator';\nimport { getHeadings } from './get_headings';\nimport { getRenderedHeadings } from './get_rendered_headings';\n/**\n * Returns a boolean indicating whether this ToC generator is enabled.\n *\n * @private\n * @param editor - editor widget\n * @returns boolean indicating whether this ToC generator is enabled\n */\nfunction isEnabled(editor) {\n    // Only enable this if the editor MIME type matches one of a few Markdown variants:\n    return isMarkdown(editor.content.model.mimeType);\n}\n/**\n * Generates a table of contents.\n *\n * @private\n * @param editor - editor widget\n * @param options - manage Markdown ToC generator options\n * @returns a list of headings\n */\nfunction generate(editor, options) {\n    let dict = {};\n    let numberingH1 = true;\n    if (options !== undefined) {\n        numberingH1 = options.numberingH1;\n    }\n    return getHeadings(editor.content.model.value.text, onClick, dict, numberingH1);\n    /**\n     * Returns a \"click\" handler.\n     *\n     * @private\n     * @param line - line number\n     * @returns click handler\n     */\n    function onClick(line) {\n        return () => {\n            editor.content.editor.setCursorPosition({\n                line: line,\n                column: 0\n            });\n        };\n    }\n}\n/**\n * Returns a ToC generator for Markdown files.\n *\n * @private\n * @param tracker - file editor tracker\n * @param widget - table of contents widget\n * @param sanitizer - HTML sanitizer\n * @param settings - advanced settings for toc extension\n * @returns ToC generator capable of parsing Markdown files\n */\nfunction createMarkdownGenerator(tracker, widget, sanitizer, translator, settings) {\n    let numberingH1 = true;\n    if (settings) {\n        numberingH1 = settings.composite.numberingH1;\n    }\n    const options = new OptionsManager(widget, {\n        numbering: true,\n        numberingH1: numberingH1,\n        sanitizer,\n        translator: translator || nullTranslator\n    });\n    if (settings) {\n        settings.changed.connect(() => {\n            options.numberingH1 = settings.composite.numberingH1;\n        });\n    }\n    return {\n        tracker,\n        usesLatex: true,\n        options: options,\n        toolbarGenerator: generateToolbar,\n        itemRenderer: renderItem,\n        isEnabled: isEnabled,\n        generate: generate\n    };\n    /**\n     * Returns a toolbar generator.\n     *\n     * @private\n     * @returns toolbar generator\n     */\n    function generateToolbar() {\n        return toolbar(options);\n    }\n    /**\n     * Renders a table of contents item.\n     *\n     * @private\n     * @param item - heading to render\n     * @returns rendered item\n     */\n    function renderItem(item) {\n        return render(options, item);\n    }\n}\n/**\n * Returns a ToC generator for rendered Markdown files.\n *\n * @param tracker - Markdown viewer tracker\n * @param sanitizer - HTML sanitizer\n * @param widget - table of contents widget\n * @param settings - advanced settings for toc extension\n * @returns ToC generator capable of parsing rendered Markdown files\n */\nfunction createRenderedMarkdownGenerator(tracker, widget, sanitizer, translator, settings) {\n    let numberingH1 = true;\n    if (settings) {\n        numberingH1 = settings.composite.numberingH1;\n    }\n    const options = new OptionsManager(widget, {\n        numbering: true,\n        numberingH1: numberingH1,\n        sanitizer,\n        translator: translator || nullTranslator\n    });\n    if (settings) {\n        settings.changed.connect(() => {\n            options.numberingH1 = settings.composite.numberingH1;\n        });\n    }\n    return {\n        tracker,\n        usesLatex: true,\n        options: options,\n        toolbarGenerator: generateToolbar,\n        itemRenderer: renderItem,\n        generate: generate\n    };\n    /**\n     * Returns a toolbar generator.\n     *\n     * @private\n     * @returns toolbar generator\n     */\n    function generateToolbar() {\n        return toolbar(options);\n    }\n    /**\n     * Renders a table of contents item.\n     *\n     * @private\n     * @param item - heading to render\n     * @returns rendered item\n     */\n    function renderItem(item) {\n        return render(options, item);\n    }\n    /**\n     * Generates a table of contents.\n     *\n     * @private\n     * @param widget - Markdown document widget\n     * @returns a list of headings\n     */\n    function generate(widget) {\n        let dict = {};\n        return getRenderedHeadings(widget.content.node, sanitizer, dict, options.numbering, options.numberingH1);\n    }\n}\n/**\n * Exports.\n */\nexport { createMarkdownGenerator };\nexport { createRenderedMarkdownGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { TableOfContentsRegistry as Registry } from '../../registry';\n/**\n * Class for managing Markdown ToC generator options.\n *\n * @private\n */\nclass OptionsManager extends Registry.IOptionsManager {\n    /**\n     * Returns an options manager.\n     *\n     * @param widget - table of contents widget\n     * @param options - generator options\n     * @returns options manager\n     */\n    constructor(widget, options) {\n        super();\n        this._numbering = options.numbering;\n        this._numberingH1 = options.numberingH1;\n        this._widget = widget;\n        this.translator = options.translator || nullTranslator;\n        this.sanitizer = options.sanitizer;\n    }\n    /**\n     * Gets/sets ToC generator numbering.\n     */\n    set numbering(value) {\n        this._numbering = value;\n        this._widget.update();\n    }\n    get numbering() {\n        return this._numbering;\n    }\n    /**\n     * Gets/sets ToC generator numbering h1 headers.\n     */\n    set numberingH1(value) {\n        if (this._numberingH1 != value) {\n            this._numberingH1 = value;\n            this._widget.update();\n        }\n    }\n    get numberingH1() {\n        return this._numberingH1;\n    }\n    /**\n     * Initializes options.\n     *\n     * ## Notes\n     *\n     * -  This will **not** change notebook meta-data.\n     *\n     * @param numbering - boolean indicating whether to number items\n     */\n    initializeOptions(numbering, numberingH1) {\n        this._numbering = numbering;\n        this._numberingH1 = numberingH1;\n        this._widget.update();\n    }\n}\n/**\n * Exports.\n */\nexport { OptionsManager };\n//# sourceMappingURL=options_manager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Renders a Markdown table of contents item.\n *\n * @private\n * @param options - generator options\n * @param item - numbered heading\n * @returns rendered item\n */\nfunction render(options, item) {\n    let fontSizeClass = 'toc-level-size-' + item.level;\n    // Render item numbering:\n    let numbering = item.numbering && options.numbering ? item.numbering : '';\n    // Render the item:\n    let jsx;\n    if (item.html) {\n        let html = options.sanitizer.sanitize(item.html, sanitizerOptions);\n        jsx = (React.createElement(\"span\", { dangerouslySetInnerHTML: { __html: numbering + html }, className: 'toc-markdown-cell ' + fontSizeClass }));\n    }\n    else {\n        jsx = React.createElement(\"span\", { className: fontSizeClass },\n            \" \",\n            numbering + item.text);\n    }\n    return jsx;\n}\n/**\n * Exports.\n */\nexport { render };\n//# sourceMappingURL=render.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { numberingIcon } from '@jupyterlab/ui-components';\nimport * as React from 'react';\n/**\n * Returns a component for rendering a Markdown table of contents toolbar.\n *\n * @private\n * @param options - generator options\n * @returns toolbar component\n */\nfunction toolbar(options) {\n    return class Toolbar extends React.Component {\n        /**\n         * Returns a component for rendering a Markdown table of contents toolbar.\n         *\n         * @param props - toolbar properties\n         * @returns toolbar component\n         */\n        constructor(props) {\n            super(props);\n            this.state = { numbering: false };\n            options.initializeOptions(false, options.numberingH1);\n            this._trans = options.translator.load('jupyterlab');\n        }\n        /**\n         * Renders a toolbar.\n         *\n         * @returns rendered toolbar\n         */\n        render() {\n            const toggleNumbering = () => {\n                options.numbering = !options.numbering;\n                this.setState({ numbering: options.numbering });\n            };\n            const icon = (React.createElement(\"div\", { onClick: event => toggleNumbering(), role: \"text\", \"aria-label\": this._trans.__('Toggle Auto-Numbering'), title: this._trans.__('Toggle Auto-Numbering'), className: this.state.numbering\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(numberingIcon.react, null)));\n            return (React.createElement(\"div\", null,\n                React.createElement(\"div\", { className: 'toc-toolbar' }, icon)));\n        }\n    };\n}\n/**\n * Exports.\n */\nexport { toolbar };\n//# sourceMappingURL=toolbar_generator.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { isHeadingFiltered } from './is_heading_filtered';\n/**\n * Appends a collapsible notebook heading to a list of headings.\n *\n * @private\n * @param headings - list of notebook headings\n * @param heading - rendered heading\n * @param prev - previous heading\n * @param collapseLevel - collapse level\n * @param tags - filter tags\n * @param collapsed - boolean indicating whether a heading is collapsed\n * @param cellCollapseMetadata - indicates which metadata string to use based on the cellSyncSetting\n * @returns result tuple\n */\nfunction appendCollapsibleHeading(headings, heading, prev, collapseLevel, tags, collapsed, cellCollapseMetadata) {\n    const len = headings.length;\n    if (!isHeadingFiltered(heading, tags)) {\n        // If the previous heading is a higher level heading, update the heading to note that it has a child heading...\n        if (prev && prev.type === 'header' && prev.level < heading.level) {\n            for (let j = len - 1; j >= 0; j--) {\n                if (headings[j] === prev) {\n                    // TODO: can a heading be the child of multiple headings? If not, we can `break` here upon finding a parent heading, so we don't traverse the entire heading list...\n                    headings[j].hasChild = true;\n                }\n            }\n        }\n        // If the collapse level doesn't include the heading, or, if there is no collapsing, add to headings and adjust the collapse level...\n        if (collapseLevel >= heading.level || collapseLevel < 0) {\n            headings.push(heading);\n            collapseLevel = collapsed ? heading.level : -1;\n        }\n        prev = heading;\n    }\n    else if (prev && heading.level <= prev.level) {\n        // If the heading is filtered out and has a lower level previous heading, determine if the heading has a parent...\n        let parent = false;\n        let k = len - 1;\n        for (; k >= 0; k--) {\n            if (headings[k].level < heading.level) {\n                prev = headings[k];\n                parent = true;\n                break;\n            }\n        }\n        // If there is no parent, reset collapsing...\n        if (parent) {\n            const isCollapsed = headings[k + 1].cellRef.model.metadata.get(cellCollapseMetadata);\n            collapseLevel = isCollapsed ? headings[k + 1].level : -1;\n        }\n        else {\n            prev = null;\n            collapseLevel = -1;\n        }\n    }\n    return [headings, prev, collapseLevel];\n}\n/**\n * Exports.\n */\nexport { appendCollapsibleHeading };\n//# sourceMappingURL=append_collapsible_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { isHeadingFiltered } from './is_heading_filtered';\n/**\n * Appends a notebook heading to a list of headings.\n *\n * @private\n * @param headings - list of notebook headings\n * @param heading - rendered heading\n * @param prev - previous heading\n * @param collapseLevel - collapse level\n * @param tags - filter tags\n * @returns result tuple\n */\nfunction appendHeading(headings, heading, prev, collapseLevel, tags) {\n    if (heading && !isHeadingFiltered(heading, tags) && heading.text) {\n        // Determine whether this heading is a child of a \"header\" notebook heading...\n        if (prev && prev.type === 'header') {\n            for (let j = headings.length - 1; j >= 0; j--) {\n                if (headings[j] === prev) {\n                    // TODO: can a heading be the child of multiple headings? If not, we can `break` here upon finding a parent heading, so we don't traverse the entire heading list...\n                    headings[j].hasChild = true;\n                }\n            }\n        }\n        if (collapseLevel < 0) {\n            headings.push(heading);\n        }\n        prev = heading;\n    }\n    return [headings, prev];\n}\n/**\n * Exports.\n */\nexport { appendHeading };\n//# sourceMappingURL=append_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { appendCollapsibleHeading } from './append_collapsible_heading';\nimport { appendHeading } from './append_heading';\n/**\n * Appends a Markdown notebook heading to a list of headings.\n *\n * @private\n * @param headings - list of notebook headings\n * @param heading - rendered heading\n * @param prev - previous heading\n * @param collapseLevel - collapse level\n * @param tags - filter tags\n * @param collapsed - boolean indicating whether a heading is collapsed\n * @param showMarkdown - boolean indicating whether to show Markdown previews\n * @param cellCollapseMetadata - indicates which metadata string to use based on the cellSyncSetting\n * @returns result tuple\n */\nfunction appendMarkdownHeading(heading, headings, prev, collapseLevel, tags, collapsed, showMarkdown, cellCollapseMetadata) {\n    if (heading && heading.type === 'markdown' && showMarkdown) {\n        // Append a Markdown preview heading:\n        [headings, prev] = appendHeading(headings, heading, prev, collapseLevel, tags);\n    }\n    else if (heading && heading.type === 'header') {\n        [headings, prev, collapseLevel] = appendCollapsibleHeading(headings, heading, prev, collapseLevel, tags, collapsed, cellCollapseMetadata);\n    }\n    return [headings, prev, collapseLevel];\n}\n/**\n * Exports.\n */\nexport { appendMarkdownHeading };\n//# sourceMappingURL=append_markdown_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Class for rendering a code component.\n *\n * @private\n */\nclass CodeComponent extends React.Component {\n    /**\n     * Returns a code component.\n     *\n     * @param props - component properties\n     * @returns code component\n     */\n    constructor(props) {\n        super(props);\n        this.state = { heading: props.heading };\n    }\n    /**\n     * Updates code component state.\n     *\n     * @param props - component properties\n     */\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        this.setState({ heading: nextProps.heading });\n    }\n    /**\n     * Renders a code component.\n     *\n     * @returns rendered component\n     */\n    render() {\n        // Get the current rendered CodeMirror:\n        let html = this.state.heading.cellRef.editor.host.innerHTML;\n        // Sanitize the HTML:\n        html = this.props.sanitizer.sanitize(html, sanitizerOptions);\n        return (React.createElement(\"div\", { className: \"cm-toc\", dangerouslySetInnerHTML: { __html: html } }));\n    }\n}\n/**\n * Exports.\n */\nexport { CodeComponent };\n//# sourceMappingURL=codemirror.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns a code entry notebook heading from a code string.\n *\n * @private\n * @param text - code string\n * @param onClick - callback which returns a \"click\" handler\n * @param executionCount - execution count\n * @param lastLevel - last heading level\n * @param cellRef - cell reference\n * @param index - index of referenced cell relative to other cells in the notebook\n * @returns notebook heading\n */\nfunction getCodeCellHeading(text, onClick, executionCount, lastLevel, cellRef, index = -1) {\n    let headings = [];\n    if (index === -1) {\n        console.warn('Deprecation warning! index argument will become mandatory in the next version');\n    }\n    if (text) {\n        const lines = text.split('\\n');\n        const len = Math.min(lines.length, 3);\n        let str = '';\n        let i = 0;\n        for (; i < len - 1; i++) {\n            str += lines[i] + '\\n';\n        }\n        str += lines[i];\n        headings.push({\n            text: str,\n            level: lastLevel + 1,\n            onClick: onClick(0),\n            type: 'code',\n            prompt: executionCount,\n            cellRef: cellRef,\n            hasChild: false,\n            index: index\n        });\n    }\n    return headings[0];\n}\n/**\n * Exports.\n */\nexport { getCodeCellHeading };\n//# sourceMappingURL=get_code_cell_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns the last heading level.\n *\n * @private\n * @param headings - list of notebook headings\n * @returns heading level\n */\nfunction getLastHeadingLevel(headings) {\n    if (headings.length > 0) {\n        let loc = headings.length - 1;\n        while (loc >= 0) {\n            if (headings[loc].type === 'header') {\n                return headings[loc].level;\n            }\n            loc -= 1;\n        }\n    }\n    return 0;\n}\n/**\n * Exports.\n */\nexport { getLastHeadingLevel };\n//# sourceMappingURL=get_last_heading_level.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { parseHeading } from '../../utils/parse_heading';\n/**\n * Parses a Markdown string and returns a notebook heading.\n *\n * @private\n * @param text - Markdown string\n * @param onClick - callback which returns a \"click\" handler\n * @param dict - numbering dictionary\n * @param lastLevel - last level\n * @param cellRef - cell reference\n * @param index - index of referenced cell relative to other cells in the notebook\n * @returns notebook heading\n */\nfunction getMarkdownHeadings(text, onClick, dict, lastLevel, cellRef, index = -1) {\n    const callback = onClick(0);\n    let headings = [];\n    if (index === -1) {\n        console.warn('Deprecation warning! index argument will become mandatory in the next version');\n    }\n    for (const line of text.split('\\n')) {\n        const heading = parseHeading(line);\n        if (heading) {\n            headings.push({\n                text: heading.text,\n                level: heading.level,\n                numbering: generateNumbering(dict, heading.level),\n                onClick: callback,\n                type: 'header',\n                cellRef: cellRef,\n                hasChild: false,\n                index\n            });\n        }\n        else {\n            headings.push({\n                text: text,\n                level: lastLevel + 1,\n                onClick: callback,\n                type: 'markdown',\n                cellRef: cellRef,\n                hasChild: false,\n                index\n            });\n        }\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getMarkdownHeadings };\n//# sourceMappingURL=get_markdown_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Returns a notebook heading from an HTML element.\n *\n * @private\n * @param node - HTML element\n * @param onClick - callback which returns a \"click\" handler\n * @param dict - numbering dictionary\n * @param lastLevel - last level\n * @param numbering - boolean indicating whether to enable numbering\n * @param numberingH1 - boolean indicating whether to enable first level headers numbering\n * @param cellRef - cell reference\n * @param index - index of referenced cell relative to other cells in the notebook\n * @returns notebook heading\n */\nfunction getRenderedHTMLHeadings(node, onClick, sanitizer, dict, lastLevel, numbering = false, numberingH1 = true, cellRef, index = -1) {\n    let nodes = node.querySelectorAll('h1, h2, h3, h4, h5, h6, p');\n    if (index === -1) {\n        console.warn('Deprecation warning! index argument will become mandatory in the next version');\n    }\n    let headings = [];\n    for (const el of nodes) {\n        if (el.classList.contains('jp-toc-ignore')) {\n            // skip this element if a special class name is included\n            continue;\n        }\n        if (el.nodeName.toLowerCase() === 'p') {\n            if (el.innerHTML) {\n                let html = sanitizer.sanitize(el.innerHTML, sanitizerOptions);\n                headings.push({\n                    level: lastLevel + 1,\n                    html: html.replace('¶', ''),\n                    text: el.textContent ? el.textContent : '',\n                    onClick: onClick(el),\n                    type: 'markdown',\n                    cellRef: cellRef,\n                    hasChild: false,\n                    index: index\n                });\n            }\n            continue;\n        }\n        if (el.getElementsByClassName('numbering-entry').length > 0) {\n            el.removeChild(el.getElementsByClassName('numbering-entry')[0]);\n        }\n        let html = sanitizer.sanitize(el.innerHTML, sanitizerOptions);\n        html = html.replace('¶', '');\n        let level = parseInt(el.tagName[1], 10);\n        if (!numberingH1) {\n            level -= 1;\n        }\n        let nstr = generateNumbering(dict, level);\n        if (numbering) {\n            const nhtml = document.createElement('span');\n            nhtml.classList.add('numbering-entry');\n            nhtml.textContent = nstr !== null && nstr !== void 0 ? nstr : '';\n            el.insertBefore(nhtml, el.firstChild);\n        }\n        headings.push({\n            level: level,\n            text: el.textContent ? el.textContent : '',\n            numbering: nstr,\n            html: html,\n            onClick: onClick(el),\n            type: 'header',\n            cellRef: cellRef,\n            hasChild: false,\n            index: index\n        });\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getRenderedHTMLHeadings };\n//# sourceMappingURL=get_rendered_html_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { MARKDOWN_HEADING_COLLAPSED } from '@jupyterlab/cells';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { isDOM } from '../../utils/is_dom';\nimport { isMarkdown } from '../../utils/is_markdown';\nimport { appendHeading } from './append_heading';\nimport { appendMarkdownHeading } from './append_markdown_heading';\nimport { getCodeCellHeading } from './get_code_cell_heading';\nimport { getLastHeadingLevel } from './get_last_heading_level';\nimport { getMarkdownHeadings } from './get_markdown_heading';\nimport { getRenderedHTMLHeadings } from './get_rendered_html_heading';\nimport { OptionsManager } from './options_manager';\nimport { render } from './render';\nimport { toolbar } from './toolbar_generator';\n/**\n * Returns a ToC generator for notebooks.\n *\n * @private\n * @param tracker - notebook tracker\n * @param widget - table of contents widget\n * @param sanitizer - HTML sanitizer\n * @param translator - Language translator\n * @param settings - advanced settings for toc extension\n * @returns ToC generator capable of parsing notebooks\n */\nfunction createNotebookGenerator(tracker, widget, sanitizer, translator, settings) {\n    let numberingH1 = true;\n    let includeOutput = true;\n    let syncCollapseState = false;\n    if (settings) {\n        numberingH1 = settings.composite.numberingH1;\n        includeOutput = settings.composite.includeOutput;\n        syncCollapseState = settings.composite.syncCollapseState;\n    }\n    const options = new OptionsManager(widget, tracker, {\n        numbering: false,\n        numberingH1: numberingH1,\n        includeOutput: includeOutput,\n        syncCollapseState: syncCollapseState,\n        sanitizer: sanitizer,\n        translator: translator || nullTranslator\n    });\n    if (settings) {\n        settings.changed.connect(() => {\n            options.numberingH1 = settings.composite.numberingH1;\n            options.includeOutput = settings.composite.includeOutput;\n            options.syncCollapseState = settings.composite\n                .syncCollapseState;\n        });\n    }\n    tracker.activeCellChanged.connect((sender, args) => {\n        widget.update();\n    });\n    return {\n        tracker,\n        usesLatex: true,\n        options: options,\n        toolbarGenerator: generateToolbar,\n        itemRenderer: renderItem,\n        generate: generate,\n        collapseChanged: options.collapseChanged\n    };\n    /**\n     * Returns a toolbar generator.\n     *\n     * @private\n     * @returns toolbar generator\n     */\n    function generateToolbar() {\n        return toolbar(options, tracker);\n    }\n    /**\n     * Renders a table of contents item.\n     *\n     * @private\n     * @param item - heading to render\n     * @param toc - list of all headers to render\n     * @returns rendered item\n     */\n    function renderItem(item, toc = []) {\n        return render(options, tracker, item, toc);\n    }\n    /**\n     * Generates a table of contents.\n     *\n     * @private\n     * @param panel - notebook widget\n     * @returns a list of headings\n     */\n    function generate(panel) {\n        let headings = [];\n        let collapseLevel = -1;\n        let dict = {};\n        // Initialize a variable for keeping track of the previous heading:\n        let prev = null;\n        // Generate headings by iterating through all notebook cells...\n        for (let i = 0; i < panel.content.widgets.length; i++) {\n            let cell = panel.content.widgets[i];\n            let model = cell.model;\n            let cellCollapseMetadata = options.syncCollapseState\n                ? MARKDOWN_HEADING_COLLAPSED\n                : 'toc-hr-collapsed';\n            let collapsed = model.metadata.get(cellCollapseMetadata);\n            collapsed = collapsed || false;\n            if (model.type === 'code') {\n                if (!widget || (widget && options.showCode)) {\n                    const onClick = (line) => {\n                        return () => {\n                            panel.content.activeCellIndex = i;\n                            cell.node.scrollIntoView();\n                        };\n                    };\n                    let count = cell.model.executionCount;\n                    let executionCount = count !== null ? '[' + count + ']: ' : '[ ]: ';\n                    let heading = getCodeCellHeading(model.value.text, onClick, executionCount, getLastHeadingLevel(headings), cell, i);\n                    [headings, prev] = appendHeading(headings, heading, prev, collapseLevel, options.filtered);\n                }\n                if (options.includeOutput) {\n                    // Iterate over the code cell outputs to check for Markdown or HTML from which we can generate ToC headings...\n                    for (let j = 0; j < model.outputs.length; j++) {\n                        const m = model.outputs.get(j);\n                        let dtypes = Object.keys(m.data);\n                        dtypes = dtypes.filter(t => isMarkdown(t) || isDOM(t));\n                        if (!dtypes.length) {\n                            continue;\n                        }\n                        const onClick = (el) => {\n                            return () => {\n                                panel.content.activeCellIndex = i;\n                                panel.content.mode = 'command';\n                                el.scrollIntoView();\n                            };\n                        };\n                        let htmlHeadings = getRenderedHTMLHeadings(cell.outputArea.widgets[j].node, onClick, sanitizer, dict, getLastHeadingLevel(headings), options.numbering, options.numberingH1, cell, i);\n                        for (const heading of htmlHeadings) {\n                            [headings, prev, collapseLevel] = appendMarkdownHeading(heading, headings, prev, collapseLevel, options.filtered, collapsed, options.showMarkdown, cellCollapseMetadata);\n                        }\n                    }\n                }\n                continue;\n            }\n            if (model.type === 'markdown') {\n                let mcell = cell;\n                let heading;\n                let lastLevel = getLastHeadingLevel(headings);\n                // If the cell is rendered, generate the ToC items from the HTML...\n                if (mcell.rendered && !mcell.inputHidden) {\n                    const onClick = (el) => {\n                        return () => {\n                            if (!mcell.rendered) {\n                                panel.content.activeCellIndex = i;\n                                el.scrollIntoView();\n                            }\n                            else {\n                                panel.content.mode = 'command';\n                                cell.node.scrollIntoView();\n                                panel.content.activeCellIndex = i;\n                            }\n                        };\n                    };\n                    const htmlHeadings = getRenderedHTMLHeadings(cell.node, onClick, sanitizer, dict, lastLevel, options.numbering, options.numberingH1, cell, i);\n                    for (heading of htmlHeadings) {\n                        [headings, prev, collapseLevel] = appendMarkdownHeading(heading, headings, prev, collapseLevel, options.filtered, collapsed, options.showMarkdown, cellCollapseMetadata);\n                    }\n                    // If not rendered, generate ToC items from the cell text...\n                }\n                else {\n                    const onClick = (line) => {\n                        return () => {\n                            panel.content.activeCellIndex = i;\n                            cell.node.scrollIntoView();\n                        };\n                    };\n                    const markdownHeadings = getMarkdownHeadings(model.value.text, onClick, dict, lastLevel, cell, i);\n                    for (heading of markdownHeadings) {\n                        [headings, prev, collapseLevel] = appendMarkdownHeading(heading, headings, prev, collapseLevel, options.filtered, collapsed, options.showMarkdown, cellCollapseMetadata);\n                    }\n                }\n            }\n        }\n        return headings;\n    }\n}\n/**\n * Exports.\n */\nexport { createNotebookGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns a boolean indicating whether a heading is filtered out by selected tags.\n *\n * @private\n * @param heading - notebook heading\n * @param tags - list of tags\n * @returns boolean indicating whether a heading is filtered\n */\nfunction isHeadingFiltered(heading, tags) {\n    if (tags.length === 0) {\n        return false;\n    }\n    if (heading && heading.cellRef) {\n        let meta = heading.cellRef.model.metadata;\n        let ctags = meta.get('tags');\n        if (ctags) {\n            for (let j = 0; j < ctags.length; j++) {\n                let name = ctags[j];\n                for (let k = 0; k < tags.length; k++) {\n                    if (tags[k] === name) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n/**\n * Exports.\n */\nexport { isHeadingFiltered };\n//# sourceMappingURL=is_heading_filtered.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Signal } from '@lumino/signaling';\nimport { TableOfContentsRegistry as Registry } from '../../registry';\n/**\n * Class for managing notebook ToC generator options.\n *\n * @private\n */\nclass OptionsManager extends Registry.IOptionsManager {\n    /**\n     * Returns an options manager.\n     *\n     * @param widget - table of contents widget\n     * @param notebook - notebook tracker\n     * @param options - generator options\n     * @returns options manager\n     */\n    constructor(widget, notebook, options) {\n        super();\n        this._preRenderedToolbar = null;\n        this._filtered = [];\n        this._showCode = false;\n        this._showMarkdown = false;\n        this._showTags = false;\n        this._tagTool = null;\n        this._numbering = options.numbering;\n        this._numberingH1 = options.numberingH1;\n        this._includeOutput = options.includeOutput;\n        this._syncCollapseState = options.syncCollapseState;\n        this._widget = widget;\n        this._notebook = notebook;\n        this.sanitizer = options.sanitizer;\n        this.storeTags = [];\n        this.translator = options.translator || nullTranslator;\n        this._collapseChanged = new Signal(this);\n    }\n    /**\n     * Gets/sets the tag tool component.\n     */\n    set tagTool(tagTool) {\n        this._tagTool = tagTool;\n    }\n    get tagTool() {\n        return this._tagTool;\n    }\n    /**\n     * Sets notebook meta data.\n     */\n    set notebookMetadata(value) {\n        if (this._notebook.currentWidget != null) {\n            this._notebook.currentWidget.model.metadata.set(value[0], value[1]);\n        }\n    }\n    /**\n     * Gets/sets ToC generator numbering.\n     */\n    set numbering(value) {\n        this._numbering = value;\n        this._widget.update();\n        this.notebookMetadata = ['toc-autonumbering', this._numbering];\n    }\n    get numbering() {\n        return this._numbering;\n    }\n    /**\n     * Gets/sets ToC generator numbering h1 headers.\n     */\n    set numberingH1(value) {\n        if (this._numberingH1 != value) {\n            this._numberingH1 = value;\n            this._widget.update();\n        }\n    }\n    get numberingH1() {\n        return this._numberingH1;\n    }\n    /**\n     * Toggles whether cell outputs should be included in headings.\n     */\n    set includeOutput(value) {\n        if (this._includeOutput != value) {\n            this._includeOutput = value;\n            this._widget.update();\n        }\n    }\n    get includeOutput() {\n        return this._includeOutput;\n    }\n    /**\n     * Gets/sets option for ToC heading collapsing to be reflected in Notebook and vice versa\n     */\n    set syncCollapseState(value) {\n        if (this._syncCollapseState != value) {\n            this._syncCollapseState = value;\n            this._widget.update();\n        }\n    }\n    get syncCollapseState() {\n        return this._syncCollapseState;\n    }\n    /**\n     * Toggles whether to show code previews in the table of contents.\n     */\n    set showCode(value) {\n        this._showCode = value;\n        this.notebookMetadata = ['toc-showcode', this._showCode];\n        this._widget.update();\n    }\n    get showCode() {\n        return this._showCode;\n    }\n    /**\n     * Toggles whether to show Markdown previews in the table of contents.\n     */\n    set showMarkdown(value) {\n        this._showMarkdown = value;\n        this.notebookMetadata = ['toc-showmarkdowntxt', this._showMarkdown];\n        this._widget.update();\n    }\n    get showMarkdown() {\n        return this._showMarkdown;\n    }\n    /**\n     * Signal emitted when a \"collapse\" twist button is pressed in the ToC\n     */\n    get collapseChanged() {\n        return this._collapseChanged;\n    }\n    /**\n     * Toggles whether to show tags in the table of contents.\n     */\n    set showTags(value) {\n        this._showTags = value;\n        this.notebookMetadata = ['toc-showtags', this._showTags];\n        this._widget.update();\n    }\n    get showTags() {\n        return this._showTags;\n    }\n    /**\n     * Returns a list of selected tags.\n     */\n    get filtered() {\n        if (this.tagTool) {\n            this._filtered = this.tagTool.filtered;\n        }\n        else if (this.storeTags.length > 0) {\n            this._filtered = this.storeTags;\n        }\n        else {\n            this._filtered = [];\n        }\n        return this._filtered;\n    }\n    /**\n     * Gets/sets a pre-rendered a toolbar.\n     */\n    set preRenderedToolbar(value) {\n        this._preRenderedToolbar = value;\n    }\n    get preRenderedToolbar() {\n        return this._preRenderedToolbar;\n    }\n    /**\n     * Updates a table of contents widget.\n     */\n    updateWidget() {\n        this._widget.update();\n    }\n    /**\n     * Updates a table of contents widget and\n     * emits a signal in case an extension wants\n     * to perform an action when the collapse button\n     * is pressed.\n     */\n    updateAndCollapse(args) {\n        this._collapseChanged.emit(args);\n        this._widget.update();\n    }\n    /**\n     * Initializes options.\n     *\n     * ## Notes\n     *\n     * -  This will **not** change notebook meta-data.\n     *\n     * @param numbering - boolean indicating whether to number items\n     * @param numberingH1 - boolean indicating whether to number first level items\n     * @param includeOutput - boolean indicating whether cell outputs should be included in headings\n     * @param syncCollapseState - boolean indicating whether collapsing in ToC should be reflected in Notebook and vice versa\n     * @param showCode - boolean indicating whether to show code previews\n     * @param showMarkdown - boolean indicating whether to show Markdown previews\n     * @param showTags - boolean indicating whether to show tags\n     */\n    initializeOptions(numbering, numberingH1, includeOutput, syncCollapseState, showCode, showMarkdown, showTags) {\n        this._numbering = numbering;\n        this._numberingH1 = numberingH1;\n        this._includeOutput = includeOutput;\n        this._syncCollapseState = syncCollapseState;\n        this._showCode = showCode;\n        this._showMarkdown = showMarkdown;\n        this._showTags = showTags;\n        this._widget.update();\n    }\n}\n/**\n * Exports.\n */\nexport { OptionsManager };\n//# sourceMappingURL=options_manager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { NotebookActions } from '@jupyterlab/notebook';\nimport { ellipsesIcon } from '@jupyterlab/ui-components';\nimport { MARKDOWN_HEADING_COLLAPSED } from '@jupyterlab/cells';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\nimport { CodeComponent } from './codemirror';\n/**\n * Renders a notebook table of contents item.\n *\n * @private\n * @param options - generator options\n * @param tracker - notebook tracker\n * @param item - notebook heading\n * @param toc - current list of notebook headings\n * @returns rendered item\n */\nfunction render(options, tracker, item, toc = []) {\n    let jsx;\n    if (item.type === 'markdown' || item.type === 'header') {\n        let fontSizeClass = 'toc-level-size-default';\n        let numbering = item.numbering && options.numbering ? item.numbering : '';\n        let cellCollapseMetadata = options.syncCollapseState\n            ? MARKDOWN_HEADING_COLLAPSED\n            : 'toc-hr-collapsed';\n        if (item.type === 'header') {\n            fontSizeClass = 'toc-level-size-' + item.level;\n        }\n        if (item.html && (item.type === 'header' || options.showMarkdown)) {\n            jsx = (React.createElement(\"span\", { dangerouslySetInnerHTML: {\n                    __html: numbering +\n                        options.sanitizer.sanitize(item.html, sanitizerOptions)\n                }, className: item.type + '-cell toc-cell-item' }));\n            // Render the headers:\n            if (item.type === 'header') {\n                let button = (React.createElement(\"div\", { className: \"jp-Collapser p-Widget lm-Widget\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(tracker, cellCollapseMetadata, item);\n                    } },\n                    React.createElement(\"div\", { className: \"toc-Collapser-child\" })));\n                let collapsed;\n                if (item.cellRef.model.metadata.has(cellCollapseMetadata)) {\n                    collapsed = item.cellRef.model.metadata.get(cellCollapseMetadata);\n                }\n                let ellipseButton = collapsed ? (React.createElement(\"div\", { className: \"toc-Ellipses\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(tracker, cellCollapseMetadata, item);\n                    } },\n                    React.createElement(ellipsesIcon.react, null))) : (React.createElement(\"div\", null));\n                // Render the heading item:\n                jsx = (React.createElement(\"div\", { className: 'toc-entry-holder ' +\n                        fontSizeClass +\n                        (tracker.activeCell === item.cellRef\n                            ? ' toc-active-cell'\n                            : previousHeader(tracker, item, toc)\n                                ? ' toc-active-cell'\n                                : '') },\n                    button,\n                    jsx,\n                    ellipseButton));\n            }\n            return jsx;\n        }\n        if (item.type === 'header' || options.showMarkdown) {\n            // Render headers/markdown for plain text:\n            jsx = (React.createElement(\"span\", { className: item.type + '-cell toc-cell-item' }, numbering + item.text));\n            if (item.type === 'header') {\n                let button = (React.createElement(\"div\", { className: \"jp-Collapser p-Widget lm-Widget\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(tracker, cellCollapseMetadata, item);\n                    } },\n                    React.createElement(\"div\", { className: \"toc-Collapser-child\" })));\n                let collapsed;\n                if (item.cellRef.model.metadata.has(cellCollapseMetadata)) {\n                    collapsed = item.cellRef.model.metadata.get(cellCollapseMetadata);\n                }\n                let ellipseButton = collapsed ? (React.createElement(\"div\", { className: \"toc-Ellipses\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(tracker, cellCollapseMetadata, item);\n                    } },\n                    React.createElement(ellipsesIcon.react, null))) : (React.createElement(\"div\", null));\n                jsx = (React.createElement(\"div\", { className: 'toc-entry-holder ' +\n                        fontSizeClass +\n                        (tracker.activeCell === item.cellRef\n                            ? ' toc-active-cell'\n                            : previousHeader(tracker, item, toc)\n                                ? ' toc-active-cell'\n                                : '') },\n                    button,\n                    jsx,\n                    ellipseButton));\n            }\n            return jsx;\n        }\n        return null;\n    }\n    if (item.type === 'code' && options.showCode) {\n        // Render code cells:\n        return (React.createElement(\"div\", { className: \"toc-code-cell-div\" },\n            React.createElement(\"div\", { className: \"toc-code-cell-prompt\" }, item.prompt),\n            React.createElement(\"span\", { className: 'toc-code-span' },\n                React.createElement(CodeComponent, { sanitizer: options.sanitizer, heading: item }))));\n    }\n    return null;\n    /**\n     * Callback invoked upon encountering a \"click\" event.\n     *\n     * @private\n     * @param heading - notebook heading that was clicked\n     */\n    function onClick(tracker, cellCollapseMetadata, heading) {\n        let collapsed = false;\n        let syncCollapseState = options.syncCollapseState;\n        if (heading.cellRef.model.metadata.get(cellCollapseMetadata)) {\n            collapsed = heading.cellRef.model.metadata.get(cellCollapseMetadata);\n        }\n        if (heading) {\n            if (syncCollapseState) {\n                // if collapse state is synced, update state here\n                if (tracker.currentWidget) {\n                    NotebookActions.setHeadingCollapse(heading.cellRef, !collapsed, tracker.currentWidget.content);\n                }\n            }\n            else {\n                if (collapsed) {\n                    heading.cellRef.model.metadata.delete(cellCollapseMetadata);\n                }\n                else {\n                    heading.cellRef.model.metadata.set(cellCollapseMetadata, true);\n                }\n            }\n            options.updateAndCollapse({\n                heading: heading,\n                collapsedState: collapsed,\n                tocType: 'notebook'\n            });\n        }\n        else {\n            options.updateWidget();\n        }\n    }\n}\n/**\n * Used to find the nearest above heading to an active notebook cell\n *\n * @private\n * @param tracker - notebook tracker\n * @param item - notebook heading\n * @param toc - current list of notebook headings\n * @returns true if heading is nearest above a selected cell, otherwise false\n */\nfunction previousHeader(tracker, item, toc) {\n    if (item.index > -1 || (toc === null || toc === void 0 ? void 0 : toc.length)) {\n        let activeCellIndex = tracker.currentWidget.content.activeCellIndex;\n        let headerIndex = item.index;\n        // header index has to be less than the active cell index\n        if (headerIndex < activeCellIndex) {\n            let tocIndexOfNextHeader = toc.indexOf(item) + 1;\n            // return true if header is the last header\n            if (tocIndexOfNextHeader >= toc.length) {\n                return true;\n            }\n            // return true if the next header cells index is greater than the active cells index\n            let nextHeaderIndex = toc === null || toc === void 0 ? void 0 : toc[tocIndexOfNextHeader].index;\n            if (nextHeaderIndex > activeCellIndex) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * Exports.\n */\nexport { render };\n//# sourceMappingURL=render.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport * as React from 'react';\nimport { TagListComponent } from './tag_list';\n/**\n * Tag dropdown React component.\n *\n * @private\n */\nclass TagsToolComponent extends React.Component {\n    /**\n     * Returns a component.\n     *\n     * @param props - component properties\n     * @returns component\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Changes the dropdown selection state.\n         *\n         * @param newState - new state\n         * @param add - boolean indicating whether to add to selection\n         */\n        this.changeSelectionState = (newState, add) => {\n            let tags = this.state.selected;\n            if (add) {\n                tags.push(newState);\n                this.setState({ selected: tags });\n                this.filterTags(tags);\n            }\n            else {\n                let selected = [];\n                for (let i = 0; i < tags.length; i++) {\n                    if (tags[i] !== newState) {\n                        selected.push(tags[i]);\n                    }\n                }\n                this.setState({ selected: selected });\n                this.filterTags(selected);\n            }\n        };\n        /**\n         * De-selects all tags in the dropdown and clear filters in the ToC.\n         */\n        this.deselectAll = () => {\n            this.setState({ selected: [] });\n            this.props.options.updateWidget();\n        };\n        /**\n         * Select all the cells that contains all of the current tags and activates the first of those cells.\n         */\n        this.selectAllCellsWithCurrentTags = () => {\n            const tags = this.state.selected;\n            const panel = this.props.tracker.currentWidget;\n            const widgets = panel === null || panel === void 0 ? void 0 : panel.content.widgets;\n            panel === null || panel === void 0 ? void 0 : panel.content.deselectAll();\n            let changedActive = false;\n            widgets === null || widgets === void 0 ? void 0 : widgets.forEach((cell, ix) => {\n                const hasAllCurrentTags = tags.every(tag => this.containsTag(tag, cell));\n                if (hasAllCurrentTags) {\n                    if (!changedActive) {\n                        if (panel) {\n                            panel.content.activeCellIndex = ix;\n                        }\n                        changedActive = true;\n                    }\n                    panel === null || panel === void 0 ? void 0 : panel.content.select(cell);\n                }\n            });\n        };\n        /**\n         * Filters the ToC by according to selected tags.\n         *\n         * @param selected - selected tags\n         */\n        this.filterTags = (selected) => {\n            this.setState({ selected });\n            this.props.options.updateWidget();\n        };\n        /**\n         * Updates filters.\n         */\n        this.updateFilters = () => {\n            let tmp = [];\n            let idx = 0;\n            let update = false;\n            for (let i = 0; i < this.state.selected.length; i++) {\n                if (this.props.tags.indexOf(this.state.selected[i]) > -1) {\n                    tmp[idx] = this.state.selected[i];\n                    idx += 1;\n                }\n                else if (this.props.options.showTags === true) {\n                    update = true;\n                }\n            }\n            if (update) {\n                this.filterTags(tmp);\n                this.setState({ selected: tmp });\n            }\n        };\n        this.state = {\n            selected: this.props.inputFilter\n        };\n        const translator = this.props.translator || nullTranslator;\n        this._trans = translator.load('jupyterlab');\n    }\n    /**\n     * Returns a list of selected tags.\n     *\n     * @returns tag list\n     */\n    get filtered() {\n        return this.state.selected;\n    }\n    /**\n     * Checks whether a cell has a provided tag.\n     *\n     * @param tag - tag\n     * @param cell - cell reference\n     * @returns boolean indicating whether a cell has a provided tag\n     */\n    containsTag(tag, cell) {\n        if (cell === null) {\n            return false;\n        }\n        let tagList = cell.model.metadata.get('tags');\n        if (tagList) {\n            for (let i = 0; i < tagList.length; i++) {\n                if (tagList[i] === tag) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    /**\n     * Updates filters.\n     */\n    UNSAFE_componentWillUpdate() {\n        this.updateFilters();\n    }\n    /**\n     * Renders the interior of the tag dropdown.\n     *\n     * @returns rendered component\n     */\n    render() {\n        let jsx = (React.createElement(\"div\", { className: \"toc-no-tags-div\" }, this._trans.__('No Tags Available')));\n        let text;\n        if (this.state.selected.length === 0) {\n            text = (React.createElement(\"span\", { className: 'toc-filter-button-na' }, this._trans.__('Clear Filters')));\n        }\n        else if (this.state.selected.length === 1) {\n            text = (React.createElement(\"span\", { className: 'toc-filter-button', onClick: () => this.deselectAll() },\n                ' ',\n                \"Clear 1 Filter\",\n                ' '));\n        }\n        else {\n            text = (React.createElement(\"span\", { className: 'toc-filter-button', onClick: () => this.deselectAll() },\n                ' ',\n                \"Clear \",\n                this.state.selected.length,\n                \" Filters\",\n                ' '));\n        }\n        let command;\n        if (this.state.selected.length === 0) {\n            command = (React.createElement(\"span\", { className: 'toc-filter-button-na', role: \"text\", \"aria-label\": this._trans.__('Select All Cells With Current Tags'), title: this._trans.__('Select All Cells With Current Tags') }, this._trans.__('Select All Cells With Current Tags')));\n        }\n        else {\n            command = (React.createElement(\"span\", { className: 'toc-filter-button', role: \"button\", \"aria-label\": this._trans.__('Select All Cells With Current Tags'), title: this._trans.__('Select All Cells With Current Tags'), onClick: this.selectAllCellsWithCurrentTags, onKeyDown: this.selectAllCellsWithCurrentTags }, this._trans.__('Select All Cells With Current Tags')));\n        }\n        if (this.props.tags && this.props.tags.length > 0) {\n            jsx = (React.createElement(\"div\", { className: 'toc-tags-container' },\n                React.createElement(TagListComponent, { tags: this.props.tags, selectionStateHandler: this.changeSelectionState, selectedTags: this.state.selected }),\n                text,\n                command));\n        }\n        return jsx;\n    }\n}\n/**\n * Exports.\n */\nexport { TagsToolComponent };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * Abstract class defining a React component containing one tag label.\n *\n * @private\n */\nclass TagComponent extends React.Component {\n    /**\n     * Returns a React component.\n     *\n     * @param props - properties\n     * @returns component\n     */\n    constructor(props) {\n        super(props);\n    }\n    /**\n     * Renders a component.\n     *\n     * @returns rendered component\n     */\n    render() {\n        const tag = this.props.tag;\n        return (React.createElement(\"div\", null,\n            React.createElement(\"label\", { className: \"toc-tag-label\", key: new Date().toLocaleTimeString() }, tag)));\n    }\n}\n/**\n * Exports.\n */\nexport { TagComponent };\n//# sourceMappingURL=tag.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { TagComponent } from './tag';\n/**\n * Class for a React component that renders all tags in a list.\n *\n * @private\n */\nclass TagListComponent extends React.Component {\n    /**\n     * Returns a React component.\n     *\n     * @param props - properties\n     * @returns component\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Toggles whether a tag is selected when clicked.\n         *\n         * @param name - tag name\n         */\n        this.selectedTagWithName = (name) => {\n            if (this.props.selectedTags.indexOf(name) >= 0) {\n                this.props.selectionStateHandler(name, false);\n            }\n            else {\n                this.props.selectionStateHandler(name, true);\n            }\n        };\n        /**\n         * Renders a tag component for each tag within a list of tags.\n         *\n         * @param tags - list of tags\n         */\n        this.renderTagComponents = (tags) => {\n            const selectedTags = this.props.selectedTags;\n            const selectedTagWithName = this.selectedTagWithName;\n            return tags.map((tag, index) => {\n                const tagClass = selectedTags.indexOf(tag) >= 0\n                    ? 'toc-selected-tag toc-tag'\n                    : 'toc-unselected-tag toc-tag';\n                return (React.createElement(\"div\", { key: tag, className: tagClass, onClick: event => {\n                        selectedTagWithName(tag);\n                    }, tabIndex: 0 },\n                    React.createElement(TagComponent, { selectionStateHandler: this.props.selectionStateHandler, selectedTags: this.props.selectedTags, tag: tag })));\n            });\n        };\n        this.state = { selected: this.props.selectedTags };\n    }\n    /**\n     * Renders the list of tags in the ToC tags dropdown.\n     *\n     * @returns rendered list\n     */\n    render() {\n        let tags = this.props.tags;\n        let jsx = null;\n        if (tags) {\n            jsx = this.renderTagComponents(tags);\n        }\n        return React.createElement(\"div\", { className: \"toc-tag-holder\" }, jsx);\n    }\n}\n/**\n * Exports.\n */\nexport { TagListComponent };\n//# sourceMappingURL=tag_list.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { codeIcon, markdownIcon, numberingIcon, tagIcon } from '@jupyterlab/ui-components';\nimport * as React from 'react';\nimport { TagsToolComponent } from './tagstool';\n/**\n * Returns a component for rendering a notebook table of contents toolbar.\n *\n * @private\n * @param options - generator options\n * @param tracker - notebook tracker\n * @returns toolbar component\n */\nfunction toolbar(options, tracker) {\n    return class Toolbar extends React.Component {\n        /**\n         * Returns a component for rendering a notebook table of contents toolbar.\n         *\n         * @param props - toolbar properties\n         * @returns toolbar component\n         */\n        constructor(props) {\n            super(props);\n            this._trans = options.translator.load('jupyterlab');\n            this.tagTool = null;\n            this.state = {\n                showCode: true,\n                showMarkdown: false,\n                showTags: false,\n                numbering: false\n            };\n            if (tracker.currentWidget) {\n                // Read saved user settings in notebook meta data:\n                void tracker.currentWidget.context.ready.then(() => {\n                    if (tracker.currentWidget) {\n                        tracker.currentWidget.content.activeCellChanged.connect(() => {\n                            options.updateWidget();\n                        });\n                        const numbering = tracker.currentWidget.model.metadata.get('toc-autonumbering');\n                        const showCode = tracker.currentWidget.model.metadata.get('toc-showcode');\n                        const showMarkdown = tracker.currentWidget.model.metadata.get('toc-showmarkdowntxt');\n                        const showTags = tracker.currentWidget.model.metadata.get('toc-showtags');\n                        options.initializeOptions(numbering || options.numbering, options.numberingH1, options.includeOutput, options.syncCollapseState, showCode || options.showCode, showMarkdown || options.showMarkdown, showTags || options.showTags);\n                        this.setState({\n                            showCode: options.showCode,\n                            showMarkdown: options.showMarkdown,\n                            showTags: options.showTags,\n                            numbering: options.numbering\n                        });\n                        this.tags = [];\n                    }\n                });\n            }\n        }\n        /**\n         * Toggle whether to show code previews.\n         */\n        toggleCode() {\n            options.showCode = !options.showCode;\n            this.setState({ showCode: options.showCode });\n        }\n        /**\n         * Toggle whether to show Markdown previews.\n         */\n        toggleMarkdown() {\n            options.showMarkdown = !options.showMarkdown;\n            this.setState({ showMarkdown: options.showMarkdown });\n        }\n        /**\n         * Toggle whether to number headings.\n         */\n        toggleNumbering() {\n            options.numbering = !options.numbering;\n            this.setState({ numbering: options.numbering });\n        }\n        /**\n         * Toggle tag dropdown.\n         */\n        toggleTagDropdown() {\n            if (options.showTags && this.tagTool) {\n                options.storeTags = this.tagTool.state.selected;\n            }\n            options.showTags = !options.showTags;\n            this.setState({ showTags: options.showTags });\n        }\n        /**\n         * Loads all document tags.\n         */\n        loadTags() {\n            const notebook = tracker.currentWidget;\n            if (notebook) {\n                const cells = notebook.model.cells;\n                const tags = new Set();\n                this.tags = [];\n                for (let i = 0; i < cells.length; i++) {\n                    const cell = cells.get(i);\n                    const list = cell.metadata.get('tags');\n                    if (Array.isArray(list)) {\n                        list.forEach((tag) => tag && tags.add(tag));\n                    }\n                }\n                this.tags = Array.from(tags);\n            }\n        }\n        /**\n         * Renders a toolbar.\n         *\n         * @returns rendered toolbar\n         */\n        render() {\n            const codeToggleIcon = (React.createElement(\"div\", { onClick: event => this.toggleCode(), role: \"text\", \"aria-label\": this._trans.__('Toggle Code Cells'), title: this._trans.__('Toggle Code Cells'), className: this.state.showCode\n                    ? 'toc-toolbar-code-icon toc-toolbar-icon-selected'\n                    : 'toc-toolbar-code-icon toc-toolbar-icon' },\n                React.createElement(codeIcon.react, null)));\n            const markdownToggleIcon = (React.createElement(\"div\", { onClick: event => this.toggleMarkdown(), role: \"text\", \"aria-label\": this._trans.__('Toggle Markdown Text Cells'), title: this._trans.__('Toggle Markdown Text Cells'), className: this.state.showMarkdown\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(markdownIcon.react, null)));\n            const numberingToggleIcon = (React.createElement(\"div\", { onClick: event => this.toggleNumbering(), role: \"text\", \"aria-label\": this._trans.__('Toggle Auto-Numbering'), title: this._trans.__('Toggle Auto-Numbering'), className: this.state.numbering\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(numberingIcon.react, null)));\n            let tagDropdown = React.createElement(\"div\", null);\n            let tagToggleIcon = (React.createElement(\"div\", { role: \"text\", \"aria-label\": this._trans.__('Show Tags Menu'), title: this._trans.__('Show Tags Menu'), className: this.state.showTags\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(tagIcon.react, null)));\n            if (this.state.showTags) {\n                this.loadTags();\n                const tagTool = (React.createElement(TagsToolComponent, { tags: this.tags, tracker: tracker, options: options, inputFilter: options.storeTags, translator: options.translator, ref: tagTool => (this.tagTool = tagTool) }));\n                options.tagTool = this.tagTool;\n                tagDropdown = React.createElement(\"div\", { className: 'toc-tag-dropdown' },\n                    \" \",\n                    tagTool,\n                    \" \");\n            }\n            return (React.createElement(\"div\", null,\n                React.createElement(\"div\", { className: 'toc-toolbar' },\n                    codeToggleIcon,\n                    markdownToggleIcon,\n                    numberingToggleIcon,\n                    React.createElement(\"div\", { className: 'toc-tag-dropdown-button', onClick: event => this.toggleTagDropdown() }, tagToggleIcon)),\n                tagDropdown));\n        }\n    };\n}\n/**\n * Exports.\n */\nexport { toolbar };\n//# sourceMappingURL=toolbar_generator.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { render } from './render';\n/**\n * Generates a table of contents.\n *\n * @private\n * @param editor - editor widget\n * @returns a list of headings\n */\nfunction generate(editor) {\n    // Split the text into lines:\n    let lines = editor.content.model.value.text.split('\\n');\n    // Iterate over the lines to get the heading level and text for each line:\n    let headings = [];\n    let processingImports = false;\n    for (let i = 0; i < lines.length; i++) {\n        let line = lines[i].trim();\n        if (line.indexOf('def ') === 0) {\n            processingImports = false;\n            headings.push({\n                text: line.slice(0, -1),\n                level: 2,\n                onClick: onClick(i)\n            });\n        }\n        else if (line.indexOf('class ') === 0) {\n            processingImports = false;\n            headings.push({\n                text: line.slice(0, -1),\n                level: 1,\n                onClick: onClick(i)\n            });\n        }\n        else if (line.indexOf('import ') == 0 && !processingImports) {\n            processingImports = true;\n            headings.push({\n                text: line,\n                level: 2,\n                onClick: onClick(i)\n            });\n        }\n    }\n    return headings;\n    /**\n     * Returns a \"click\" handler.\n     *\n     * @private\n     * @param line - line number\n     * @returns click handler\n     */\n    function onClick(line) {\n        return () => {\n            editor.content.editor.setCursorPosition({\n                line: line,\n                column: 0\n            });\n        };\n    }\n}\n/**\n * Returns a boolean indicating whether this ToC generator is enabled.\n *\n * @private\n * @param editor - editor widget\n * @returns boolean indicating whether this ToC generator is enabled\n */\nfunction isEnabled(editor) {\n    let mime = editor.content.model.mimeType;\n    return mime === 'application/x-python-code' || mime === 'text/x-python';\n}\n/**\n * Returns a ToC generator for Python files.\n *\n * @private\n * @param tracker - file editor tracker\n * @returns ToC generator capable of parsing Python files\n */\nfunction createPythonGenerator(tracker) {\n    return {\n        tracker,\n        isEnabled: isEnabled,\n        itemRenderer: render,\n        generate: generate\n    };\n}\n/**\n * Exports.\n */\nexport { createPythonGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * Renders a Python table of contents item.\n *\n * @private\n * @param item - numbered heading\n * @returns rendered item\n */\nfunction render(item) {\n    let fontSizeClass = 'toc-level-size-' + item.level;\n    return (React.createElement(\"div\", { className: fontSizeClass + ' toc-entry-holder' },\n        React.createElement(\"div\", { className: \"jp-Collapser p-Widget lm-Widget\" },\n            React.createElement(\"div\", { className: \"toc-Collapser-child\" })),\n        React.createElement(\"span\", { className: \"header-cell toc-cell-item\" },\n            \" \",\n            item.text,\n            \" \")));\n}\n/**\n * Exports.\n */\nexport { render };\n//# sourceMappingURL=render.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module toc\n */\n// Note: keep in alphabetical order...\nexport * from './generators';\nexport * from './registry';\nexport * from './toc';\nexport * from './toc_item';\nexport * from './utils/headings';\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/* tslint:disable */\n/**\n * Table of contents registry token.\n */\nexport const ITableOfContentsRegistry = new Token('@jupyterlab/toc:ITableOfContentsRegistry');\n/* tslint:enable */\n/**\n * Class for registering widgets for which we can generate a table of contents.\n */\nexport class TableOfContentsRegistry {\n    constructor() {\n        this._collapseChanged = new Signal(this);\n        this._generators = [];\n    }\n    /**\n     * Finds a table of contents generator for a widget.\n     *\n     * ## Notes\n     *\n     * -   If unable to find a table of contents generator, the method return `undefined`.\n     *\n     * @param widget - widget\n     * @returns table of contents generator\n     */\n    find(widget) {\n        for (let i = 0; i < this._generators.length; i++) {\n            const gen = this._generators[i];\n            if (gen.tracker.has(widget)) {\n                if (gen.isEnabled && !gen.isEnabled(widget)) {\n                    continue;\n                }\n                return gen;\n            }\n        }\n    }\n    /**\n     * Adds a table of contents generator to the registry.\n     *\n     * @param generator - table of contents generator\n     */\n    add(generator) {\n        if (generator.collapseChanged) {\n            // If there is a collapseChanged for a given generator, propagate the arguments through the registry's signal\n            generator.collapseChanged.connect((sender, args) => {\n                this._collapseChanged.emit(args);\n            });\n        }\n        this._generators.push(generator);\n    }\n    get collapseChanged() {\n        return this._collapseChanged;\n    }\n}\n/**\n * Static registry methods.\n */\n(function (TableOfContentsRegistry) {\n    /**\n     * Abstract class for managing options affecting how a table of contents is generated for a particular widget type.\n     */\n    class IOptionsManager {\n    }\n    TableOfContentsRegistry.IOptionsManager = IOptionsManager;\n})(TableOfContentsRegistry || (TableOfContentsRegistry = {}));\n//# sourceMappingURL=registry.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ActivityMonitor, PathExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { TOCTree } from './toc_tree';\nimport { Signal } from '@lumino/signaling';\n/**\n * Timeout for throttling ToC rendering.\n *\n * @private\n */\nconst RENDER_TIMEOUT = 1000;\n/**\n * Widget for hosting a notebook table of contents.\n */\nexport class TableOfContents extends Widget {\n    /**\n     * Returns a new table of contents.\n     *\n     * @param options - options\n     * @returns widget\n     */\n    constructor(options) {\n        super();\n        this.translator = options.translator || nullTranslator;\n        this._docmanager = options.docmanager;\n        this._rendermime = options.rendermime;\n        this._trans = this.translator.load('jupyterlab');\n        this._headings = [];\n        this._entryClicked = new Signal(this);\n        this._entryClicked.connect((toc, item) => {\n            this.activeEntry = item.props.heading;\n        });\n        if (this._current) {\n            this._headings = this._current.generator.generate(this._current.widget, this._current.generator.options);\n        }\n    }\n    /**\n     * Current widget-generator tuple for the ToC.\n     */\n    get current() {\n        return this._current;\n    }\n    set current(value) {\n        // If they are the same as previously, do nothing...\n        if (value &&\n            this._current &&\n            this._current.widget === value.widget &&\n            this._current.generator === value.generator) {\n            return;\n        }\n        this._current = value;\n        if (this.generator) {\n            if (this.generator.toolbarGenerator) {\n                this._toolbar = this.generator.toolbarGenerator();\n            }\n            else {\n                this._toolbar = null;\n            }\n        }\n        // Dispose an old activity monitor if one existed...\n        if (this._monitor) {\n            this._monitor.dispose();\n            this._monitor = null;\n        }\n        // If we are wiping the ToC, update and return...\n        if (!this._current) {\n            this.update();\n            return;\n        }\n        // Find the document model associated with the widget:\n        const context = this._docmanager.contextForWidget(this._current.widget);\n        if (!context || !context.model) {\n            throw Error('Could not find a context for the Table of Contents');\n        }\n        // Throttle the rendering rate of the table of contents:\n        this._monitor = new ActivityMonitor({\n            signal: context.model.contentChanged,\n            timeout: RENDER_TIMEOUT\n        });\n        this._monitor.activityStopped.connect(this.update, this);\n        this.update();\n    }\n    /**\n     * Current table of contents generator.\n     *\n     * @returns table of contents generator\n     */\n    get generator() {\n        if (this._current) {\n            return this._current.generator;\n        }\n        return null;\n    }\n    /**\n     * Callback invoked upon an update request.\n     *\n     * @param msg - message\n     */\n    onUpdateRequest(msg) {\n        let title = this._trans.__('Table of Contents');\n        if (this._current) {\n            this._headings = this._current.generator.generate(this._current.widget, this._current.generator.options);\n            const context = this._docmanager.contextForWidget(this._current.widget);\n            if (context) {\n                title = PathExt.basename(context.localPath);\n            }\n        }\n        let itemRenderer = (item) => {\n            return React.createElement(\"span\", null, item.text);\n        };\n        if (this._current && this._current.generator.itemRenderer) {\n            itemRenderer = this._current.generator.itemRenderer;\n        }\n        let jsx = (React.createElement(\"div\", { className: \"jp-TableOfContents\" },\n            React.createElement(\"div\", { className: \"jp-stack-panel-header\" }, title)));\n        if (this._current && this._current.generator) {\n            jsx = (React.createElement(TOCTree, { title: title, toc: this._headings, entryClicked: this._entryClicked, generator: this.generator, itemRenderer: itemRenderer, toolbar: this._toolbar }));\n        }\n        ReactDOM.render(jsx, this.node, () => {\n            if (this._current &&\n                this._current.generator.usesLatex === true &&\n                this._rendermime.latexTypesetter) {\n                this._rendermime.latexTypesetter.typeset(this.node);\n            }\n        });\n    }\n    /**\n     * Current active entry.\n     *\n     * @returns table of contents active entry\n     */\n    get activeEntry() {\n        return this._activeEntry;\n    }\n    set activeEntry(value) {\n        this._activeEntry = value;\n    }\n    /**\n     * List of headings.\n     *\n     * @returns table of contents list of headings\n     */\n    get headings() {\n        return this._headings;\n    }\n    /**\n     * Callback invoked to re-render after showing a table of contents.\n     *\n     * @param msg - message\n     */\n    onAfterShow(msg) {\n        this.update();\n    }\n}\n//# sourceMappingURL=toc.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * React component for a table of contents entry.\n *\n * @private\n */\nclass TOCItem extends React.Component {\n    /**\n     * Renders a table of contents entry.\n     *\n     * @returns rendered entry\n     */\n    render() {\n        const { heading, toc } = this.props;\n        // Create an onClick handler for the TOC item\n        // that scrolls the anchor into view.\n        const onClick = (event) => {\n            var _a;\n            event.preventDefault();\n            event.stopPropagation();\n            (_a = this.props.entryClicked) === null || _a === void 0 ? void 0 : _a.emit(this);\n            heading.onClick();\n        };\n        let content = this.props.itemRenderer(heading, toc);\n        if (!content) {\n            return null;\n        }\n        return (React.createElement(\"li\", { className: \"jp-tocItem\", onClick: onClick, onContextMenu: (event) => {\n                var _a;\n                (_a = this.props.entryClicked) === null || _a === void 0 ? void 0 : _a.emit(this);\n                heading.onClick();\n            } }, content));\n    }\n}\n/**\n * Exports.\n */\nexport { TOCItem };\n//# sourceMappingURL=toc_item.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { TOCItem } from './toc_item';\n/**\n * React component for a table of contents tree.\n *\n * @private\n */\nclass TOCTree extends React.Component {\n    /**\n     * Renders a table of contents tree.\n     */\n    render() {\n        const Toolbar = this.props.toolbar;\n        // Map the heading objects onto a list of JSX elements...\n        let i = 0;\n        let list = this.props.toc.map(el => {\n            return (React.createElement(TOCItem, { heading: el, toc: this.props.toc, entryClicked: this.props.entryClicked, itemRenderer: this.props.itemRenderer, key: `${el.text}-${el.level}-${i++}` }));\n        });\n        return (React.createElement(\"div\", { className: \"jp-TableOfContents\" },\n            React.createElement(\"div\", { className: \"jp-stack-panel-header\" }, this.props.title),\n            Toolbar && React.createElement(Toolbar, null),\n            React.createElement(\"ul\", { className: \"jp-TableOfContents-content\" }, list)));\n    }\n}\n/**\n * Exports.\n */\nexport { TOCTree };\n//# sourceMappingURL=toc_tree.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n// Maximum heading level:\nconst MAX_HEADING_LEVEL = 6;\n/**\n * Updates numbering dictionary levels.\n *\n * ## Notes\n *\n * -   Mutates a provided dictionary.\n *\n * @private\n * @param dict - numbering dictionary\n * @param level - current level\n * @returns input dictionary\n */\nfunction update(dict, level) {\n    for (let l = level + 1; l <= MAX_HEADING_LEVEL; l++) {\n        if (dict[l] !== void 0) {\n            dict[l] = void 0;\n        }\n    }\n    if (dict[level] === void 0) {\n        dict[level] = 1;\n    }\n    else {\n        dict[level] += 1;\n    }\n    return dict;\n}\n/**\n * Generate the current numbering based on a provided numbering dictionary and the current level.\n *\n * @private\n * @param dict - numbering dictionary\n * @param level - current level\n * @returns numbering\n */\nfunction generateNumbering(dict, level) {\n    if (dict === null) {\n        return;\n    }\n    let numbering = '';\n    dict = update(dict, level);\n    if (level >= 1) {\n        for (let j = 1; j <= level; j++) {\n            numbering += (dict[j] === void 0 ? '0' : dict[j]) + '.';\n        }\n        numbering += ' ';\n    }\n    return numbering;\n}\n/**\n * Exports.\n */\nexport { generateNumbering };\n//# sourceMappingURL=generate_numbering.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CodeCell } from '@jupyterlab/cells';\n/**\n * Tests whether a heading is a notebook heading.\n *\n * @param heading - heading to test\n * @returns boolean indicating whether a heading is a notebook heading\n */\nconst isNotebookHeading = (heading) => {\n    return heading.type !== undefined && heading.cellRef !== undefined;\n};\n/**\n * Runs runnable code cells.\n *\n * @private\n * @param headings - list of headings\n * @param heading - heading\n */\nconst runNestedCodeCells = (headings, heading) => {\n    var _a;\n    let h;\n    let i;\n    if (!isNotebookHeading(heading)) {\n        return;\n    }\n    let runCode = [];\n    // Find the heading in the list of headings...\n    i = headings.indexOf(heading);\n    // Check if the current heading is a \"code\" heading...\n    h = heading;\n    if (h.type === 'code') {\n        runCode.push(h);\n    }\n    else {\n        // Check for nested code headings...\n        const level = heading.level;\n        for (i = i + 1; i < headings.length; i++) {\n            h = headings[i];\n            if (h.level <= level) {\n                break;\n            }\n            if (h.type === 'code') {\n                runCode.push(h);\n            }\n        }\n    }\n    // Run each of the associated code cells...\n    for (i = 0; i < runCode.length; i++) {\n        if (runCode[i].cellRef) {\n            const cell = runCode[i].cellRef;\n            const panel = (_a = cell.parent) === null || _a === void 0 ? void 0 : _a.parent;\n            if (panel) {\n                void CodeCell.execute(cell, panel.sessionContext);\n            }\n        }\n    }\n};\nexport { runNestedCodeCells };\n//# sourceMappingURL=headings.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns whether a MIME type corresponds to either HTML or virtual DOM.\n *\n * @private\n * @param mime - MIME type string\n * @returns boolean indicating whether a provided MIME type corresponds to either HTML or virtual DOM\n *\n * @example\n * const bool = isDOM('text/html');\n * // returns true\n *\n * @example\n * const bool = isDOM('text/plain');\n * // returns false\n */\nfunction isDOM(mime) {\n    return mime === 'application/vdom.v1+json' || mime === 'text/html';\n}\n/**\n * Exports.\n */\nexport { isDOM };\n//# sourceMappingURL=is_dom.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns whether a MIME type corresponds to a Markdown flavor.\n *\n * @private\n * @param mime - MIME type string\n * @returns boolean indicating whether a provided MIME type corresponds to a Markdown flavor\n *\n * @example\n * const bool = isMarkdown('text/markdown');\n * // returns true\n *\n * @example\n * const bool = isMarkdown('text/plain');\n * // returns false\n */\nfunction isMarkdown(mime) {\n    return (mime === 'text/x-ipythongfm' ||\n        mime === 'text/x-markdown' ||\n        mime === 'text/x-gfm' ||\n        mime === 'text/markdown');\n}\n/**\n * Exports.\n */\nexport { isMarkdown };\n//# sourceMappingURL=is_markdown.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Parses a heading, if one exists, from a provided string.\n *\n * ## Notes\n *\n * -   Heading examples:\n *\n *     -   Markdown heading:\n *\n *         ```\n *         # Foo\n *         ```\n *\n *     -   Markdown heading (alternative style):\n *\n *         ```\n *         Foo\n *         ===\n *         ```\n *\n *         ```\n *         Foo\n *         ---\n *         ```\n *\n *     -   HTML heading:\n *\n *         ```\n *         <h3>Foo</h3>\n *         ```\n *\n * @private\n * @param str - input text\n * @returns heading info\n *\n * @example\n * const out = parseHeading('### Foo\\n');\n * // returns {'text': 'Foo', 'level': 3, 'type': 'markdown'}\n *\n * @example\n * const out = parseHeading('Foo\\n===\\n');\n * // returns {'text': 'Foo', 'level': 1, 'type': 'markdown-alt'}\n *\n * @example\n * const out = parseHeading('<h4>Foo</h4>\\n');\n * // returns {'text': 'Foo', 'level': 4, 'type': 'html'}\n *\n * @example\n * const out = parseHeading('Foo');\n * // returns null\n */\nfunction parseHeading(str) {\n    const lines = str.split('\\n');\n    // Case: Markdown heading\n    let match = lines[0].match(/^([#]{1,6}) (.*)/);\n    if (match) {\n        return {\n            text: match[2].replace(/\\[(.+)\\]\\(.+\\)/g, '$1'),\n            level: match[1].length,\n            type: 'markdown'\n        };\n    }\n    // Case: Markdown heading (alternative style)\n    if (lines.length > 1) {\n        match = lines[1].match(/^ {0,3}([=]{2,}|[-]{2,})\\s*$/);\n        if (match) {\n            return {\n                text: lines[0].replace(/\\[(.+)\\]\\(.+\\)/g, '$1'),\n                level: match[1][0] === '=' ? 1 : 2,\n                type: 'markdown-alt'\n            };\n        }\n    }\n    // Case: HTML heading (WARNING: this is not particularly robust, as HTML headings can span multiple lines)\n    match = lines[0].match(/<h([1-6]).*>(.*)<\\/h\\1>/i);\n    if (match) {\n        return {\n            text: match[2],\n            level: parseInt(match[1], 10),\n            type: 'html'\n        };\n    }\n    return null;\n}\n/**\n * Exports.\n */\nexport { parseHeading };\n//# sourceMappingURL=parse_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Allowed HTML tags and associated attributes for ToC entries when sanitizing HTML headings.\n *\n * ## Notes\n *\n * -   We specifically disallow anchor tags, since we are adding our own.\n *\n * @private\n */\nconst sanitizerOptions = {\n    allowedTags: [\n        'p',\n        'blockquote',\n        'b',\n        'i',\n        'strong',\n        'em',\n        'strike',\n        'code',\n        'br',\n        'div',\n        'span',\n        'pre',\n        'del'\n    ],\n    allowedAttributes: {\n        // Allow \"class\" attribute for <code> tags.\n        code: ['class'],\n        // Allow \"class\" attribute for <span> tags.\n        span: ['class'],\n        // Allow \"class\" attribute for <div> tags.\n        div: ['class'],\n        // Allow \"class\" attribute for <p> tags.\n        p: ['class'],\n        // Allow \"class\" attribute for <pre> tags.\n        pre: ['class']\n    }\n};\n/**\n * Exports.\n */\nexport { sanitizerOptions };\n//# sourceMappingURL=sanitizer_options.js.map"],"sourceRoot":""}