{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/celltags/lib/addwidget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/celltags/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/celltags/lib/tool.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/celltags/lib/widget.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAyD;AACL;AACX;AACzC;AACA;AACA;AACO,wBAAwB,mDAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mEAAc;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sEAAeqC;;;;;;;;;;;;;;;;;;;;ACxJA;AACA;AACA;AACA;AACA;AACA;AAC4B;AACL;AACE;AACzB,iC;;;;;;;;;;;;;;;;;;;;;;;;;ACTqD;AACI;AACd;AACG;AACN;AACH;AACrC;AACA;AACA;AACO,sBAAsB,oEAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mEAAc;AACtD;AACA;AACA,0BAA0B,wDAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iDAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yDAAM;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,6CAA6C,8CAAS;AACtD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAM;AACrB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;;;;;;;;ACnNsD;AACb;AACzC;AACA;AACA;AACO,wBAAwB,mDAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wEAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC","file":"vendors-node_modules_jupyterlab_celltags_lib_index_js.02bca8ccd9ffbc6fb44b.js","sourcesContent":["import { nullTranslator } from '@jupyterlab/translation';\nimport { addIcon } from '@jupyterlab/ui-components';\nimport { Widget } from '@lumino/widgets';\n/**\n * A widget which hosts a cell tags area.\n */\nexport class AddWidget extends Widget {\n    /**\n     * Construct a new tag widget.\n     */\n    constructor(translator) {\n        super();\n        this.parent = null;\n        this.input = document.createElement('input');\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.addClass('tag');\n        this.editing = false;\n        this.buildTag();\n    }\n    /**\n     * Create input box with icon and attach to this.node.\n     */\n    buildTag() {\n        const text = this.input || document.createElement('input');\n        text.value = this._trans.__('Add Tag');\n        text.contentEditable = 'true';\n        text.className = 'add-tag';\n        text.style.width = '49px';\n        this.input = text;\n        const tag = document.createElement('div');\n        tag.className = 'tag-holder';\n        tag.appendChild(text);\n        const iconContainer = addIcon.element({\n            tag: 'span',\n            elementPosition: 'center',\n            height: '18px',\n            width: '18px',\n            marginLeft: '3px',\n            marginRight: '-5px'\n        });\n        this.addClass('unapplied-tag');\n        tag.appendChild(iconContainer);\n        this.node.appendChild(tag);\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach() {\n        this.node.addEventListener('mousedown', this);\n        this.input.addEventListener('keydown', this);\n        this.input.addEventListener('focus', this);\n        this.input.addEventListener('blur', this);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach() {\n        this.node.removeEventListener('mousedown', this);\n        this.input.removeEventListener('keydown', this);\n        this.input.removeEventListener('focus', this);\n        this.input.removeEventListener('blur', this);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMouseDown(event);\n                break;\n            case 'keydown':\n                this._evtKeyDown(event);\n                break;\n            case 'blur':\n                this._evtBlur();\n                break;\n            case 'focus':\n                this._evtFocus();\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle the `'mousedown'` event for the input box.\n     *\n     * @param event - The DOM event sent to the widget\n     */\n    _evtMouseDown(event) {\n        if (!this.editing) {\n            this.editing = true;\n            this.input.value = '';\n            this.input.focus();\n        }\n        else if (event.target !== this.input) {\n            if (this.input.value !== '') {\n                const value = this.input.value;\n                this.parent.addTag(value);\n                this.input.blur();\n                this._evtBlur();\n            }\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `'focus'` event for the input box.\n     */\n    _evtFocus() {\n        if (!this.editing) {\n            this.input.blur();\n        }\n    }\n    /**\n     * Handle the `'keydown'` event for the input box.\n     *\n     * @param event - The DOM event sent to the widget\n     */\n    _evtKeyDown(event) {\n        const tmp = document.createElement('span');\n        tmp.className = 'add-tag';\n        tmp.innerHTML = this.input.value;\n        // set width to the pixel length of the text\n        document.body.appendChild(tmp);\n        this.input.style.width = tmp.getBoundingClientRect().width + 8 + 'px';\n        document.body.removeChild(tmp);\n        // if they hit Enter, add the tag and reset state\n        if (event.keyCode === 13) {\n            const value = this.input.value;\n            this.parent.addTag(value);\n            this.input.blur();\n            this._evtBlur();\n        }\n    }\n    /**\n     * Handle the `'focusout'` event for the input box.\n     */\n    _evtBlur() {\n        if (this.editing) {\n            this.editing = false;\n            this.input.value = this._trans.__('Add Tag');\n            this.input.style.width = '49px';\n        }\n    }\n}\n//# sourceMappingURL=addwidget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module celltags\n */\nexport * from './addwidget';\nexport * from './tool';\nexport * from './widget';\n//# sourceMappingURL=index.js.map","import { NotebookTools } from '@jupyterlab/notebook';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { reduce } from '@lumino/algorithm';\nimport { PanelLayout } from '@lumino/widgets';\nimport { AddWidget } from './addwidget';\nimport { TagWidget } from './widget';\n/**\n * A Tool for tag operations.\n */\nexport class TagTool extends NotebookTools.Tool {\n    /**\n     * Construct a new tag Tool.\n     *\n     * @param tracker - The notebook tracker.\n     */\n    constructor(tracker, app, translator) {\n        super();\n        this.tagList = [];\n        this.label = false;\n        app;\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.tracker = tracker;\n        this.layout = new PanelLayout();\n        this.createTagInput();\n        this.addClass('jp-TagTool');\n    }\n    /**\n     * Add an AddWidget input box to the layout.\n     */\n    createTagInput() {\n        const layout = this.layout;\n        const input = new AddWidget(this.translator);\n        input.id = 'add-tag';\n        layout.insertWidget(0, input);\n    }\n    /**\n     * Check whether a tag is applied to the current active cell\n     *\n     * @param name - The name of the tag.\n     *\n     * @returns A boolean representing whether it is applied.\n     */\n    checkApplied(name) {\n        var _a;\n        const activeCell = (_a = this.tracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (activeCell) {\n            const tags = activeCell.model.metadata.get('tags');\n            if (tags) {\n                return tags.includes(name);\n            }\n        }\n        return false;\n    }\n    /**\n     * Add a tag to the current active cell.\n     *\n     * @param name - The name of the tag.\n     */\n    addTag(name) {\n        var _a, _b;\n        const cell = (_a = this.tracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (cell) {\n            const oldTags = [\n                ...((_b = cell.model.metadata.get('tags')) !== null && _b !== void 0 ? _b : [])\n            ];\n            let tagsToAdd = name.split(/[,\\s]+/);\n            tagsToAdd = tagsToAdd.filter(tag => tag !== '' && !oldTags.includes(tag));\n            cell.model.metadata.set('tags', oldTags.concat(tagsToAdd));\n            this.refreshTags();\n            this.loadActiveTags();\n        }\n    }\n    /**\n     * Remove a tag from the current active cell.\n     *\n     * @param name - The name of the tag.\n     */\n    removeTag(name) {\n        var _a, _b;\n        const cell = (_a = this.tracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (cell) {\n            const oldTags = [\n                ...((_b = cell.model.metadata.get('tags')) !== null && _b !== void 0 ? _b : [])\n            ];\n            let tags = oldTags.filter(tag => tag !== name);\n            cell.model.metadata.set('tags', tags);\n            if (tags.length === 0) {\n                cell.model.metadata.delete('tags');\n            }\n            this.refreshTags();\n            this.loadActiveTags();\n        }\n    }\n    /**\n     * Update each tag widget to represent whether it is applied to the current\n     * active cell.\n     */\n    loadActiveTags() {\n        const layout = this.layout;\n        for (const widget of layout.widgets) {\n            widget.update();\n        }\n    }\n    /**\n     * Pull from cell metadata all the tags used in the notebook and update the\n     * stored tag list.\n     */\n    pullTags() {\n        var _a, _b, _c;\n        const notebook = (_a = this.tracker) === null || _a === void 0 ? void 0 : _a.currentWidget;\n        const cells = (_c = (_b = notebook === null || notebook === void 0 ? void 0 : notebook.model) === null || _b === void 0 ? void 0 : _b.cells) !== null && _c !== void 0 ? _c : [];\n        const allTags = reduce(cells, (allTags, cell) => {\n            var _a;\n            const tags = (_a = cell.metadata.get('tags')) !== null && _a !== void 0 ? _a : [];\n            return [...allTags, ...tags];\n        }, []);\n        this.tagList = [...new Set(allTags)].filter(tag => tag !== '');\n    }\n    /**\n     * Pull the most recent list of tags and update the tag widgets - dispose if\n     * the tag no longer exists, and create new widgets for new tags.\n     */\n    refreshTags() {\n        this.pullTags();\n        const layout = this.layout;\n        const tagWidgets = layout.widgets.filter(w => w.id !== 'add-tag');\n        tagWidgets.forEach(widget => {\n            if (!this.tagList.includes(widget.name)) {\n                widget.dispose();\n            }\n        });\n        const tagWidgetNames = tagWidgets.map(w => w.name);\n        this.tagList.forEach(tag => {\n            if (!tagWidgetNames.includes(tag)) {\n                const idx = layout.widgets.length - 1;\n                layout.insertWidget(idx, new TagWidget(tag));\n            }\n        });\n    }\n    /**\n     * Validate the 'tags' of cell metadata, ensuring it is a list of strings and\n     * that each string doesn't include spaces.\n     */\n    validateTags(cell, tags) {\n        tags = tags.filter(tag => typeof tag === 'string');\n        tags = reduce(tags, (allTags, tag) => {\n            return [...allTags, ...tag.split(/[,\\s]+/)];\n        }, []);\n        const validTags = [...new Set(tags)].filter(tag => tag !== '');\n        cell.model.metadata.set('tags', validTags);\n        this.refreshTags();\n        this.loadActiveTags();\n    }\n    /**\n     * Handle a change to the active cell.\n     */\n    onActiveCellChanged() {\n        this.loadActiveTags();\n    }\n    /**\n     * Get all tags once available.\n     */\n    onAfterShow() {\n        this.refreshTags();\n        this.loadActiveTags();\n    }\n    /**\n     * Upon attach, add label if it doesn't already exist and listen for changes\n     * from the notebook tracker.\n     */\n    onAfterAttach() {\n        if (!this.label) {\n            const label = document.createElement('label');\n            label.textContent = this._trans.__('Cell Tags');\n            label.className = 'tag-label';\n            this.parent.node.insertBefore(label, this.node);\n            this.label = true;\n        }\n        if (this.tracker.currentWidget) {\n            void this.tracker.currentWidget.context.ready.then(() => {\n                this.refreshTags();\n                this.loadActiveTags();\n            });\n            this.tracker.currentWidget.model.cells.changed.connect(() => {\n                this.refreshTags();\n                this.loadActiveTags();\n            });\n        }\n        this.tracker.currentChanged.connect(() => {\n            this.refreshTags();\n            this.loadActiveTags();\n        });\n    }\n    /**\n     * Handle a change to active cell metadata.\n     */\n    onActiveCellMetadataChanged() {\n        const tags = this.tracker.activeCell.model.metadata.get('tags');\n        let taglist = [];\n        if (tags) {\n            if (typeof tags === 'string') {\n                taglist.push(tags);\n            }\n            else {\n                taglist = tags;\n            }\n        }\n        this.validateTags(this.tracker.activeCell, taglist);\n    }\n}\n//# sourceMappingURL=tool.js.map","import { checkIcon } from '@jupyterlab/ui-components';\nimport { Widget } from '@lumino/widgets';\n/**\n * A widget which hosts a cell tags area.\n */\nexport class TagWidget extends Widget {\n    /**\n     * Construct a new tag widget.\n     */\n    constructor(name) {\n        super();\n        this.parent = null;\n        this.applied = true;\n        this.name = name;\n        this.addClass('tag');\n        this.buildTag();\n    }\n    /**\n     * Create tag div with icon and attach to this.node.\n     */\n    buildTag() {\n        const text = document.createElement('span');\n        text.textContent = this.name;\n        text.style.textOverflow = 'ellipsis';\n        const tag = document.createElement('div');\n        tag.className = 'tag-holder';\n        tag.appendChild(text);\n        const iconContainer = checkIcon.element({\n            tag: 'span',\n            elementPosition: 'center',\n            height: '18px',\n            width: '18px',\n            marginLeft: '5px',\n            marginRight: '-3px'\n        });\n        if (this.applied) {\n            this.addClass('applied-tag');\n        }\n        else {\n            this.addClass('unapplied-tag');\n            iconContainer.style.display = 'none';\n        }\n        tag.appendChild(iconContainer);\n        this.node.appendChild(tag);\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach() {\n        this.node.addEventListener('mousedown', this);\n        this.node.addEventListener('mouseover', this);\n        this.node.addEventListener('mouseout', this);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach() {\n        this.node.removeEventListener('mousedown', this);\n        this.node.removeEventListener('mouseover', this);\n        this.node.removeEventListener('mouseout', this);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtClick();\n                break;\n            case 'mouseover':\n                this._evtMouseOver();\n                break;\n            case 'mouseout':\n                this._evtMouseOut();\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `update-request` messages. Check if applied to current active cell.\n     */\n    onUpdateRequest() {\n        var _a;\n        const applied = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.checkApplied(this.name);\n        if (applied !== this.applied) {\n            this.toggleApplied();\n        }\n    }\n    /**\n     * Update styling to reflect whether tag is applied to current active cell.\n     */\n    toggleApplied() {\n        var _a, _b;\n        if (this.applied) {\n            this.removeClass('applied-tag');\n            ((_a = this.node.firstChild) === null || _a === void 0 ? void 0 : _a.lastChild).style.display =\n                'none';\n            this.addClass('unapplied-tag');\n        }\n        else {\n            this.removeClass('unapplied-tag');\n            ((_b = this.node.firstChild) === null || _b === void 0 ? void 0 : _b.lastChild).style.display =\n                'inline-block';\n            this.addClass('applied-tag');\n        }\n        this.applied = !this.applied;\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick() {\n        var _a, _b;\n        if (this.applied) {\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.removeTag(this.name);\n        }\n        else {\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.addTag(this.name);\n        }\n        this.toggleApplied();\n    }\n    /**\n     * Handle the `'mouseover'` event for the widget.\n     */\n    _evtMouseOver() {\n        this.node.classList.add('tag-hover');\n    }\n    /**\n     * Handle the `'mouseout'` event for the widget.\n     */\n    _evtMouseOut() {\n        this.node.classList.remove('tag-hover');\n    }\n}\n//# sourceMappingURL=widget.js.map"],"sourceRoot":""}