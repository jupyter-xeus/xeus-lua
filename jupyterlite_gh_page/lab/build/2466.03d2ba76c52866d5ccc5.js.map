{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor-extension/lib/index.js"],"names":["CommandIDs","open","revert","save","plugin","id","requires","ILayoutRestorer","ISettingRegistry","IEditorServices","IStateDB","IRenderMimeRegistry","ILabStatus","ITranslator","optional","ICommandPalette","autoStart","provides","ISettingEditorTracker","activate","app","restorer","registry","editorServices","state","rendermime","status","translator","palette","trans","load","commands","shell","namespace","editorFactory","factoryService","newInlineEditor","tracker","WidgetTracker","editor","restore","command","args","widget","name","addCommand","execute","currentWidget","activateById","key","when","restored","SettingEditor","disposable","commandsChanged","connect","sender","forEach","notifyCommandChanged","canSaveRaw","setDirty","dispose","disposed","title","icon","settingsIcon","label","__","main","MainAreaWidget","content","add","addItem","category","_a","undoIcon","isEnabled","_b","canRevertRaw","saveIcon"],"mappings":"0KAoBIA,E,kGACJ,SAAWA,GACPA,EAAWC,KAAO,qBAClBD,EAAWE,OAAS,uBACpBF,EAAWG,KAAO,qBAHtB,CAIGH,IAAeA,EAAa,KAI/B,MAAMI,EAAS,CACXC,GAAI,6CACJC,SAAU,CACN,EAAAC,gBACA,EAAAC,iBACA,EAAAC,gBACA,EAAAC,SACA,EAAAC,oBACA,EAAAC,WACA,EAAAC,aAEJC,SAAU,CAAC,EAAAC,iBACXC,WAAW,EACXC,SAAU,EAAAC,sBACVC,SAKJ,SAAkBC,EAAKC,EAAUC,EAAUC,EAAgBC,EAAOC,EAAYC,EAAQC,EAAYC,GAC9F,MAAMC,EAAQF,EAAWG,KAAK,eACxB,SAAEC,EAAQ,MAAEC,GAAUZ,EACtBa,EAAY,iBAEZC,EADiBX,EAAeY,eACDC,gBAC/BC,EAAU,IAAI,EAAAC,cAAc,CAC9BL,cAEJ,IAAIM,EAkFJ,OAhFKlB,EAASmB,QAAQH,EAAS,CAC3BI,QAASzC,EAAWC,KACpByC,KAAMC,IAAU,IAChBC,KAAMD,GAAUV,IAEpBF,EAASc,WAAW7C,EAAWC,KAAM,CACjC6C,QAAS,KACL,GAAIT,EAAQU,cAER,YADAf,EAAMgB,aAAaX,EAAQU,cAAc1C,IAG7C,MAAM4C,EAAM7C,EAAOC,GACb6C,EAAO9B,EAAI+B,SACjBZ,EAAS,IAAI,EAAAa,cAAc,CACvBrB,SAAU,CACNT,SAAUS,EACV7B,OAAQF,EAAWE,OACnBC,KAAMH,EAAWG,MAErB+B,gBACAe,MACA3B,WACAG,aACAD,QACAG,aACAuB,SAEJ,IAAIG,EAAa,KAIjBd,EAAOe,gBAAgBC,SAAQ,CAACC,EAAQd,KACpCA,EAAKe,SAAQpD,IACT0B,EAAS2B,qBAAqBrD,MAE9BkC,EAAOoB,WACFN,IACDA,EAAa3B,EAAOkC,YAGnBP,IACLA,EAAWQ,UACXR,EAAa,MAEjBd,EAAOuB,SAASP,SAAQ,KAChBF,GACAA,EAAWQ,gBAIvBtB,EAAOlC,GAAK4B,EACZM,EAAOwB,MAAMC,KAAO,EAAAC,aACpB1B,EAAOwB,MAAMG,MAAQrC,EAAMsC,GAAG,YAC9B,MAAMC,EAAO,IAAI,EAAAC,eAAe,CAAEC,QAAS/B,IACtCF,EAAQkC,IAAIH,GACjBpC,EAAMuC,IAAIH,IAEdF,MAAOrC,EAAMsC,GAAG,8BAEhBvC,GACAA,EAAQ4C,QAAQ,CACZC,SAAU5C,EAAMsC,GAAG,YACnB1B,QAASzC,EAAWC,OAG5B8B,EAASc,WAAW7C,EAAWE,OAAQ,CACnC4C,QAAS,KACL,IAAI4B,EAC6B,QAAhCA,EAAKrC,EAAQU,qBAAkC,IAAP2B,GAAyBA,EAAGJ,QAAQpE,UAEjF8D,KAAM,EAAAW,SACNT,MAAOrC,EAAMsC,GAAG,wBAChBS,UAAW,KAAQ,IAAIF,EAAIG,EAAI,OAA4G,QAApGA,EAAsC,QAAhCH,EAAKrC,EAAQU,qBAAkC,IAAP2B,OAAgB,EAASA,EAAGJ,QAAQQ,oBAAiC,IAAPD,GAAgBA,KAEvK9C,EAASc,WAAW7C,EAAWG,KAAM,CACjC2C,QAAS,KAAQ,IAAI4B,EAAI,OAAwC,QAAhCA,EAAKrC,EAAQU,qBAAkC,IAAP2B,OAAgB,EAASA,EAAGJ,QAAQnE,QAC7G6D,KAAM,EAAAe,SACNb,MAAOrC,EAAMsC,GAAG,sBAChBS,UAAW,KAAQ,IAAIF,EAAIG,EAAI,OAA0G,QAAlGA,EAAsC,QAAhCH,EAAKrC,EAAQU,qBAAkC,IAAP2B,OAAgB,EAASA,EAAGJ,QAAQX,kBAA+B,IAAPkB,GAAgBA,KAE9JxC,IAEX","file":"2466.03d2ba76c52866d5ccc5.js","sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module settingeditor-extension\n */\nimport { ILabStatus, ILayoutRestorer } from '@jupyterlab/application';\nimport { ICommandPalette, MainAreaWidget, WidgetTracker } from '@jupyterlab/apputils';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingEditorTracker, SettingEditor } from '@jupyterlab/settingeditor';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { saveIcon, settingsIcon, undoIcon } from '@jupyterlab/ui-components';\n/**\n * The command IDs used by the setting editor.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.open = 'settingeditor:open';\n    CommandIDs.revert = 'settingeditor:revert';\n    CommandIDs.save = 'settingeditor:save';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The default setting editor extension.\n */\nconst plugin = {\n    id: '@jupyterlab/settingeditor-extension:plugin',\n    requires: [\n        ILayoutRestorer,\n        ISettingRegistry,\n        IEditorServices,\n        IStateDB,\n        IRenderMimeRegistry,\n        ILabStatus,\n        ITranslator\n    ],\n    optional: [ICommandPalette],\n    autoStart: true,\n    provides: ISettingEditorTracker,\n    activate\n};\n/**\n * Activate the setting editor extension.\n */\nfunction activate(app, restorer, registry, editorServices, state, rendermime, status, translator, palette) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const namespace = 'setting-editor';\n    const factoryService = editorServices.factoryService;\n    const editorFactory = factoryService.newInlineEditor;\n    const tracker = new WidgetTracker({\n        namespace\n    });\n    let editor;\n    // Handle state restoration.\n    void restorer.restore(tracker, {\n        command: CommandIDs.open,\n        args: widget => ({}),\n        name: widget => namespace\n    });\n    commands.addCommand(CommandIDs.open, {\n        execute: () => {\n            if (tracker.currentWidget) {\n                shell.activateById(tracker.currentWidget.id);\n                return;\n            }\n            const key = plugin.id;\n            const when = app.restored;\n            editor = new SettingEditor({\n                commands: {\n                    registry: commands,\n                    revert: CommandIDs.revert,\n                    save: CommandIDs.save\n                },\n                editorFactory,\n                key,\n                registry,\n                rendermime,\n                state,\n                translator,\n                when\n            });\n            let disposable = null;\n            // Notify the command registry when the visibility status of the setting\n            // editor's commands change. The setting editor toolbar listens for this\n            // signal from the command registry.\n            editor.commandsChanged.connect((sender, args) => {\n                args.forEach(id => {\n                    commands.notifyCommandChanged(id);\n                });\n                if (editor.canSaveRaw) {\n                    if (!disposable) {\n                        disposable = status.setDirty();\n                    }\n                }\n                else if (disposable) {\n                    disposable.dispose();\n                    disposable = null;\n                }\n                editor.disposed.connect(() => {\n                    if (disposable) {\n                        disposable.dispose();\n                    }\n                });\n            });\n            editor.id = namespace;\n            editor.title.icon = settingsIcon;\n            editor.title.label = trans.__('Settings');\n            const main = new MainAreaWidget({ content: editor });\n            void tracker.add(main);\n            shell.add(main);\n        },\n        label: trans.__('Advanced Settings Editor')\n    });\n    if (palette) {\n        palette.addItem({\n            category: trans.__('Settings'),\n            command: CommandIDs.open\n        });\n    }\n    commands.addCommand(CommandIDs.revert, {\n        execute: () => {\n            var _a;\n            (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.revert();\n        },\n        icon: undoIcon,\n        label: trans.__('Revert User Settings'),\n        isEnabled: () => { var _a, _b; return (_b = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.canRevertRaw) !== null && _b !== void 0 ? _b : false; }\n    });\n    commands.addCommand(CommandIDs.save, {\n        execute: () => { var _a; return (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.save(); },\n        icon: saveIcon,\n        label: trans.__('Save User Settings'),\n        isEnabled: () => { var _a, _b; return (_b = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.canSaveRaw) !== null && _b !== void 0 ? _b : false; }\n    });\n    return tracker;\n}\nexport default plugin;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}