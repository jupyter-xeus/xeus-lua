{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/./build/index.js"],"names":["styles","serverExtensions","disabled","JSON","parse","PageConfig","async","createModule","scope","module","window","_JUPYTERLAB","get","e","console","warn","pluginsToRegister","federatedExtensionPromises","federatedMimeExtensionPromises","federatedStylePromises","extensions","federatedExtensionNames","Set","activePlugins","extension","exports","hasOwnProperty","default","plugins","Array","isArray","plugin","includes","id","split","forEach","data","add","name","push","mimeExtension","style","mimeExtensions","has","ext","error","Promise","allSettled","p","status","value","reason","filter","jupyterLiteServer","JupyterLiteServer","registerPluginModules","all","start","serviceManager","lab","JupyterLab","log","restored","main"],"mappings":"8KAUA,MAAMA,EAAS,wDAETC,EAAmB,CACvB,qCACA,qCACA,qCACA,qCACA,sCAIIC,EAAW,IACZC,KAAKC,MAAM,EAAAC,WAAA,UAAqB,uBAAyB,MAC5D,4CACA,yCACA,yCACA,kDACA,0CACA,4CACA,6CACA,oCAGFC,eAAeC,EAAaC,EAAOC,GACjC,IAEE,aADsBC,OAAOC,YAAYH,GAAOI,IAAIH,MAEpD,MAAOI,GAEP,MADAC,QAAQC,KAAK,qCAAqCP,cAAkBC,KAC9DI,IAOVP,uBAEQN,EAEN,MAAMgB,EAAoB,GACpBC,EAA6B,GAC7BC,EAAiC,GACjCC,EAAyB,GAIzBC,EAAajB,KAAKC,MACtB,EAAAC,WAAA,UAAqB,yBAIjBgB,EAA0B,IAAIC,IAmBpC,SAAUC,EAAcC,GAEtB,IAAIC,EAEFA,EADED,EAAUE,eAAe,cACjBF,EAAUG,QAGVH,EAGZ,IAAII,EAAUC,MAAMC,QAAQL,GAAWA,EAAU,CAACA,GAClD,IAAK,IAAIM,KAAUH,EAGf1B,EAAS8B,SAASD,EAAOE,KACzB/B,EAAS8B,SAASD,EAAOE,GAAGC,MAAM,KAAK,YAInCH,GApCVX,EAAWe,SAAQC,IACbA,EAAKZ,YACPH,EAAwBgB,IAAID,EAAKE,MACjCrB,EAA2BsB,KAAKhC,EAAa6B,EAAKE,KAAMF,EAAKZ,aAE3DY,EAAKI,gBACPnB,EAAwBgB,IAAID,EAAKE,MACjCpB,EAA+BqB,KAAKhC,EAAa6B,EAAKE,KAAMF,EAAKI,iBAE/DJ,EAAKK,OACPtB,EAAuBoB,KAAKhC,EAAa6B,EAAKE,KAAMF,EAAKK,WA+B7D,MAAMC,EAAiB,GACvB,IAAKrB,EAAwBsB,IAAI,iCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/BF,EAAeH,KAAKR,GAEtB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,8BAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/BF,EAAeH,KAAKR,GAEtB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,+BAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/BF,EAAeH,KAAKR,GAEtB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAiBlB,UAZsCiC,QAAQC,WAAW7B,IACjCiB,SAAQa,IAC9B,GAAiB,cAAbA,EAAEC,OACJ,IAAK,IAAIlB,KAAUR,EAAcyB,EAAEE,OACjCR,EAAeH,KAAKR,QAGtBjB,QAAQ+B,MAAMG,EAAEG,YAKf9B,EAAwBsB,IAAI,sCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,qCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,kCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,kCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,oCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,mCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,iCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,mCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,oCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,qCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,oCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,8BAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,qCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,mCAC/B,IACE,IAAIC,EAAM,EAAQ,MAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,kCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,oCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,kCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,wCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,kCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,kCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,oCAC/B,IACE,IAAIC,EAAM,EAAQ,IAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,iCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,uCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,mCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,mCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,oCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,qCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,6BAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,iCAC/B,IACE,IAAIC,EAAM,EAAQ,OAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,GAGlB,IAAKQ,EAAwBsB,IAAI,uCAC/B,IACE,IAAIC,EAAM,EAAQ,MAClB,IAAK,IAAIb,KAAUR,EAAcqB,GAC/B5B,EAAkBuB,KAAKR,GAEzB,MAAOlB,GACPC,QAAQ+B,MAAMhC,UAKgBiC,QAAQC,WAAW9B,IACjCkB,SAAQa,IAC1B,GAAiB,cAAbA,EAAEC,OACJ,IAAK,IAAIlB,KAAUR,EAAcyB,EAAEE,OACjClC,EAAkBuB,KAAKR,QAGzBjB,QAAQ+B,MAAMG,EAAEG,kBAKbL,QAAQC,WAAW5B,IAAyBiC,QAAO,EAAEH,YAAuB,aAAXA,IAAuBd,SAAQ,EAAEgB,aACtGrC,QAAQ+B,MAAMM,MAIjB,MAAME,EAAoB,IAAI,EAAAC,kBAAkB,IAChDD,EAAkBE,4BAA4BT,QAAQU,IAAIvD,UAEpDoD,EAAkBI,QAGxB,MAAM,eAAEC,GAAmBL,EAGrBM,EAAM,IAAI,EAAAC,WAAW,CACzBlB,iBACAgB,mBAEFC,EAAIrB,KAAO,cAEXqB,EAAIJ,sBAAsBvC,GAG1BF,QAAQ+C,IAAI,sBACNF,EAAIF,QACV3C,QAAQ+C,IAAI,GAAGF,EAAIrB,2CACbqB,EAAIG,SACVhD,QAAQ+C,IAAI,GAAGF,EAAIrB,iBAGrByB","file":"880.03c2feaab052efd76fa1.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JupyterLab } from '@jupyterlab/application';\n\nimport { JupyterLiteServer } from '@jupyterlite/server';\n\n// The webpack public path needs to be set before loading the CSS assets.\nimport { PageConfig } from '@jupyterlab/coreutils';\n\nconst styles = import('./style.js');\n\nconst serverExtensions = [\n  import('@jupyterlite/javascript-kernel-extension'),\n  import('@jupyterlite/p5-kernel-extension'),\n  import('@jupyterlite/pyolite-kernel-extension'),\n  import('@jupyterlite/xeus-kernel-extension'),\n  import('@jupyterlite/server-extension')\n];\n\n// custom list of disabled plugins\nconst disabled = [\n  ...JSON.parse(PageConfig.getOption('disabledExtensions') || '[]'),\n  '@jupyterlab/apputils-extension:workspaces',\n  '@jupyterlab/application-extension:logo',\n  '@jupyterlab/application-extension:main',\n  '@jupyterlab/application-extension:tree-resolver',\n  '@jupyterlab/apputils-extension:resolver',\n  '@jupyterlab/docmanager-extension:download',\n  '@jupyterlab/filebrowser-extension:download',\n  '@jupyterlab/help-extension:about'\n];\n\nasync function createModule(scope, module) {\n  try {\n    const factory = await window._JUPYTERLAB[scope].get(module);\n    return factory();\n  } catch (e) {\n    console.warn(`Failed to create module: package: ${scope}; module: ${module}`);\n    throw e;\n  }\n}\n\n/**\n * The main entry point for the application.\n */\nasync function main() {\n  // Make sure the styles have loaded\n  await styles;\n\n  const pluginsToRegister = [];\n  const federatedExtensionPromises = [];\n  const federatedMimeExtensionPromises = [];\n  const federatedStylePromises = [];\n\n  // This is all the data needed to load and activate plugins. This should be\n  // gathered by the server and put onto the initial page template.\n  const extensions = JSON.parse(\n    PageConfig.getOption('federated_extensions')\n  );\n\n  // The set of federated extension names.\n  const federatedExtensionNames = new Set();\n\n  extensions.forEach(data => {\n    if (data.extension) {\n      federatedExtensionNames.add(data.name);\n      federatedExtensionPromises.push(createModule(data.name, data.extension));\n    }\n    if (data.mimeExtension) {\n      federatedExtensionNames.add(data.name);\n      federatedMimeExtensionPromises.push(createModule(data.name, data.mimeExtension));\n    }\n    if (data.style) {\n      federatedStylePromises.push(createModule(data.name, data.style));\n    }\n  });\n\n  /**\n   * Iterate over active plugins in an extension.\n   */\n  function* activePlugins(extension) {\n    // Handle commonjs or es2015 modules\n    let exports;\n    if (extension.hasOwnProperty('__esModule')) {\n      exports = extension.default;\n    } else {\n      // CommonJS exports.\n      exports = extension;\n    }\n\n    let plugins = Array.isArray(exports) ? exports : [exports];\n    for (let plugin of plugins) {\n      // skip the plugin (or extension) if disabled\n      if (\n        disabled.includes(plugin.id) ||\n        disabled.includes(plugin.id.split(':')[0])\n      ) {\n        continue;\n      }\n      yield plugin;\n    }\n  }\n\n  // Handle the mime extensions.\n  const mimeExtensions = [];\n  if (!federatedExtensionNames.has('@jupyterlite/iframe-extension')) {\n    try {\n      let ext = require('@jupyterlite/iframe-extension');\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/json-extension')) {\n    try {\n      let ext = require('@jupyterlab/json-extension');\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/vega5-extension')) {\n    try {\n      let ext = require('@jupyterlab/vega5-extension');\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  // Add the federated mime extensions.\n  const federatedMimeExtensions = await Promise.allSettled(federatedMimeExtensionPromises);\n  federatedMimeExtensions.forEach(p => {\n    if (p.status === \"fulfilled\") {\n      for (let plugin of activePlugins(p.value)) {\n        mimeExtensions.push(plugin);\n      }\n    } else {\n      console.error(p.reason);\n    }\n  });\n\n  // Handled the standard extensions.\n  if (!federatedExtensionNames.has('@jupyterlite/application-extension')) {\n    try {\n      let ext = require('@jupyterlite/application-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/application-extension')) {\n    try {\n      let ext = require('@jupyterlab/application-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/apputils-extension')) {\n    try {\n      let ext = require('@jupyterlab/apputils-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/celltags-extension')) {\n    try {\n      let ext = require('@jupyterlab/celltags-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/codemirror-extension')) {\n    try {\n      let ext = require('@jupyterlab/codemirror-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/completer-extension')) {\n    try {\n      let ext = require('@jupyterlab/completer-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/console-extension')) {\n    try {\n      let ext = require('@jupyterlab/console-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/csvviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/csvviewer-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/docmanager-extension')) {\n    try {\n      let ext = require('@jupyterlab/docmanager-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/filebrowser-extension')) {\n    try {\n      let ext = require('@jupyterlab/filebrowser-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/fileeditor-extension')) {\n    try {\n      let ext = require('@jupyterlab/fileeditor-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/help-extension')) {\n    try {\n      let ext = require('@jupyterlab/help-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/imageviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/imageviewer-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/inspector-extension')) {\n    try {\n      let ext = require('@jupyterlab/inspector-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/launcher-extension')) {\n    try {\n      let ext = require('@jupyterlab/launcher-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/logconsole-extension')) {\n    try {\n      let ext = require('@jupyterlab/logconsole-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/mainmenu-extension')) {\n    try {\n      let ext = require('@jupyterlab/mainmenu-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/markdownviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/markdownviewer-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/mathjax2-extension')) {\n    try {\n      let ext = require('@jupyterlab/mathjax2-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/notebook-extension')) {\n    try {\n      let ext = require('@jupyterlab/notebook-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/rendermime-extension')) {\n    try {\n      let ext = require('@jupyterlab/rendermime-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/running-extension')) {\n    try {\n      let ext = require('@jupyterlab/running-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/settingeditor-extension')) {\n    try {\n      let ext = require('@jupyterlab/settingeditor-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/shortcuts-extension')) {\n    try {\n      let ext = require('@jupyterlab/shortcuts-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/statusbar-extension')) {\n    try {\n      let ext = require('@jupyterlab/statusbar-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/theme-dark-extension')) {\n    try {\n      let ext = require('@jupyterlab/theme-dark-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/theme-light-extension')) {\n    try {\n      let ext = require('@jupyterlab/theme-light-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/toc-extension')) {\n    try {\n      let ext = require('@jupyterlab/toc-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/tooltip-extension')) {\n    try {\n      let ext = require('@jupyterlab/tooltip-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/ui-components-extension')) {\n    try {\n      let ext = require('@jupyterlab/ui-components-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  // Add the federated extensions.\n  const federatedExtensions = await Promise.allSettled(federatedExtensionPromises);\n  federatedExtensions.forEach(p => {\n    if (p.status === \"fulfilled\") {\n      for (let plugin of activePlugins(p.value)) {\n        pluginsToRegister.push(plugin);\n      }\n    } else {\n      console.error(p.reason);\n    }\n  });\n\n  // Load all federated component styles and log errors for any that do not\n  (await Promise.allSettled(federatedStylePromises)).filter(({status}) => status === \"rejected\").forEach(({reason}) => {\n     console.error(reason);\n    });\n\n  // create the in-browser JupyterLite Server\n  const jupyterLiteServer = new JupyterLiteServer({});\n  jupyterLiteServer.registerPluginModules(await Promise.all(serverExtensions));\n  // start the server\n  await jupyterLiteServer.start();\n\n  // retrieve the custom service manager from the server app\n  const { serviceManager } = jupyterLiteServer;\n\n  // create a full-blown JupyterLab frontend\n  const lab = new JupyterLab({\n    mimeExtensions,\n    serviceManager\n  });\n  lab.name = 'JupyterLite';\n\n  lab.registerPluginModules(pluginsToRegister);\n\n  /* eslint-disable no-console */\n  console.log('Starting app');\n  await lab.start();\n  console.log(`${lab.name} started, waiting for restore`);\n  await lab.restored;\n  console.log(`${lab.name} restored`);\n}\n\nmain();\n"],"sourceRoot":""}