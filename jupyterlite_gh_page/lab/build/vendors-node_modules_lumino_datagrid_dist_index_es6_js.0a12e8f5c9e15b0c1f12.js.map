{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@lumino/datagrid/dist/index.es6.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@lumino/keyboard/dist/index.es6.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAsE;AACjB;AACb;AAC0B;AACvB;AACqB;AACI;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gFAAgF;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gFAAgF;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gFAAgF;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gFAAgF;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gFAAgF;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gFAAgF;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU;AAC3C,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+DAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iEAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+GAA+G;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iEAAmB;AAChD;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iEAAmB;AAChD;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iEAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iGAAiG;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gCAAgC,EAAE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iGAAiG;AACvsBAAsB,iGAAiG;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wBAAwB,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;;AAE3B;AACA;AACA,+DAA+D;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;;AAEA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;;AAEA;AACA;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qDAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAI,kCAAkC,wCAAwC,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAI,kCAAkC,2CAA2C,EAAE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAI,kCAAkC,+CAA+C,EAAE;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iCAAiC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,OAAO;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,+BAA+B;AACtE;AACA;AACA,sBAAsB,uEAA0B;AAChD;AACA;AACA;AACA,QAAQ,0DAAa;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,mDAAM;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qDAAM;AACtiCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG,IAAI;AAC7G;AACA;AACA,4EAA4E,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,GAAG;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,yBAAyB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAiB;AACjgBAAgB,mEAAiB;AACjgBAAgB,mEAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yCAAyC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,qBAAqB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qDAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAcjiCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C,4BAA4B,qDAAM;AAClC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAe,qBAAqB,2CAA2C;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAe,qBAAqB,2CAA2C;AAC3F;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAmB;AACnC;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAmB;AACnC;AACA,gBAAgB,kEAAmB;AACnC;AACA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kEAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kEAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kEAAmB;AACpC;AACA;AACA,YAAY,8DAAe;AAC3B;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,iDAAiD;AACjD,iDAAiD;AACjD,mDAAmD;AACnD,oDAAoD;AACpD,sDAAsD;AACtD,uDAAuD;AACvD,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mDAAM;AACpC;AACA;AACA,gCAAgC,sDAAS,EAAE,0BAA0B;AACrE,gCAAgC,sDAAS,EAAE,4BAA4B;AACvE,kCAAkC,mDAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6EAA8B;AACtC,QAAQ,6EAA8B;AACtC,QAAQ,6EAA8B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAwB,mBAAmB,oBAAoB;AACvE,QAAQ,qEAAwB,qBAAqB,oBAAoB;AACzE,QAAQ,qEAAwB,qBAAqB,oBAAoB;AACzE,QAAQ,qEAAwB,uBAAuB,oBAAoB;AAC3E;AACA,yBAAyB,uDAAU;AACnqCAAqC;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpiBAAiB;AACjsEAAusEAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,8BAA8B,EAAE;AAC/E;AACA;AACA;AACA,QAAQ,mEAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mEAAqB;AACjD,4BAA4B,mEAAqB;AACjsEAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAusEAAuB,OAAO,kEAAqsEAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAiwBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjwBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,OAAO;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,OAAO;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,OAAO;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,SAAS;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzwBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjmDAAM;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iEAAkB;AAClD;AACA;AACA;AACA,sCAAsC,iEAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC,iEAAkB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC,iEAAkB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC,iEAAkB;AACxB;AACA,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjgBAAgB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,gBAAgB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;AAE8Z;AAC7b;;;;;;;;;;;;;;;;;;;ACzosCAAsC;AACvtE","file":"vendors-node_modules_lumino_datagrid_dist_index_es6_js.0a12e8f5c9e15b0c1f12.js","sourcesContent":["import { Platform, ClipboardExt, ElementExt } from '@lumino/domutils';\nimport { getKeyboardLayout } from '@lumino/keyboard';\nimport { Drag } from '@lumino/dragdrop';\nimport { some, iter, ArrayExt, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\nimport { Widget, ScrollBar, GridLayout } from '@lumino/widgets';\nimport { MessageLoop, ConflatableMessage } from '@lumino/messaging';\n\n// Copyright (c) Jupyter Development Team.\n/**\n * A basic implementation of a data grid key handler.\n *\n * #### Notes\n * This class may be subclassed and customized as needed.\n */\nvar BasicKeyHandler = /** @class */ (function () {\n    function BasicKeyHandler() {\n        this._disposed = false;\n    }\n    Object.defineProperty(BasicKeyHandler.prototype, \"isDisposed\", {\n        /**\n         * Whether the key handler is disposed.\n         */\n        get: function () {\n            return this._disposed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dispose of the resources held by the key handler.\n     */\n    BasicKeyHandler.prototype.dispose = function () {\n        this._disposed = true;\n    };\n    /**\n     * Handle the key down event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keydown event of interest.\n     *\n     * #### Notes\n     * This will not be called if the mouse button is pressed.\n     */\n    BasicKeyHandler.prototype.onKeyDown = function (grid, event) {\n        // if grid is editable and cell selection available, start cell editing\n        // on key press (letters, numbers and space only)\n        if (grid.editable &&\n            grid.selectionModel.cursorRow !== -1 &&\n            grid.selectionModel.cursorColumn !== -1) {\n            var input = String.fromCharCode(event.keyCode);\n            if (/[a-zA-Z0-9-_ ]/.test(input)) {\n                var row = grid.selectionModel.cursorRow;\n                var column = grid.selectionModel.cursorColumn;\n                var cell = {\n                    grid: grid,\n                    row: row,\n                    column: column\n                };\n                grid.editorController.edit(cell);\n                if (getKeyboardLayout().keyForKeydownEvent(event) === 'Space') {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n                return;\n            }\n        }\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'ArrowLeft':\n                this.onArrowLeft(grid, event);\n                break;\n            case 'ArrowRight':\n                this.onArrowRight(grid, event);\n                break;\n            case 'ArrowUp':\n                this.onArrowUp(grid, event);\n                break;\n            case 'ArrowDown':\n                this.onArrowDown(grid, event);\n                break;\n            case 'PageUp':\n                this.onPageUp(grid, event);\n                break;\n            case 'PageDown':\n                this.onPageDown(grid, event);\n                break;\n            case 'Escape':\n                this.onEscape(grid, event);\n                break;\n            case 'Delete':\n                this.onDelete(grid, event);\n                break;\n            case 'C':\n                this.onKeyC(grid, event);\n                break;\n            case 'Enter':\n                if (grid.selectionModel) {\n                    grid.moveCursor(event.shiftKey ? 'up' : 'down');\n                    grid.scrollToCursor();\n                }\n                break;\n            case 'Tab':\n                if (grid.selectionModel) {\n                    grid.moveCursor(event.shiftKey ? 'left' : 'right');\n                    grid.scrollToCursor();\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n                break;\n        }\n    };\n    /**\n     * Handle the `'ArrowLeft'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onArrowLeft = function (grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Fetch the modifier flags.\n        var shift = event.shiftKey;\n        var accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(0, grid.scrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('left');\n            return;\n        }\n        // Fetch the selection mode.\n        var mode = model.selectionMode;\n        // Handle the row selection mode with accel key.\n        if (mode === 'row' && accel) {\n            grid.scrollTo(0, grid.scrollY);\n            return;\n        }\n        // Handle the row selection mode with no modifier. (ignore shift)\n        if (mode === 'row') {\n            grid.scrollByStep('left');\n            return;\n        }\n        // Fetch the cursor and selection.\n        var r = model.cursorRow;\n        var c = model.cursorColumn;\n        var cs = model.currentSelection();\n        // Set up the selection variables.\n        var r1;\n        var r2;\n        var c1;\n        var c2;\n        var cr;\n        var cc;\n        var clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 - 1 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = r;\n            r2 = r;\n            c1 = 0;\n            c2 = 0;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r;\n            r2 = r;\n            c1 = c - 1;\n            c2 = c - 1;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cr, cursorColumn: cc, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    };\n    /**\n     * Handle the `'ArrowRight'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onArrowRight = function (grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Fetch the modifier flags.\n        var shift = event.shiftKey;\n        var accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.maxScrollX, grid.scrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('right');\n            return;\n        }\n        // Fetch the selection mode.\n        var mode = model.selectionMode;\n        // Handle the row selection model with accel key.\n        if (mode === 'row' && accel) {\n            grid.scrollTo(grid.maxScrollX, grid.scrollY);\n            return;\n        }\n        // Handle the row selection mode with no modifier. (ignore shift)\n        if (mode === 'row') {\n            grid.scrollByStep('right');\n            return;\n        }\n        // Fetch the cursor and selection.\n        var r = model.cursorRow;\n        var c = model.cursorColumn;\n        var cs = model.currentSelection();\n        // Set up the selection variables.\n        var r1;\n        var r2;\n        var c1;\n        var c2;\n        var cr;\n        var cc;\n        var clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = Infinity;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 + 1 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = r;\n            r2 = r;\n            c1 = Infinity;\n            c2 = Infinity;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r;\n            r2 = r;\n            c1 = c + 1;\n            c2 = c + 1;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cr, cursorColumn: cc, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    };\n    /**\n     * Handle the `'ArrowUp'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onArrowUp = function (grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Fetch the modifier flags.\n        var shift = event.shiftKey;\n        var accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.scrollX, 0);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('up');\n            return;\n        }\n        // Fetch the selection mode.\n        var mode = model.selectionMode;\n        // Handle the column selection mode with accel key.\n        if (mode === 'column' && accel) {\n            grid.scrollTo(grid.scrollX, 0);\n            return;\n        }\n        // Handle the column selection mode with no modifier. (ignore shift)\n        if (mode === 'column') {\n            grid.scrollByStep('up');\n            return;\n        }\n        // Fetch the cursor and selection.\n        var r = model.cursorRow;\n        var c = model.cursorColumn;\n        var cs = model.currentSelection();\n        // Set up the selection variables.\n        var r1;\n        var r2;\n        var c1;\n        var c2;\n        var cr;\n        var cc;\n        var clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 - 1 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = 0;\n            r2 = 0;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r - 1;\n            r2 = r - 1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cr, cursorColumn: cc, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    };\n    /**\n     * Handle the `'ArrowDown'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onArrowDown = function (grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Fetch the modifier flags.\n        var shift = event.shiftKey;\n        var accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.scrollX, grid.maxScrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('down');\n            return;\n        }\n        // Fetch the selection mode.\n        var mode = model.selectionMode;\n        // Handle the column selection mode with accel key.\n        if (mode === 'column' && accel) {\n            grid.scrollTo(grid.scrollX, grid.maxScrollY);\n            return;\n        }\n        // Handle the column selection mode with no modifier. (ignore shift)\n        if (mode === 'column') {\n            grid.scrollByStep('down');\n            return;\n        }\n        // Fetch the cursor and selection.\n        var r = model.cursorRow;\n        var c = model.cursorColumn;\n        var cs = model.currentSelection();\n        // Set up the selection variables.\n        var r1;\n        var r2;\n        var c1;\n        var c2;\n        var cr;\n        var cc;\n        var clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = Infinity;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 + 1 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = Infinity;\n            r2 = Infinity;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r + 1;\n            r2 = r + 1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cr, cursorColumn: cc, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    };\n    /**\n     * Handle the `'PageUp'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onPageUp = function (grid, event) {\n        // Ignore the event if the accel key is pressed.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Scroll by page if there is no selection model.\n        if (!model || model.selectionMode === 'column') {\n            grid.scrollByPage('up');\n            return;\n        }\n        // Get the normal number of cells in the page height.\n        var n = Math.floor(grid.pageHeight / grid.defaultSizes.rowHeight);\n        // Fetch the cursor and selection.\n        var r = model.cursorRow;\n        var c = model.cursorColumn;\n        var cs = model.currentSelection();\n        // Set up the selection variables.\n        var r1;\n        var r2;\n        var c1;\n        var c2;\n        var cr;\n        var cc;\n        var clear;\n        // Select or resize as needed.\n        if (event.shiftKey) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 - n : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else {\n            r1 = cs ? cs.r1 - n : 0;\n            r2 = r1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cr, cursorColumn: cc, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        grid.scrollToRow(cs.r2);\n    };\n    /**\n     * Handle the `'PageDown'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onPageDown = function (grid, event) {\n        // Ignore the event if the accel key is pressed.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Scroll by page if there is no selection model.\n        if (!model || model.selectionMode === 'column') {\n            grid.scrollByPage('down');\n            return;\n        }\n        // Get the normal number of cells in the page height.\n        var n = Math.floor(grid.pageHeight / grid.defaultSizes.rowHeight);\n        // Fetch the cursor and selection.\n        var r = model.cursorRow;\n        var c = model.cursorColumn;\n        var cs = model.currentSelection();\n        // Set up the selection variables.\n        var r1;\n        var r2;\n        var c1;\n        var c2;\n        var cr;\n        var cc;\n        var clear;\n        // Select or resize as needed.\n        if (event.shiftKey) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 + n : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else {\n            r1 = cs ? cs.r1 + n : 0;\n            r2 = r1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cr, cursorColumn: cc, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        grid.scrollToRow(cs.r2);\n    };\n    /**\n     * Handle the `'Escape'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onEscape = function (grid, event) {\n        if (grid.selectionModel) {\n            grid.selectionModel.clear();\n        }\n    };\n    /**\n     * Handle the `'Delete'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onDelete = function (grid, event) {\n        if (grid.editable &&\n            !grid.selectionModel.isEmpty) {\n            var dataModel = grid.dataModel;\n            // Fetch the max row and column.\n            var maxRow = dataModel.rowCount('body') - 1;\n            var maxColumn = dataModel.columnCount('body') - 1;\n            var it = grid.selectionModel.selections();\n            var s = void 0;\n            while ((s = it.next()) !== undefined) {\n                // Clamp the cell to the model bounds.\n                var sr1 = Math.max(0, Math.min(s.r1, maxRow));\n                var sc1 = Math.max(0, Math.min(s.c1, maxColumn));\n                var sr2 = Math.max(0, Math.min(s.r2, maxRow));\n                var sc2 = Math.max(0, Math.min(s.c2, maxColumn));\n                for (var r = sr1; r <= sr2; ++r) {\n                    for (var c = sc1; c <= sc2; ++c) {\n                        dataModel.setData('body', r, c, null);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Handle the `'C'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onKeyC = function (grid, event) {\n        // Bail early if the modifiers aren't correct for copy.\n        if (event.shiftKey || !Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Copy the current selection to the clipboard.\n        grid.copyToClipboard();\n    };\n    return BasicKeyHandler;\n}());\n\n/**\n * A basic implementation of a data grid mouse handler.\n *\n * #### Notes\n * This class may be subclassed and customized as needed.\n */\nvar BasicMouseHandler = /** @class */ (function () {\n    function BasicMouseHandler() {\n        this._disposed = false;\n        this._pressData = null;\n    }\n    /**\n     * Dispose of the resources held by the mouse handler.\n     */\n    BasicMouseHandler.prototype.dispose = function () {\n        // Bail early if the handler is already disposed.\n        if (this._disposed) {\n            return;\n        }\n        // Release any held resources.\n        this.release();\n        // Mark the handler as disposed.\n        this._disposed = true;\n    };\n    Object.defineProperty(BasicMouseHandler.prototype, \"isDisposed\", {\n        /**\n         * Whether the mouse handler is disposed.\n         */\n        get: function () {\n            return this._disposed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Release the resources held by the handler.\n     */\n    BasicMouseHandler.prototype.release = function () {\n        // Bail early if the is no press data.\n        if (!this._pressData) {\n            return;\n        }\n        // Clear the autoselect timeout.\n        if (this._pressData.type === 'select') {\n            this._pressData.timeout = -1;\n        }\n        // Clear the press data.\n        this._pressData.override.dispose();\n        this._pressData = null;\n    };\n    /**\n     * Handle the mouse hover event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse hover event of interest.\n     */\n    BasicMouseHandler.prototype.onMouseHover = function (grid, event) {\n        // Hit test the grid.\n        var hit = grid.hitTest(event.clientX, event.clientY);\n        // Get the resize handle for the hit test.\n        var handle = Private.resizeHandleForHitTest(hit);\n        // Fetch the cursor for the handle.\n        var cursor = this.cursorForHandle(handle);\n        // Update the viewport cursor based on the part.\n        grid.viewport.node.style.cursor = cursor;\n        // TODO support user-defined hover items\n    };\n    /**\n     * Handle the mouse leave event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse hover event of interest.\n     */\n    BasicMouseHandler.prototype.onMouseLeave = function (grid, event) {\n        // TODO support user-defined hover popups.\n        // Clear the viewport cursor.\n        grid.viewport.node.style.cursor = '';\n    };\n    /**\n     * Handle the mouse down event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse down event of interest.\n     */\n    BasicMouseHandler.prototype.onMouseDown = function (grid, event) {\n        // Unpack the event.\n        var clientX = event.clientX, clientY = event.clientY;\n        // Hit test the grid.\n        var hit = grid.hitTest(clientX, clientY);\n        // Unpack the hit test.\n        var region = hit.region, row = hit.row, column = hit.column;\n        // Bail if the hit test is on an uninteresting region.\n        if (region === 'void') {\n            return;\n        }\n        // Fetch the modifier flags.\n        var shift = event.shiftKey;\n        var accel = Platform.accelKey(event);\n        // If the hit test is the body region, the only option is select.\n        if (region === 'body') {\n            // Fetch the selection model.\n            var model_1 = grid.selectionModel;\n            // Bail early if there is no selection model.\n            if (!model_1) {\n                return;\n            }\n            // Override the document cursor.\n            var override_1 = Drag.overrideCursor('default');\n            // Set up the press data.\n            this._pressData = {\n                type: 'select', region: region, row: row, column: column, override: override_1,\n                localX: -1, localY: -1, timeout: -1\n            };\n            // Set up the selection variables.\n            var r1_1;\n            var c1_1;\n            var r2_1;\n            var c2_1;\n            var cursorRow_1;\n            var cursorColumn_1;\n            var clear_1;\n            // Accel == new selection, keep old selections.\n            if (accel) {\n                r1_1 = row;\n                r2_1 = row;\n                c1_1 = column;\n                c2_1 = column;\n                cursorRow_1 = row;\n                cursorColumn_1 = column;\n                clear_1 = 'none';\n            }\n            else if (shift) {\n                r1_1 = model_1.cursorRow;\n                r2_1 = row;\n                c1_1 = model_1.cursorColumn;\n                c2_1 = column;\n                cursorRow_1 = model_1.cursorRow;\n                cursorColumn_1 = model_1.cursorColumn;\n                clear_1 = 'current';\n            }\n            else {\n                r1_1 = row;\n                r2_1 = row;\n                c1_1 = column;\n                c2_1 = column;\n                cursorRow_1 = row;\n                cursorColumn_1 = column;\n                clear_1 = 'all';\n            }\n            // Use selection mode 'cell'\n            model_1.selectionMode = 'cell';\n            // Make the selection.\n            model_1.select({ r1: r1_1, c1: c1_1, r2: r2_1, c2: c2_1, cursorRow: cursorRow_1, cursorColumn: cursorColumn_1, clear: clear_1 });\n            // Done.\n            return;\n        }\n        // Otherwise, the hit test is on a header region.\n        // Convert the hit test into a part.\n        var handle = Private.resizeHandleForHitTest(hit);\n        // Fetch the cursor for the handle.\n        var cursor = this.cursorForHandle(handle);\n        // Handle horizontal resize.\n        if (handle === 'left' || handle === 'right') {\n            // Set up the resize data type.\n            var type = 'column-resize';\n            // Determine the column region.\n            var rgn = (region === 'column-header' ? 'body' : 'row-header');\n            // Determine the section index.\n            var index = handle === 'left' ? column - 1 : column;\n            // Fetch the section size.\n            var size = grid.columnSize(rgn, index);\n            // Override the document cursor.\n            var override_2 = Drag.overrideCursor(cursor);\n            // Create the temporary press data.\n            this._pressData = { type: type, region: rgn, index: index, size: size, clientX: clientX, override: override_2 };\n            // Done.\n            return;\n        }\n        // Handle vertical resize\n        if (handle === 'top' || handle === 'bottom') {\n            // Set up the resize data type.\n            var type = 'row-resize';\n            // Determine the row region.\n            var rgn = (region === 'row-header' ? 'body' : 'column-header');\n            // Determine the section index.\n            var index = handle === 'top' ? row - 1 : row;\n            // Fetch the section size.\n            var size = grid.rowSize(rgn, index);\n            // Override the document cursor.\n            var override_3 = Drag.overrideCursor(cursor);\n            // Create the temporary press data.\n            this._pressData = { type: type, region: rgn, index: index, size: size, clientY: clientY, override: override_3 };\n            // Done.\n            return;\n        }\n        // Otherwise, the only option is select.\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Bail if there is no selection model.\n        if (!model) {\n            return;\n        }\n        // Override the document cursor.\n        var override = Drag.overrideCursor('default');\n        // Set up the press data.\n        this._pressData = {\n            type: 'select', region: region, row: row, column: column, override: override,\n            localX: -1, localY: -1, timeout: -1\n        };\n        // Set up the selection variables.\n        var r1;\n        var c1;\n        var r2;\n        var c2;\n        var cursorRow;\n        var cursorColumn;\n        var clear;\n        // Compute the selection based on the pressed region.\n        if (region === 'corner-header') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = 0;\n            c2 = Infinity;\n            cursorRow = accel ? 0 : shift ? model.cursorRow : 0;\n            cursorColumn = accel ? 0 : shift ? model.cursorColumn : 0;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else if (region === 'row-header') {\n            r1 = accel ? row : shift ? model.cursorRow : row;\n            r2 = row;\n            c1 = 0;\n            c2 = Infinity;\n            cursorRow = accel ? row : shift ? model.cursorRow : row;\n            cursorColumn = accel ? 0 : shift ? model.cursorColumn : 0;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else if (region === 'column-header') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = accel ? column : shift ? model.cursorColumn : column;\n            c2 = column;\n            cursorRow = accel ? 0 : shift ? model.cursorRow : 0;\n            cursorColumn = accel ? column : shift ? model.cursorColumn : column;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else {\n            r1 = accel ? row : shift ? model.cursorRow : row;\n            r2 = row;\n            c1 = accel ? column : shift ? model.cursorColumn : column;\n            c2 = column;\n            cursorRow = accel ? row : shift ? model.cursorRow : row;\n            cursorColumn = accel ? column : shift ? model.cursorColumn : column;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        // Set selection mode based on region\n        switch (region) {\n            case 'column-header':\n                model.selectionMode = 'column';\n                break;\n            case 'row-header':\n                model.selectionMode = 'row';\n                break;\n            default:\n                model.selectionMode = 'cell';\n                break;\n        }\n        // Make the selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cursorRow, cursorColumn: cursorColumn, clear: clear });\n    };\n    /**\n     * Handle the mouse move event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse move event of interest.\n     */\n    BasicMouseHandler.prototype.onMouseMove = function (grid, event) {\n        // Fetch the press data.\n        var data = this._pressData;\n        // Bail early if there is no press data.\n        if (!data) {\n            return;\n        }\n        // Handle a row resize.\n        if (data.type === 'row-resize') {\n            var dy = event.clientY - data.clientY;\n            grid.resizeRow(data.region, data.index, data.size + dy);\n            return;\n        }\n        // Handle a column resize.\n        if (data.type === 'column-resize') {\n            var dx = event.clientX - data.clientX;\n            grid.resizeColumn(data.region, data.index, data.size + dx);\n            return;\n        }\n        // Otherwise, it's a select.\n        // Mouse moves during a corner header press are a no-op.\n        if (data.region === 'corner-header') {\n            return;\n        }\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Bail early if the selection model was removed.\n        if (!model) {\n            return;\n        }\n        // Map to local coordinates.\n        var _a = grid.mapToLocal(event.clientX, event.clientY), lx = _a.lx, ly = _a.ly;\n        // Update the local mouse coordinates in the press data.\n        data.localX = lx;\n        data.localY = ly;\n        // Fetch the grid geometry.\n        var hw = grid.headerWidth;\n        var hh = grid.headerHeight;\n        var vpw = grid.viewportWidth;\n        var vph = grid.viewportHeight;\n        var sx = grid.scrollX;\n        var sy = grid.scrollY;\n        var msx = grid.maxScrollY;\n        var msy = grid.maxScrollY;\n        // Fetch the selection mode.\n        var mode = model.selectionMode;\n        // Set up the timeout variable.\n        var timeout = -1;\n        // Compute the timemout based on hit region and mouse position.\n        if (data.region === 'row-header' || mode === 'row') {\n            if (ly < hh && sy > 0) {\n                timeout = Private.computeTimeout(hh - ly);\n            }\n            else if (ly >= vph && sy < msy) {\n                timeout = Private.computeTimeout(ly - vph);\n            }\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            if (lx < hw && sx > 0) {\n                timeout = Private.computeTimeout(hw - lx);\n            }\n            else if (lx >= vpw && sx < msx) {\n                timeout = Private.computeTimeout(lx - vpw);\n            }\n        }\n        else {\n            if (lx < hw && sx > 0) {\n                timeout = Private.computeTimeout(hw - lx);\n            }\n            else if (lx >= vpw && sx < msx) {\n                timeout = Private.computeTimeout(lx - vpw);\n            }\n            else if (ly < hh && sy > 0) {\n                timeout = Private.computeTimeout(hh - ly);\n            }\n            else if (ly >= vph && sy < msy) {\n                timeout = Private.computeTimeout(ly - vph);\n            }\n        }\n        // Update or initiate the autoselect if needed.\n        if (timeout >= 0) {\n            if (data.timeout < 0) {\n                data.timeout = timeout;\n                setTimeout(function () { Private.autoselect(grid, data); }, timeout);\n            }\n            else {\n                data.timeout = timeout;\n            }\n            return;\n        }\n        // Otherwise, clear the autoselect timeout.\n        data.timeout = -1;\n        // Map the position to virtual coordinates.\n        var _b = grid.mapToVirtual(event.clientX, event.clientY), vx = _b.vx, vy = _b.vy;\n        // Clamp the coordinates to the limits.\n        vx = Math.max(0, Math.min(vx, grid.bodyWidth - 1));\n        vy = Math.max(0, Math.min(vy, grid.bodyHeight - 1));\n        // Set up the selection variables.\n        var r1;\n        var c1;\n        var r2;\n        var c2;\n        var cursorRow = model.cursorRow;\n        var cursorColumn = model.cursorColumn;\n        var clear = 'current';\n        // Compute the selection based pressed region.\n        if (data.region === 'row-header' || mode === 'row') {\n            r1 = data.row;\n            r2 = grid.rowAt('body', vy);\n            c1 = 0;\n            c2 = Infinity;\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = data.column;\n            c2 = grid.columnAt('body', vx);\n        }\n        else {\n            r1 = cursorRow;\n            r2 = grid.rowAt('body', vy);\n            c1 = cursorColumn;\n            c2 = grid.columnAt('body', vx);\n        }\n        // Make the selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cursorRow, cursorColumn: cursorColumn, clear: clear });\n    };\n    /**\n     * Handle the mouse up event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse up event of interest.\n     */\n    BasicMouseHandler.prototype.onMouseUp = function (grid, event) {\n        this.release();\n    };\n    /**\n     * Handle the mouse double click event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse up event of interest.\n     */\n    BasicMouseHandler.prototype.onMouseDoubleClick = function (grid, event) {\n        if (!grid.dataModel) {\n            this.release();\n            return;\n        }\n        // Unpack the event.\n        var clientX = event.clientX, clientY = event.clientY;\n        // Hit test the grid.\n        var hit = grid.hitTest(clientX, clientY);\n        // Unpack the hit test.\n        var region = hit.region, row = hit.row, column = hit.column;\n        if (region === 'void') {\n            this.release();\n            return;\n        }\n        if (region === 'body') {\n            if (grid.editable) {\n                var cell = {\n                    grid: grid,\n                    row: row,\n                    column: column\n                };\n                grid.editorController.edit(cell);\n            }\n        }\n        this.release();\n    };\n    /**\n     * Handle the context menu event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The context menu event of interest.\n     */\n    BasicMouseHandler.prototype.onContextMenu = function (grid, event) {\n        // TODO support user-defined context menus\n    };\n    /**\n     * Handle the wheel event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The wheel event of interest.\n     */\n    BasicMouseHandler.prototype.onWheel = function (grid, event) {\n        // Bail if a mouse press is in progress.\n        if (this._pressData) {\n            return;\n        }\n        // Extract the delta X and Y movement.\n        var dx = event.deltaX;\n        var dy = event.deltaY;\n        // Convert the delta values to pixel values.\n        switch (event.deltaMode) {\n            case 0: // DOM_DELTA_PIXEL\n                break;\n            case 1: // DOM_DELTA_LINE\n                var ds = grid.defaultSizes;\n                dx *= ds.columnWidth;\n                dy *= ds.rowHeight;\n                break;\n            case 2: // DOM_DELTA_PAGE\n                dx *= grid.pageWidth;\n                dy *= grid.pageHeight;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Scroll by the desired amount.\n        grid.scrollBy(dx, dy);\n    };\n    /**\n     * Convert a resize handle into a cursor.\n     */\n    BasicMouseHandler.prototype.cursorForHandle = function (handle) {\n        return Private.cursorMap[handle];\n    };\n    Object.defineProperty(BasicMouseHandler.prototype, \"pressData\", {\n        /**\n         * Get the current pressData\n         */\n        get: function () {\n            return this._pressData;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return BasicMouseHandler;\n}());\n/**\n * The namespace for the module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the resize handle for a grid hit test.\n     */\n    function resizeHandleForHitTest(hit) {\n        // Fetch the row and column.\n        var r = hit.row;\n        var c = hit.column;\n        // Fetch the leading and trailing sizes.\n        var lw = hit.x;\n        var lh = hit.y;\n        var tw = hit.width - hit.x;\n        var th = hit.height - hit.y;\n        // Set up the result variable.\n        var result;\n        // Dispatch based on hit test region.\n        switch (hit.region) {\n            case 'corner-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'column-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'row-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'body':\n                result = 'none';\n                break;\n            case 'void':\n                result = 'none';\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Return the result.\n        return result;\n    }\n    Private.resizeHandleForHitTest = resizeHandleForHitTest;\n    /**\n     * A timer callback for the autoselect loop.\n     *\n     * @param grid - The datagrid of interest.\n     *\n     * @param data - The select data of interest.\n     */\n    function autoselect(grid, data) {\n        // Bail early if the timeout has been reset.\n        if (data.timeout < 0) {\n            return;\n        }\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Bail early if the selection model has been removed.\n        if (!model) {\n            return;\n        }\n        // Fetch the current selection.\n        var cs = model.currentSelection();\n        // Bail early if there is no current selection.\n        if (!cs) {\n            return;\n        }\n        // Fetch local X and Y coordinates of the mouse.\n        var lx = data.localX;\n        var ly = data.localY;\n        // Set up the selection variables.\n        var r1 = cs.r1;\n        var c1 = cs.c1;\n        var r2 = cs.r2;\n        var c2 = cs.c2;\n        var cursorRow = model.cursorRow;\n        var cursorColumn = model.cursorColumn;\n        var clear = 'current';\n        // Fetch the grid geometry.\n        var hw = grid.headerWidth;\n        var hh = grid.headerHeight;\n        var vpw = grid.viewportWidth;\n        var vph = grid.viewportHeight;\n        // Fetch the selection mode.\n        var mode = model.selectionMode;\n        // Update the selection based on the hit region.\n        if (data.region === 'row-header' || mode === 'row') {\n            r2 += ly <= hh ? -1 : ly >= vph ? 1 : 0;\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            c2 += lx <= hw ? -1 : lx >= vpw ? 1 : 0;\n        }\n        else {\n            r2 += ly <= hh ? -1 : ly >= vph ? 1 : 0;\n            c2 += lx <= hw ? -1 : lx >= vpw ? 1 : 0;\n        }\n        // Update the current selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cursorRow, cursorColumn: cursorColumn, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid based on the hit region.\n        if (data.region === 'row-header' || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else if (data.region === 'column-header' || mode == 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else if (mode === 'cell') {\n            grid.scrollToCell(cs.r2, cs.c2);\n        }\n        // Schedule the next call with the current timeout.\n        setTimeout(function () { autoselect(grid, data); }, data.timeout);\n    }\n    Private.autoselect = autoselect;\n    /**\n     * Compute the scroll timeout for the given delta distance.\n     *\n     * @param delta - The delta pixels from the origin.\n     *\n     * @returns The scaled timeout in milliseconds.\n     */\n    function computeTimeout(delta) {\n        return 5 + 120 * (1 - Math.min(128, Math.abs(delta)) / 128);\n    }\n    Private.computeTimeout = computeTimeout;\n    /**\n     * A mapping of resize handle to cursor.\n     */\n    Private.cursorMap = {\n        top: 'ns-resize',\n        left: 'ew-resize',\n        right: 'ew-resize',\n        bottom: 'ns-resize',\n        none: 'default'\n    };\n})(Private || (Private = {}));\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\n// Copyright (c) Jupyter Development Team.\n/**\n * A base class for creating data grid selection models.\n *\n * #### Notes\n * If the predefined selection models are insufficient for a particular\n * use case, a custom model can be defined which derives from this class.\n */\nvar SelectionModel = /** @class */ (function () {\n    /**\n     * Construct a new selection model.\n     *\n     * @param options - The options for initializing the model.\n     */\n    function SelectionModel(options) {\n        this._changed = new Signal(this);\n        this._selectionMode = 'cell';\n        this.dataModel = options.dataModel;\n        this._selectionMode = options.selectionMode || 'cell';\n        this.dataModel.changed.connect(this.onDataModelChanged, this);\n    }\n    Object.defineProperty(SelectionModel.prototype, \"changed\", {\n        /**\n         * A signal emitted when the selection model has changed.\n         */\n        get: function () {\n            return this._changed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionModel.prototype, \"selectionMode\", {\n        /**\n         * Get the selection mode for the model.\n         */\n        get: function () {\n            return this._selectionMode;\n        },\n        /**\n         * Set the selection mode for the model.\n         *\n         * #### Notes\n         * This will clear the selection model.\n         */\n        set: function (value) {\n            // Bail early if the mode does not change.\n            if (this._selectionMode === value) {\n                return;\n            }\n            // Update the internal mode.\n            this._selectionMode = value;\n            // Clear the current selections.\n            this.clear();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Test whether any selection intersects a row.\n     *\n     * @param index - The row index of interest.\n     *\n     * @returns Whether any selection intersects the row.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    SelectionModel.prototype.isRowSelected = function (index) {\n        return some(this.selections(), function (s) { return Private$1.containsRow(s, index); });\n    };\n    /**\n     * Test whether any selection intersects a column.\n     *\n     * @param index - The column index of interest.\n     *\n     * @returns Whether any selection intersects the column.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    SelectionModel.prototype.isColumnSelected = function (index) {\n        return some(this.selections(), function (s) { return Private$1.containsColumn(s, index); });\n    };\n    /**\n     * Test whether any selection intersects a cell.\n     *\n     * @param row - The row index of interest.\n     *\n     * @param column - The column index of interest.\n     *\n     * @returns Whether any selection intersects the cell.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    SelectionModel.prototype.isCellSelected = function (row, column) {\n        return some(this.selections(), function (s) { return Private$1.containsCell(s, row, column); });\n    };\n    /**\n     * A signal handler for the data model `changed` signal.\n     *\n     * @param args - The arguments for the signal.\n     *\n     * #### Notes\n     * Selection model implementations should update their selections\n     * in a manner that is relevant for the changes to the data model.\n     *\n     * The default implementation of this method is a no-op.\n     */\n    SelectionModel.prototype.onDataModelChanged = function (sender, args) { };\n    /**\n     * Emit the `changed` signal for the selection model.\n     *\n     * #### Notes\n     * Subclasses should call this method whenever the selection model\n     * has changed so that attached data grids can update themselves.\n     */\n    SelectionModel.prototype.emitChanged = function () {\n        this._changed.emit(undefined);\n    };\n    return SelectionModel;\n}());\n/**\n * The namespace for the module implementation details.\n */\nvar Private$1;\n(function (Private) {\n    /**\n     * Test whether a selection contains a given row.\n     */\n    function containsRow(selection, row) {\n        var r1 = selection.r1, r2 = selection.r2;\n        return (row >= r1 && row <= r2) || (row >= r2 && row <= r1);\n    }\n    Private.containsRow = containsRow;\n    /**\n     * Test whether a selection contains a given column.\n     */\n    function containsColumn(selection, column) {\n        var c1 = selection.c1, c2 = selection.c2;\n        return (column >= c1 && column <= c2) || (column >= c2 && column <= c1);\n    }\n    Private.containsColumn = containsColumn;\n    /**\n     * Test whether a selection contains a given cell.\n     */\n    function containsCell(selection, row, column) {\n        return containsRow(selection, row) && containsColumn(selection, column);\n    }\n    Private.containsCell = containsCell;\n})(Private$1 || (Private$1 = {}));\n\n/**\n * A basic selection model implementation.\n *\n * #### Notes\n * This selection model is sufficient for most use cases where\n * structural knowledge of the data source is *not* required.\n */\nvar BasicSelectionModel = /** @class */ (function (_super) {\n    __extends(BasicSelectionModel, _super);\n    function BasicSelectionModel() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._cursorRow = -1;\n        _this._cursorColumn = -1;\n        _this._cursorRectIndex = -1;\n        _this._selections = [];\n        return _this;\n    }\n    Object.defineProperty(BasicSelectionModel.prototype, \"isEmpty\", {\n        /**\n         * Wether the selection model is empty.\n         */\n        get: function () {\n            return this._selections.length === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BasicSelectionModel.prototype, \"cursorRow\", {\n        /**\n         * The row index of the cursor.\n         */\n        get: function () {\n            return this._cursorRow;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BasicSelectionModel.prototype, \"cursorColumn\", {\n        /**\n         * The column index of the cursor.\n         */\n        get: function () {\n            return this._cursorColumn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Move cursor down/up/left/right while making sure it remains\n     * within the bounds of selected rectangles\n     *\n     * @param direction - The direction of the movement.\n     */\n    BasicSelectionModel.prototype.moveCursorWithinSelections = function (direction) {\n        var _this = this;\n        // Bail early if there are no selections or no existing cursor\n        if (this.isEmpty || this.cursorRow === -1 || this._cursorColumn === -1) {\n            return;\n        }\n        // Bail early if only single cell is selected\n        var firstSelection = this._selections[0];\n        if (this._selections.length === 1 &&\n            firstSelection.r1 === firstSelection.r2 &&\n            firstSelection.c1 === firstSelection.c2) {\n            return;\n        }\n        // start from last selection rectangle\n        if (this._cursorRectIndex === -1) {\n            this._cursorRectIndex = this._selections.length - 1;\n        }\n        var cursorRect = this._selections[this._cursorRectIndex];\n        var dr = direction === 'down' ? 1 : direction === 'up' ? -1 : 0;\n        var dc = direction === 'right' ? 1 : direction === 'left' ? -1 : 0;\n        var newRow = this._cursorRow + dr;\n        var newColumn = this._cursorColumn + dc;\n        var r1 = Math.min(cursorRect.r1, cursorRect.r2);\n        var r2 = Math.max(cursorRect.r1, cursorRect.r2);\n        var c1 = Math.min(cursorRect.c1, cursorRect.c2);\n        var c2 = Math.max(cursorRect.c1, cursorRect.c2);\n        var moveToNextRect = function () {\n            _this._cursorRectIndex = (_this._cursorRectIndex + 1) % _this._selections.length;\n            cursorRect = _this._selections[_this._cursorRectIndex];\n            newRow = Math.min(cursorRect.r1, cursorRect.r2);\n            newColumn = Math.min(cursorRect.c1, cursorRect.c2);\n        };\n        var moveToPreviousRect = function () {\n            _this._cursorRectIndex = _this._cursorRectIndex === 0 ? _this._selections.length - 1 : _this._cursorRectIndex - 1;\n            cursorRect = _this._selections[_this._cursorRectIndex];\n            newRow = Math.max(cursorRect.r1, cursorRect.r2);\n            newColumn = Math.max(cursorRect.c1, cursorRect.c2);\n        };\n        if (newRow > r2) {\n            newRow = r1;\n            newColumn += 1;\n            if (newColumn > c2) {\n                moveToNextRect();\n            }\n        }\n        else if (newRow < r1) {\n            newRow = r2;\n            newColumn -= 1;\n            if (newColumn < c1) {\n                moveToPreviousRect();\n            }\n        }\n        else if (newColumn > c2) {\n            newColumn = c1;\n            newRow += 1;\n            if (newRow > r2) {\n                moveToNextRect();\n            }\n        }\n        else if (newColumn < c1) {\n            newColumn = c2;\n            newRow -= 1;\n            if (newRow < r1) {\n                moveToPreviousRect();\n            }\n        }\n        this._cursorRow = newRow;\n        this._cursorColumn = newColumn;\n        // Emit the changed signal.\n        this.emitChanged();\n    };\n    /**\n     * Get the current selection in the selection model.\n     *\n     * @returns The current selection or `null`.\n     *\n     * #### Notes\n     * This is the selection which holds the cursor.\n     */\n    BasicSelectionModel.prototype.currentSelection = function () {\n        return this._selections[this._selections.length - 1] || null;\n    };\n    /**\n     * Get an iterator of the selections in the model.\n     *\n     * @returns A new iterator of the current selections.\n     *\n     * #### Notes\n     * The data grid will render the selections in order.\n     */\n    BasicSelectionModel.prototype.selections = function () {\n        return iter(this._selections);\n    };\n    /**\n     * Select the specified cells.\n     *\n     * @param args - The arguments for the selection.\n     */\n    BasicSelectionModel.prototype.select = function (args) {\n        // Fetch the current row and column counts;\n        var rowCount = this.dataModel.rowCount('body');\n        var columnCount = this.dataModel.columnCount('body');\n        // Bail early if there is no content.\n        if (rowCount <= 0 || columnCount <= 0) {\n            return;\n        }\n        // Unpack the arguments.\n        var r1 = args.r1, c1 = args.c1, r2 = args.r2, c2 = args.c2, cursorRow = args.cursorRow, cursorColumn = args.cursorColumn, clear = args.clear;\n        // Clear the necessary selections.\n        if (clear === 'all') {\n            this._selections.length = 0;\n        }\n        else if (clear === 'current') {\n            this._selections.pop();\n        }\n        // Clamp to the data model bounds.\n        r1 = Math.max(0, Math.min(r1, rowCount - 1));\n        r2 = Math.max(0, Math.min(r2, rowCount - 1));\n        c1 = Math.max(0, Math.min(c1, columnCount - 1));\n        c2 = Math.max(0, Math.min(c2, columnCount - 1));\n        // Handle the selection mode.\n        if (this.selectionMode === 'row') {\n            c1 = 0;\n            c2 = columnCount - 1;\n        }\n        else if (this.selectionMode === 'column') {\n            r1 = 0;\n            r2 = rowCount - 1;\n        }\n        // Alias the cursor row and column.\n        var cr = cursorRow;\n        var cc = cursorColumn;\n        // Compute the new cursor location.\n        if (cr < 0 || (cr < r1 && cr < r2) || (cr > r1 && cr > r2)) {\n            cr = r1;\n        }\n        if (cc < 0 || (cc < c1 && cc < c2) || (cc > c1 && cc > c2)) {\n            cc = c1;\n        }\n        // Update the cursor.\n        this._cursorRow = cr;\n        this._cursorColumn = cc;\n        this._cursorRectIndex = this._selections.length;\n        // Add the new selection.\n        this._selections.push({ r1: r1, c1: c1, r2: r2, c2: c2 });\n        // Emit the changed signal.\n        this.emitChanged();\n    };\n    /**\n     * Clear all selections in the selection model.\n     */\n    BasicSelectionModel.prototype.clear = function () {\n        // Bail early if there are no selections.\n        if (this._selections.length === 0) {\n            return;\n        }\n        // Reset the internal state.\n        this._cursorRow = -1;\n        this._cursorColumn = -1;\n        this._cursorRectIndex = -1;\n        this._selections.length = 0;\n        // Emit the changed signal.\n        this.emitChanged();\n    };\n    /**\n     * A signal handler for the data model `changed` signal.\n     *\n     * @param args - The arguments for the signal.\n     */\n    BasicSelectionModel.prototype.onDataModelChanged = function (sender, args) {\n        // Bail early if the model has no current selections.\n        if (this._selections.length === 0) {\n            return;\n        }\n        // Bail early if the cells have changed in place.\n        if (args.type === 'cells-changed') {\n            return;\n        }\n        // Bail early if there is no change to the row or column count.\n        if (args.type === 'rows-moved' || args.type === 'columns-moved') {\n            return;\n        }\n        // Fetch the last row and column index.\n        var lr = sender.rowCount('body') - 1;\n        var lc = sender.columnCount('body') - 1;\n        // Bail early if the data model is empty.\n        if (lr < 0 || lc < 0) {\n            this._selections.length = 0;\n            this.emitChanged();\n            return;\n        }\n        // Fetch the selection mode.\n        var mode = this.selectionMode;\n        // Set up the assignment index variable.\n        var j = 0;\n        // Iterate over the current selections.\n        for (var i = 0, n = this._selections.length; i < n; ++i) {\n            // Unpack the selection.\n            var _a = this._selections[i], r1 = _a.r1, c1 = _a.c1, r2 = _a.r2, c2 = _a.c2;\n            // Skip the selection if it will disappear.\n            if ((lr < r1 && lr < r2) || (lc < c1 && lc < c2)) {\n                continue;\n            }\n            // Modify the bounds based on the selection mode.\n            if (mode === 'row') {\n                r1 = Math.max(0, Math.min(r1, lr));\n                r2 = Math.max(0, Math.min(r2, lr));\n                c1 = 0;\n                c2 = lc;\n            }\n            else if (mode === 'column') {\n                r1 = 0;\n                r2 = lr;\n                c1 = Math.max(0, Math.min(c1, lc));\n                c2 = Math.max(0, Math.min(c2, lc));\n            }\n            else {\n                r1 = Math.max(0, Math.min(r1, lr));\n                r2 = Math.max(0, Math.min(r2, lr));\n                c1 = Math.max(0, Math.min(c1, lc));\n                c2 = Math.max(0, Math.min(c2, lc));\n            }\n            // Assign the modified selection to the array.\n            this._selections[j++] = { r1: r1, c1: c1, r2: r2, c2: c2 };\n        }\n        // Remove the stale selections.\n        this._selections.length = j;\n        // Emit the changed signal.\n        this.emitChanged();\n    };\n    return BasicSelectionModel;\n}(SelectionModel));\n\n/**\n * An object which renders the cells of a data grid.\n *\n * #### Notes\n * If the predefined cell renderers are insufficient for a particular\n * use case, a custom cell renderer can be defined which derives from\n * this class.\n *\n * The data grid renders cells in column-major order, by region. The\n * region order is: body, row header, column header, corner header.\n */\nvar CellRenderer = /** @class */ (function () {\n    function CellRenderer() {\n    }\n    return CellRenderer;\n}());\n/**\n * The namespace for the `CellRenderer` class statics.\n */\n(function (CellRenderer) {\n    /**\n     * Resolve a config option for a cell renderer.\n     *\n     * @param option - The config option to resolve.\n     *\n     * @param config - The cell config object.\n     *\n     * @returns The resolved value for the option.\n     */\n    function resolveOption(option, config) {\n        return typeof option === 'function' ? option(config) : option;\n    }\n    CellRenderer.resolveOption = resolveOption;\n})(CellRenderer || (CellRenderer = {}));\n\n// Copyright (c) Jupyter Development Team.\n/**\n * A widget which implements a notification popup.\n */\nvar Notification = /** @class */ (function (_super) {\n    __extends(Notification, _super);\n    /**\n     * Construct a new notification.\n     *\n     * @param options - The options for initializing the notification.\n     */\n    function Notification(options) {\n        var _this = _super.call(this, { node: Private$2.createNode() }) || this;\n        _this._message = '';\n        _this.addClass('lm-DataGrid-notification');\n        _this.setFlag(Widget.Flag.DisallowLayout);\n        _this._target = options.target;\n        _this._message = options.message || '';\n        _this._placement = options.placement || 'bottom';\n        Widget.attach(_this, document.body);\n        if (options.timeout && options.timeout > 0) {\n            setTimeout(function () {\n                _this.close();\n            }, options.timeout);\n        }\n        return _this;\n    }\n    /**\n     * Handle the DOM events for the notification.\n     *\n     * @param event - The DOM event sent to the notification.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notification's DOM node.\n     *\n     * This should not be called directly by user code.\n     */\n    Notification.prototype.handleEvent = function (event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMouseDown(event);\n                break;\n            case 'contextmenu':\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    };\n    Object.defineProperty(Notification.prototype, \"placement\", {\n        /**\n         * Get the placement of the notification.\n         */\n        get: function () {\n            return this._placement;\n        },\n        /**\n         * Set the placement of the notification.\n         */\n        set: function (value) {\n            // Do nothing if the placement does not change.\n            if (this._placement === value) {\n                return;\n            }\n            // Update the internal placement.\n            this._placement = value;\n            // Schedule an update for notification.\n            this.update();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Notification.prototype, \"message\", {\n        /**\n         * Get the current value of the message.\n         */\n        get: function () {\n            return this._message;\n        },\n        /**\n         * Set the current value of the message.\n         *\n         */\n        set: function (value) {\n            // Do nothing if the value does not change.\n            if (this._message === value) {\n                return;\n            }\n            // Update the internal value.\n            this._message = value;\n            // Schedule an update for notification.\n            this.update();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Notification.prototype, \"messageNode\", {\n        /**\n         * Get the node presenting the message.\n         */\n        get: function () {\n            return this.node.getElementsByClassName('lm-DataGrid-notificationMessage')[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * A method invoked on a 'before-attach' message.\n     */\n    Notification.prototype.onBeforeAttach = function (msg) {\n        this.node.addEventListener('mousedown', this);\n        this.update();\n    };\n    /**\n     * A method invoked on an 'after-detach' message.\n     */\n    Notification.prototype.onAfterDetach = function (msg) {\n        this.node.removeEventListener('mousedown', this);\n    };\n    /**\n     * A method invoked on an 'update-request' message.\n     */\n    Notification.prototype.onUpdateRequest = function (msg) {\n        var targetRect = this._target.getBoundingClientRect();\n        var style = this.node.style;\n        switch (this._placement) {\n            case 'bottom':\n                style.left = targetRect.left + 'px';\n                style.top = targetRect.bottom + 'px';\n                break;\n            case 'top':\n                style.left = targetRect.left + 'px';\n                style.height = targetRect.top + 'px';\n                style.top = '0';\n                style.alignItems = 'flex-end';\n                style.justifyContent = 'flex-end';\n                break;\n            case 'left':\n                style.left = '0';\n                style.width = targetRect.left + 'px';\n                style.top = targetRect.top + 'px';\n                style.alignItems = 'flex-end';\n                style.justifyContent = 'flex-end';\n                break;\n            case 'right':\n                style.left = targetRect.right + 'px';\n                style.top = targetRect.top + 'px';\n                break;\n        }\n        this.messageNode.innerHTML = this._message;\n    };\n    /**\n     * Handle the `'mousedown'` event for the notification.\n     */\n    Notification.prototype._evtMouseDown = function (event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        this.close();\n    };\n    return Notification;\n}(Widget));\n/**\n * The namespace for the module implementation details.\n */\nvar Private$2;\n(function (Private) {\n    /**\n     * Create the DOM node for notification.\n     */\n    function createNode() {\n        var node = document.createElement('div');\n        var container = document.createElement('div');\n        container.className = 'lm-DataGrid-notificationContainer';\n        var message = document.createElement('span');\n        message.className = 'lm-DataGrid-notificationMessage';\n        container.appendChild(message);\n        node.appendChild(container);\n        return node;\n    }\n    Private.createNode = createNode;\n})(Private$2 || (Private$2 = {}));\n\n// default validation error message\nvar DEFAULT_INVALID_INPUT_MESSAGE = \"Invalid input!\";\n/**\n * A cell input validator object which always returns valid.\n */\nvar PassInputValidator = /** @class */ (function () {\n    function PassInputValidator() {\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    PassInputValidator.prototype.validate = function (cell, value) {\n        return { valid: true };\n    };\n    return PassInputValidator;\n}());\n/**\n * Text cell input validator.\n */\nvar TextInputValidator = /** @class */ (function () {\n    function TextInputValidator() {\n        /**\n         * Minimum text length\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.minLength = Number.NaN;\n        /**\n         * Maximum text length\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.maxLength = Number.NaN;\n        /**\n         * Required text pattern as regular expression\n         *\n         * The default is null, meaning no pattern constraint\n         */\n        this.pattern = null;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    TextInputValidator.prototype.validate = function (cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (typeof value !== 'string') {\n            return {\n                valid: false,\n                message: 'Input must be valid text'\n            };\n        }\n        if (!isNaN(this.minLength) && value.length < this.minLength) {\n            return {\n                valid: false,\n                message: \"Text length must be greater than \" + this.minLength\n            };\n        }\n        if (!isNaN(this.maxLength) && value.length > this.maxLength) {\n            return {\n                valid: false,\n                message: \"Text length must be less than \" + this.maxLength\n            };\n        }\n        if (this.pattern && !this.pattern.test(value)) {\n            return {\n                valid: false,\n                message: \"Text doesn't match the required pattern\"\n            };\n        }\n        return { valid: true };\n    };\n    return TextInputValidator;\n}());\n/**\n * Integer cell input validator.\n */\nvar IntegerInputValidator = /** @class */ (function () {\n    function IntegerInputValidator() {\n        /**\n         * Minimum value\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.min = Number.NaN;\n        /**\n         * Maximum value\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.max = Number.NaN;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    IntegerInputValidator.prototype.validate = function (cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (isNaN(value) || (value % 1 !== 0)) {\n            return {\n                valid: false,\n                message: 'Input must be valid integer'\n            };\n        }\n        if (!isNaN(this.min) && value < this.min) {\n            return {\n                valid: false,\n                message: \"Input must be greater than \" + this.min\n            };\n        }\n        if (!isNaN(this.max) && value > this.max) {\n            return {\n                valid: false,\n                message: \"Input must be less than \" + this.max\n            };\n        }\n        return { valid: true };\n    };\n    return IntegerInputValidator;\n}());\n/**\n * Real number cell input validator.\n */\nvar NumberInputValidator = /** @class */ (function () {\n    function NumberInputValidator() {\n        /**\n         * Minimum value\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.min = Number.NaN;\n        /**\n         * Maximum value\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.max = Number.NaN;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    NumberInputValidator.prototype.validate = function (cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (isNaN(value)) {\n            return {\n                valid: false,\n                message: 'Input must be valid number'\n            };\n        }\n        if (!isNaN(this.min) && value < this.min) {\n            return {\n                valid: false,\n                message: \"Input must be greater than \" + this.min\n            };\n        }\n        if (!isNaN(this.max) && value > this.max) {\n            return {\n                valid: false,\n                message: \"Input must be less than \" + this.max\n            };\n        }\n        return { valid: true };\n    };\n    return NumberInputValidator;\n}());\n/**\n * An abstract base class that provides the most of the functionality\n * needed by a cell editor. All of the built-in cell editors\n * for various cell types are derived from this base class. Custom cell editors\n * can be easily implemented by extending this class.\n */\nvar CellEditor = /** @class */ (function () {\n    /**\n     * Construct a new cell editor.\n     */\n    function CellEditor() {\n        var _this = this;\n        /**\n         * A signal emitted when input changes.\n         */\n        this.inputChanged = new Signal(this);\n        /**\n         * Notification popup used to show validation error messages.\n         */\n        this.validityNotification = null;\n        /**\n         * Whether the cell editor is disposed.\n         */\n        this._disposed = false;\n        /**\n         * Whether the value input is valid.\n         */\n        this._validInput = true;\n        /**\n         * Grid wheel event handler.\n         */\n        this._gridWheelEventHandler = null;\n        this.inputChanged.connect(function () {\n            _this.validate();\n        });\n    }\n    Object.defineProperty(CellEditor.prototype, \"isDisposed\", {\n        /**\n         * Whether the cell editor is disposed.\n         */\n        get: function () {\n            return this._disposed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    CellEditor.prototype.dispose = function () {\n        if (this._disposed) {\n            return;\n        }\n        if (this._gridWheelEventHandler) {\n            this.cell.grid.node.removeEventListener('wheel', this._gridWheelEventHandler);\n            this._gridWheelEventHandler = null;\n        }\n        this._closeValidityNotification();\n        this._disposed = true;\n        this.cell.grid.node.removeChild(this.viewportOccluder);\n    };\n    /**\n     * Start editing the cell.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param options - The cell editing options.\n     */\n    CellEditor.prototype.edit = function (cell, options) {\n        var _this = this;\n        this.cell = cell;\n        this.onCommit = options && options.onCommit;\n        this.onCancel = options && options.onCancel;\n        this.validator = (options && options.validator) ? options.validator : this.createValidatorBasedOnType();\n        this._gridWheelEventHandler = function () {\n            _this._closeValidityNotification();\n            _this.updatePosition();\n        };\n        cell.grid.node.addEventListener('wheel', this._gridWheelEventHandler);\n        this._addContainer();\n        this.updatePosition();\n        this.startEditing();\n    };\n    /**\n     * Cancel editing the cell.\n     */\n    CellEditor.prototype.cancel = function () {\n        if (this._disposed) {\n            return;\n        }\n        this.dispose();\n        if (this.onCancel) {\n            this.onCancel();\n        }\n    };\n    Object.defineProperty(CellEditor.prototype, \"validInput\", {\n        /**\n         * Whether the value input is valid.\n         */\n        get: function () {\n            return this._validInput;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Validate the cell input. Shows validation error notification when input is invalid.\n     */\n    CellEditor.prototype.validate = function () {\n        var value;\n        try {\n            value = this.getInput();\n        }\n        catch (error) {\n            console.log(\"Input error: \" + error.message);\n            this.setValidity(false, error.message || DEFAULT_INVALID_INPUT_MESSAGE);\n            return;\n        }\n        if (this.validator) {\n            var result = this.validator.validate(this.cell, value);\n            if (result.valid) {\n                this.setValidity(true);\n            }\n            else {\n                this.setValidity(false, result.message || DEFAULT_INVALID_INPUT_MESSAGE);\n            }\n        }\n        else {\n            this.setValidity(true);\n        }\n    };\n    /**\n     * Set validity flag.\n     *\n     * @param valid - Whether the input is valid.\n     *\n     * @param message - Notification message to show.\n     *\n     * If message is set to empty string (which is the default)\n     * existing notification popup is removed if any.\n     */\n    CellEditor.prototype.setValidity = function (valid, message) {\n        if (message === void 0) { message = \"\"; }\n        this._validInput = valid;\n        this._closeValidityNotification();\n        if (valid) {\n            this.editorContainer.classList.remove('lm-mod-invalid');\n        }\n        else {\n            this.editorContainer.classList.add('lm-mod-invalid');\n            // show a notification popup\n            if (message !== \"\") {\n                this.validityNotification = new Notification({\n                    target: this.editorContainer,\n                    message: message,\n                    placement: 'bottom',\n                    timeout: 5000\n                });\n                this.validityNotification.show();\n            }\n        }\n    };\n    /**\n     * Create and return a cell input validator based on configuration of the\n     * cell being edited. If no suitable validator can be found, it returns undefined.\n     */\n    CellEditor.prototype.createValidatorBasedOnType = function () {\n        var cell = this.cell;\n        var metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        switch (metadata && metadata.type) {\n            case 'string':\n                {\n                    var validator = new TextInputValidator();\n                    if (typeof (metadata.format) === 'string') {\n                        var format = metadata.format;\n                        switch (format) {\n                            case 'email':\n                                validator.pattern = new RegExp(\"^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$\");\n                                break;\n                            case 'uuid':\n                                validator.pattern = new RegExp(\"[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}\");\n                                break;\n                        }\n                    }\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minLength !== undefined) {\n                            validator.minLength = metadata.constraint.minLength;\n                        }\n                        if (metadata.constraint.maxLength !== undefined) {\n                            validator.maxLength = metadata.constraint.maxLength;\n                        }\n                        if (typeof (metadata.constraint.pattern) === 'string') {\n                            validator.pattern = new RegExp(metadata.constraint.pattern);\n                        }\n                    }\n                    return validator;\n                }\n            case 'number':\n                {\n                    var validator = new NumberInputValidator();\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minimum !== undefined) {\n                            validator.min = metadata.constraint.minimum;\n                        }\n                        if (metadata.constraint.maximum !== undefined) {\n                            validator.max = metadata.constraint.maximum;\n                        }\n                    }\n                    return validator;\n                }\n            case 'integer':\n                {\n                    var validator = new IntegerInputValidator();\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minimum !== undefined) {\n                            validator.min = metadata.constraint.minimum;\n                        }\n                        if (metadata.constraint.maximum !== undefined) {\n                            validator.max = metadata.constraint.maximum;\n                        }\n                    }\n                    return validator;\n                }\n        }\n        return undefined;\n    };\n    /**\n     * Compute cell rectangle and return with other cell properties.\n     */\n    CellEditor.prototype.getCellInfo = function (cell) {\n        var grid = cell.grid, row = cell.row, column = cell.column;\n        var data = grid.dataModel.data('body', row, column);\n        var columnX = grid.headerWidth - grid.scrollX + grid.columnOffset('body', column);\n        var rowY = grid.headerHeight - grid.scrollY + grid.rowOffset('body', row);\n        var width = grid.columnSize('body', column);\n        var height = grid.rowSize('body', row);\n        return {\n            grid: grid,\n            row: row,\n            column: column,\n            data: data,\n            x: columnX,\n            y: rowY,\n            width: width,\n            height: height\n        };\n    };\n    /**\n     * Reposition cell editor by moving viewport occluder and cell editor container.\n     */\n    CellEditor.prototype.updatePosition = function () {\n        var grid = this.cell.grid;\n        var cellInfo = this.getCellInfo(this.cell);\n        var headerHeight = grid.headerHeight;\n        var headerWidth = grid.headerWidth;\n        this.viewportOccluder.style.top = headerHeight + 'px';\n        this.viewportOccluder.style.left = headerWidth + 'px';\n        this.viewportOccluder.style.width = (grid.viewportWidth - headerWidth) + 'px';\n        this.viewportOccluder.style.height = (grid.viewportHeight - headerHeight) + 'px';\n        this.viewportOccluder.style.position = 'absolute';\n        this.editorContainer.style.left = (cellInfo.x - 1 - headerWidth) + 'px';\n        this.editorContainer.style.top = (cellInfo.y - 1 - headerHeight) + 'px';\n        this.editorContainer.style.width = (cellInfo.width + 1) + 'px';\n        this.editorContainer.style.height = (cellInfo.height + 1) + 'px';\n        this.editorContainer.style.visibility = 'visible';\n        this.editorContainer.style.position = 'absolute';\n    };\n    /**\n     * Commit the edited value.\n     *\n     * @param cursorMovement - Cursor move direction based on keys pressed to end the edit.\n     *\n     * @returns true on valid input, false otherwise.\n     */\n    CellEditor.prototype.commit = function (cursorMovement) {\n        if (cursorMovement === void 0) { cursorMovement = 'none'; }\n        this.validate();\n        if (!this._validInput) {\n            return false;\n        }\n        var value;\n        try {\n            value = this.getInput();\n        }\n        catch (error) {\n            console.log(\"Input error: \" + error.message);\n            return false;\n        }\n        this.dispose();\n        if (this.onCommit) {\n            this.onCommit({\n                cell: this.cell,\n                value: value,\n                cursorMovement: cursorMovement\n            });\n        }\n        return true;\n    };\n    /**\n     * Create container elements needed to prevent editor widget overflow\n     * beyond viewport and to position cell editor widget.\n     */\n    CellEditor.prototype._addContainer = function () {\n        var _this = this;\n        this.viewportOccluder = document.createElement('div');\n        this.viewportOccluder.className = 'lm-DataGrid-cellEditorOccluder';\n        this.cell.grid.node.appendChild(this.viewportOccluder);\n        this.editorContainer = document.createElement('div');\n        this.editorContainer.className = 'lm-DataGrid-cellEditorContainer';\n        this.viewportOccluder.appendChild(this.editorContainer);\n        // update mouse event pass-through state based on input validity\n        this.editorContainer.addEventListener('mouseleave', function (event) {\n            _this.viewportOccluder.style.pointerEvents = _this._validInput ? 'none' : 'auto';\n        });\n        this.editorContainer.addEventListener('mouseenter', function (event) {\n            _this.viewportOccluder.style.pointerEvents = 'none';\n        });\n    };\n    /**\n     * Remove validity notification popup.\n     */\n    CellEditor.prototype._closeValidityNotification = function () {\n        if (this.validityNotification) {\n            this.validityNotification.close();\n            this.validityNotification = null;\n        }\n    };\n    return CellEditor;\n}());\n/**\n * Abstract base class with shared functionality\n * for cell editors which use HTML Input widget as editor.\n */\nvar InputCellEditor = /** @class */ (function (_super) {\n    __extends(InputCellEditor, _super);\n    function InputCellEditor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    InputCellEditor.prototype.handleEvent = function (event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n            case 'input':\n                this._onInput(event);\n                break;\n        }\n    };\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    InputCellEditor.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Start editing the cell.\n     */\n    InputCellEditor.prototype.startEditing = function () {\n        this.createWidget();\n        var cell = this.cell;\n        var cellInfo = this.getCellInfo(cell);\n        this.input.value = this.deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this.input);\n        this.input.focus();\n        this.input.select();\n        this.bindEvents();\n    };\n    InputCellEditor.prototype.deserialize = function (value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    };\n    InputCellEditor.prototype.createWidget = function () {\n        var input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        input.spellcheck = false;\n        input.type = this.inputType;\n        this.input = input;\n    };\n    InputCellEditor.prototype.bindEvents = function () {\n        this.input.addEventListener('keydown', this);\n        this.input.addEventListener('blur', this);\n        this.input.addEventListener('input', this);\n    };\n    InputCellEditor.prototype._unbindEvents = function () {\n        this.input.removeEventListener('keydown', this);\n        this.input.removeEventListener('blur', this);\n        this.input.removeEventListener('input', this);\n    };\n    InputCellEditor.prototype._onKeyDown = function (event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    };\n    InputCellEditor.prototype._onBlur = function (event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.input.focus();\n        }\n    };\n    InputCellEditor.prototype._onInput = function (event) {\n        this.inputChanged.emit(void 0);\n    };\n    return InputCellEditor;\n}(CellEditor));\n/**\n * Cell editor for text cells.\n */\nvar TextCellEditor = /** @class */ (function (_super) {\n    __extends(TextCellEditor, _super);\n    function TextCellEditor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputType = 'text';\n        return _this;\n    }\n    /**\n     * Return the current text input entered.\n     */\n    TextCellEditor.prototype.getInput = function () {\n        return this.input.value;\n    };\n    return TextCellEditor;\n}(InputCellEditor));\n/**\n * Cell editor for real number cells.\n */\nvar NumberCellEditor = /** @class */ (function (_super) {\n    __extends(NumberCellEditor, _super);\n    function NumberCellEditor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputType = 'number';\n        return _this;\n    }\n    /**\n     * Start editing the cell.\n     */\n    NumberCellEditor.prototype.startEditing = function () {\n        _super.prototype.startEditing.call(this);\n        this.input.step = 'any';\n        var cell = this.cell;\n        var metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        var constraint = metadata.constraint;\n        if (constraint) {\n            if (constraint.minimum) {\n                this.input.min = constraint.minimum;\n            }\n            if (constraint.maximum) {\n                this.input.max = constraint.maximum;\n            }\n        }\n    };\n    /**\n     * Return the current number input entered. This method throws exception\n     * if input is invalid.\n     */\n    NumberCellEditor.prototype.getInput = function () {\n        var value = this.input.value;\n        if (value.trim() === '') {\n            return null;\n        }\n        var floatValue = parseFloat(value);\n        if (isNaN(floatValue)) {\n            throw new Error('Invalid input');\n        }\n        return floatValue;\n    };\n    return NumberCellEditor;\n}(InputCellEditor));\n/**\n * Cell editor for integer cells.\n */\nvar IntegerCellEditor = /** @class */ (function (_super) {\n    __extends(IntegerCellEditor, _super);\n    function IntegerCellEditor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputType = 'number';\n        return _this;\n    }\n    /**\n     * Start editing the cell.\n     */\n    IntegerCellEditor.prototype.startEditing = function () {\n        _super.prototype.startEditing.call(this);\n        this.input.step = '1';\n        var cell = this.cell;\n        var metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        var constraint = metadata.constraint;\n        if (constraint) {\n            if (constraint.minimum) {\n                this.input.min = constraint.minimum;\n            }\n            if (constraint.maximum) {\n                this.input.max = constraint.maximum;\n            }\n        }\n    };\n    /**\n     * Return the current integer input entered. This method throws exception\n     * if input is invalid.\n     */\n    IntegerCellEditor.prototype.getInput = function () {\n        var value = this.input.value;\n        if (value.trim() === '') {\n            return null;\n        }\n        var intValue = parseInt(value);\n        if (isNaN(intValue)) {\n            throw new Error('Invalid input');\n        }\n        return intValue;\n    };\n    return IntegerCellEditor;\n}(InputCellEditor));\n/**\n * Cell editor for date cells.\n */\nvar DateCellEditor = /** @class */ (function (_super) {\n    __extends(DateCellEditor, _super);\n    function DateCellEditor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    DateCellEditor.prototype.handleEvent = function (event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    };\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    DateCellEditor.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Start editing the cell.\n     */\n    DateCellEditor.prototype.startEditing = function () {\n        this._createWidget();\n        var cell = this.cell;\n        var cellInfo = this.getCellInfo(cell);\n        this._input.value = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._bindEvents();\n    };\n    /**\n     * Return the current date input entered.\n     */\n    DateCellEditor.prototype.getInput = function () {\n        return this._input.value;\n    };\n    DateCellEditor.prototype._deserialize = function (value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    };\n    DateCellEditor.prototype._createWidget = function () {\n        var input = document.createElement('input');\n        input.type = 'date';\n        input.pattern = \"\\d{4}-\\d{2}-\\d{2}\";\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        this._input = input;\n    };\n    DateCellEditor.prototype._bindEvents = function () {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('blur', this);\n    };\n    DateCellEditor.prototype._unbindEvents = function () {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('blur', this);\n    };\n    DateCellEditor.prototype._onKeyDown = function (event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    };\n    DateCellEditor.prototype._onBlur = function (event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    };\n    return DateCellEditor;\n}(CellEditor));\n/**\n * Cell editor for boolean cells.\n */\nvar BooleanCellEditor = /** @class */ (function (_super) {\n    __extends(BooleanCellEditor, _super);\n    function BooleanCellEditor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    BooleanCellEditor.prototype.handleEvent = function (event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'mousedown':\n                // fix focus loss problem in Safari and Firefox\n                this._input.focus();\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    };\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    BooleanCellEditor.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Start editing the cell.\n     */\n    BooleanCellEditor.prototype.startEditing = function () {\n        this._createWidget();\n        var cell = this.cell;\n        var cellInfo = this.getCellInfo(cell);\n        this._input.checked = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._bindEvents();\n    };\n    /**\n     * Return the current boolean input entered.\n     */\n    BooleanCellEditor.prototype.getInput = function () {\n        return this._input.checked;\n    };\n    BooleanCellEditor.prototype._deserialize = function (value) {\n        if (value === null || value === undefined) {\n            return false;\n        }\n        return value == true;\n    };\n    BooleanCellEditor.prototype._createWidget = function () {\n        var input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorCheckbox');\n        input.type = 'checkbox';\n        input.spellcheck = false;\n        this._input = input;\n    };\n    BooleanCellEditor.prototype._bindEvents = function () {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('mousedown', this);\n        this._input.addEventListener('blur', this);\n    };\n    BooleanCellEditor.prototype._unbindEvents = function () {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('mousedown', this);\n        this._input.removeEventListener('blur', this);\n    };\n    BooleanCellEditor.prototype._onKeyDown = function (event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    };\n    BooleanCellEditor.prototype._onBlur = function (event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    };\n    return BooleanCellEditor;\n}(CellEditor));\n/**\n * Cell editor for option cells.\n *\n * It supports multiple option selection. If cell metadata contains\n * type attribute 'array', then it behaves as a multi select.\n * In that case cell data is expected to be list of string values.\n */\nvar OptionCellEditor = /** @class */ (function (_super) {\n    __extends(OptionCellEditor, _super);\n    function OptionCellEditor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._isMultiSelect = false;\n        return _this;\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    OptionCellEditor.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        _super.prototype.dispose.call(this);\n        if (this._isMultiSelect) {\n            document.body.removeChild(this._select);\n        }\n    };\n    /**\n     * Start editing the cell.\n     */\n    OptionCellEditor.prototype.startEditing = function () {\n        var cell = this.cell;\n        var cellInfo = this.getCellInfo(cell);\n        var metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        this._isMultiSelect = metadata.type === 'array';\n        this._createWidget();\n        if (this._isMultiSelect) {\n            this._select.multiple = true;\n            var values = this._deserialize(cellInfo.data);\n            for (var i = 0; i < this._select.options.length; ++i) {\n                var option = this._select.options.item(i);\n                option.selected = values.indexOf(option.value) !== -1;\n            }\n            document.body.appendChild(this._select);\n        }\n        else {\n            this._select.value = this._deserialize(cellInfo.data);\n            this.editorContainer.appendChild(this._select);\n        }\n        this._select.focus();\n        this._bindEvents();\n        this.updatePosition();\n    };\n    /**\n     * Return the current option input.\n     */\n    OptionCellEditor.prototype.getInput = function () {\n        if (this._isMultiSelect) {\n            var input = [];\n            for (var i = 0; i < this._select.selectedOptions.length; ++i) {\n                input.push(this._select.selectedOptions.item(i).value);\n            }\n            return input;\n        }\n        else {\n            return this._select.value;\n        }\n    };\n    /**\n     * Reposition cell editor.\n     */\n    OptionCellEditor.prototype.updatePosition = function () {\n        _super.prototype.updatePosition.call(this);\n        if (!this._isMultiSelect) {\n            return;\n        }\n        var cellInfo = this.getCellInfo(this.cell);\n        this._select.style.position = 'absolute';\n        var editorContainerRect = this.editorContainer.getBoundingClientRect();\n        this._select.style.left = editorContainerRect.left + 'px';\n        this._select.style.top = (editorContainerRect.top + cellInfo.height) + 'px';\n        this._select.style.width = editorContainerRect.width + 'px';\n        this._select.style.maxHeight = '60px';\n        this.editorContainer.style.visibility = 'hidden';\n    };\n    OptionCellEditor.prototype._deserialize = function (value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        if (this._isMultiSelect) {\n            var values = [];\n            if (Array.isArray(value)) {\n                for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {\n                    var item = value_1[_i];\n                    values.push(item.toString());\n                }\n            }\n            return values;\n        }\n        else {\n            return value.toString();\n        }\n    };\n    OptionCellEditor.prototype._createWidget = function () {\n        var cell = this.cell;\n        var metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        var items = metadata.constraint.enum;\n        var select = document.createElement('select');\n        select.classList.add('lm-DataGrid-cellEditorWidget');\n        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n            var item = items_1[_i];\n            var option = document.createElement(\"option\");\n            option.value = item;\n            option.text = item;\n            select.appendChild(option);\n        }\n        this._select = select;\n    };\n    OptionCellEditor.prototype._bindEvents = function () {\n        this._select.addEventListener('keydown', this._onKeyDown.bind(this));\n        this._select.addEventListener('blur', this._onBlur.bind(this));\n    };\n    OptionCellEditor.prototype._onKeyDown = function (event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    };\n    OptionCellEditor.prototype._onBlur = function (event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._select.focus();\n        }\n    };\n    return OptionCellEditor;\n}(CellEditor));\n/**\n * Cell editor for option cells whose value can be any value\n * from set of pre-defined options or values that can be input by user.\n */\nvar DynamicOptionCellEditor = /** @class */ (function (_super) {\n    __extends(DynamicOptionCellEditor, _super);\n    function DynamicOptionCellEditor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    DynamicOptionCellEditor.prototype.handleEvent = function (event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    };\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    DynamicOptionCellEditor.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Start editing the cell.\n     */\n    DynamicOptionCellEditor.prototype.startEditing = function () {\n        this._createWidget();\n        var cell = this.cell;\n        var cellInfo = this.getCellInfo(cell);\n        this._input.value = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._input.select();\n        this._bindEvents();\n    };\n    /**\n     * Return the current option input.\n     */\n    DynamicOptionCellEditor.prototype.getInput = function () {\n        return this._input.value;\n    };\n    DynamicOptionCellEditor.prototype._deserialize = function (value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    };\n    DynamicOptionCellEditor.prototype._createWidget = function () {\n        var cell = this.cell;\n        var grid = cell.grid;\n        var dataModel = grid.dataModel;\n        var rowCount = dataModel.rowCount('body');\n        var listId = 'cell-editor-list';\n        var list = document.createElement('datalist');\n        list.id = listId;\n        var input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        var valueSet = new Set();\n        for (var r = 0; r < rowCount; ++r) {\n            var data = dataModel.data('body', r, cell.column);\n            if (data) {\n                valueSet.add(data);\n            }\n        }\n        valueSet.forEach(function (value) {\n            var option = document.createElement(\"option\");\n            option.value = value;\n            option.text = value;\n            list.appendChild(option);\n        });\n        this.editorContainer.appendChild(list);\n        input.setAttribute('list', listId);\n        this._input = input;\n    };\n    DynamicOptionCellEditor.prototype._bindEvents = function () {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('blur', this);\n    };\n    DynamicOptionCellEditor.prototype._unbindEvents = function () {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('blur', this);\n    };\n    DynamicOptionCellEditor.prototype._onKeyDown = function (event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    };\n    DynamicOptionCellEditor.prototype._onBlur = function (event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    };\n    return DynamicOptionCellEditor;\n}(CellEditor));\n\n/**\n * An object which provides the data for a data grid.\n *\n * #### Notes\n * If the predefined data models are insufficient for a particular use\n * case, a custom model can be defined which derives from this class.\n */\nvar DataModel = /** @class */ (function () {\n    function DataModel() {\n        this._changed = new Signal(this);\n    }\n    Object.defineProperty(DataModel.prototype, \"changed\", {\n        /**\n         * A signal emitted when the data model has changed.\n         */\n        get: function () {\n            return this._changed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Get the metadata for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns The metadata for the specified cell.\n     *\n     * #### Notes\n     * The returned metadata should be treated as immutable.\n     *\n     * This method is called often, and so should be efficient.\n     *\n     * The default implementation returns `{}`.\n     */\n    DataModel.prototype.metadata = function (region, row, column) {\n        return DataModel.emptyMetadata;\n    };\n    /**\n     * Emit the `changed` signal for the data model.\n     *\n     * #### Notes\n     * Subclasses should call this method whenever the data model has\n     * changed so that attached data grids can update themselves.\n     */\n    DataModel.prototype.emitChanged = function (args) {\n        this._changed.emit(args);\n    };\n    return DataModel;\n}());\n/**\n * An object which provides the mutable data for a data grid.\n *\n * #### Notes\n * This object is an extension to `DataModel` and it only adds ability to\n * change data for cells.\n */\nvar MutableDataModel = /** @class */ (function (_super) {\n    __extends(MutableDataModel, _super);\n    function MutableDataModel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MutableDataModel;\n}(DataModel));\n/**\n * The namespace for the `DataModel` class statics.\n */\n(function (DataModel) {\n    /**\n     * A singleton empty metadata object.\n     */\n    DataModel.emptyMetadata = Object.freeze({});\n})(DataModel || (DataModel = {}));\n\n/**\n * A thin caching wrapper around a 2D canvas rendering context.\n *\n * #### Notes\n * This class is mostly a transparent wrapper around a canvas rendering\n * context which improves performance when writing context state.\n *\n * For best performance, avoid reading state from the `gc`. Writes are\n * cached based on the previously written value.\n *\n * Unless otherwise specified, the API and semantics of this class are\n * identical to the builtin 2D canvas rendering context:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\n *\n * The wrapped canvas context should not be manipulated externally\n * until the wrapping `GraphicsContext` object is disposed.\n */\nvar GraphicsContext = /** @class */ (function () {\n    /**\n     * Create a new graphics context object.\n     *\n     * @param context - The 2D canvas rendering context to wrap.\n     */\n    function GraphicsContext(context) {\n        this._disposed = false;\n        this._context = context;\n        this._state = Private$3.State.create(context);\n    }\n    GraphicsContext.prototype.dispose = function () {\n        // Bail if the gc is already disposed.\n        if (this._disposed) {\n            return;\n        }\n        // Mark the gc as disposed.\n        this._disposed = true;\n        // Pop any unrestored saves.\n        while (this._state.next) {\n            this._state = this._state.next;\n            this._context.restore();\n        }\n    };\n    Object.defineProperty(GraphicsContext.prototype, \"isDisposed\", {\n        get: function () {\n            return this._disposed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"fillStyle\", {\n        get: function () {\n            return this._context.fillStyle;\n        },\n        set: function (value) {\n            if (this._state.fillStyle !== value) {\n                this._state.fillStyle = value;\n                this._context.fillStyle = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"strokeStyle\", {\n        get: function () {\n            return this._context.strokeStyle;\n        },\n        set: function (value) {\n            if (this._state.strokeStyle !== value) {\n                this._state.strokeStyle = value;\n                this._context.strokeStyle = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"font\", {\n        get: function () {\n            return this._context.font;\n        },\n        set: function (value) {\n            if (this._state.font !== value) {\n                this._state.font = value;\n                this._context.font = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"textAlign\", {\n        get: function () {\n            return this._context.textAlign;\n        },\n        set: function (value) {\n            if (this._state.textAlign !== value) {\n                this._state.textAlign = value;\n                this._context.textAlign = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"textBaseline\", {\n        get: function () {\n            return this._context.textBaseline;\n        },\n        set: function (value) {\n            if (this._state.textBaseline !== value) {\n                this._state.textBaseline = value;\n                this._context.textBaseline = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"lineCap\", {\n        get: function () {\n            return this._context.lineCap;\n        },\n        set: function (value) {\n            if (this._state.lineCap !== value) {\n                this._state.lineCap = value;\n                this._context.lineCap = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"lineDashOffset\", {\n        get: function () {\n            return this._context.lineDashOffset;\n        },\n        set: function (value) {\n            if (this._state.lineDashOffset !== value) {\n                this._state.lineDashOffset = value;\n                this._context.lineDashOffset = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"lineJoin\", {\n        get: function () {\n            return this._context.lineJoin;\n        },\n        set: function (value) {\n            if (this._state.lineJoin !== value) {\n                this._state.lineJoin = value;\n                this._context.lineJoin = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"lineWidth\", {\n        get: function () {\n            return this._context.lineWidth;\n        },\n        set: function (value) {\n            if (this._state.lineWidth !== value) {\n                this._state.lineWidth = value;\n                this._context.lineWidth = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"miterLimit\", {\n        get: function () {\n            return this._context.miterLimit;\n        },\n        set: function (value) {\n            if (this._state.miterLimit !== value) {\n                this._state.miterLimit = value;\n                this._context.miterLimit = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"shadowBlur\", {\n        get: function () {\n            return this._context.shadowBlur;\n        },\n        set: function (value) {\n            if (this._state.shadowBlur !== value) {\n                this._state.shadowBlur = value;\n                this._context.shadowBlur = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"shadowColor\", {\n        get: function () {\n            return this._context.shadowColor;\n        },\n        set: function (value) {\n            if (this._state.shadowColor !== value) {\n                this._state.shadowColor = value;\n                this._context.shadowColor = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"shadowOffsetX\", {\n        get: function () {\n            return this._context.shadowOffsetX;\n        },\n        set: function (value) {\n            if (this._state.shadowOffsetX !== value) {\n                this._state.shadowOffsetX = value;\n                this._context.shadowOffsetX = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"shadowOffsetY\", {\n        get: function () {\n            return this._context.shadowOffsetY;\n        },\n        set: function (value) {\n            if (this._state.shadowOffsetY !== value) {\n                this._state.shadowOffsetY = value;\n                this._context.shadowOffsetY = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"imageSmoothingEnabled\", {\n        get: function () {\n            return this._context.imageSmoothingEnabled;\n        },\n        set: function (value) {\n            if (this._state.imageSmoothingEnabled !== value) {\n                this._state.imageSmoothingEnabled = value;\n                this._context.imageSmoothingEnabled = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"globalAlpha\", {\n        get: function () {\n            return this._context.globalAlpha;\n        },\n        set: function (value) {\n            if (this._state.globalAlpha !== value) {\n                this._state.globalAlpha = value;\n                this._context.globalAlpha = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"globalCompositeOperation\", {\n        get: function () {\n            return this._context.globalCompositeOperation;\n        },\n        set: function (value) {\n            if (this._state.globalCompositeOperation !== value) {\n                this._state.globalCompositeOperation = value;\n                this._context.globalCompositeOperation = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GraphicsContext.prototype.getLineDash = function () {\n        return this._context.getLineDash();\n    };\n    GraphicsContext.prototype.setLineDash = function (segments) {\n        this._context.setLineDash(segments);\n    };\n    GraphicsContext.prototype.rotate = function (angle) {\n        this._context.rotate(angle);\n    };\n    GraphicsContext.prototype.scale = function (x, y) {\n        this._context.scale(x, y);\n    };\n    GraphicsContext.prototype.transform = function (m11, m12, m21, m22, dx, dy) {\n        this._context.transform(m11, m12, m21, m22, dx, dy);\n    };\n    GraphicsContext.prototype.translate = function (x, y) {\n        this._context.translate(x, y);\n    };\n    GraphicsContext.prototype.setTransform = function (m11, m12, m21, m22, dx, dy) {\n        this._context.setTransform(m11, m12, m21, m22, dx, dy);\n    };\n    GraphicsContext.prototype.save = function () {\n        // Clone an push the current state to the stack.\n        this._state = Private$3.State.push(this._state);\n        // Save the wrapped context state.\n        this._context.save();\n    };\n    GraphicsContext.prototype.restore = function () {\n        // Bail if there is no state to restore.\n        if (!this._state.next) {\n            return;\n        }\n        // Pop the saved state from the stack.\n        this._state = Private$3.State.pop(this._state);\n        // Restore the wrapped context state.\n        this._context.restore();\n    };\n    GraphicsContext.prototype.beginPath = function () {\n        return this._context.beginPath();\n    };\n    GraphicsContext.prototype.closePath = function () {\n        this._context.closePath();\n    };\n    GraphicsContext.prototype.isPointInPath = function (x, y, fillRule) {\n        var result;\n        if (arguments.length === 2) {\n            result = this._context.isPointInPath(x, y);\n        }\n        else {\n            result = this._context.isPointInPath(x, y, fillRule);\n        }\n        return result;\n    };\n    GraphicsContext.prototype.arc = function (x, y, radius, startAngle, endAngle, anticlockwise) {\n        if (arguments.length === 5) {\n            this._context.arc(x, y, radius, startAngle, endAngle);\n        }\n        else {\n            this._context.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n        }\n    };\n    GraphicsContext.prototype.arcTo = function (x1, y1, x2, y2, radius) {\n        this._context.arcTo(x1, y1, x2, y2, radius);\n    };\n    GraphicsContext.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n        this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    };\n    GraphicsContext.prototype.ellipse = function (x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\n        if (arguments.length === 7) {\n            this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle);\n        }\n        else {\n            this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\n        }\n    };\n    GraphicsContext.prototype.lineTo = function (x, y) {\n        this._context.lineTo(x, y);\n    };\n    GraphicsContext.prototype.moveTo = function (x, y) {\n        this._context.moveTo(x, y);\n    };\n    GraphicsContext.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {\n        this._context.quadraticCurveTo(cpx, cpy, x, y);\n    };\n    GraphicsContext.prototype.rect = function (x, y, w, h) {\n        this._context.rect(x, y, w, h);\n    };\n    GraphicsContext.prototype.clip = function (fillRule) {\n        if (arguments.length === 0) {\n            this._context.clip();\n        }\n        else {\n            this._context.clip(fillRule);\n        }\n    };\n    GraphicsContext.prototype.fill = function (fillRule) {\n        if (arguments.length === 0) {\n            this._context.fill();\n        }\n        else {\n            this._context.fill(fillRule);\n        }\n    };\n    GraphicsContext.prototype.stroke = function () {\n        this._context.stroke();\n    };\n    GraphicsContext.prototype.clearRect = function (x, y, w, h) {\n        return this._context.clearRect(x, y, w, h);\n    };\n    GraphicsContext.prototype.fillRect = function (x, y, w, h) {\n        this._context.fillRect(x, y, w, h);\n    };\n    GraphicsContext.prototype.fillText = function (text, x, y, maxWidth) {\n        if (arguments.length === 3) {\n            this._context.fillText(text, x, y);\n        }\n        else {\n            this._context.fillText(text, x, y, maxWidth);\n        }\n    };\n    GraphicsContext.prototype.strokeRect = function (x, y, w, h) {\n        this._context.strokeRect(x, y, w, h);\n    };\n    GraphicsContext.prototype.strokeText = function (text, x, y, maxWidth) {\n        if (arguments.length === 3) {\n            this._context.strokeText(text, x, y);\n        }\n        else {\n            this._context.strokeText(text, x, y, maxWidth);\n        }\n    };\n    GraphicsContext.prototype.measureText = function (text) {\n        return this._context.measureText(text);\n    };\n    GraphicsContext.prototype.createLinearGradient = function (x0, y0, x1, y1) {\n        return this._context.createLinearGradient(x0, y0, x1, y1);\n    };\n    GraphicsContext.prototype.createRadialGradient = function (x0, y0, r0, x1, y1, r1) {\n        return this._context.createRadialGradient(x0, y0, r0, x1, y1, r1);\n    };\n    GraphicsContext.prototype.createPattern = function (image, repetition) {\n        return this._context.createPattern(image, repetition);\n    };\n    GraphicsContext.prototype.createImageData = function () {\n        return this._context.createImageData.apply(this._context, arguments);\n    };\n    GraphicsContext.prototype.getImageData = function (sx, sy, sw, sh) {\n        return this._context.getImageData(sx, sy, sw, sh);\n    };\n    GraphicsContext.prototype.putImageData = function () {\n        this._context.putImageData.apply(this._context, arguments);\n    };\n    GraphicsContext.prototype.drawImage = function () {\n        this._context.drawImage.apply(this._context, arguments);\n    };\n    GraphicsContext.prototype.drawFocusIfNeeded = function (element) {\n        this._context.drawFocusIfNeeded(element);\n    };\n    return GraphicsContext;\n}());\n/**\n * The namespace for the module implementation details.\n */\nvar Private$3;\n(function (Private) {\n    /**\n     * The index of next valid pool object.\n     */\n    var pi = -1;\n    /**\n     * A state object allocation pool.\n     */\n    var pool = [];\n    /**\n     * An object which holds the state for a gc.\n     */\n    var State = /** @class */ (function () {\n        function State() {\n        }\n        /**\n         * Create a gc state object from a 2D canvas context.\n         */\n        State.create = function (context) {\n            var state = pi < 0 ? new State() : pool[pi--];\n            state.next = null;\n            state.fillStyle = context.fillStyle;\n            state.font = context.font;\n            state.globalAlpha = context.globalAlpha;\n            state.globalCompositeOperation = context.globalCompositeOperation;\n            state.imageSmoothingEnabled = context.imageSmoothingEnabled;\n            state.lineCap = context.lineCap;\n            state.lineDashOffset = context.lineDashOffset;\n            state.lineJoin = context.lineJoin;\n            state.lineWidth = context.lineWidth;\n            state.miterLimit = context.miterLimit;\n            state.shadowBlur = context.shadowBlur;\n            state.shadowColor = context.shadowColor;\n            state.shadowOffsetX = context.shadowOffsetX;\n            state.shadowOffsetY = context.shadowOffsetY;\n            state.strokeStyle = context.strokeStyle;\n            state.textAlign = context.textAlign;\n            state.textBaseline = context.textBaseline;\n            return state;\n        };\n        /**\n         * Clone an existing gc state object and add it to the state stack.\n         */\n        State.push = function (other) {\n            var state = pi < 0 ? new State() : pool[pi--];\n            state.next = other;\n            state.fillStyle = other.fillStyle;\n            state.font = other.font;\n            state.globalAlpha = other.globalAlpha;\n            state.globalCompositeOperation = other.globalCompositeOperation;\n            state.imageSmoothingEnabled = other.imageSmoothingEnabled;\n            state.lineCap = other.lineCap;\n            state.lineDashOffset = other.lineDashOffset;\n            state.lineJoin = other.lineJoin;\n            state.lineWidth = other.lineWidth;\n            state.miterLimit = other.miterLimit;\n            state.shadowBlur = other.shadowBlur;\n            state.shadowColor = other.shadowColor;\n            state.shadowOffsetX = other.shadowOffsetX;\n            state.shadowOffsetY = other.shadowOffsetY;\n            state.strokeStyle = other.strokeStyle;\n            state.textAlign = other.textAlign;\n            state.textBaseline = other.textBaseline;\n            return state;\n        };\n        /**\n         * Pop the next state object and return the current to the pool\n         */\n        State.pop = function (state) {\n            state.fillStyle = '';\n            state.strokeStyle = '';\n            pool[++pi] = state;\n            return state.next;\n        };\n        return State;\n    }());\n    Private.State = State;\n})(Private$3 || (Private$3 = {}));\n\n/**\n * A cell renderer which renders data values as text.\n */\nvar TextRenderer = /** @class */ (function (_super) {\n    __extends(TextRenderer, _super);\n    /**\n     * Construct a new text renderer.\n     *\n     * @param options - The options for initializing the renderer.\n     */\n    function TextRenderer(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this) || this;\n        _this.font = options.font || '12px sans-serif';\n        _this.textColor = options.textColor || '#000000';\n        _this.backgroundColor = options.backgroundColor || '';\n        _this.verticalAlignment = options.verticalAlignment || 'center';\n        _this.horizontalAlignment = options.horizontalAlignment || 'left';\n        _this.format = options.format || TextRenderer.formatGeneric();\n        _this.elideDirection = options.elideDirection || 'right';\n        _this.wrapText = options.wrapText || false;\n        return _this;\n    }\n    /**\n     * Paint the content for a cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    TextRenderer.prototype.paint = function (gc, config) {\n        this.drawBackground(gc, config);\n        this.drawText(gc, config);\n    };\n    /**\n     * Draw the background for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    TextRenderer.prototype.drawBackground = function (gc, config) {\n        // Resolve the background color for the cell.\n        var color = CellRenderer.resolveOption(this.backgroundColor, config);\n        // Bail if there is no background color to draw.\n        if (!color) {\n            return;\n        }\n        // Fill the cell with the background color.\n        gc.fillStyle = color;\n        gc.fillRect(config.x, config.y, config.width, config.height);\n    };\n    /**\n     * Draw the text for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    TextRenderer.prototype.drawText = function (gc, config) {\n        // Resolve the font for the cell.\n        var font = CellRenderer.resolveOption(this.font, config);\n        // Bail if there is no font to draw.\n        if (!font) {\n            return;\n        }\n        // Resolve the text color for the cell.\n        var color = CellRenderer.resolveOption(this.textColor, config);\n        // Bail if there is no text color to draw.\n        if (!color) {\n            return;\n        }\n        // Format the cell value to text.\n        var format = this.format;\n        var text = format(config);\n        // Bail if there is no text to draw.\n        if (!text) {\n            return;\n        }\n        // Resolve the vertical and horizontal alignment.\n        var vAlign = CellRenderer.resolveOption(this.verticalAlignment, config);\n        var hAlign = CellRenderer.resolveOption(this.horizontalAlignment, config);\n        // Resolve the elision direction\n        var elideDirection = CellRenderer.resolveOption(this.elideDirection, config);\n        // Resolve the text wrapping flag\n        var wrapText = CellRenderer.resolveOption(this.wrapText, config);\n        // Compute the padded text box height for the specified alignment.\n        var boxHeight = config.height - (vAlign === 'center' ? 1 : 2);\n        // Bail if the text box has no effective size.\n        if (boxHeight <= 0) {\n            return;\n        }\n        // Compute the text height for the gc font.\n        var textHeight = TextRenderer.measureFontHeight(font);\n        // Set up the text position variables.\n        var textX;\n        var textY;\n        var boxWidth;\n        // Compute the Y position for the text.\n        switch (vAlign) {\n            case 'top':\n                textY = config.y + 2 + textHeight;\n                break;\n            case 'center':\n                textY = config.y + config.height / 2 + textHeight / 2;\n                break;\n            case 'bottom':\n                textY = config.y + config.height - 2;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the X position for the text.\n        switch (hAlign) {\n            case 'left':\n                textX = config.x + 8;\n                boxWidth = config.width - 14;\n                break;\n            case 'center':\n                textX = config.x + config.width / 2;\n                boxWidth = config.width;\n                break;\n            case 'right':\n                textX = config.x + config.width - 8;\n                boxWidth = config.width - 14;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Clip the cell if the text is taller than the text box height.\n        if (textHeight > boxHeight) {\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n        }\n        // Set the gc state.\n        gc.font = font;\n        gc.fillStyle = color;\n        gc.textAlign = hAlign;\n        gc.textBaseline = 'bottom';\n        // The current text width in pixels.\n        var textWidth = gc.measureText(text).width;\n        // Apply text wrapping if enabled.\n        if (wrapText && textWidth > boxWidth) {\n            // Make sure box clipping happens.\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n            // Split column name to words based on\n            // whitespace preceding a word boundary.\n            // \"Hello  world\" --> [\"Hello  \", \"world\"]\n            var wordsInColumn = text.split(/\\s(?=\\b)/);\n            // Y-coordinate offset for any additional lines\n            var curY = textY;\n            var textInCurrentLine = wordsInColumn.shift();\n            // Single word. Applying text wrap on word by splitting\n            // it into characters and fitting the maximum number of\n            // characters possible per line (box width).\n            if (wordsInColumn.length === 0) {\n                var curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                while (curLineTextWidth > boxWidth && textInCurrentLine !== \"\") {\n                    // Iterating from the end of the string until we find a\n                    // substring (0,i) which has a width less than the box width.\n                    for (var i = textInCurrentLine.length; i > 0; i--) {\n                        var curSubString = textInCurrentLine.substring(0, i);\n                        var curSubStringWidth = gc.measureText(curSubString).width;\n                        if (curSubStringWidth < boxWidth || curSubString.length === 1) {\n                            // Found a substring which has a width less than the current\n                            // box width. Rendering that substring on the current line\n                            // and setting the remainder of the parent string as the next\n                            // string to iterate on for the next line.\n                            var nextLineText = textInCurrentLine.substring(i, textInCurrentLine.length);\n                            textInCurrentLine = nextLineText;\n                            curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                            gc.fillText(curSubString, textX, curY);\n                            curY += textHeight;\n                            // No need to continue iterating after we identified\n                            // an index to break the string on.\n                            break;\n                        }\n                    }\n                }\n            }\n            // Multiple words in column header. Fitting maximum \n            // number of words possible per line (box width).\n            else {\n                while (wordsInColumn.length !== 0) {\n                    // Processing the next word in the queue.\n                    var curWord = wordsInColumn.shift();\n                    // Joining that word with the existing text for\n                    // the current line.\n                    var incrementedText = [textInCurrentLine, curWord].join(\" \");\n                    var incrementedTextWidth = gc.measureText(incrementedText).width;\n                    if (incrementedTextWidth > boxWidth) {\n                        // If the newly combined text has a width larger than\n                        // the box width, we render the line before the current\n                        // word was added. We set the current word as the next\n                        // line.\n                        gc.fillText(textInCurrentLine, textX, curY);\n                        curY += textHeight;\n                        textInCurrentLine = curWord;\n                    }\n                    else {\n                        // The combined text hasd a width less than the box width. We\n                        // set the the current line text to be the new combined text.\n                        textInCurrentLine = incrementedText;\n                    }\n                }\n            }\n            gc.fillText(textInCurrentLine, textX, curY);\n            // Terminating the call here as we don't want\n            // to apply text eliding when wrapping is active.\n            return;\n        }\n        // Elide text that is too long\n        var elide = '\\u2026';\n        // Compute elided text\n        if (elideDirection === 'right') {\n            while ((textWidth > boxWidth) && (text.length > 1)) {\n                if (text.length > 4 && textWidth >= 2 * boxWidth) {\n                    // If text width is substantially bigger, take half the string\n                    text = text.substring(0, (text.length / 2) + 1) + elide;\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = text.substring(0, text.length - 2) + elide;\n                }\n                textWidth = gc.measureText(text).width;\n            }\n        }\n        else {\n            while ((textWidth > boxWidth) && (text.length > 1)) {\n                if (text.length > 4 && textWidth >= 2 * boxWidth) {\n                    // If text width is substantially bigger, take half the string\n                    text = elide + text.substring((text.length / 2));\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = elide + text.substring(2);\n                }\n                textWidth = gc.measureText(text).width;\n            }\n        }\n        // Draw the text for the cell.\n        gc.fillText(text, textX, textY);\n    };\n    return TextRenderer;\n}(CellRenderer));\n/**\n * The namespace for the `TextRenderer` class statics.\n */\n(function (TextRenderer) {\n    /**\n     * Create a generic text format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new generic text format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `String()` to coerce any value\n     * to a string.\n     */\n    function formatGeneric(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return String(value);\n        };\n    }\n    TextRenderer.formatGeneric = formatGeneric;\n    /**\n     * Create a fixed decimal format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new fixed decimal format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toFixed()` to\n     * coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatFixed(options) {\n        if (options === void 0) { options = {}; }\n        var digits = options.digits;\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toFixed(digits);\n        };\n    }\n    TextRenderer.formatFixed = formatFixed;\n    /**\n     * Create a significant figure format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new significant figure format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toPrecision()`\n     * to coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatPrecision(options) {\n        if (options === void 0) { options = {}; }\n        var digits = options.digits;\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toPrecision(digits);\n        };\n    }\n    TextRenderer.formatPrecision = formatPrecision;\n    /**\n     * Create a scientific notation format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new scientific notation format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toExponential()`\n     * to coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatExponential(options) {\n        if (options === void 0) { options = {}; }\n        var digits = options.digits;\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toExponential(digits);\n        };\n    }\n    TextRenderer.formatExponential = formatExponential;\n    /**\n     * Create an international number format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new international number format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Intl.NumberFormat` object to\n     * coerce values.\n     *\n     * This is the most flexible (but slowest) number formatter.\n     */\n    function formatIntlNumber(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        var nft = new Intl.NumberFormat(options.locales, options.options);\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return nft.format(value);\n        };\n    }\n    TextRenderer.formatIntlNumber = formatIntlNumber;\n    /**\n     * Create a date format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new date format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toDateString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatDate(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toDateString();\n            }\n            return (new Date(value)).toDateString();\n        };\n    }\n    TextRenderer.formatDate = formatDate;\n    /**\n     * Create a time format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new time format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toTimeString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatTime(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toTimeString();\n            }\n            return (new Date(value)).toTimeString();\n        };\n    }\n    TextRenderer.formatTime = formatTime;\n    /**\n     * Create an ISO datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new ISO datetime format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toISOString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatISODateTime(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toISOString();\n            }\n            return (new Date(value)).toISOString();\n        };\n    }\n    TextRenderer.formatISODateTime = formatISODateTime;\n    /**\n     * Create a UTC datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new UTC datetime format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toUTCString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatUTCDateTime(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toUTCString();\n            }\n            return (new Date(value)).toUTCString();\n        };\n    }\n    TextRenderer.formatUTCDateTime = formatUTCDateTime;\n    /**\n     * Create an international datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new international datetime format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Intl.DateTimeFormat` object to\n     * coerce values.\n     *\n     * This is the most flexible (but slowest) datetime formatter.\n     */\n    function formatIntlDateTime(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        var dtf = new Intl.DateTimeFormat(options.locales, options.options);\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return dtf.format(value);\n        };\n    }\n    TextRenderer.formatIntlDateTime = formatIntlDateTime;\n    /**\n     * Measure the height of a font.\n     *\n     * @param font - The CSS font string of interest.\n     *\n     * @returns The height of the font bounding box.\n     *\n     * #### Notes\n     * This function uses a temporary DOM node to measure the text box\n     * height for the specified font. The first call for a given font\n     * will incur a DOM reflow, but the return value is cached, so any\n     * subsequent call for the same font will return the cached value.\n     */\n    function measureFontHeight(font) {\n        // Look up the cached font height.\n        var height = Private$4.fontHeightCache[font];\n        // Return the cached font height if it exists.\n        if (height !== undefined) {\n            return height;\n        }\n        // Normalize the font.\n        Private$4.fontMeasurementGC.font = font;\n        var normFont = Private$4.fontMeasurementGC.font;\n        // Set the font on the measurement node.\n        Private$4.fontMeasurementNode.style.font = normFont;\n        // Add the measurement node to the document.\n        document.body.appendChild(Private$4.fontMeasurementNode);\n        // Measure the node height.\n        height = Private$4.fontMeasurementNode.offsetHeight;\n        // Remove the measurement node from the document.\n        document.body.removeChild(Private$4.fontMeasurementNode);\n        // Cache the measured height for the font and norm font.\n        Private$4.fontHeightCache[font] = height;\n        Private$4.fontHeightCache[normFont] = height;\n        // Return the measured height.\n        return height;\n    }\n    TextRenderer.measureFontHeight = measureFontHeight;\n})(TextRenderer || (TextRenderer = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private$4;\n(function (Private) {\n    /**\n     * A cache of measured font heights.\n     */\n    Private.fontHeightCache = Object.create(null);\n    /**\n     * The DOM node used for font height measurement.\n     */\n    Private.fontMeasurementNode = (function () {\n        var node = document.createElement('div');\n        node.style.position = 'absolute';\n        node.style.top = '-99999px';\n        node.style.left = '-99999px';\n        node.style.visibility = 'hidden';\n        node.textContent = 'M';\n        return node;\n    })();\n    /**\n     * The GC used for font measurement.\n     */\n    Private.fontMeasurementGC = (function () {\n        var canvas = document.createElement('canvas');\n        canvas.width = 0;\n        canvas.height = 0;\n        return canvas.getContext('2d');\n    })();\n})(Private$4 || (Private$4 = {}));\n\n/**\n * A class which manages the mapping of cell renderers.\n */\nvar RendererMap = /** @class */ (function () {\n    /**\n     * Construct a new renderer map.\n     *\n     * @param values - The initial values for the map.\n     *\n     * @param fallback - The renderer of last resort.\n     */\n    function RendererMap(values, fallback) {\n        if (values === void 0) { values = {}; }\n        this._changed = new Signal(this);\n        this._values = __assign({}, values);\n        this._fallback = fallback || new TextRenderer();\n    }\n    Object.defineProperty(RendererMap.prototype, \"changed\", {\n        /**\n         * A signal emitted when the renderer map has changed.\n         */\n        get: function () {\n            return this._changed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Get the cell renderer to use for the given cell config.\n     *\n     * @param config - The cell config of interest.\n     *\n     * @returns The renderer to use for the cell.\n     */\n    RendererMap.prototype.get = function (config) {\n        // Fetch the renderer from the values map.\n        var renderer = this._values[config.region];\n        // Execute a resolver function if necessary.\n        if (typeof renderer === 'function') {\n            try {\n                renderer = renderer(config);\n            }\n            catch (err) {\n                renderer = undefined;\n                console.error(err);\n            }\n        }\n        // Return the renderer or the fallback.\n        return renderer || this._fallback;\n    };\n    /**\n     * Update the renderer map with new values\n     *\n     * @param values - The updated values for the map.\n     *\n     * @param fallback - The renderer of last resort.\n     *\n     * #### Notes\n     * This method always emits the `changed` signal.\n     */\n    RendererMap.prototype.update = function (values, fallback) {\n        if (values === void 0) { values = {}; }\n        this._values = __assign(__assign({}, this._values), values);\n        this._fallback = fallback || this._fallback;\n        this._changed.emit(undefined);\n    };\n    return RendererMap;\n}());\n\n// Copyright (c) Jupyter Development Team.\n/**\n * An object which manages a collection of variable sized sections.\n *\n * #### Notes\n * This class is an implementation detail. It is designed to manage\n * the variable row and column sizes for a data grid. User code will\n * not interact with this class directly.\n */\nvar SectionList = /** @class */ (function () {\n    /**\n     * Construct a new section list.\n     *\n     * @param options - The options for initializing the list.\n     */\n    function SectionList(options) {\n        this._count = 0;\n        this._length = 0;\n        this._sections = [];\n        this._minimumSize = options.minimumSize || 2;\n        this._defaultSize = Math.max(this._minimumSize, Math.floor(options.defaultSize));\n    }\n    Object.defineProperty(SectionList.prototype, \"length\", {\n        /**\n         * The total size of all sections in the list.\n         *\n         * #### Complexity\n         * Constant.\n         */\n        get: function () {\n            return this._length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SectionList.prototype, \"count\", {\n        /**\n         * The total number of sections in the list.\n         *\n         * #### Complexity\n         * Constant.\n         */\n        get: function () {\n            return this._count;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SectionList.prototype, \"minimumSize\", {\n        /**\n         * Get the minimum size of sections in the list.\n         *\n         * #### Complexity\n         * Constant.\n         */\n        get: function () {\n            return this._minimumSize;\n        },\n        /**\n         * Set the minimum size of sections in the list.\n         *\n         * #### Complexity\n         * Linear on the number of resized sections.\n         */\n        set: function (value) {\n            // Normalize the value.\n            value = Math.max(2, Math.floor(value));\n            // Bail early if the value does not change.\n            if (this._minimumSize === value) {\n                return;\n            }\n            // Update the internal minimum size.\n            this._minimumSize = value;\n            // Update default size if larger than minimum size\n            if (value > this._defaultSize) {\n                this.defaultSize = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SectionList.prototype, \"defaultSize\", {\n        /**\n         * Get the default size of sections in the list.\n         *\n         * #### Complexity\n         * Constant.\n         */\n        get: function () {\n            return this._defaultSize;\n        },\n        /**\n         * Set the default size of sections in the list.\n         *\n         * #### Complexity\n         * Linear on the number of resized sections.\n         */\n        set: function (value) {\n            // Normalize the value.\n            value = Math.max(this._minimumSize, Math.floor(value));\n            // Bail early if the value does not change.\n            if (this._defaultSize === value) {\n                return;\n            }\n            // Compute the delta default size.\n            var delta = value - this._defaultSize;\n            // Update the internal default size.\n            this._defaultSize = value;\n            // Update the length.\n            this._length += delta * (this._count - this._sections.length);\n            // Bail early if there are no modified sections.\n            if (this._sections.length === 0) {\n                return;\n            }\n            // Recompute the offsets of the modified sections.\n            for (var i = 0, n = this._sections.length; i < n; ++i) {\n                // Look up the previous and current modified sections.\n                var prev = this._sections[i - 1];\n                var curr = this._sections[i];\n                // Adjust the offset for the current section.\n                if (prev) {\n                    var count = curr.index - prev.index - 1;\n                    curr.offset = prev.offset + prev.size + count * value;\n                }\n                else {\n                    curr.offset = curr.index * value;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clamp a size to the minimum section size\n     *\n     * @param size - The size to clamp.\n     *\n     * @returns The size or the section minimum size, whichever is larger\n     */\n    SectionList.prototype.clampSize = function (size) {\n        return Math.max(this._minimumSize, Math.floor(size));\n    };\n    /**\n     * Find the index of the section which covers the given offset.\n     *\n     * @param offset - The offset of the section of interest.\n     *\n     * @returns The index of the section which covers the given offset,\n     *   or `-1` if the offset is out of range.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    SectionList.prototype.indexOf = function (offset) {\n        // Bail early if the offset is out of range.\n        if (offset < 0 || offset >= this._length || this._count === 0) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return Math.floor(offset / this._defaultSize);\n        }\n        // Find the modified section for the given offset.\n        var i = ArrayExt.lowerBound(this._sections, offset, Private$5.offsetCmp);\n        // Return the index of an exact match.\n        if (i < this._sections.length && this._sections[i].offset <= offset) {\n            return this._sections[i].index;\n        }\n        // Handle the case of no modified sections before the offset.\n        if (i === 0) {\n            return Math.floor(offset / this._defaultSize);\n        }\n        // Compute the index from the previous modified section.\n        var section = this._sections[i - 1];\n        var span = offset - (section.offset + section.size);\n        return section.index + Math.floor(span / this._defaultSize) + 1;\n    };\n    /**\n     * Find the offset of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The offset of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    SectionList.prototype.offsetOf = function (index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return index * this._defaultSize;\n        }\n        // Find the modified section for the given index.\n        var i = ArrayExt.lowerBound(this._sections, index, Private$5.indexCmp);\n        // Return the offset of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].offset;\n        }\n        // Handle the case of no modified sections before the index.\n        if (i === 0) {\n            return index * this._defaultSize;\n        }\n        // Compute the offset from the previous modified section.\n        var section = this._sections[i - 1];\n        var span = index - section.index - 1;\n        return section.offset + section.size + span * this._defaultSize;\n    };\n    /**\n     * Find the extent of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The extent of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    SectionList.prototype.extentOf = function (index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return (index + 1) * this._defaultSize - 1;\n        }\n        // Find the modified section for the given index.\n        var i = ArrayExt.lowerBound(this._sections, index, Private$5.indexCmp);\n        // Return the offset of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].offset + this._sections[i].size - 1;\n        }\n        // Handle the case of no modified sections before the index.\n        if (i === 0) {\n            return (index + 1) * this._defaultSize - 1;\n        }\n        // Compute the offset from the previous modified section.\n        var section = this._sections[i - 1];\n        var span = index - section.index;\n        return section.offset + section.size + span * this._defaultSize - 1;\n    };\n    /**\n     * Find the size of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The size of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    SectionList.prototype.sizeOf = function (index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return this._defaultSize;\n        }\n        // Find the modified section for the given index.\n        var i = ArrayExt.lowerBound(this._sections, index, Private$5.indexCmp);\n        // Return the size of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].size;\n        }\n        // Return the default size for all other cases.\n        return this._defaultSize;\n    };\n    /**\n     * Resize a section in the list.\n     *\n     * @param index - The index of the section to resize. This method\n     *   is a no-op if this value is out of range.\n     *\n     * @param size - The new size of the section. This value will be\n     *   clamped to an integer `>= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    SectionList.prototype.resize = function (index, size) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return;\n        }\n        // Clamp the size to an integer >= minimum size.\n        size = Math.max(this._minimumSize, Math.floor(size));\n        // Find the modified section for the given index.\n        var i = ArrayExt.lowerBound(this._sections, index, Private$5.indexCmp);\n        // Update or create the modified section as needed.\n        var delta;\n        if (i < this._sections.length && this._sections[i].index === index) {\n            var section = this._sections[i];\n            delta = size - section.size;\n            section.size = size;\n        }\n        else if (i === 0) {\n            var offset = index * this._defaultSize;\n            ArrayExt.insert(this._sections, i, { index: index, offset: offset, size: size });\n            delta = size - this._defaultSize;\n        }\n        else {\n            var section = this._sections[i - 1];\n            var span = index - section.index - 1;\n            var offset = section.offset + section.size + span * this._defaultSize;\n            ArrayExt.insert(this._sections, i, { index: index, offset: offset, size: size });\n            delta = size - this._defaultSize;\n        }\n        // Adjust the length.\n        this._length += delta;\n        // Update all modified sections after the resized section.\n        for (var j = i + 1, n = this._sections.length; j < n; ++j) {\n            this._sections[j].offset += delta;\n        }\n    };\n    /**\n     * Insert sections into the list.\n     *\n     * @param index - The index at which to insert the sections. This\n     *   value will be clamped to the bounds of the list.\n     *\n     * @param count - The number of sections to insert. This method\n     *   is a no-op if this value is `<= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` or `count` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    SectionList.prototype.insert = function (index, count) {\n        // Bail early if there are no sections to insert.\n        if (count <= 0) {\n            return;\n        }\n        // Clamp the index to the bounds of the list.\n        index = Math.max(0, Math.min(index, this._count));\n        // Add the new sections to the totals.\n        var span = count * this._defaultSize;\n        this._count += count;\n        this._length += span;\n        // Bail early if there are no modified sections to update.\n        if (this._sections.length === 0) {\n            return;\n        }\n        // Find the modified section for the given index.\n        var i = ArrayExt.lowerBound(this._sections, index, Private$5.indexCmp);\n        // Update all modified sections after the insert location.\n        for (var n = this._sections.length; i < n; ++i) {\n            var section = this._sections[i];\n            section.index += count;\n            section.offset += span;\n        }\n    };\n    /**\n     * Remove sections from the list.\n     *\n     * @param index - The index of the first section to remove. This\n     *   method is a no-op if this value is out of range.\n     *\n     * @param count - The number of sections to remove. This method\n     *   is a no-op if this value is `<= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` or `count` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    SectionList.prototype.remove = function (index, count) {\n        // Bail early if there is nothing to remove.\n        if (index < 0 || index >= this._count || count <= 0) {\n            return;\n        }\n        // Clamp the count to the bounds of the list.\n        count = Math.min(this._count - index, count);\n        // Handle the simple case of no modified sections to update.\n        if (this._sections.length === 0) {\n            this._count -= count;\n            this._length -= count * this._defaultSize;\n            return;\n        }\n        // Handle the simple case of removing all sections.\n        if (count === this._count) {\n            this._length = 0;\n            this._count = 0;\n            this._sections.length = 0;\n            return;\n        }\n        // Find the modified section for the start index.\n        var i = ArrayExt.lowerBound(this._sections, index, Private$5.indexCmp);\n        // Find the modified section for the end index.\n        var j = ArrayExt.lowerBound(this._sections, index + count, Private$5.indexCmp);\n        // Remove the relevant modified sections.\n        var removed = this._sections.splice(i, j - i);\n        // Compute the total removed span.\n        var span = (count - removed.length) * this._defaultSize;\n        for (var k = 0, n = removed.length; k < n; ++k) {\n            span += removed[k].size;\n        }\n        // Adjust the totals.\n        this._count -= count;\n        this._length -= span;\n        // Update all modified sections after the removed span.\n        for (var k = i, n = this._sections.length; k < n; ++k) {\n            var section = this._sections[k];\n            section.index -= count;\n            section.offset -= span;\n        }\n    };\n    /**\n     * Move sections within the list.\n     *\n     * @param index - The index of the first section to move. This method\n     *   is a no-op if this value is out of range.\n     *\n     * @param count - The number of sections to move. This method is a\n     *   no-op if this value is `<= 0`.\n     *\n     * @param destination - The destination index for the first section.\n     *   This value will be clamped to the allowable range.\n     *\n     * #### Undefined Behavior\n     * An `index`, `count`, or `destination` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of moved resized sections.\n     */\n    SectionList.prototype.move = function (index, count, destination) {\n        // Bail early if there is nothing to move.\n        if (index < 0 || index >= this._count || count <= 0) {\n            return;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return;\n        }\n        // Clamp the move count to the limit.\n        count = Math.min(count, this._count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), this._count - count);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Compute the first affected index.\n        var i1 = Math.min(index, destination);\n        // Look up the first affected modified section.\n        var k1 = ArrayExt.lowerBound(this._sections, i1, Private$5.indexCmp);\n        // Bail early if there are no affected modified sections.\n        if (k1 === this._sections.length) {\n            return;\n        }\n        // Compute the last affected index.\n        var i2 = Math.max(index + count - 1, destination + count - 1);\n        // Look up the last affected modified section.\n        var k2 = ArrayExt.upperBound(this._sections, i2, Private$5.indexCmp) - 1;\n        // Bail early if there are no affected modified sections.\n        if (k2 < k1) {\n            return;\n        }\n        // Compute the pivot index.\n        var pivot = destination < index ? index : index + count;\n        // Compute the count for each side of the pivot.\n        var count1 = pivot - i1;\n        var count2 = i2 - pivot + 1;\n        // Compute the span for each side of the pivot.\n        var span1 = count1 * this._defaultSize;\n        var span2 = count2 * this._defaultSize;\n        // Adjust the spans for the modified sections.\n        for (var j = k1; j <= k2; ++j) {\n            var section = this._sections[j];\n            if (section.index < pivot) {\n                span1 += section.size - this._defaultSize;\n            }\n            else {\n                span2 += section.size - this._defaultSize;\n            }\n        }\n        // Look up the pivot section.\n        var k3 = ArrayExt.lowerBound(this._sections, pivot, Private$5.indexCmp);\n        // Rotate the modified sections if needed.\n        if (k1 <= k3 && k3 <= k2) {\n            ArrayExt.rotate(this._sections, k3 - k1, k1, k2);\n        }\n        // Adjust the modified section indices and offsets.\n        for (var j = k1; j <= k2; ++j) {\n            var section = this._sections[j];\n            if (section.index < pivot) {\n                section.index += count2;\n                section.offset += span2;\n            }\n            else {\n                section.index -= count1;\n                section.offset -= span1;\n            }\n        }\n    };\n    /**\n     * Reset all modified sections to the default size.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    SectionList.prototype.reset = function () {\n        this._sections.length = 0;\n        this._length = this._count * this._defaultSize;\n    };\n    /**\n     * Remove all sections from the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    SectionList.prototype.clear = function () {\n        this._count = 0;\n        this._length = 0;\n        this._sections.length = 0;\n    };\n    return SectionList;\n}());\n/**\n * The namespace for the module implementation details.\n */\nvar Private$5;\n(function (Private) {\n    /**\n     * A comparison function for searching by offset.\n     */\n    function offsetCmp(section, offset) {\n        if (offset < section.offset) {\n            return 1;\n        }\n        if (section.offset + section.size <= offset) {\n            return -1;\n        }\n        return 0;\n    }\n    Private.offsetCmp = offsetCmp;\n    /**\n     * A comparison function for searching by index.\n     */\n    function indexCmp(section, index) {\n        return section.index - index;\n    }\n    Private.indexCmp = indexCmp;\n})(Private$5 || (Private$5 = {}));\n\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * Resolve a config option for a cell editor.\n *\n * @param option - The config option to resolve.\n *\n * @param config - The cell config object.\n *\n * @returns The resolved value for the option.\n */\nfunction resolveOption(option, config) {\n    return typeof option === 'function' ? option(config) : option;\n}\n/**\n * An object which manages cell editing. It stores editor overrides,\n * decides which editor to use for a cell, makes sure there is only one editor active.\n */\nvar CellEditorController = /** @class */ (function () {\n    function CellEditorController() {\n        // active cell editor\n        this._editor = null;\n        // active cell being edited\n        this._cell = null;\n        // cell editor overrides based on cell data type identifier\n        this._typeBasedOverrides = new Map();\n        // cell editor overrides based on partial metadata match\n        this._metadataBasedOverrides = new Map();\n    }\n    /**\n     * Override cell editor for the cells matching the identifier.\n     *\n     * @param identifier - Cell identifier to use when matching cells.\n     * if identifier is a CellDataType, then cell matching is done using data type of the cell,\n     * if identifier is a Metadata, then partial match of the cell metadata with identifier is used for match,\n     * if identifier is 'default' then override is used as default editor when no other editor is found suitable\n     *\n     * @param editor - The cell editor to use or resolver to use to get an editor for matching cells.\n     */\n    CellEditorController.prototype.setEditor = function (identifier, editor) {\n        if (typeof identifier === 'string') {\n            this._typeBasedOverrides.set(identifier, editor);\n        }\n        else {\n            var key = this._metadataIdentifierToKey(identifier);\n            this._metadataBasedOverrides.set(key, [identifier, editor]);\n        }\n    };\n    /**\n     * Start editing a cell.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param options - The cell editing options.\n     */\n    CellEditorController.prototype.edit = function (cell, options) {\n        var grid = cell.grid;\n        if (!grid.editable) {\n            console.error('Grid cannot be edited!');\n            return false;\n        }\n        this.cancel();\n        this._cell = cell;\n        options = options || {};\n        options.onCommit = options.onCommit || this._onCommit.bind(this);\n        options.onCancel = options.onCancel || this._onCancel.bind(this);\n        // if an editor is passed in with options, then use it for editing\n        if (options.editor) {\n            this._editor = options.editor;\n            options.editor.edit(cell, options);\n            return true;\n        }\n        // choose an editor based on overrides / cell data type\n        var editor = this._getEditor(cell);\n        if (editor) {\n            this._editor = editor;\n            editor.edit(cell, options);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Cancel editing.\n     */\n    CellEditorController.prototype.cancel = function () {\n        if (this._editor) {\n            this._editor.cancel();\n            this._editor = null;\n        }\n        this._cell = null;\n    };\n    CellEditorController.prototype._onCommit = function (response) {\n        var cell = this._cell;\n        if (!cell) {\n            return;\n        }\n        var grid = cell.grid;\n        var dataModel = grid.dataModel;\n        dataModel.setData('body', cell.row, cell.column, response.value);\n        grid.viewport.node.focus();\n        if (response.cursorMovement !== 'none') {\n            grid.moveCursor(response.cursorMovement);\n            grid.scrollToCursor();\n        }\n    };\n    CellEditorController.prototype._onCancel = function () {\n        if (!this._cell) {\n            return;\n        }\n        this._cell.grid.viewport.node.focus();\n    };\n    CellEditorController.prototype._getDataTypeKey = function (cell) {\n        var metadata = cell.grid.dataModel ? cell.grid.dataModel.metadata('body', cell.row, cell.column) : null;\n        if (!metadata) {\n            return 'default';\n        }\n        var key = '';\n        if (metadata) {\n            key = metadata.type;\n        }\n        if (metadata.constraint && metadata.constraint.enum) {\n            if (metadata.constraint.enum === 'dynamic') {\n                key += ':dynamic-option';\n            }\n            else {\n                key += ':option';\n            }\n        }\n        return key;\n    };\n    CellEditorController.prototype._objectToKey = function (object) {\n        var str = '';\n        for (var key in object) {\n            var value = object[key];\n            if (typeof value === 'object') {\n                str += key + \":\" + this._objectToKey(value);\n            }\n            else {\n                str += \"[\" + key + \":\" + value + \"]\";\n            }\n        }\n        return str;\n    };\n    CellEditorController.prototype._metadataIdentifierToKey = function (metadata) {\n        return this._objectToKey(metadata);\n    };\n    CellEditorController.prototype._metadataMatchesIdentifier = function (metadata, identifier) {\n        for (var key in identifier) {\n            if (!metadata.hasOwnProperty(key)) {\n                return false;\n            }\n            var identifierValue = identifier[key];\n            var metadataValue = metadata[key];\n            if (typeof identifierValue === 'object') {\n                if (!this._metadataMatchesIdentifier(metadataValue, identifierValue)) {\n                    return false;\n                }\n            }\n            else if (metadataValue !== identifierValue) {\n                return false;\n            }\n        }\n        return true;\n    };\n    CellEditorController.prototype._getMetadataBasedEditor = function (cell) {\n        var _this = this;\n        var editorMatched;\n        var metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        if (metadata) {\n            this._metadataBasedOverrides.forEach(function (value) {\n                if (!editorMatched) {\n                    var identifier = value[0], editor = value[1];\n                    if (_this._metadataMatchesIdentifier(metadata, identifier)) {\n                        editorMatched = resolveOption(editor, cell);\n                    }\n                }\n            });\n        }\n        return editorMatched;\n    };\n    /**\n     * Choose the most appropriate cell editor to use based on overrides / cell data type.\n     *\n     * If no match is found in overrides or based on cell data type, and if cell has a primitive\n     * data type then TextCellEditor is used as default cell editor. If 'default' cell editor\n     * is overridden, then it is used instead of TextCellEditor for default.\n     */\n    CellEditorController.prototype._getEditor = function (cell) {\n        var dtKey = this._getDataTypeKey(cell);\n        // find an editor based on data type based override\n        if (this._typeBasedOverrides.has(dtKey)) {\n            var editor = this._typeBasedOverrides.get(dtKey);\n            return resolveOption(editor, cell);\n        } // find an editor based on metadata match based override\n        else if (this._metadataBasedOverrides.size > 0) {\n            var editor = this._getMetadataBasedEditor(cell);\n            if (editor) {\n                return editor;\n            }\n        }\n        // choose an editor based on data type\n        switch (dtKey) {\n            case 'string':\n                return new TextCellEditor();\n            case 'number':\n                return new NumberCellEditor();\n            case 'integer':\n                return new IntegerCellEditor();\n            case 'boolean':\n                return new BooleanCellEditor();\n            case 'date':\n                return new DateCellEditor();\n            case 'string:option':\n            case 'number:option':\n            case 'integer:option':\n            case 'date:option':\n            case 'array:option':\n                return new OptionCellEditor();\n            case 'string:dynamic-option':\n            case 'number:dynamic-option':\n            case 'integer:dynamic-option':\n            case 'date:dynamic-option':\n                return new DynamicOptionCellEditor();\n        }\n        // if an override exists for 'default', then use it\n        if (this._typeBasedOverrides.has('default')) {\n            var editor = this._typeBasedOverrides.get('default');\n            return resolveOption(editor, cell);\n        }\n        // if cell has a primitive data type then use TextCellEditor\n        var data = cell.grid.dataModel.data('body', cell.row, cell.column);\n        if (!data || typeof data !== 'object') {\n            return new TextCellEditor();\n        }\n        // no suitable editor found for the cell\n        return undefined;\n    };\n    return CellEditorController;\n}());\n\n/**\n * A widget which implements a high-performance tabular data grid.\n *\n * #### Notes\n * A data grid is implemented as a composition of child widgets. These\n * child widgets are considered an implementation detail. Manipulating\n * the child widgets of a data grid directly is undefined behavior.\n *\n * This class is not designed to be subclassed.\n */\nvar DataGrid = /** @class */ (function (_super) {\n    __extends(DataGrid, _super);\n    /**\n     * Construct a new data grid.\n     *\n     * @param options - The options for initializing the data grid.\n     */\n    function DataGrid(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this) || this;\n        _this._scrollX = 0;\n        _this._scrollY = 0;\n        _this._viewportWidth = 0;\n        _this._viewportHeight = 0;\n        _this._mousedown = false;\n        _this._keyHandler = null;\n        _this._mouseHandler = null;\n        _this._vScrollBarMinWidth = 0;\n        _this._hScrollBarMinHeight = 0;\n        _this._dpiRatio = Math.ceil(window.devicePixelRatio);\n        _this._dataModel = null;\n        _this._selectionModel = null;\n        _this._editingEnabled = false;\n        _this.addClass('lm-DataGrid');\n        /* <DEPRECATED> */\n        _this.addClass('p-DataGrid');\n        /* </DEPRECATED> */\n        // Parse the simple options.\n        _this._style = options.style || DataGrid.defaultStyle;\n        _this._stretchLastRow = options.stretchLastRow || false;\n        _this._stretchLastColumn = options.stretchLastColumn || false;\n        _this._headerVisibility = options.headerVisibility || 'all';\n        _this._cellRenderers = options.cellRenderers || new RendererMap();\n        _this._copyConfig = options.copyConfig || DataGrid.defaultCopyConfig;\n        // Connect to the renderer map changed signal.\n        _this._cellRenderers.changed.connect(_this._onRenderersChanged, _this);\n        // Parse the default sizes.\n        var defaultSizes = options.defaultSizes || DataGrid.defaultSizes;\n        var minimumSizes = options.minimumSizes || DataGrid.minimumSizes;\n        // Set up the sections lists.\n        _this._rowSections = new SectionList({ defaultSize: defaultSizes.rowHeight,\n            minimumSize: minimumSizes.rowHeight });\n        _this._columnSections = new SectionList({ defaultSize: defaultSizes.columnWidth,\n            minimumSize: minimumSizes.columnWidth });\n        _this._rowHeaderSections = new SectionList({ defaultSize: defaultSizes.rowHeaderWidth,\n            minimumSize: minimumSizes.rowHeaderWidth });\n        _this._columnHeaderSections = new SectionList({ defaultSize: defaultSizes.columnHeaderHeight,\n            minimumSize: minimumSizes.columnHeaderHeight });\n        // Create the canvas, buffer, and overlay objects.\n        _this._canvas = Private$6.createCanvas();\n        _this._buffer = Private$6.createCanvas();\n        _this._overlay = Private$6.createCanvas();\n        // Get the graphics contexts for the canvases.\n        _this._canvasGC = _this._canvas.getContext('2d');\n        _this._bufferGC = _this._buffer.getContext('2d');\n        _this._overlayGC = _this._overlay.getContext('2d');\n        // Set up the on-screen canvas.\n        _this._canvas.style.position = 'absolute';\n        _this._canvas.style.top = '0px';\n        _this._canvas.style.left = '0px';\n        _this._canvas.style.width = '0px';\n        _this._canvas.style.height = '0px';\n        // Set up the on-screen overlay.\n        _this._overlay.style.position = 'absolute';\n        _this._overlay.style.top = '0px';\n        _this._overlay.style.left = '0px';\n        _this._overlay.style.width = '0px';\n        _this._overlay.style.height = '0px';\n        // Create the internal widgets for the data grid.\n        _this._viewport = new Widget();\n        _this._viewport.node.tabIndex = -1;\n        _this._viewport.node.style.outline = 'none';\n        _this._vScrollBar = new ScrollBar({ orientation: 'vertical' });\n        _this._hScrollBar = new ScrollBar({ orientation: 'horizontal' });\n        _this._scrollCorner = new Widget();\n        _this._editorController = new CellEditorController();\n        // Add the extra class names to the child widgets.\n        _this._viewport.addClass('lm-DataGrid-viewport');\n        _this._vScrollBar.addClass('lm-DataGrid-scrollBar');\n        _this._hScrollBar.addClass('lm-DataGrid-scrollBar');\n        _this._scrollCorner.addClass('lm-DataGrid-scrollCorner');\n        /* <DEPRECATED> */\n        _this._viewport.addClass('p-DataGrid-viewport');\n        _this._vScrollBar.addClass('p-DataGrid-scrollBar');\n        _this._hScrollBar.addClass('p-DataGrid-scrollBar');\n        _this._scrollCorner.addClass('p-DataGrid-scrollCorner');\n        /* </DEPRECATED> */\n        // Add the on-screen canvas to the viewport node.\n        _this._viewport.node.appendChild(_this._canvas);\n        // Add the on-screen overlay to the viewport node.\n        _this._viewport.node.appendChild(_this._overlay);\n        // Install the message hooks.\n        MessageLoop.installMessageHook(_this._viewport, _this);\n        MessageLoop.installMessageHook(_this._hScrollBar, _this);\n        MessageLoop.installMessageHook(_this._vScrollBar, _this);\n        // Hide the scroll bars and corner from the outset.\n        _this._vScrollBar.hide();\n        _this._hScrollBar.hide();\n        _this._scrollCorner.hide();\n        // Connect to the scroll bar signals.\n        _this._vScrollBar.thumbMoved.connect(_this._onThumbMoved, _this);\n        _this._hScrollBar.thumbMoved.connect(_this._onThumbMoved, _this);\n        _this._vScrollBar.pageRequested.connect(_this._onPageRequested, _this);\n        _this._hScrollBar.pageRequested.connect(_this._onPageRequested, _this);\n        _this._vScrollBar.stepRequested.connect(_this._onStepRequested, _this);\n        _this._hScrollBar.stepRequested.connect(_this._onStepRequested, _this);\n        // Set the layout cell config for the child widgets.\n        GridLayout.setCellConfig(_this._viewport, { row: 0, column: 0 });\n        GridLayout.setCellConfig(_this._vScrollBar, { row: 0, column: 1 });\n        GridLayout.setCellConfig(_this._hScrollBar, { row: 1, column: 0 });\n        GridLayout.setCellConfig(_this._scrollCorner, { row: 1, column: 1 });\n        // Create the layout for the data grid.\n        var layout = new GridLayout({\n            rowCount: 2,\n            columnCount: 2,\n            rowSpacing: 0,\n            columnSpacing: 0,\n            fitPolicy: 'set-no-constraint'\n        });\n        // Set the stretch factors for the grid.\n        layout.setRowStretch(0, 1);\n        layout.setRowStretch(1, 0);\n        layout.setColumnStretch(0, 1);\n        layout.setColumnStretch(1, 0);\n        // Add the child widgets to the layout.\n        layout.addWidget(_this._viewport);\n        layout.addWidget(_this._vScrollBar);\n        layout.addWidget(_this._hScrollBar);\n        layout.addWidget(_this._scrollCorner);\n        // Install the layout on the data grid.\n        _this.layout = layout;\n        return _this;\n    }\n    /**\n     * Dispose of the resources held by the widgets.\n     */\n    DataGrid.prototype.dispose = function () {\n        // Release the mouse.\n        this._releaseMouse();\n        // Dispose of the handlers.\n        if (this._keyHandler) {\n            this._keyHandler.dispose();\n        }\n        if (this._mouseHandler) {\n            this._mouseHandler.dispose();\n        }\n        this._keyHandler = null;\n        this._mouseHandler = null;\n        // Clear the models.\n        this._dataModel = null;\n        this._selectionModel = null;\n        // Clear the section lists.\n        this._rowSections.clear();\n        this._columnSections.clear();\n        this._rowHeaderSections.clear();\n        this._columnHeaderSections.clear();\n        // Dispose of the base class.\n        _super.prototype.dispose.call(this);\n    };\n    Object.defineProperty(DataGrid.prototype, \"dataModel\", {\n        /**\n         * Get the data model for the data grid.\n         */\n        get: function () {\n            return this._dataModel;\n        },\n        /**\n         * Set the data model for the data grid.\n         *\n         * #### Notes\n         * This will automatically remove the current selection model.\n         */\n        set: function (value) {\n            // Do nothing if the model does not change.\n            if (this._dataModel === value) {\n                return;\n            }\n            // Release the mouse.\n            this._releaseMouse();\n            // Clear the selection model.\n            this.selectionModel = null;\n            // Disconnect the change handler from the old model.\n            if (this._dataModel) {\n                this._dataModel.changed.disconnect(this._onDataModelChanged, this);\n            }\n            // Connect the change handler for the new model.\n            if (value) {\n                value.changed.connect(this._onDataModelChanged, this);\n            }\n            // Update the internal model reference.\n            this._dataModel = value;\n            // Clear the section lists.\n            this._rowSections.clear();\n            this._columnSections.clear();\n            this._rowHeaderSections.clear();\n            this._columnHeaderSections.clear();\n            // Populate the section lists.\n            if (value) {\n                this._rowSections.insert(0, value.rowCount('body'));\n                this._columnSections.insert(0, value.columnCount('body'));\n                this._rowHeaderSections.insert(0, value.columnCount('row-header'));\n                this._columnHeaderSections.insert(0, value.rowCount('column-header'));\n            }\n            // Reset the scroll position.\n            this._scrollX = 0;\n            this._scrollY = 0;\n            // Sync the viewport.\n            this._syncViewport();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"selectionModel\", {\n        /**\n         * Get the selection model for the data grid.\n         */\n        get: function () {\n            return this._selectionModel;\n        },\n        /**\n         * Set the selection model for the data grid.\n         */\n        set: function (value) {\n            // Do nothing if the selection model does not change.\n            if (this._selectionModel === value) {\n                return;\n            }\n            // Release the mouse.\n            this._releaseMouse();\n            // Ensure the data models are a match.\n            if (value && value.dataModel !== this._dataModel) {\n                throw new Error('SelectionModel.dataModel !== DataGrid.dataModel');\n            }\n            // Disconnect the change handler from the old model.\n            if (this._selectionModel) {\n                this._selectionModel.changed.disconnect(this._onSelectionsChanged, this);\n            }\n            // Connect the change handler for the new model.\n            if (value) {\n                value.changed.connect(this._onSelectionsChanged, this);\n            }\n            // Update the internal selection model reference.\n            this._selectionModel = value;\n            // Schedule a repaint of the overlay.\n            this.repaintOverlay();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"keyHandler\", {\n        /**\n         * Get the key handler for the data grid.\n         */\n        get: function () {\n            return this._keyHandler;\n        },\n        /**\n         * Set the key handler for the data grid.\n         */\n        set: function (value) {\n            this._keyHandler = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"mouseHandler\", {\n        /**\n         * Get the mouse handler for the data grid.\n         */\n        get: function () {\n            return this._mouseHandler;\n        },\n        /**\n         * Set the mouse handler for the data grid.\n         */\n        set: function (value) {\n            // Bail early if the mouse handler does not change.\n            if (this._mouseHandler === value) {\n                return;\n            }\n            // Release the mouse.\n            this._releaseMouse();\n            // Update the internal mouse handler.\n            this._mouseHandler = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"style\", {\n        /**\n         * Get the style for the data grid.\n         */\n        get: function () {\n            return this._style;\n        },\n        /**\n         * Set the style for the data grid.\n         */\n        set: function (value) {\n            // Bail if the style does not change.\n            if (this._style === value) {\n                return;\n            }\n            // Update the internal style.\n            this._style = __assign({}, value);\n            // Schedule a repaint of the content.\n            this.repaintContent();\n            // Schedule a repaint of the overlay.\n            this.repaintOverlay();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"cellRenderers\", {\n        /**\n         * Get the cell renderer map for the data grid.\n         */\n        get: function () {\n            return this._cellRenderers;\n        },\n        /**\n         * Set the cell renderer map for the data grid.\n         */\n        set: function (value) {\n            // Bail if the renderer map does not change.\n            if (this._cellRenderers === value) {\n                return;\n            }\n            // Disconnect the old map.\n            this._cellRenderers.changed.disconnect(this._onRenderersChanged, this);\n            // Connect the new map.\n            value.changed.connect(this._onRenderersChanged, this);\n            // Update the internal renderer map.\n            this._cellRenderers = value;\n            // Schedule a repaint of the grid content.\n            this.repaintContent();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"headerVisibility\", {\n        /**\n         * Get the header visibility for the data grid.\n         */\n        get: function () {\n            return this._headerVisibility;\n        },\n        /**\n         * Set the header visibility for the data grid.\n         */\n        set: function (value) {\n            // Bail if the visibility does not change.\n            if (this._headerVisibility === value) {\n                return;\n            }\n            // Update the internal visibility.\n            this._headerVisibility = value;\n            // Sync the viewport.\n            this._syncViewport();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"defaultSizes\", {\n        /**\n         * Get the default sizes for the various sections of the data grid.\n         */\n        get: function () {\n            var rowHeight = this._rowSections.defaultSize;\n            var columnWidth = this._columnSections.defaultSize;\n            var rowHeaderWidth = this._rowHeaderSections.defaultSize;\n            var columnHeaderHeight = this._columnHeaderSections.defaultSize;\n            return { rowHeight: rowHeight, columnWidth: columnWidth, rowHeaderWidth: rowHeaderWidth, columnHeaderHeight: columnHeaderHeight };\n        },\n        /**\n         * Set the default sizes for the various sections of the data grid.\n         */\n        set: function (value) {\n            // Update the section default sizes.\n            this._rowSections.defaultSize = value.rowHeight;\n            this._columnSections.defaultSize = value.columnWidth;\n            this._rowHeaderSections.defaultSize = value.rowHeaderWidth;\n            this._columnHeaderSections.defaultSize = value.columnHeaderHeight;\n            // Sync the viewport.\n            this._syncViewport();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"minimumSizes\", {\n        /**\n         * Get the minimum sizes for the various sections of the data grid.\n         */\n        get: function () {\n            var rowHeight = this._rowSections.minimumSize;\n            var columnWidth = this._columnSections.minimumSize;\n            var rowHeaderWidth = this._rowHeaderSections.minimumSize;\n            var columnHeaderHeight = this._columnHeaderSections.minimumSize;\n            return { rowHeight: rowHeight, columnWidth: columnWidth, rowHeaderWidth: rowHeaderWidth, columnHeaderHeight: columnHeaderHeight };\n        },\n        /**\n         * Set the minimum sizes for the various sections of the data grid.\n         */\n        set: function (value) {\n            // Update the section default sizes.\n            this._rowSections.minimumSize = value.rowHeight;\n            this._columnSections.minimumSize = value.columnWidth;\n            this._rowHeaderSections.minimumSize = value.rowHeaderWidth;\n            this._columnHeaderSections.minimumSize = value.columnHeaderHeight;\n            // Sync the viewport.\n            this._syncViewport();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"copyConfig\", {\n        /**\n         * Get the copy configuration for the data grid.\n         */\n        get: function () {\n            return this._copyConfig;\n        },\n        /**\n         * Set the copy configuration for the data grid.\n         */\n        set: function (value) {\n            this._copyConfig = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"stretchLastRow\", {\n        /**\n         * Get whether the last row is stretched.\n         */\n        get: function () {\n            return this._stretchLastRow;\n        },\n        /**\n         * Set whether the last row is stretched.\n         */\n        set: function (value) {\n            // Bail early if the value does not change.\n            if (value === this._stretchLastRow) {\n                return;\n            }\n            // Update the internal value.\n            this._stretchLastRow = value;\n            // Sync the viewport\n            this._syncViewport();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"stretchLastColumn\", {\n        /**\n         * Get whether the last column is stretched.\n         */\n        get: function () {\n            return this._stretchLastColumn;\n        },\n        /**\n         * Set whether the last column is stretched.\n         */\n        set: function (value) {\n            // Bail early if the value does not change.\n            if (value === this._stretchLastColumn) {\n                return;\n            }\n            // Update the internal value.\n            this._stretchLastColumn = value;\n            // Sync the viewport\n            this._syncViewport();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"headerWidth\", {\n        /**\n         * The virtual width of the row headers.\n         */\n        get: function () {\n            if (this._headerVisibility === 'none') {\n                return 0;\n            }\n            if (this._headerVisibility === 'column') {\n                return 0;\n            }\n            return this._rowHeaderSections.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"headerHeight\", {\n        /**\n         * The virtual height of the column headers.\n         */\n        get: function () {\n            if (this._headerVisibility === 'none') {\n                return 0;\n            }\n            if (this._headerVisibility === 'row') {\n                return 0;\n            }\n            return this._columnHeaderSections.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"bodyWidth\", {\n        /**\n         * The virtual width of the grid body.\n         *\n         * #### Notes\n         * This does *not* account for a stretched last column.\n         */\n        get: function () {\n            return this._columnSections.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"bodyHeight\", {\n        /**\n         * The virtual height of the grid body.\n         *\n         * #### Notes\n         * This does *not* account for a stretched last row.\n         */\n        get: function () {\n            return this._rowSections.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"totalWidth\", {\n        /**\n         * The virtual width of the entire grid.\n         *\n         * #### Notes\n         * This does *not* account for a stretched last column.\n         */\n        get: function () {\n            return this.headerWidth + this.bodyWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"totalHeight\", {\n        /**\n         * The virtual height of the entire grid.\n         *\n         * #### Notes\n         * This does *not* account for a stretched last row.\n         */\n        get: function () {\n            return this.headerHeight + this.bodyHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"viewportWidth\", {\n        /**\n         * The actual width of the viewport.\n         */\n        get: function () {\n            return this._viewportWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"viewportHeight\", {\n        /**\n         * The actual height of the viewport.\n         */\n        get: function () {\n            return this._viewportHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"pageWidth\", {\n        /**\n         * The width of the visible portion of the grid body.\n         */\n        get: function () {\n            return Math.max(0, this.viewportWidth - this.headerWidth);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"pageHeight\", {\n        /**\n         * The height of the visible portion of the grid body.\n         */\n        get: function () {\n            return Math.max(0, this.viewportHeight - this.headerHeight);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"scrollX\", {\n        /**\n         * The current scroll X position of the viewport.\n         */\n        get: function () {\n            return this._hScrollBar.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"scrollY\", {\n        /**\n         * The current scroll Y position of the viewport.\n         */\n        get: function () {\n            return this._vScrollBar.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"maxScrollX\", {\n        /**\n         * The maximum scroll X position for the grid.\n         */\n        get: function () {\n            return Math.max(0, this.bodyWidth - this.pageWidth - 1);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"maxScrollY\", {\n        /**\n         * The maximum scroll Y position for the grid.\n         */\n        get: function () {\n            return Math.max(0, this.bodyHeight - this.pageHeight - 1);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"viewport\", {\n        /**\n         * The viewport widget for the data grid.\n         */\n        get: function () {\n            return this._viewport;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"editorController\", {\n        /**\n         * The cell editor controller object for the data grid.\n         */\n        get: function () {\n            return this._editorController;\n        },\n        set: function (controller) {\n            this._editorController = controller;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"editingEnabled\", {\n        /**\n         * Whether the cell editing is enabled for the data grid.\n         */\n        get: function () {\n            return this._editingEnabled;\n        },\n        set: function (enabled) {\n            this._editingEnabled = enabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"editable\", {\n        /**\n         * Whether the grid cells are editable.\n         *\n         * `editingEnabled` flag must be on and grid must have required\n         * selection model, editor controller and data model properties.\n         */\n        get: function () {\n            return this._editingEnabled &&\n                this._selectionModel !== null &&\n                this._editorController !== null &&\n                this.dataModel instanceof MutableDataModel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"canvasGC\", {\n        /**\n         * The rendering context for painting the data grid.\n         */\n        get: function () {\n            return this._canvasGC;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"rowSections\", {\n        /**\n         * The row sections of the data grid.\n         */\n        get: function () {\n            return this._rowSections;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"columnSections\", {\n        /**\n         * The column sections of the data grid.\n         */\n        get: function () {\n            return this._columnSections;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"rowHeaderSections\", {\n        /**\n         * The row header sections of the data grid.\n         */\n        get: function () {\n            return this._rowHeaderSections;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"columnHeaderSections\", {\n        /**\n         * The column header sections of the data grid.\n         */\n        get: function () {\n            return this._columnHeaderSections;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Scroll the grid to the specified row.\n     *\n     * @param row - The row index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the row is already visible.\n     */\n    DataGrid.prototype.scrollToRow = function (row) {\n        // Fetch the row count.\n        var nr = this._rowSections.count;\n        // Bail early if there is no content.\n        if (nr === 0) {\n            return;\n        }\n        // Floor the row index.\n        row = Math.floor(row);\n        // Clamp the row index.\n        row = Math.max(0, Math.min(row, nr - 1));\n        // Get the virtual bounds of the row.\n        var y1 = this._rowSections.offsetOf(row);\n        var y2 = this._rowSections.extentOf(row);\n        // Get the virtual bounds of the viewport.\n        var vy1 = this._scrollY;\n        var vy2 = this._scrollY + this.pageHeight - 1;\n        // Set up the delta variables.\n        var dy = 0;\n        // Compute the delta Y scroll.\n        if (y1 < vy1) {\n            dy = y1 - vy1 - 10;\n        }\n        else if (y2 > vy2) {\n            dy = y2 - vy2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dy === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(0, dy);\n    };\n    /**\n     * Scroll the grid to the specified column.\n     *\n     * @param column - The column index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the column is already visible.\n     */\n    DataGrid.prototype.scrollToColumn = function (column) {\n        // Fetch the column count.\n        var nc = this._columnSections.count;\n        // Bail early if there is no content.\n        if (nc === 0) {\n            return;\n        }\n        // Floor the column index.\n        column = Math.floor(column);\n        // Clamp the column index.\n        column = Math.max(0, Math.min(column, nc - 1));\n        // Get the virtual bounds of the column.\n        var x1 = this._columnSections.offsetOf(column);\n        var x2 = this._columnSections.extentOf(column);\n        // Get the virtual bounds of the viewport.\n        var vx1 = this._scrollX;\n        var vx2 = this._scrollX + this.pageWidth - 1;\n        // Set up the delta variables.\n        var dx = 0;\n        // Compute the delta X scroll.\n        if (x1 < vx1) {\n            dx = x1 - vx1 - 10;\n        }\n        else if (x2 > vx2) {\n            dx = x2 - vx2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dx === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(dx, 0);\n    };\n    /**\n     * Scroll the grid to the specified cell.\n     *\n     * @param row - The row index of the cell.\n     *\n     * @param column - The column index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the cell is already visible.\n     */\n    DataGrid.prototype.scrollToCell = function (row, column) {\n        // Fetch the row and column count.\n        var nr = this._rowSections.count;\n        var nc = this._columnSections.count;\n        // Bail early if there is no content.\n        if (nr === 0 || nc === 0) {\n            return;\n        }\n        // Floor the cell index.\n        row = Math.floor(row);\n        column = Math.floor(column);\n        // Clamp the cell index.\n        row = Math.max(0, Math.min(row, nr - 1));\n        column = Math.max(0, Math.min(column, nc - 1));\n        // Get the virtual bounds of the cell.\n        var x1 = this._columnSections.offsetOf(column);\n        var x2 = this._columnSections.extentOf(column);\n        var y1 = this._rowSections.offsetOf(row);\n        var y2 = this._rowSections.extentOf(row);\n        // Get the virtual bounds of the viewport.\n        var vx1 = this._scrollX;\n        var vx2 = this._scrollX + this.pageWidth - 1;\n        var vy1 = this._scrollY;\n        var vy2 = this._scrollY + this.pageHeight - 1;\n        // Set up the delta variables.\n        var dx = 0;\n        var dy = 0;\n        // Compute the delta X scroll.\n        if (x1 < vx1) {\n            dx = x1 - vx1 - 10;\n        }\n        else if (x2 > vx2) {\n            dx = x2 - vx2 + 10;\n        }\n        // Compute the delta Y scroll.\n        if (y1 < vy1) {\n            dy = y1 - vy1 - 10;\n        }\n        else if (y2 > vy2) {\n            dy = y2 - vy2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dx === 0 && dy === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(dx, dy);\n    };\n    /**\n     * Move cursor down/up/left/right while making sure it remains\n     * within the bounds of selected rectangles\n     *\n     * @param direction - The direction of the movement.\n     */\n    DataGrid.prototype.moveCursor = function (direction) {\n        // Bail early if there is no selection\n        if (!this.dataModel ||\n            !this._selectionModel ||\n            this._selectionModel.isEmpty) {\n            return;\n        }\n        var iter = this._selectionModel.selections();\n        var onlyOne = iter.next() && !iter.next();\n        // if there is a single selection that is a single cell selection\n        // then move the selection and cursor within grid bounds\n        if (onlyOne) {\n            var currentSel = this._selectionModel.currentSelection();\n            if (currentSel.r1 === currentSel.r2 &&\n                currentSel.c1 === currentSel.c2) {\n                var dr = direction === 'down' ? 1 : direction === 'up' ? -1 : 0;\n                var dc = direction === 'right' ? 1 : direction === 'left' ? -1 : 0;\n                var newRow = currentSel.r1 + dr;\n                var newColumn = currentSel.c1 + dc;\n                var rowCount = this.dataModel.rowCount('body');\n                var columnCount = this.dataModel.columnCount('body');\n                if (newRow >= rowCount) {\n                    newRow = 0;\n                    newColumn += 1;\n                }\n                else if (newRow === -1) {\n                    newRow = rowCount - 1;\n                    newColumn -= 1;\n                }\n                if (newColumn >= columnCount) {\n                    newColumn = 0;\n                    newRow += 1;\n                    if (newRow >= rowCount) {\n                        newRow = 0;\n                    }\n                }\n                else if (newColumn === -1) {\n                    newColumn = columnCount - 1;\n                    newRow -= 1;\n                    if (newRow === -1) {\n                        newRow = rowCount - 1;\n                    }\n                }\n                this._selectionModel.select({\n                    r1: newRow, c1: newColumn,\n                    r2: newRow, c2: newColumn,\n                    cursorRow: newRow, cursorColumn: newColumn,\n                    clear: 'all'\n                });\n                return;\n            }\n        }\n        // if there are multiple selections, move cursor\n        // within selection rectangles\n        this._selectionModel.moveCursorWithinSelections(direction);\n    };\n    /**\n     * Scroll the grid to the current cursor position.\n     *\n     * #### Notes\n     * This is a no-op if the cursor is already visible or\n     * if there is no selection model installed on the grid.\n     */\n    DataGrid.prototype.scrollToCursor = function () {\n        // Bail early if there is no selection model.\n        if (!this._selectionModel) {\n            return;\n        }\n        // Fetch the cursor row and column.\n        var row = this._selectionModel.cursorRow;\n        var column = this._selectionModel.cursorColumn;\n        // Scroll to the cursor cell.\n        this.scrollToCell(row, column);\n    };\n    /**\n     * Scroll the viewport by the specified amount.\n     *\n     * @param dx - The X scroll amount.\n     *\n     * @param dy - The Y scroll amount.\n     */\n    DataGrid.prototype.scrollBy = function (dx, dy) {\n        this.scrollTo(this.scrollX + dx, this.scrollY + dy);\n    };\n    /**\n     * Scroll the viewport by one page.\n     *\n     * @param dir - The desired direction of the scroll.\n     */\n    DataGrid.prototype.scrollByPage = function (dir) {\n        var dx = 0;\n        var dy = 0;\n        switch (dir) {\n            case 'up':\n                dy = -this.pageHeight;\n                break;\n            case 'down':\n                dy = this.pageHeight;\n                break;\n            case 'left':\n                dx = -this.pageWidth;\n                break;\n            case 'right':\n                dx = this.pageWidth;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.scrollTo(this.scrollX + dx, this.scrollY + dy);\n    };\n    /**\n     * Scroll the viewport by one cell-aligned step.\n     *\n     * @param dir - The desired direction of the scroll.\n     */\n    DataGrid.prototype.scrollByStep = function (dir) {\n        var r;\n        var c;\n        var x = this.scrollX;\n        var y = this.scrollY;\n        var rows = this._rowSections;\n        var columns = this._columnSections;\n        switch (dir) {\n            case 'up':\n                r = rows.indexOf(y - 1);\n                y = r < 0 ? y : rows.offsetOf(r);\n                break;\n            case 'down':\n                r = rows.indexOf(y);\n                y = r < 0 ? y : rows.offsetOf(r) + rows.sizeOf(r);\n                break;\n            case 'left':\n                c = columns.indexOf(x - 1);\n                x = c < 0 ? x : columns.offsetOf(c);\n                break;\n            case 'right':\n                c = columns.indexOf(x);\n                x = c < 0 ? x : columns.offsetOf(c) + columns.sizeOf(c);\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.scrollTo(x, y);\n    };\n    /**\n     * Scroll to the specified offset position.\n     *\n     * @param x - The desired X position.\n     *\n     * @param y - The desired Y position.\n     */\n    DataGrid.prototype.scrollTo = function (x, y) {\n        // Floor and clamp the position to the allowable range.\n        x = Math.max(0, Math.min(Math.floor(x), this.maxScrollX));\n        y = Math.max(0, Math.min(Math.floor(y), this.maxScrollY));\n        // Update the scroll bar values with the desired position.\n        this._hScrollBar.value = x;\n        this._vScrollBar.value = y;\n        // Post a scroll request message to the viewport.\n        MessageLoop.postMessage(this._viewport, Private$6.ScrollRequest);\n    };\n    /**\n     * Get the row count for a particular region in the data grid.\n     *\n     * @param region - The row region of interest.\n     *\n     * @returns The row count for the specified region.\n     */\n    DataGrid.prototype.rowCount = function (region) {\n        var count;\n        if (region === 'body') {\n            count = this._rowSections.count;\n        }\n        else {\n            count = this._columnHeaderSections.count;\n        }\n        return count;\n    };\n    /**\n     * Get the column count for a particular region in the data grid.\n     *\n     * @param region - The column region of interest.\n     *\n     * @returns The column count for the specified region.\n     */\n    DataGrid.prototype.columnCount = function (region) {\n        var count;\n        if (region === 'body') {\n            count = this._columnSections.count;\n        }\n        else {\n            count = this._rowHeaderSections.count;\n        }\n        return count;\n    };\n    /**\n     * Get the row at a virtual offset in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param offset - The virtual offset of the row of interest.\n     *\n     * @returns The index of the row, or `-1` if the offset is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row.\n     */\n    DataGrid.prototype.rowAt = function (region, offset) {\n        // Bail early if the offset is negative.\n        if (offset < 0) {\n            return -1;\n        }\n        // Return early for the column header region.\n        if (region === 'column-header') {\n            return this._columnHeaderSections.indexOf(offset);\n        }\n        // Fetch the index.\n        var index = this._rowSections.indexOf(offset);\n        // Return early if the section is found.\n        if (index >= 0) {\n            return index;\n        }\n        // Bail early if the last row is not stretched.\n        if (!this._stretchLastRow) {\n            return -1;\n        }\n        // Fetch the geometry.\n        var bh = this.bodyHeight;\n        var ph = this.pageHeight;\n        // Bail early if no row stretching is required.\n        if (ph <= bh) {\n            return -1;\n        }\n        // Bail early if the offset is out of bounds.\n        if (offset >= ph) {\n            return -1;\n        }\n        // Otherwise, return the last row.\n        return this._rowSections.count - 1;\n    };\n    /**\n     * Get the column at a virtual offset in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param offset - The virtual offset of the column of interest.\n     *\n     * @returns The index of the column, or `-1` if the offset is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last column.\n     */\n    DataGrid.prototype.columnAt = function (region, offset) {\n        if (offset < 0) {\n            return -1;\n        }\n        // Return early for the row header region.\n        if (region === 'row-header') {\n            return this._rowHeaderSections.indexOf(offset);\n        }\n        // Fetch the index.\n        var index = this._columnSections.indexOf(offset);\n        // Return early if the section is found.\n        if (index >= 0) {\n            return index;\n        }\n        // Bail early if the last column is not stretched.\n        if (!this._stretchLastColumn) {\n            return -1;\n        }\n        // Fetch the geometry.\n        var bw = this.bodyWidth;\n        var pw = this.pageWidth;\n        // Bail early if no column stretching is required.\n        if (pw <= bw) {\n            return -1;\n        }\n        // Bail early if the offset is out of bounds.\n        if (offset >= pw) {\n            return -1;\n        }\n        // Otherwise, return the last column.\n        return this._columnSections.count - 1;\n    };\n    /**\n     * Get the offset of a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @returns The offset of the row, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * A stretched last row has no effect on the return value.\n     */\n    DataGrid.prototype.rowOffset = function (region, index) {\n        var offset;\n        if (region === 'body') {\n            offset = this._rowSections.offsetOf(index);\n        }\n        else {\n            offset = this._columnHeaderSections.offsetOf(index);\n        }\n        return offset;\n    };\n    /**\n     * Get the offset of a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @returns The offset of the column, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * A stretched last column has no effect on the return value.\n     */\n    DataGrid.prototype.columnOffset = function (region, index) {\n        var offset;\n        if (region === 'body') {\n            offset = this._columnSections.offsetOf(index);\n        }\n        else {\n            offset = this._rowHeaderSections.offsetOf(index);\n        }\n        return offset;\n    };\n    /**\n     * Get the size of a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @returns The size of the row, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row.\n     */\n    DataGrid.prototype.rowSize = function (region, index) {\n        // Return early for the column header region.\n        if (region === 'column-header') {\n            return this._columnHeaderSections.sizeOf(index);\n        }\n        // Fetch the row size.\n        var size = this._rowSections.sizeOf(index);\n        // Bail early if the index is out of bounds.\n        if (size < 0) {\n            return size;\n        }\n        // Return early if the last row is not stretched.\n        if (!this._stretchLastRow) {\n            return size;\n        }\n        // Return early if its not the last row.\n        if (index < this._rowSections.count - 1) {\n            return size;\n        }\n        // Fetch the geometry.\n        var bh = this.bodyHeight;\n        var ph = this.pageHeight;\n        // Return early if no stretching is needed.\n        if (ph <= bh) {\n            return size;\n        }\n        // Return the adjusted size.\n        return size + (ph - bh);\n    };\n    /**\n     * Get the size of a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @returns The size of the column, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last column.\n     */\n    DataGrid.prototype.columnSize = function (region, index) {\n        // Return early for the row header region.\n        if (region === 'row-header') {\n            return this._rowHeaderSections.sizeOf(index);\n        }\n        // Fetch the column size.\n        var size = this._columnSections.sizeOf(index);\n        // Bail early if the index is out of bounds.\n        if (size < 0) {\n            return size;\n        }\n        // Return early if the last column is not stretched.\n        if (!this._stretchLastColumn) {\n            return size;\n        }\n        // Return early if its not the last column.\n        if (index < this._columnSections.count - 1) {\n            return size;\n        }\n        // Fetch the geometry.\n        var bw = this.bodyWidth;\n        var pw = this.pageWidth;\n        // Return early if no stretching is needed.\n        if (pw <= bw) {\n            return size;\n        }\n        // Return the adjusted size.\n        return size + (pw - bw);\n    };\n    /**\n     * Resize a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @param size - The desired size of the row.\n     */\n    DataGrid.prototype.resizeRow = function (region, index, size) {\n        var msg = new Private$6.RowResizeRequest(region, index, size);\n        MessageLoop.postMessage(this._viewport, msg);\n    };\n    /**\n     * Resize a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @param size - The desired size of the column.\n     */\n    DataGrid.prototype.resizeColumn = function (region, index, size) {\n        var msg = new Private$6.ColumnResizeRequest(region, index, size);\n        MessageLoop.postMessage(this._viewport, msg);\n    };\n    /**\n     * Reset modified rows to their default size.\n     *\n     * @param region - The row region of interest.\n     */\n    DataGrid.prototype.resetRows = function (region) {\n        switch (region) {\n            case 'all':\n                this._rowSections.reset();\n                this._columnHeaderSections.reset();\n                break;\n            case 'body':\n                this._rowSections.reset();\n                break;\n            case 'column-header':\n                this._columnHeaderSections.reset();\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.repaintContent();\n        this.repaintOverlay();\n    };\n    /**\n     * Reset modified columns to their default size.\n     *\n     * @param region - The column region of interest.\n     */\n    DataGrid.prototype.resetColumns = function (region) {\n        switch (region) {\n            case 'all':\n                this._columnSections.reset();\n                this._rowHeaderSections.reset();\n                break;\n            case 'body':\n                this._columnSections.reset();\n                break;\n            case 'row-header':\n                this._rowHeaderSections.reset();\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.repaintContent();\n        this.repaintOverlay();\n    };\n    /**\n     * Map a client position to local viewport coordinates.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The local viewport coordinates for the position.\n     */\n    DataGrid.prototype.mapToLocal = function (clientX, clientY) {\n        // Fetch the viewport rect.\n        var rect = this._viewport.node.getBoundingClientRect();\n        // Extract the rect coordinates.\n        var left = rect.left, top = rect.top;\n        // Round the rect coordinates for sub-pixel positioning.\n        left = Math.floor(left);\n        top = Math.floor(top);\n        // Convert to local coordinates.\n        var lx = clientX - left;\n        var ly = clientY - top;\n        // Return the local coordinates.\n        return { lx: lx, ly: ly };\n    };\n    /**\n     * Map a client position to virtual grid coordinates.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The virtual grid coordinates for the position.\n     */\n    DataGrid.prototype.mapToVirtual = function (clientX, clientY) {\n        // Convert to local coordiates.\n        var _a = this.mapToLocal(clientX, clientY), lx = _a.lx, ly = _a.ly;\n        // Convert to virtual coordinates.\n        var vx = lx + this.scrollX - this.headerWidth;\n        var vy = ly + this.scrollY - this.headerHeight;\n        // Return the local coordinates.\n        return { vx: vx, vy: vy };\n    };\n    /**\n     * Hit test the viewport for the given client position.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The hit test result, or `null` if the client\n     *   position is out of bounds.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row and/or column.\n     */\n    DataGrid.prototype.hitTest = function (clientX, clientY) {\n        // Convert the mouse position into local coordinates.\n        var _a = this.mapToLocal(clientX, clientY), lx = _a.lx, ly = _a.ly;\n        // Fetch the header and body dimensions.\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        var bw = this.bodyWidth;\n        var bh = this.bodyHeight;\n        var ph = this.pageHeight;\n        var pw = this.pageWidth;\n        // Adjust the body width for a stretched last column.\n        if (this._stretchLastColumn && pw > bw) {\n            bw = pw;\n        }\n        // Adjust the body height for a stretched last row.\n        if (this._stretchLastRow && ph > bh) {\n            bh = ph;\n        }\n        // Check for a corner header hit.\n        if (lx >= 0 && lx < hw && ly >= 0 && ly < hh) {\n            // Convert to unscrolled virtual coordinates.\n            var vx = lx;\n            var vy = ly;\n            // Fetch the row and column index.\n            var row_1 = this.rowAt('column-header', vy);\n            var column_1 = this.columnAt('row-header', vx);\n            // Fetch the cell offset position.\n            var ox = this.columnOffset('row-header', column_1);\n            var oy = this.rowOffset('column-header', row_1);\n            // Fetch cell width and height.\n            var width_1 = this.columnSize('row-header', column_1);\n            var height_1 = this.rowSize('column-header', row_1);\n            // Compute the leading and trailing positions.\n            var x_1 = vx - ox;\n            var y_1 = vy - oy;\n            // Return the hit test result.\n            return { region: 'corner-header', row: row_1, column: column_1, x: x_1, y: y_1, width: width_1, height: height_1 };\n        }\n        // Check for a column header hit.\n        if (ly >= 0 && ly < hh && lx >= 0 && lx < (hw + bw)) {\n            // Convert to unscrolled virtual coordinates.\n            var vx = lx + this._scrollX - hw;\n            var vy = ly;\n            // Fetch the row and column index.\n            var row_2 = this.rowAt('column-header', vy);\n            var column_2 = this.columnAt('body', vx);\n            // Fetch the cell offset position.\n            var ox = this.columnOffset('body', column_2);\n            var oy = this.rowOffset('column-header', row_2);\n            // Fetch the cell width and height.\n            var width_2 = this.columnSize('body', column_2);\n            var height_2 = this.rowSize('column-header', row_2);\n            // Compute the leading and trailing positions.\n            var x_2 = vx - ox;\n            var y_2 = vy - oy;\n            // Return the hit test result.\n            return { region: 'column-header', row: row_2, column: column_2, x: x_2, y: y_2, width: width_2, height: height_2 };\n        }\n        // Check for a row header hit.\n        if (lx >= 0 && lx < hw && ly >= 0 && ly < (hh + bh)) {\n            // Convert to unscrolled virtual coordinates.\n            var vx = lx;\n            var vy = ly + this._scrollY - hh;\n            // Fetch the row and column index.\n            var row_3 = this.rowAt('body', vy);\n            var column_3 = this.columnAt('row-header', vx);\n            // Fetch the cell offset position.\n            var ox = this.columnOffset('row-header', column_3);\n            var oy = this.rowOffset('body', row_3);\n            // Fetch the cell width and height.\n            var width_3 = this.columnSize('row-header', column_3);\n            var height_3 = this.rowSize('body', row_3);\n            // Compute the leading and trailing positions.\n            var x_3 = vx - ox;\n            var y_3 = vy - oy;\n            // Return the hit test result.\n            return { region: 'row-header', row: row_3, column: column_3, x: x_3, y: y_3, width: width_3, height: height_3 };\n        }\n        // Check for a body hit.\n        if (lx >= hw && lx < (hw + bw) && ly >= hh && ly < (hh + bh)) {\n            // Convert to unscrolled virtual coordinates.\n            var vx = lx + this._scrollX - hw;\n            var vy = ly + this._scrollY - hh;\n            // Fetch the row and column index.\n            var row_4 = this.rowAt('body', vy);\n            var column_4 = this.columnAt('body', vx);\n            // Fetch the cell offset position.\n            var ox = this.columnOffset('body', column_4);\n            var oy = this.rowOffset('body', row_4);\n            // Fetch the cell width and height.\n            var width_4 = this.columnSize('body', column_4);\n            var height_4 = this.rowSize('body', row_4);\n            // Compute the part coordinates.\n            var x_4 = vx - ox;\n            var y_4 = vy - oy;\n            // Return the result.\n            return { region: 'body', row: row_4, column: column_4, x: x_4, y: y_4, width: width_4, height: height_4 };\n        }\n        // Otherwise, it's a void space hit.\n        var row = -1;\n        var column = -1;\n        var x = -1;\n        var y = -1;\n        var width = -1;\n        var height = -1;\n        // Return the hit test result.\n        return { region: 'void', row: row, column: column, x: x, y: y, width: width, height: height };\n    };\n    /**\n     * Copy the current selection to the system clipboard.\n     *\n     * #### Notes\n     * The grid must have a data model and a selection model.\n     *\n     * The behavior can be configured via `DataGrid.copyConfig`.\n     */\n    DataGrid.prototype.copyToClipboard = function () {\n        var _a, _b;\n        // Fetch the data model.\n        var dataModel = this._dataModel;\n        // Bail early if there is no data model.\n        if (!dataModel) {\n            return;\n        }\n        // Fetch the selection model.\n        var selectionModel = this._selectionModel;\n        // Bail early if there is no selection model.\n        if (!selectionModel) {\n            return;\n        }\n        // Coerce the selections to an array.\n        var selections = toArray(selectionModel.selections());\n        // Bail early if there are no selections.\n        if (selections.length === 0) {\n            return;\n        }\n        // Alert that multiple selections cannot be copied.\n        if (selections.length > 1) {\n            alert('Cannot copy multiple grid selections.');\n            return;\n        }\n        // Fetch the model counts.\n        var br = dataModel.rowCount('body');\n        var bc = dataModel.columnCount('body');\n        // Bail early if there is nothing to copy.\n        if (br === 0 || bc === 0) {\n            return;\n        }\n        // Unpack the selection.\n        var _c = selections[0], r1 = _c.r1, c1 = _c.c1, r2 = _c.r2, c2 = _c.c2;\n        // Clamp the selection to the model bounds.\n        r1 = Math.max(0, Math.min(r1, br - 1));\n        c1 = Math.max(0, Math.min(c1, bc - 1));\n        r2 = Math.max(0, Math.min(r2, br - 1));\n        c2 = Math.max(0, Math.min(c2, bc - 1));\n        // Ensure the limits are well-orderd.\n        if (r2 < r1)\n            _a = [r2, r1], r1 = _a[0], r2 = _a[1];\n        if (c2 < c1)\n            _b = [c2, c1], c1 = _b[0], c2 = _b[1];\n        // Fetch the header counts.\n        var rhc = dataModel.columnCount('row-header');\n        var chr = dataModel.rowCount('column-header');\n        // Unpack the copy config.\n        var separator = this._copyConfig.separator;\n        var format = this._copyConfig.format;\n        var headers = this._copyConfig.headers;\n        var warningThreshold = this._copyConfig.warningThreshold;\n        // Compute the number of cells to be copied.\n        var rowCount = r2 - r1 + 1;\n        var colCount = c2 - c1 + 1;\n        switch (headers) {\n            case 'none':\n                rhc = 0;\n                chr = 0;\n                break;\n            case 'row':\n                chr = 0;\n                colCount += rhc;\n                break;\n            case 'column':\n                rhc = 0;\n                rowCount += chr;\n                break;\n            case 'all':\n                rowCount += chr;\n                colCount += rhc;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the total cell count.\n        var cellCount = rowCount * colCount;\n        // Allow the user to cancel a large copy request.\n        if (cellCount > warningThreshold) {\n            var msg = \"Copying \" + cellCount + \" cells may take a while. Continue?\";\n            if (!window.confirm(msg)) {\n                return;\n            }\n        }\n        // Set up the format args.\n        var args = {\n            region: 'body',\n            row: 0,\n            column: 0,\n            value: null,\n            metadata: {}\n        };\n        // Allocate the array of rows.\n        var rows = new Array(rowCount);\n        // Iterate over the rows.\n        for (var j = 0; j < rowCount; ++j) {\n            // Allocate the array of cells.\n            var cells = new Array(colCount);\n            // Iterate over the columns.\n            for (var i = 0; i < colCount; ++i) {\n                // Set up the format variables.\n                var region = void 0;\n                var row = void 0;\n                var column = void 0;\n                // Populate the format variables.\n                if (j < chr && i < rhc) {\n                    region = 'corner-header';\n                    row = j;\n                    column = i;\n                }\n                else if (j < chr) {\n                    region = 'column-header';\n                    row = j;\n                    column = i - rhc + c1;\n                }\n                else if (i < rhc) {\n                    region = 'row-header';\n                    row = j - chr + r1;\n                    column = i;\n                }\n                else {\n                    region = 'body';\n                    row = j - chr + r1;\n                    column = i - rhc + c1;\n                }\n                // Populate the format args.\n                args.region = region;\n                args.row = row;\n                args.column = column;\n                args.value = dataModel.data(region, row, column);\n                args.metadata = dataModel.metadata(region, row, column);\n                // Format the cell.\n                cells[i] = format(args);\n            }\n            // Save the row of cells.\n            rows[j] = cells;\n        }\n        // Convert the cells into lines.\n        var lines = rows.map(function (cells) { return cells.join(separator); });\n        // Convert the lines into text.\n        var text = lines.join('\\n');\n        // Copy the text to the clipboard.\n        ClipboardExt.copyText(text);\n    };\n    /**\n     * Process a message sent to the widget.\n     *\n     * @param msg - The message sent to the widget.\n     */\n    DataGrid.prototype.processMessage = function (msg) {\n        // Ignore child show/hide messages. The data grid controls the\n        // visibility of its children, and will manually dispatch the\n        // fit-request messages as a result of visibility change.\n        if (msg.type === 'child-shown' || msg.type === 'child-hidden') {\n            return;\n        }\n        // Recompute the scroll bar minimums before the layout refits.\n        if (msg.type === 'fit-request') {\n            var vsbLimits = ElementExt.sizeLimits(this._vScrollBar.node);\n            var hsbLimits = ElementExt.sizeLimits(this._hScrollBar.node);\n            this._vScrollBarMinWidth = vsbLimits.minWidth;\n            this._hScrollBarMinHeight = hsbLimits.minHeight;\n        }\n        // Process all other messages as normal.\n        _super.prototype.processMessage.call(this, msg);\n    };\n    /**\n     * Intercept a message sent to a message handler.\n     *\n     * @param handler - The target handler of the message.\n     *\n     * @param msg - The message to be sent to the handler.\n     *\n     * @returns `true` if the message should continue to be processed\n     *   as normal, or `false` if processing should cease immediately.\n     */\n    DataGrid.prototype.messageHook = function (handler, msg) {\n        // Process viewport messages.\n        if (handler === this._viewport) {\n            this._processViewportMessage(msg);\n            return true;\n        }\n        // Process horizontal scroll bar messages.\n        if (handler === this._hScrollBar && msg.type === 'activate-request') {\n            this.activate();\n            return false;\n        }\n        // Process vertical scroll bar messages.\n        if (handler === this._vScrollBar && msg.type === 'activate-request') {\n            this.activate();\n            return false;\n        }\n        // Ignore all other messages.\n        return true;\n    };\n    /**\n     * Handle the DOM events for the data grid.\n     *\n     * @param event - The DOM event sent to the data grid.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the data grid's DOM node. It\n     * should not be called directly by user code.\n     */\n    DataGrid.prototype.handleEvent = function (event) {\n        switch (event.type) {\n            case 'keydown':\n                this._evtKeyDown(event);\n                break;\n            case 'mousedown':\n                this._evtMouseDown(event);\n                break;\n            case 'mousemove':\n                this._evtMouseMove(event);\n                break;\n            case 'mouseup':\n                this._evtMouseUp(event);\n                break;\n            case 'dblclick':\n                this._evtMouseDoubleClick(event);\n                break;\n            case 'mouseleave':\n                this._evtMouseLeave(event);\n                break;\n            case 'contextmenu':\n                this._evtContextMenu(event);\n                break;\n            case 'wheel':\n                this._evtWheel(event);\n                break;\n            case 'resize':\n                this._refreshDPI();\n                break;\n        }\n    };\n    /**\n     * A message handler invoked on an `'activate-request'` message.\n     */\n    DataGrid.prototype.onActivateRequest = function (msg) {\n        this.viewport.node.focus();\n    };\n    /**\n     * A message handler invoked on a `'before-attach'` message.\n     */\n    DataGrid.prototype.onBeforeAttach = function (msg) {\n        window.addEventListener('resize', this);\n        this.node.addEventListener('wheel', this);\n        this._viewport.node.addEventListener('keydown', this);\n        this._viewport.node.addEventListener('mousedown', this);\n        this._viewport.node.addEventListener('mousemove', this);\n        this._viewport.node.addEventListener('dblclick', this);\n        this._viewport.node.addEventListener('mouseleave', this);\n        this._viewport.node.addEventListener('contextmenu', this);\n        this.repaintContent();\n        this.repaintOverlay();\n    };\n    /**\n     * A message handler invoked on an `'after-detach'` message.\n     */\n    DataGrid.prototype.onAfterDetach = function (msg) {\n        window.removeEventListener('resize', this);\n        this.node.removeEventListener('wheel', this);\n        this._viewport.node.removeEventListener('keydown', this);\n        this._viewport.node.removeEventListener('mousedown', this);\n        this._viewport.node.removeEventListener('mousemove', this);\n        this._viewport.node.removeEventListener('mouseleave', this);\n        this._viewport.node.removeEventListener('dblclick', this);\n        this._viewport.node.removeEventListener('contextmenu', this);\n        this._releaseMouse();\n    };\n    /**\n     * A message handler invoked on a `'before-show'` message.\n     */\n    DataGrid.prototype.onBeforeShow = function (msg) {\n        this.repaintContent();\n        this.repaintOverlay();\n    };\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    DataGrid.prototype.onResize = function (msg) {\n        if (this._editorController) {\n            this._editorController.cancel();\n        }\n        this._syncScrollState();\n    };\n    /**\n     * Schedule a repaint of all of the grid content.\n     */\n    DataGrid.prototype.repaintContent = function () {\n        var msg = new Private$6.PaintRequest('all', 0, 0, 0, 0);\n        MessageLoop.postMessage(this._viewport, msg);\n    };\n    /**\n     * Schedule a repaint of specific grid content.\n     */\n    DataGrid.prototype.repaintRegion = function (region, r1, c1, r2, c2) {\n        var msg = new Private$6.PaintRequest(region, r1, c1, r2, c2);\n        MessageLoop.postMessage(this._viewport, msg);\n    };\n    /**\n     * Schedule a repaint of the overlay.\n     */\n    DataGrid.prototype.repaintOverlay = function () {\n        MessageLoop.postMessage(this._viewport, Private$6.OverlayPaintRequest);\n    };\n    /**\n     * Ensure the canvas is at least the specified size.\n     *\n     * This method will retain the valid canvas content.\n     */\n    DataGrid.prototype._resizeCanvasIfNeeded = function (width, height) {\n        // Scale the size by the dpi ratio.\n        width = width * this._dpiRatio;\n        height = height * this._dpiRatio;\n        // Compute the maximum canvas size for the given width and height.\n        var maxW = (Math.ceil((width + 1) / 512) + 1) * 512;\n        var maxH = (Math.ceil((height + 1) / 512) + 1) * 512;\n        // Get the current size of the canvas.\n        var curW = this._canvas.width;\n        var curH = this._canvas.height;\n        // Bail early if the canvas size is within bounds.\n        if (curW >= width && curH >= height && curW <= maxW && curH <= maxH) {\n            return;\n        }\n        // Compute the expanded canvas size.\n        var expW = maxW - 512;\n        var expH = maxH - 512;\n        // Set the transforms to the identity matrix.\n        this._canvasGC.setTransform(1, 0, 0, 1, 0, 0);\n        this._bufferGC.setTransform(1, 0, 0, 1, 0, 0);\n        this._overlayGC.setTransform(1, 0, 0, 1, 0, 0);\n        // Resize the buffer if needed.\n        if (curW < width) {\n            this._buffer.width = expW;\n        }\n        else if (curW > maxW) {\n            this._buffer.width = maxW;\n        }\n        // Resize the buffer height if needed.\n        if (curH < height) {\n            this._buffer.height = expH;\n        }\n        else if (curH > maxH) {\n            this._buffer.height = maxH;\n        }\n        // Test whether there is content to blit.\n        var needBlit = curH > 0 && curH > 0 && width > 0 && height > 0;\n        // Copy the valid canvas content into the buffer if needed.\n        if (needBlit) {\n            this._bufferGC.drawImage(this._canvas, 0, 0);\n        }\n        // Resize the canvas width if needed.\n        if (curW < width) {\n            this._canvas.width = expW;\n            this._canvas.style.width = expW / this._dpiRatio + \"px\";\n        }\n        else if (curW > maxW) {\n            this._canvas.width = maxW;\n            this._canvas.style.width = maxW / this._dpiRatio + \"px\";\n        }\n        // Resize the canvas height if needed.\n        if (curH < height) {\n            this._canvas.height = expH;\n            this._canvas.style.height = expH / this._dpiRatio + \"px\";\n        }\n        else if (curH > maxH) {\n            this._canvas.height = maxH;\n            this._canvas.style.height = maxH / this._dpiRatio + \"px\";\n        }\n        // Copy the valid canvas content from the buffer if needed.\n        if (needBlit) {\n            this._canvasGC.drawImage(this._buffer, 0, 0);\n        }\n        // Copy the valid overlay content into the buffer if needed.\n        if (needBlit) {\n            this._bufferGC.drawImage(this._overlay, 0, 0);\n        }\n        // Resize the overlay width if needed.\n        if (curW < width) {\n            this._overlay.width = expW;\n            this._overlay.style.width = expW / this._dpiRatio + \"px\";\n        }\n        else if (curW > maxW) {\n            this._overlay.width = maxW;\n            this._overlay.style.width = maxW / this._dpiRatio + \"px\";\n        }\n        // Resize the overlay height if needed.\n        if (curH < height) {\n            this._overlay.height = expH;\n            this._overlay.style.height = expH / this._dpiRatio + \"px\";\n        }\n        else if (curH > maxH) {\n            this._overlay.height = maxH;\n            this._overlay.style.height = maxH / this._dpiRatio + \"px\";\n        }\n        // Copy the valid overlay content from the buffer if needed.\n        if (needBlit) {\n            this._overlayGC.drawImage(this._buffer, 0, 0);\n        }\n    };\n    /**\n     * Sync the scroll bars and scroll state with the viewport.\n     *\n     * #### Notes\n     * If the visibility of either scroll bar changes, a synchronous\n     * fit-request will be dispatched to the data grid to immediately\n     * resize the viewport.\n     */\n    DataGrid.prototype._syncScrollState = function () {\n        // Fetch the viewport dimensions.\n        var bw = this.bodyWidth;\n        var bh = this.bodyHeight;\n        var pw = this.pageWidth;\n        var ph = this.pageHeight;\n        // Get the current scroll bar visibility.\n        var hasVScroll = !this._vScrollBar.isHidden;\n        var hasHScroll = !this._hScrollBar.isHidden;\n        // Get the minimum sizes of the scroll bars.\n        var vsw = this._vScrollBarMinWidth;\n        var hsh = this._hScrollBarMinHeight;\n        // Get the page size as if no scroll bars are visible.\n        var apw = pw + (hasVScroll ? vsw : 0);\n        var aph = ph + (hasHScroll ? hsh : 0);\n        // Test whether scroll bars are needed for the adjusted size.\n        var needVScroll = aph < bh - 1;\n        var needHScroll = apw < bw - 1;\n        // Re-test the horizontal scroll if a vertical scroll is needed.\n        if (needVScroll && !needHScroll) {\n            needHScroll = (apw - vsw) < bw - 1;\n        }\n        // Re-test the vertical scroll if a horizontal scroll is needed.\n        if (needHScroll && !needVScroll) {\n            needVScroll = (aph - hsh) < bh - 1;\n        }\n        // If the visibility changes, immediately refit the grid.\n        if (needVScroll !== hasVScroll || needHScroll !== hasHScroll) {\n            this._vScrollBar.setHidden(!needVScroll);\n            this._hScrollBar.setHidden(!needHScroll);\n            this._scrollCorner.setHidden(!needVScroll || !needHScroll);\n            MessageLoop.sendMessage(this, Widget.Msg.FitRequest);\n        }\n        // Update the scroll bar limits.\n        this._vScrollBar.maximum = this.maxScrollY;\n        this._vScrollBar.page = this.pageHeight;\n        this._hScrollBar.maximum = this.maxScrollX;\n        this._hScrollBar.page = this.pageWidth;\n        // Re-clamp the scroll position.\n        this._scrollTo(this._scrollX, this._scrollY);\n    };\n    /**\n     * Sync the viewport to the given scroll position.\n     *\n     * #### Notes\n     * This schedules a full repaint and syncs the scroll state.\n     */\n    DataGrid.prototype._syncViewport = function () {\n        this.repaintContent();\n        this.repaintOverlay();\n        this._syncScrollState();\n    };\n    /**\n     * Process a message sent to the viewport\n     */\n    DataGrid.prototype._processViewportMessage = function (msg) {\n        switch (msg.type) {\n            case 'resize':\n                this._onViewportResize(msg);\n                break;\n            case 'scroll-request':\n                this._onViewportScrollRequest(msg);\n                break;\n            case 'paint-request':\n                this._onViewportPaintRequest(msg);\n                break;\n            case 'overlay-paint-request':\n                this._onViewportOverlayPaintRequest(msg);\n                break;\n            case 'row-resize-request':\n                this._onViewportRowResizeRequest(msg);\n                break;\n            case 'column-resize-request':\n                this._onViewportColumnResizeRequest(msg);\n                break;\n        }\n    };\n    /**\n     * A message hook invoked on a viewport `'resize'` message.\n     */\n    DataGrid.prototype._onViewportResize = function (msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Unpack the message data.\n        var width = msg.width, height = msg.height;\n        // Measure the viewport node if the dimensions are unknown.\n        if (width === -1) {\n            width = this._viewport.node.offsetWidth;\n        }\n        if (height === -1) {\n            height = this._viewport.node.offsetHeight;\n        }\n        // Round the dimensions to the nearest pixel.\n        width = Math.round(width);\n        height = Math.round(height);\n        // Get the current size of the viewport.\n        var oldWidth = this._viewportWidth;\n        var oldHeight = this._viewportHeight;\n        // Updated internal viewport size.\n        this._viewportWidth = width;\n        this._viewportHeight = height;\n        // Resize the canvas if needed.\n        this._resizeCanvasIfNeeded(width, height);\n        // Bail early if there is nothing to paint.\n        if (width === 0 || height === 0) {\n            return;\n        }\n        // Paint the whole grid if the old size was zero.\n        if (oldWidth === 0 || oldHeight === 0) {\n            this.paintContent(0, 0, width, height);\n            this._paintOverlay();\n            return;\n        }\n        // Paint the right edge as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            var bx = this._columnSections.offsetOf(this._columnSections.count - 1);\n            var x = Math.min(this.headerWidth + bx, oldWidth);\n            this.paintContent(x, 0, width - x, height);\n        }\n        else if (width > oldWidth) {\n            this.paintContent(oldWidth, 0, width - oldWidth, height);\n        }\n        // Paint the bottom edge as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            var by = this._rowSections.offsetOf(this._rowSections.count - 1);\n            var y = Math.min(this.headerHeight + by, oldHeight);\n            this.paintContent(0, y, width, height - y);\n        }\n        else if (height > oldHeight) {\n            this.paintContent(0, oldHeight, width, height - oldHeight);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n    };\n    /**\n     * A message hook invoked on a viewport `'scroll-request'` message.\n     */\n    DataGrid.prototype._onViewportScrollRequest = function (msg) {\n        this._scrollTo(this._hScrollBar.value, this._vScrollBar.value);\n    };\n    /**\n     * A message hook invoked on a viewport `'paint-request'` message.\n     */\n    DataGrid.prototype._onViewportPaintRequest = function (msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Bail early if the viewport has zero area.\n        if (this._viewportWidth === 0 || this._viewportHeight === 0) {\n            return;\n        }\n        // Set up the paint limits.\n        var xMin = 0;\n        var yMin = 0;\n        var xMax = this._viewportWidth - 1;\n        var yMax = this._viewportHeight - 1;\n        // Fetch the scroll position.\n        var sx = this._scrollX;\n        var sy = this._scrollY;\n        // Fetch the header dimensions.\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        // Fetch the section lists.\n        var rs = this._rowSections;\n        var cs = this._columnSections;\n        var rhs = this._rowHeaderSections;\n        var chs = this._columnHeaderSections;\n        // Unpack the message data.\n        var region = msg.region, r1 = msg.r1, c1 = msg.c1, r2 = msg.r2, c2 = msg.c2;\n        // Set up the paint variables.\n        var x1;\n        var y1;\n        var x2;\n        var y2;\n        // Fill the paint variables based on the paint region.\n        switch (region) {\n            case 'all':\n                x1 = xMin;\n                y1 = yMin;\n                x2 = xMax;\n                y2 = yMax;\n                break;\n            case 'body':\n                r1 = Math.max(0, Math.min(r1, rs.count));\n                c1 = Math.max(0, Math.min(c1, cs.count));\n                r2 = Math.max(0, Math.min(r2, rs.count));\n                c2 = Math.max(0, Math.min(c2, cs.count));\n                x1 = cs.offsetOf(c1) - sx + hw;\n                y1 = rs.offsetOf(r1) - sy + hh;\n                x2 = cs.extentOf(c2) - sx + hw;\n                y2 = rs.extentOf(r2) - sy + hh;\n                break;\n            case 'row-header':\n                r1 = Math.max(0, Math.min(r1, rs.count));\n                c1 = Math.max(0, Math.min(c1, rhs.count));\n                r2 = Math.max(0, Math.min(r2, rs.count));\n                c2 = Math.max(0, Math.min(c2, rhs.count));\n                x1 = rhs.offsetOf(c1);\n                y1 = rs.offsetOf(r1) - sy + hh;\n                x2 = rhs.extentOf(c2);\n                y2 = rs.extentOf(r2) - sy + hh;\n                break;\n            case 'column-header':\n                r1 = Math.max(0, Math.min(r1, chs.count));\n                c1 = Math.max(0, Math.min(c1, cs.count));\n                r2 = Math.max(0, Math.min(r2, chs.count));\n                c2 = Math.max(0, Math.min(c2, cs.count));\n                x1 = cs.offsetOf(c1) - sx + hw;\n                y1 = chs.offsetOf(r1);\n                x2 = cs.extentOf(c2) - sx + hw;\n                y2 = chs.extentOf(r2);\n                break;\n            case 'corner-header':\n                r1 = Math.max(0, Math.min(r1, chs.count));\n                c1 = Math.max(0, Math.min(c1, rhs.count));\n                r2 = Math.max(0, Math.min(r2, chs.count));\n                c2 = Math.max(0, Math.min(c2, rhs.count));\n                x1 = rhs.offsetOf(c1);\n                y1 = chs.offsetOf(r1);\n                x2 = rhs.extentOf(c2);\n                y2 = chs.extentOf(r2);\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Bail early if the dirty rect is outside the bounds.\n        if (x2 < xMin || y2 < yMin || x1 > xMax || y1 > yMax) {\n            return;\n        }\n        // Clamp the dirty rect to the paint bounds.\n        x1 = Math.max(xMin, Math.min(x1, xMax));\n        y1 = Math.max(yMin, Math.min(y1, yMax));\n        x2 = Math.max(xMin, Math.min(x2, xMax));\n        y2 = Math.max(yMin, Math.min(y2, yMax));\n        // Paint the content of the dirty rect.\n        this.paintContent(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n    };\n    /**\n     * A message hook invoked on a viewport `'overlay-paint-request'` message.\n     */\n    DataGrid.prototype._onViewportOverlayPaintRequest = function (msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Bail early if the viewport has zero area.\n        if (this._viewportWidth === 0 || this._viewportHeight === 0) {\n            return;\n        }\n        // Paint the content of the overlay.\n        this._paintOverlay();\n    };\n    /**\n     * A message hook invoked on a viewport `'row-resize-request'` message.\n     */\n    DataGrid.prototype._onViewportRowResizeRequest = function (msg) {\n        if (msg.region === 'body') {\n            this._resizeRow(msg.index, msg.size);\n        }\n        else {\n            this._resizeColumnHeader(msg.index, msg.size);\n        }\n    };\n    /**\n     * A message hook invoked on a viewport `'column-resize-request'` message.\n     */\n    DataGrid.prototype._onViewportColumnResizeRequest = function (msg) {\n        if (msg.region === 'body') {\n            this._resizeColumn(msg.index, msg.size);\n        }\n        else {\n            this._resizeRowHeader(msg.index, msg.size);\n        }\n    };\n    /**\n     * Handle the `thumbMoved` signal from a scroll bar.\n     */\n    DataGrid.prototype._onThumbMoved = function (sender) {\n        MessageLoop.postMessage(this._viewport, Private$6.ScrollRequest);\n    };\n    /**\n     * Handle the `pageRequested` signal from a scroll bar.\n     */\n    DataGrid.prototype._onPageRequested = function (sender, dir) {\n        if (sender === this._vScrollBar) {\n            this.scrollByPage(dir === 'decrement' ? 'up' : 'down');\n        }\n        else {\n            this.scrollByPage(dir === 'decrement' ? 'left' : 'right');\n        }\n    };\n    /**\n     * Handle the `stepRequested` signal from a scroll bar.\n     */\n    DataGrid.prototype._onStepRequested = function (sender, dir) {\n        if (sender === this._vScrollBar) {\n            this.scrollByStep(dir === 'decrement' ? 'up' : 'down');\n        }\n        else {\n            this.scrollByStep(dir === 'decrement' ? 'left' : 'right');\n        }\n    };\n    /**\n     * A signal handler for the data model `changed` signal.\n     */\n    DataGrid.prototype._onDataModelChanged = function (sender, args) {\n        switch (args.type) {\n            case 'rows-inserted':\n                this._onRowsInserted(args);\n                break;\n            case 'columns-inserted':\n                this._onColumnsInserted(args);\n                break;\n            case 'rows-removed':\n                this._onRowsRemoved(args);\n                break;\n            case 'columns-removed':\n                this._onColumnsRemoved(args);\n                break;\n            case 'rows-moved':\n                this._onRowsMoved(args);\n                break;\n            case 'columns-moved':\n                this._onColumnsMoved(args);\n                break;\n            case 'cells-changed':\n                this._onCellsChanged(args);\n                break;\n            case 'model-reset':\n                this._onModelReset(args);\n                break;\n            default:\n                throw 'unreachable';\n        }\n    };\n    /**\n     * A signal handler for the selection model `changed` signal.\n     */\n    DataGrid.prototype._onSelectionsChanged = function (sender) {\n        this.repaintOverlay();\n    };\n    /**\n     * Handle rows being inserted in the data model.\n     */\n    DataGrid.prototype._onRowsInserted = function (args) {\n        // Unpack the arg data.\n        var region = args.region, index = args.index, span = args.span;\n        // Bail early if there are no sections to insert.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        var list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Insert the span, maintaining the scroll position as needed.\n        if (this._scrollY === this.maxScrollY && this.maxScrollY > 0) {\n            list.insert(index, span);\n            this._scrollY = this.maxScrollY;\n        }\n        else {\n            list.insert(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * Handle columns being inserted into the data model.\n     */\n    DataGrid.prototype._onColumnsInserted = function (args) {\n        // Unpack the arg data.\n        var region = args.region, index = args.index, span = args.span;\n        // Bail early if there are no sections to insert.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        var list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Insert the span, maintaining the scroll position as needed.\n        if (this._scrollX === this.maxScrollX && this.maxScrollX > 0) {\n            list.insert(index, span);\n            this._scrollX = this.maxScrollX;\n        }\n        else {\n            list.insert(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * Handle rows being removed from the data model.\n     */\n    DataGrid.prototype._onRowsRemoved = function (args) {\n        // Unpack the arg data.\n        var region = args.region, index = args.index, span = args.span;\n        // Bail early if there are no sections to remove.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        var list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Bail if the index or is invalid\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Remove the span, maintaining the scroll position as needed.\n        if (this._scrollY === this.maxScrollY && this.maxScrollY > 0) {\n            list.remove(index, span);\n            this._scrollY = this.maxScrollY;\n        }\n        else {\n            list.remove(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * Handle columns being removed from the data model.\n     */\n    DataGrid.prototype._onColumnsRemoved = function (args) {\n        // Unpack the arg data.\n        var region = args.region, index = args.index, span = args.span;\n        // Bail early if there are no sections to remove.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        var list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Bail if the index or is invalid\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Remove the span, maintaining the scroll position as needed.\n        if (this._scrollX === this.maxScrollX && this.maxScrollX > 0) {\n            list.remove(index, span);\n            this._scrollX = this.maxScrollX;\n        }\n        else {\n            list.remove(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * Handle rows moving in the data model.\n     */\n    DataGrid.prototype._onRowsMoved = function (args) {\n        // Unpack the arg data.\n        var region = args.region, index = args.index, span = args.span, destination = args.destination;\n        // Bail early if there are no sections to move.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        var list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Clamp the move span to the limit.\n        span = Math.min(span, list.count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), list.count - span);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Compute the first affected index.\n        var r1 = Math.min(index, destination);\n        // Compute the last affected index.\n        var r2 = Math.max(index + span - 1, destination + span - 1);\n        // Move the sections in the list.\n        list.move(index, span, destination);\n        // Schedule a repaint of the dirty cells.\n        if (region === 'body') {\n            this.repaintRegion('body', r1, 0, r2, Infinity);\n            this.repaintRegion('row-header', r1, 0, r2, Infinity);\n        }\n        else {\n            this.repaintRegion('column-header', r1, 0, r2, Infinity);\n            this.repaintRegion('corner-header', r1, 0, r2, Infinity);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * Handle columns moving in the data model.\n     */\n    DataGrid.prototype._onColumnsMoved = function (args) {\n        // Unpack the arg data.\n        var region = args.region, index = args.index, span = args.span, destination = args.destination;\n        // Bail early if there are no sections to move.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        var list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Clamp the move span to the limit.\n        span = Math.min(span, list.count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), list.count - span);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Move the sections in the list.\n        list.move(index, span, destination);\n        // Compute the first affected index.\n        var c1 = Math.min(index, destination);\n        // Compute the last affected index.\n        var c2 = Math.max(index + span - 1, destination + span - 1);\n        // Schedule a repaint of the dirty cells.\n        if (region === 'body') {\n            this.repaintRegion('body', 0, c1, Infinity, c2);\n            this.repaintRegion('column-header', 0, c1, Infinity, c2);\n        }\n        else {\n            this.repaintRegion('row-header', 0, c1, Infinity, c2);\n            this.repaintRegion('corner-header', 0, c1, Infinity, c2);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * Handle cells changing in the data model.\n     */\n    DataGrid.prototype._onCellsChanged = function (args) {\n        // Unpack the arg data.\n        var region = args.region, row = args.row, column = args.column, rowSpan = args.rowSpan, columnSpan = args.columnSpan;\n        // Bail early if there are no cells to modify.\n        if (rowSpan <= 0 && columnSpan <= 0) {\n            return;\n        }\n        // Compute the changed cell bounds.\n        var r1 = row;\n        var c1 = column;\n        var r2 = r1 + rowSpan - 1;\n        var c2 = c1 + columnSpan - 1;\n        // Schedule a repaint of the cell content.\n        this.repaintRegion(region, r1, c1, r2, c2);\n    };\n    /**\n     * Handle a full data model reset.\n     */\n    DataGrid.prototype._onModelReset = function (args) {\n        // Look up the various current section counts.\n        var nr = this._rowSections.count;\n        var nc = this._columnSections.count;\n        var nrh = this._rowHeaderSections.count;\n        var nch = this._columnHeaderSections.count;\n        // Compute the delta count for each region.\n        var dr = this._dataModel.rowCount('body') - nr;\n        var dc = this._dataModel.columnCount('body') - nc;\n        var drh = this._dataModel.columnCount('row-header') - nrh;\n        var dch = this._dataModel.rowCount('column-header') - nch;\n        // Update the row sections, if needed.\n        if (dr > 0) {\n            this._rowSections.insert(nr, dr);\n        }\n        else if (dr < 0) {\n            this._rowSections.remove(nr + dr, -dr);\n        }\n        // Update the column sections, if needed.\n        if (dc > 0) {\n            this._columnSections.insert(nc, dc);\n        }\n        else if (dc < 0) {\n            this._columnSections.remove(nc + dc, -dc);\n        }\n        // Update the row header sections, if needed.\n        if (drh > 0) {\n            this._rowHeaderSections.insert(nrh, drh);\n        }\n        else if (drh < 0) {\n            this._rowHeaderSections.remove(nrh + drh, -drh);\n        }\n        // Update the column header sections, if needed.\n        if (dch > 0) {\n            this._columnHeaderSections.insert(nch, dch);\n        }\n        else if (dch < 0) {\n            this._columnHeaderSections.remove(nch + dch, -dch);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * A signal handler for the renderer map `changed` signal.\n     */\n    DataGrid.prototype._onRenderersChanged = function () {\n        this.repaintContent();\n    };\n    /**\n     * Handle the `'keydown'` event for the data grid.\n     */\n    DataGrid.prototype._evtKeyDown = function (event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._keyHandler) {\n            this._keyHandler.onKeyDown(this, event);\n        }\n    };\n    /**\n     * Handle the `'mousedown'` event for the data grid.\n     */\n    DataGrid.prototype._evtMouseDown = function (event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Activate the grid.\n        this.activate();\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Add the extra document listeners.\n        document.addEventListener('keydown', this, true);\n        document.addEventListener('mouseup', this, true);\n        document.addEventListener('mousedown', this, true);\n        document.addEventListener('mousemove', this, true);\n        document.addEventListener('contextmenu', this, true);\n        // Flip the mousedown flag.\n        this._mousedown = true;\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseDown(this, event);\n        }\n    };\n    /**\n     * Handle the `'mousemove'` event for the data grid.\n     */\n    DataGrid.prototype._evtMouseMove = function (event) {\n        // Stop the event propagation if the mouse is down.\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        // Bail if there is no mouse handler.\n        if (!this._mouseHandler) {\n            return;\n        }\n        // Dispatch to the mouse handler.\n        if (this._mousedown) {\n            this._mouseHandler.onMouseMove(this, event);\n        }\n        else {\n            this._mouseHandler.onMouseHover(this, event);\n        }\n    };\n    /**\n     * Handle the `'mouseup'` event for the data grid.\n     */\n    DataGrid.prototype._evtMouseUp = function (event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseUp(this, event);\n        }\n        // Release the mouse.\n        this._releaseMouse();\n    };\n    /**\n     * Handle the `'dblclick'` event for the data grid.\n     */\n    DataGrid.prototype._evtMouseDoubleClick = function (event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseDoubleClick(this, event);\n        }\n        // Release the mouse.\n        this._releaseMouse();\n    };\n    /**\n     * Handle the `'mouseleave'` event for the data grid.\n     */\n    DataGrid.prototype._evtMouseLeave = function (event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._mouseHandler) {\n            this._mouseHandler.onMouseLeave(this, event);\n        }\n    };\n    /**\n     * Handle the `'contextmenu'` event for the data grid.\n     */\n    DataGrid.prototype._evtContextMenu = function (event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._mouseHandler) {\n            this._mouseHandler.onContextMenu(this, event);\n        }\n    };\n    /**\n     * Handle the `'wheel'` event for the data grid.\n     */\n    DataGrid.prototype._evtWheel = function (event) {\n        // Ignore the event if `accel` is held.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Bail early if there is no mouse handler.\n        if (!this._mouseHandler) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Dispatch to the mouse handler.\n        this._mouseHandler.onWheel(this, event);\n    };\n    /**\n     * Release the mouse grab.\n     */\n    DataGrid.prototype._releaseMouse = function () {\n        // Clear the mousedown flag.\n        this._mousedown = false;\n        // Relase the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.release();\n        }\n        // Remove the document listeners.\n        document.removeEventListener('keydown', this, true);\n        document.removeEventListener('mouseup', this, true);\n        document.removeEventListener('mousedown', this, true);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('contextmenu', this, true);\n    };\n    /**\n     * Refresh the dpi ratio.\n     */\n    DataGrid.prototype._refreshDPI = function () {\n        // Get the best integral value for the dpi ratio.\n        var dpiRatio = Math.ceil(window.devicePixelRatio);\n        // Bail early if the computed dpi ratio has not changed.\n        if (this._dpiRatio === dpiRatio) {\n            return;\n        }\n        // Update the internal dpi ratio.\n        this._dpiRatio = dpiRatio;\n        // Schedule a repaint of the content.\n        this.repaintContent();\n        // Schedule a repaint of the overlay.\n        this.repaintOverlay();\n        // Update the canvas size for the new dpi ratio.\n        this._resizeCanvasIfNeeded(this._viewportWidth, this._viewportHeight);\n        // Ensure the canvas style is scaled for the new ratio.\n        this._canvas.style.width = this._canvas.width / this._dpiRatio + \"px\";\n        this._canvas.style.height = this._canvas.height / this._dpiRatio + \"px\";\n        // Ensure the overlay style is scaled for the new ratio.\n        this._overlay.style.width = this._overlay.width / this._dpiRatio + \"px\";\n        this._overlay.style.height = this._overlay.height / this._dpiRatio + \"px\";\n    };\n    /**\n     * Resize a row section immediately.\n     */\n    DataGrid.prototype._resizeRow = function (index, size) {\n        // Look up the target section list.\n        var list = this._rowSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        var oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        var newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        var vw = this._viewportWidth;\n        var vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        var delta = newSize - oldSize;\n        // Look up the column header height.\n        var hh = this.headerHeight;\n        // Compute the viewport offset of the section.\n        var offset = list.offsetOf(index) + hh - this._scrollY;\n        // Bail early if there is nothing to paint.\n        if (hh >= vh || offset >= vh) {\n            this._syncScrollState();\n            return;\n        }\n        // Update the scroll position if the section is not visible.\n        if (offset + oldSize <= hh) {\n            this._scrollY += delta;\n            this._syncScrollState();\n            return;\n        }\n        // Compute the paint origin of the section.\n        var pos = Math.max(hh, offset);\n        // Paint from the section onward if it spans the viewport.\n        if (offset + oldSize >= vh || offset + newSize >= vh) {\n            this.paintContent(0, pos, vw, vh - pos);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the X blit dimensions.\n        var sx = 0;\n        var sw = vw;\n        var dx = 0;\n        // Compute the Y blit dimensions.\n        var sy;\n        var sh;\n        var dy;\n        if (offset + newSize <= hh) {\n            sy = hh - delta;\n            sh = vh - sy;\n            dy = hh;\n        }\n        else {\n            sy = offset + oldSize;\n            sh = vh - sy;\n            dy = sy + delta;\n        }\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the section if needed.\n        if (newSize > 0 && offset + newSize > hh) {\n            this.paintContent(0, pos, vw, offset + newSize - pos);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            var r = this._rowSections.count - 1;\n            var y = hh + this._rowSections.offsetOf(r);\n            this.paintContent(0, y, vw, vh - y);\n        }\n        else if (delta < 0) {\n            this.paintContent(0, vh + delta, vw, -delta);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state.\n        this._syncScrollState();\n    };\n    /**\n     * Resize a column section immediately.\n     */\n    DataGrid.prototype._resizeColumn = function (index, size) {\n        // Look up the target section list.\n        var list = this._columnSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        var oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        var newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        var vw = this._viewportWidth;\n        var vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        var delta = newSize - oldSize;\n        // Look up the row header width.\n        var hw = this.headerWidth;\n        // Compute the viewport offset of the section.\n        var offset = list.offsetOf(index) + hw - this._scrollX;\n        // Bail early if there is nothing to paint.\n        if (hw >= vw || offset >= vw) {\n            this._syncScrollState();\n            return;\n        }\n        // Update the scroll position if the section is not visible.\n        if (offset + oldSize <= hw) {\n            this._scrollX += delta;\n            this._syncScrollState();\n            return;\n        }\n        // Compute the paint origin of the section.\n        var pos = Math.max(hw, offset);\n        // Paint from the section onward if it spans the viewport.\n        if (offset + oldSize >= vw || offset + newSize >= vw) {\n            this.paintContent(pos, 0, vw - pos, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the Y blit dimensions.\n        var sy = 0;\n        var sh = vh;\n        var dy = 0;\n        // Compute the X blit dimensions.\n        var sx;\n        var sw;\n        var dx;\n        if (offset + newSize <= hw) {\n            sx = hw - delta;\n            sw = vw - sx;\n            dx = hw;\n        }\n        else {\n            sx = offset + oldSize;\n            sw = vw - sx;\n            dx = sx + delta;\n        }\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the section if needed.\n        if (newSize > 0 && offset + newSize > hw) {\n            this.paintContent(pos, 0, offset + newSize - pos, vh);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            var c = this._columnSections.count - 1;\n            var x = hw + this._columnSections.offsetOf(c);\n            this.paintContent(x, 0, vw - x, vh);\n        }\n        else if (delta < 0) {\n            this.paintContent(vw + delta, 0, -delta, vh);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    };\n    /**\n     * Resize a row header section immediately.\n     */\n    DataGrid.prototype._resizeRowHeader = function (index, size) {\n        // Look up the target section list.\n        var list = this._rowHeaderSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        var oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        var newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        var vw = this._viewportWidth;\n        var vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        var delta = newSize - oldSize;\n        // Look up the offset of the section.\n        var offset = list.offsetOf(index);\n        // Bail early if the section is fully outside the viewport.\n        if (offset >= vw) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the entire tail if the section spans the viewport.\n        if (offset + oldSize >= vw || offset + newSize >= vw) {\n            this.paintContent(offset, 0, vw - offset, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the blit content dimensions.\n        var sx = offset + oldSize;\n        var sy = 0;\n        var sw = vw - sx;\n        var sh = vh;\n        var dx = sx + delta;\n        var dy = 0;\n        // Blit the valid contents to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the header section if needed.\n        if (newSize > 0) {\n            this.paintContent(offset, 0, newSize, vh);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            var c = this._columnSections.count - 1;\n            var x = this.headerWidth + this._columnSections.offsetOf(c);\n            this.paintContent(x, 0, vw - x, vh);\n        }\n        else if (delta < 0) {\n            this.paintContent(vw + delta, 0, -delta, vh);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    };\n    /**\n     * Resize a column header section immediately.\n     */\n    DataGrid.prototype._resizeColumnHeader = function (index, size) {\n        // Look up the target section list.\n        var list = this._columnHeaderSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        var oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        var newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        var vw = this._viewportWidth;\n        var vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Compute the size delta.\n        var delta = newSize - oldSize;\n        // Look up the offset of the section.\n        var offset = list.offsetOf(index);\n        // Bail early if the section is fully outside the viewport.\n        if (offset >= vh) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the entire tail if the section spans the viewport.\n        if (offset + oldSize >= vh || offset + newSize >= vh) {\n            this.paintContent(0, offset, vw, vh - offset);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the blit content dimensions.\n        var sx = 0;\n        var sy = offset + oldSize;\n        var sw = vw;\n        var sh = vh - sy;\n        var dx = 0;\n        var dy = sy + delta;\n        // Blit the valid contents to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the header section if needed.\n        if (newSize > 0) {\n            this.paintContent(0, offset, vw, newSize);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            var r = this._rowSections.count - 1;\n            var y = this.headerHeight + this._rowSections.offsetOf(r);\n            this.paintContent(0, y, vw, vh - y);\n        }\n        else if (delta < 0) {\n            this.paintContent(0, vh + delta, vw, -delta);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    };\n    /**\n     * Scroll immediately to the specified offset position.\n     */\n    DataGrid.prototype._scrollTo = function (x, y) {\n        // Floor and clamp the position to the allowable range.\n        x = Math.max(0, Math.min(Math.floor(x), this.maxScrollX));\n        y = Math.max(0, Math.min(Math.floor(y), this.maxScrollY));\n        // Synchronize the scroll bar values.\n        this._hScrollBar.value = x;\n        this._vScrollBar.value = y;\n        // Compute the delta scroll amount.\n        var dx = x - this._scrollX;\n        var dy = y - this._scrollY;\n        // Bail early if there is no effective scroll.\n        if (dx === 0 && dy === 0) {\n            return;\n        }\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Get the current size of the viewport.\n        var width = this._viewportWidth;\n        var height = this._viewportHeight;\n        // Bail early if the viewport is empty.\n        if (width === 0 || height === 0) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Get the visible content origin.\n        var contentX = this.headerWidth;\n        var contentY = this.headerHeight;\n        // Get the visible content dimensions.\n        var contentWidth = width - contentX;\n        var contentHeight = height - contentY;\n        // Bail early if there is no content to draw.\n        if (contentWidth <= 0 && contentHeight <= 0) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Compute the area which needs painting for the `dx` scroll.\n        var dxArea = 0;\n        if (dx !== 0 && contentWidth > 0) {\n            if (Math.abs(dx) >= contentWidth) {\n                dxArea = contentWidth * height;\n            }\n            else {\n                dxArea = Math.abs(dx) * height;\n            }\n        }\n        // Compute the area which needs painting for the `dy` scroll.\n        var dyArea = 0;\n        if (dy !== 0 && contentHeight > 0) {\n            if (Math.abs(dy) >= contentHeight) {\n                dyArea = width * contentHeight;\n            }\n            else {\n                dyArea = width * Math.abs(dy);\n            }\n        }\n        // If the area sum is larger than the total, paint everything.\n        if ((dxArea + dyArea) >= (width * height)) {\n            this._scrollX = x;\n            this._scrollY = y;\n            this.paintContent(0, 0, width, height);\n            this._paintOverlay();\n            return;\n        }\n        // Update the internal Y scroll position.\n        this._scrollY = y;\n        // Scroll the Y axis if needed. If the scroll distance exceeds\n        // the visible height, paint everything. Otherwise, blit the\n        // valid content and paint the dirty region.\n        if (dy !== 0 && contentHeight > 0) {\n            if (Math.abs(dy) >= contentHeight) {\n                this.paintContent(0, contentY, width, contentHeight);\n            }\n            else {\n                var x_5 = 0;\n                var y_5 = dy < 0 ? contentY : contentY + dy;\n                var w = width;\n                var h = contentHeight - Math.abs(dy);\n                this._blitContent(this._canvas, x_5, y_5, w, h, x_5, y_5 - dy);\n                this.paintContent(0, dy < 0 ? contentY : height - dy, width, Math.abs(dy));\n            }\n        }\n        // Update the internal X scroll position.\n        this._scrollX = x;\n        // Scroll the X axis if needed. If the scroll distance exceeds\n        // the visible width, paint everything. Otherwise, blit the\n        // valid content and paint the dirty region.\n        if (dx !== 0 && contentWidth > 0) {\n            if (Math.abs(dx) >= contentWidth) {\n                this.paintContent(contentX, 0, contentWidth, height);\n            }\n            else {\n                var x_6 = dx < 0 ? contentX : contentX + dx;\n                var y_6 = 0;\n                var w = contentWidth - Math.abs(dx);\n                var h = height;\n                this._blitContent(this._canvas, x_6, y_6, w, h, x_6 - dx, y_6);\n                this.paintContent(dx < 0 ? contentX : width - dx, 0, Math.abs(dx), height);\n            }\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n    };\n    /**\n     * Blit content into the on-screen grid canvas.\n     *\n     * The rect should be expressed in viewport coordinates.\n     *\n     * This automatically accounts for the dpi ratio.\n     */\n    DataGrid.prototype._blitContent = function (source, x, y, w, h, dx, dy) {\n        // Scale the blit coordinates by the dpi ratio.\n        x *= this._dpiRatio;\n        y *= this._dpiRatio;\n        w *= this._dpiRatio;\n        h *= this._dpiRatio;\n        dx *= this._dpiRatio;\n        dy *= this._dpiRatio;\n        // Save the current gc state.\n        this._canvasGC.save();\n        // Set the transform to the identity matrix.\n        this._canvasGC.setTransform(1, 0, 0, 1, 0, 0);\n        // Draw the specified content.\n        this._canvasGC.drawImage(source, x, y, w, h, dx, dy, w, h);\n        // Restore the gc state.\n        this._canvasGC.restore();\n    };\n    /**\n     * Paint the grid content for the given dirty rect.\n     *\n     * The rect should be expressed in valid viewport coordinates.\n     *\n     * This is the primary paint entry point. The individual `_draw*`\n     * methods should not be invoked directly. This method dispatches\n     * to the drawing methods in the correct order.\n     */\n    DataGrid.prototype.paintContent = function (rx, ry, rw, rh) {\n        // Scale the canvas and buffer GC for the dpi ratio.\n        this._canvasGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        this._bufferGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        // Clear the dirty rect of all content.\n        this._canvasGC.clearRect(rx, ry, rw, rh);\n        // Draw the void region.\n        this._drawVoidRegion(rx, ry, rw, rh);\n        // Draw the body region.\n        this._drawBodyRegion(rx, ry, rw, rh);\n        // Draw the row header region.\n        this._drawRowHeaderRegion(rx, ry, rw, rh);\n        // Draw the column header region.\n        this._drawColumnHeaderRegion(rx, ry, rw, rh);\n        // Draw the corner header region.\n        this.drawCornerHeaderRegion(rx, ry, rw, rh);\n    };\n    /**\n     * Paint the overlay content for the entire grid.\n     *\n     * This is the primary overlay paint entry point. The individual\n     * `_draw*` methods should not be invoked directly. This method\n     * dispatches to the drawing methods in the correct order.\n     */\n    DataGrid.prototype._paintOverlay = function () {\n        // Scale the overlay GC for the dpi ratio.\n        this._overlayGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        // Clear the overlay of all content.\n        this._overlayGC.clearRect(0, 0, this._overlay.width, this._overlay.height);\n        // Draw the body selections.\n        this._drawBodySelections();\n        // Draw the row header selections.\n        this._drawRowHeaderSelections();\n        // Draw the column header selections.\n        this._drawColumnHeaderSelections();\n        // Draw the cursor.\n        this._drawCursor();\n        // Draw the shadows.\n        this._drawShadows();\n    };\n    /**\n     * Draw the void region for the dirty rect.\n     */\n    DataGrid.prototype._drawVoidRegion = function (rx, ry, rw, rh) {\n        // Look up the void color.\n        var color = this._style.voidColor;\n        // Bail if there is no void color.\n        if (!color) {\n            return;\n        }\n        // Fill the dirty rect with the void color.\n        this._canvasGC.fillStyle = color;\n        this._canvasGC.fillRect(rx, ry, rw, rh);\n    };\n    /**\n     * Draw the body region which intersects the dirty rect.\n     */\n    DataGrid.prototype._drawBodyRegion = function (rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        var contentW = this._columnSections.length - this._scrollX;\n        var contentH = this._rowSections.length - this._scrollY;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        var contentX = this.headerWidth;\n        var contentY = this.headerHeight;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        var bh = this.bodyHeight;\n        var bw = this.bodyWidth;\n        var ph = this.pageHeight;\n        var pw = this.pageWidth;\n        // Get the upper and lower bounds of the dirty content area.\n        var x1 = Math.max(rx, contentX);\n        var y1 = Math.max(ry, contentY);\n        var x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        var y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        var r1 = this._rowSections.indexOf(y1 - contentY + this._scrollY);\n        var c1 = this._columnSections.indexOf(x1 - contentX + this._scrollX);\n        var r2 = this._rowSections.indexOf(y2 - contentY + this._scrollY);\n        var c2 = this._columnSections.indexOf(x2 - contentX + this._scrollX);\n        // Fetch the max row and column.\n        var maxRow = this._rowSections.count - 1;\n        var maxColumn = this._columnSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        var x = this._columnSections.offsetOf(c1) + contentX - this._scrollX;\n        var y = this._rowSections.offsetOf(r1) + contentY - this._scrollY;\n        // Set up the paint region size variables.\n        var width = 0;\n        var height = 0;\n        // Allocate the section sizes arrays.\n        var rowSizes = new Array(r2 - r1 + 1);\n        var columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (var j = r1; j <= r2; ++j) {\n            var size = this._rowSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (var i = c1; i <= c2; ++i) {\n            var size = this._columnSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last row is streched.\n        if (this._stretchLastRow && ph > bh && r2 === maxRow) {\n            var dh = this.pageHeight - this.bodyHeight;\n            rowSizes[rowSizes.length - 1] += dh;\n            height += dh;\n            y2 += dh;\n        }\n        // Adjust the geometry if the last column is streched.\n        if (this._stretchLastColumn && pw > bw && c2 === maxColumn) {\n            var dw = this.pageWidth - this.bodyWidth;\n            columnSizes[columnSizes.length - 1] += dw;\n            width += dw;\n            x2 += dw;\n        }\n        // Create the paint region object.\n        var rgn = {\n            region: 'body',\n            xMin: x1, yMin: y1,\n            xMax: x2, yMax: y2,\n            x: x, y: y, width: width, height: height,\n            row: r1, column: c1,\n            rowSizes: rowSizes, columnSizes: columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.backgroundColor);\n        // Draw the row background.\n        this._drawRowBackground(rgn, this._style.rowBackgroundColor);\n        // Draw the column background.\n        this._drawColumnBackground(rgn, this._style.columnBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.horizontalGridLineColor ||\n            this._style.gridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.verticalGridLineColor ||\n            this._style.gridLineColor);\n    };\n    /**\n     * Draw the row header region which intersects the dirty rect.\n     */\n    DataGrid.prototype._drawRowHeaderRegion = function (rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        var contentW = this.headerWidth;\n        var contentH = this.bodyHeight - this._scrollY;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        var contentX = 0;\n        var contentY = this.headerHeight;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        var bh = this.bodyHeight;\n        var ph = this.pageHeight;\n        // Get the upper and lower bounds of the dirty content area.\n        var x1 = rx;\n        var y1 = Math.max(ry, contentY);\n        var x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        var y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        var r1 = this._rowSections.indexOf(y1 - contentY + this._scrollY);\n        var c1 = this._rowHeaderSections.indexOf(x1);\n        var r2 = this._rowSections.indexOf(y2 - contentY + this._scrollY);\n        var c2 = this._rowHeaderSections.indexOf(x2);\n        // Fetch max row and column.\n        var maxRow = this._rowSections.count - 1;\n        var maxColumn = this._rowHeaderSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        var x = this._rowHeaderSections.offsetOf(c1);\n        var y = this._rowSections.offsetOf(r1) + contentY - this._scrollY;\n        // Set up the paint region size variables.\n        var width = 0;\n        var height = 0;\n        // Allocate the section sizes arrays.\n        var rowSizes = new Array(r2 - r1 + 1);\n        var columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (var j = r1; j <= r2; ++j) {\n            var size = this._rowSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (var i = c1; i <= c2; ++i) {\n            var size = this._rowHeaderSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last row is stretched.\n        if (this._stretchLastRow && ph > bh && r2 === maxRow) {\n            var dh = this.pageHeight - this.bodyHeight;\n            rowSizes[rowSizes.length - 1] += dh;\n            height += dh;\n            y2 += dh;\n        }\n        // Create the paint region object.\n        var rgn = {\n            region: 'row-header',\n            xMin: x1, yMin: y1,\n            xMax: x2, yMax: y2,\n            x: x, y: y, width: width, height: height,\n            row: r1, column: c1,\n            rowSizes: rowSizes, columnSizes: columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor ||\n            this._style.headerGridLineColor);\n    };\n    /**\n     * Draw the column header region which intersects the dirty rect.\n     */\n    DataGrid.prototype._drawColumnHeaderRegion = function (rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        var contentW = this.bodyWidth - this._scrollX;\n        var contentH = this.headerHeight;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        var contentX = this.headerWidth;\n        var contentY = 0;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        var bw = this.bodyWidth;\n        var pw = this.pageWidth;\n        // Get the upper and lower bounds of the dirty content area.\n        var x1 = Math.max(rx, contentX);\n        var y1 = ry;\n        var x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        var y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        var r1 = this._columnHeaderSections.indexOf(y1);\n        var c1 = this._columnSections.indexOf(x1 - contentX + this._scrollX);\n        var r2 = this._columnHeaderSections.indexOf(y2);\n        var c2 = this._columnSections.indexOf(x2 - contentX + this._scrollX);\n        // Fetch the max row and column.\n        var maxRow = this._columnHeaderSections.count - 1;\n        var maxColumn = this._columnSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        var x = this._columnSections.offsetOf(c1) + contentX - this._scrollX;\n        var y = this._columnHeaderSections.offsetOf(r1);\n        // Set up the paint region size variables.\n        var width = 0;\n        var height = 0;\n        // Allocate the section sizes arrays.\n        var rowSizes = new Array(r2 - r1 + 1);\n        var columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (var j = r1; j <= r2; ++j) {\n            var size = this._columnHeaderSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (var i = c1; i <= c2; ++i) {\n            var size = this._columnSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last column is stretched.\n        if (this._stretchLastColumn && pw > bw && c2 === maxColumn) {\n            var dw = this.pageWidth - this.bodyWidth;\n            columnSizes[columnSizes.length - 1] += dw;\n            width += dw;\n            x2 += dw;\n        }\n        // Create the paint region object.\n        var rgn = {\n            region: 'column-header',\n            xMin: x1, yMin: y1,\n            xMax: x2, yMax: y2,\n            x: x, y: y, width: width, height: height,\n            row: r1, column: c1,\n            rowSizes: rowSizes, columnSizes: columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor ||\n            this._style.headerGridLineColor);\n    };\n    /**\n     * Draw the corner header region which intersects the dirty rect.\n     */\n    DataGrid.prototype.drawCornerHeaderRegion = function (rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        var contentW = this.headerWidth;\n        var contentH = this.headerHeight;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        var contentX = 0;\n        var contentY = 0;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Get the upper and lower bounds of the dirty content area.\n        var x1 = rx;\n        var y1 = ry;\n        var x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        var y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        var r1 = this._columnHeaderSections.indexOf(y1);\n        var c1 = this._rowHeaderSections.indexOf(x1);\n        var r2 = this._columnHeaderSections.indexOf(y2);\n        var c2 = this._rowHeaderSections.indexOf(x2);\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = this._columnHeaderSections.count - 1;\n        }\n        if (c2 < 0) {\n            c2 = this._rowHeaderSections.count - 1;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        var x = this._rowHeaderSections.offsetOf(c1);\n        var y = this._columnHeaderSections.offsetOf(r1);\n        // Set up the paint region size variables.\n        var width = 0;\n        var height = 0;\n        // Allocate the section sizes arrays.\n        var rowSizes = new Array(r2 - r1 + 1);\n        var columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (var j = r1; j <= r2; ++j) {\n            var size = this._columnHeaderSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (var i = c1; i <= c2; ++i) {\n            var size = this._rowHeaderSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Create the paint region object.\n        var rgn = {\n            region: 'corner-header',\n            xMin: x1, yMin: y1,\n            xMax: x2, yMax: y2,\n            x: x, y: y, width: width, height: height,\n            row: r1, column: c1,\n            rowSizes: rowSizes, columnSizes: columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor ||\n            this._style.headerGridLineColor);\n    };\n    /**\n     * Draw the background for the given paint region.\n     */\n    DataGrid.prototype._drawBackground = function (rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Unpack the region.\n        var xMin = rgn.xMin, yMin = rgn.yMin, xMax = rgn.xMax, yMax = rgn.yMax;\n        // Fill the region with the specified color.\n        this._canvasGC.fillStyle = color;\n        this._canvasGC.fillRect(xMin, yMin, xMax - xMin + 1, yMax - yMin + 1);\n    };\n    /**\n     * Draw the row background for the given paint region.\n     */\n    DataGrid.prototype._drawRowBackground = function (rgn, colorFn) {\n        // Bail if there is no color function.\n        if (!colorFn) {\n            return;\n        }\n        // Compute the X bounds for the row.\n        var x1 = Math.max(rgn.xMin, rgn.x);\n        var x2 = Math.min(rgn.x + rgn.width - 1, rgn.xMax);\n        // Draw the background for the rows in the region.\n        for (var y = rgn.y, j = 0, n = rgn.rowSizes.length; j < n; ++j) {\n            // Fetch the size of the row.\n            var size = rgn.rowSizes[j];\n            // Skip zero sized rows.\n            if (size === 0) {\n                continue;\n            }\n            // Get the background color for the row.\n            var color = colorFn(rgn.row + j);\n            // Fill the row with the background color if needed.\n            if (color) {\n                var y1 = Math.max(rgn.yMin, y);\n                var y2 = Math.min(y + size - 1, rgn.yMax);\n                this._canvasGC.fillStyle = color;\n                this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Increment the running Y coordinate.\n            y += size;\n        }\n    };\n    /**\n     * Draw the column background for the given paint region.\n     */\n    DataGrid.prototype._drawColumnBackground = function (rgn, colorFn) {\n        // Bail if there is no color function.\n        if (!colorFn) {\n            return;\n        }\n        // Compute the Y bounds for the column.\n        var y1 = Math.max(rgn.yMin, rgn.y);\n        var y2 = Math.min(rgn.y + rgn.height - 1, rgn.yMax);\n        // Draw the background for the columns in the region.\n        for (var x = rgn.x, i = 0, n = rgn.columnSizes.length; i < n; ++i) {\n            // Fetch the size of the column.\n            var size = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (size === 0) {\n                continue;\n            }\n            // Get the background color for the column.\n            var color = colorFn(rgn.column + i);\n            // Fill the column with the background color if needed.\n            if (color) {\n                var x1 = Math.max(rgn.xMin, x);\n                var x2 = Math.min(x + size - 1, rgn.xMax);\n                this._canvasGC.fillStyle = color;\n                this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Increment the running X coordinate.\n            x += size;\n        }\n    };\n    /**\n     * Draw the cells for the given paint region.\n     */\n    DataGrid.prototype._drawCells = function (rgn) {\n        // Bail if there is no data model.\n        if (!this._dataModel) {\n            return;\n        }\n        // Set up the cell config object for rendering.\n        var config = {\n            x: 0, y: 0, width: 0, height: 0,\n            region: rgn.region, row: 0, column: 0,\n            value: null, metadata: DataModel.emptyMetadata\n        };\n        // Save the buffer gc before wrapping.\n        this._bufferGC.save();\n        // Wrap the buffer gc for painting the cells.\n        var gc = new GraphicsContext(this._bufferGC);\n        // Compute the actual Y bounds for the cell range.\n        var y1 = Math.max(rgn.yMin, rgn.y);\n        var y2 = Math.min(rgn.y + rgn.height - 1, rgn.yMax);\n        // Loop over the columns in the region.\n        for (var x = rgn.x, i = 0, n = rgn.columnSizes.length; i < n; ++i) {\n            // Fetch the size of the column.\n            var width = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (width === 0) {\n                continue;\n            }\n            // Compute the column index.\n            var column = rgn.column + i;\n            // Update the config for the current column.\n            config.x = x;\n            config.width = width;\n            config.column = column;\n            // Clear the buffer rect for the column.\n            gc.clearRect(x, rgn.y, width, rgn.height);\n            // Save the GC state.\n            gc.save();\n            // Loop over the rows in the column.\n            for (var y = rgn.y, j = 0, n_1 = rgn.rowSizes.length; j < n_1; ++j) {\n                // Fetch the size of the row.\n                var height = rgn.rowSizes[j];\n                // Skip zero sized rows.\n                if (height === 0) {\n                    continue;\n                }\n                // Compute the row index.\n                var row = rgn.row + j;\n                // Get the value for the cell.\n                var value = void 0;\n                try {\n                    value = this._dataModel.data(rgn.region, row, column);\n                }\n                catch (err) {\n                    value = undefined;\n                    console.error(err);\n                }\n                // Get the metadata for the cell.\n                var metadata = void 0;\n                try {\n                    metadata = this._dataModel.metadata(rgn.region, row, column);\n                }\n                catch (err) {\n                    metadata = DataModel.emptyMetadata;\n                    console.error(err);\n                }\n                // Update the config for the current cell.\n                config.y = y;\n                config.height = height;\n                config.row = row;\n                config.value = value;\n                config.metadata = metadata;\n                // Get the renderer for the cell.\n                var renderer = this._cellRenderers.get(config);\n                // Save the GC state.\n                gc.save();\n                // Paint the cell into the off-screen buffer.\n                try {\n                    renderer.paint(gc, config);\n                }\n                catch (err) {\n                    console.error(err);\n                }\n                // Restore the GC state.\n                gc.restore();\n                // Increment the running Y coordinate.\n                y += height;\n            }\n            // Restore the GC state.\n            gc.restore();\n            // Compute the actual X bounds for the column.\n            var x1 = Math.max(rgn.xMin, x);\n            var x2 = Math.min(x + width - 1, rgn.xMax);\n            // Blit the off-screen buffer column into the on-screen canvas.\n            //\n            // This is *much* faster than drawing directly into the on-screen\n            // canvas with a clip rect on the column. Managed column clipping\n            // is required to prevent cell renderers from needing to set up a\n            // clip rect for handling horizontal overflow text (slow!).\n            this._blitContent(this._buffer, x1, y1, x2 - x1 + 1, y2 - y1 + 1, x1, y1);\n            // Increment the running X coordinate.\n            x += width;\n        }\n        // Dispose of the wrapped gc.\n        gc.dispose();\n        // Restore the final buffer gc state.\n        this._bufferGC.restore();\n    };\n    /**\n     * Draw the horizontal grid lines for the given paint region.\n     */\n    DataGrid.prototype._drawHorizontalGridLines = function (rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Compute the X bounds for the horizontal lines.\n        var x1 = Math.max(rgn.xMin, rgn.x);\n        var x2 = Math.min(rgn.x + rgn.width, rgn.xMax + 1);\n        // Begin the path for the grid lines.\n        this._canvasGC.beginPath();\n        // Set the line width for the grid lines.\n        this._canvasGC.lineWidth = 1;\n        // Fetch the geometry.\n        var bh = this.bodyHeight;\n        var ph = this.pageHeight;\n        // Fetch the number of grid lines to be drawn.\n        var n = rgn.rowSizes.length;\n        // Adjust the count down if the last line shouldn't be drawn.\n        if (this._stretchLastRow && ph > bh) {\n            if (rgn.row + n === this._rowSections.count) {\n                n -= 1;\n            }\n        }\n        // Draw the horizontal grid lines.\n        for (var y = rgn.y, j = 0; j < n; ++j) {\n            // Fetch the size of the row.\n            var size = rgn.rowSizes[j];\n            // Skip zero sized rows.\n            if (size === 0) {\n                continue;\n            }\n            // Compute the Y position of the line.\n            var pos = y + size - 1;\n            // Draw the line if it's in range of the dirty rect.\n            if (pos >= rgn.yMin && pos <= rgn.yMax) {\n                this._canvasGC.moveTo(x1, pos + 0.5);\n                this._canvasGC.lineTo(x2, pos + 0.5);\n            }\n            // Increment the running Y coordinate.\n            y += size;\n        }\n        // Stroke the lines with the specified color.\n        this._canvasGC.strokeStyle = color;\n        this._canvasGC.stroke();\n    };\n    /**\n     * Draw the vertical grid lines for the given paint region.\n     */\n    DataGrid.prototype._drawVerticalGridLines = function (rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Compute the Y bounds for the vertical lines.\n        var y1 = Math.max(rgn.yMin, rgn.y);\n        var y2 = Math.min(rgn.y + rgn.height, rgn.yMax + 1);\n        // Begin the path for the grid lines\n        this._canvasGC.beginPath();\n        // Set the line width for the grid lines.\n        this._canvasGC.lineWidth = 1;\n        // Fetch the geometry.\n        var bw = this.bodyWidth;\n        var pw = this.pageWidth;\n        // Fetch the number of grid lines to be drawn.\n        var n = rgn.columnSizes.length;\n        // Adjust the count down if the last line shouldn't be drawn.\n        if (this._stretchLastColumn && pw > bw) {\n            if (rgn.column + n === this._columnSections.count) {\n                n -= 1;\n            }\n        }\n        // Draw the vertical grid lines.\n        for (var x = rgn.x, i = 0; i < n; ++i) {\n            // Fetch the size of the column.\n            var size = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (size === 0) {\n                continue;\n            }\n            // Compute the X position of the line.\n            var pos = x + size - 1;\n            // Draw the line if it's in range of the dirty rect.\n            if (pos >= rgn.xMin && pos <= rgn.xMax) {\n                this._canvasGC.moveTo(pos + 0.5, y1);\n                this._canvasGC.lineTo(pos + 0.5, y2);\n            }\n            // Increment the running X coordinate.\n            x += size;\n        }\n        // Stroke the lines with the specified color.\n        this._canvasGC.strokeStyle = color;\n        this._canvasGC.stroke();\n    };\n    /**\n     * Draw the body selections for the data grid.\n     */\n    DataGrid.prototype._drawBodySelections = function () {\n        // Fetch the selection model.\n        var model = this._selectionModel;\n        // Bail early if there are no selections.\n        if (!model || model.isEmpty) {\n            return;\n        }\n        // Fetch the selection colors.\n        var fill = this._style.selectionFillColor;\n        var stroke = this._style.selectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch the scroll geometry.\n        var sx = this._scrollX;\n        var sy = this._scrollY;\n        // Get the first visible cell of the grid.\n        var r1 = this._rowSections.indexOf(sy);\n        var c1 = this._columnSections.indexOf(sx);\n        // Bail early if there are no visible cells.\n        if (r1 < 0 || c1 < 0) {\n            return;\n        }\n        // Fetch the extra geometry.\n        var bw = this.bodyWidth;\n        var bh = this.bodyHeight;\n        var pw = this.pageWidth;\n        var ph = this.pageHeight;\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        // Get the last visible cell of the grid.\n        var r2 = this._rowSections.indexOf(sy + ph);\n        var c2 = this._columnSections.indexOf(sx + pw);\n        // Fetch the max row and column.\n        var maxRow = this._rowSections.count - 1;\n        var maxColumn = this._columnSections.count - 1;\n        // Clamp the last cell if the void space is visible.\n        r2 = r2 < 0 ? maxRow : r2;\n        c2 = c2 < 0 ? maxColumn : c2;\n        // Fetch the overlay gc.\n        var gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the body clipping rect.\n        gc.beginPath();\n        gc.rect(hw, hh, pw, ph);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Iterate over the selections.\n        var it = model.selections();\n        var s;\n        while ((s = it.next()) !== undefined) {\n            // Skip the section if it's not visible.\n            if (s.r1 < r1 && s.r2 < r1) {\n                continue;\n            }\n            if (s.r1 > r2 && s.r2 > r2) {\n                continue;\n            }\n            if (s.c1 < c1 && s.c2 < c1) {\n                continue;\n            }\n            if (s.c1 > c2 && s.c2 > c2) {\n                continue;\n            }\n            // Clamp the cell to the model bounds.\n            var sr1 = Math.max(0, Math.min(s.r1, maxRow));\n            var sc1 = Math.max(0, Math.min(s.c1, maxColumn));\n            var sr2 = Math.max(0, Math.min(s.r2, maxRow));\n            var sc2 = Math.max(0, Math.min(s.c2, maxColumn));\n            // Swap index order if needed.\n            var tmp = void 0;\n            if (sr1 > sr2) {\n                tmp = sr1;\n                sr1 = sr2;\n                sr2 = tmp;\n            }\n            if (sc1 > sc2) {\n                tmp = sc1;\n                sc1 = sc2;\n                sc2 = tmp;\n            }\n            // Convert to pixel coordinates.\n            var x1 = this._columnSections.offsetOf(sc1) - sx + hw;\n            var y1 = this._rowSections.offsetOf(sr1) - sy + hh;\n            var x2 = this._columnSections.extentOf(sc2) - sx + hw;\n            var y2 = this._rowSections.extentOf(sr2) - sy + hh;\n            // Adjust the trailing X coordinate for column stretch.\n            if (this._stretchLastColumn && pw > bw && sc2 === maxColumn) {\n                x2 = hw + pw - 1;\n            }\n            // Adjust the trailing Y coordinate for row stretch.\n            if (this._stretchLastRow && ph > bh && sr2 === maxRow) {\n                y2 = hh + ph - 1;\n            }\n            // Clamp the bounds to just outside of the clipping rect.\n            x1 = Math.max(hw - 1, x1);\n            y1 = Math.max(hh - 1, y1);\n            x2 = Math.min(hw + pw + 1, x2);\n            y2 = Math.min(hh + ph + 1, y2);\n            // Skip zero sized ranges.\n            if (x2 < x1 || y2 < y1) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Stroke the rect if needed.\n            if (stroke) {\n                gc.strokeRect(x1 - .5, y1 - .5, x2 - x1 + 1, y2 - y1 + 1);\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    };\n    /**\n     * Draw the row header selections for the data grid.\n     */\n    DataGrid.prototype._drawRowHeaderSelections = function () {\n        // Fetch the selection model.\n        var model = this._selectionModel;\n        // Bail early if there are no selections or if the selectionMode is the entire column.\n        if (!model || model.isEmpty || model.selectionMode == 'column') {\n            return;\n        }\n        // Bail early if the row headers are not visible.\n        if (this.headerWidth === 0 || this.pageHeight === 0) {\n            return;\n        }\n        // Fetch the selection colors.\n        var fill = this._style.headerSelectionFillColor;\n        var stroke = this._style.headerSelectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch common geometry.\n        var sy = this._scrollY;\n        var bh = this.bodyHeight;\n        var ph = this.pageHeight;\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        var rs = this._rowSections;\n        // Fetch the overlay gc.\n        var gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the header clipping rect.\n        gc.beginPath();\n        gc.rect(0, hh, hw, ph);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Fetch the max row.\n        var maxRow = rs.count - 1;\n        // Fetch the visible rows.\n        var r1 = rs.indexOf(sy);\n        var r2 = rs.indexOf(sy + ph - 1);\n        r2 = r2 < 0 ? maxRow : r2;\n        // Iterate over the visible rows.\n        for (var j = r1; j <= r2; ++j) {\n            // Skip rows which aren't selected.\n            if (!model.isRowSelected(j)) {\n                continue;\n            }\n            // Get the dimensions of the row.\n            var y = rs.offsetOf(j) - sy + hh;\n            var h = rs.sizeOf(j);\n            // Adjust the height for row stretch.\n            if (this._stretchLastRow && ph > bh && j === maxRow) {\n                h = hh + ph - y;\n            }\n            // Skip zero sized rows.\n            if (h === 0) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(0, y, hw, h);\n            }\n            // Draw the border if needed.\n            if (stroke) {\n                gc.beginPath();\n                gc.moveTo(hw - .5, y - 1);\n                gc.lineTo(hw - .5, y + h);\n                gc.stroke();\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    };\n    /**\n     * Draw the column header selections for the data grid.\n     */\n    DataGrid.prototype._drawColumnHeaderSelections = function () {\n        // Fetch the selection model.\n        var model = this._selectionModel;\n        // Bail early if there are no selections or if the selectionMode is the entire row\n        if (!model || model.isEmpty || model.selectionMode == 'row') {\n            return;\n        }\n        // Bail early if the column headers are not visible.\n        if (this.headerHeight === 0 || this.pageWidth === 0) {\n            return;\n        }\n        // Fetch the selection colors.\n        var fill = this._style.headerSelectionFillColor;\n        var stroke = this._style.headerSelectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch common geometry.\n        var sx = this._scrollX;\n        var bw = this.bodyWidth;\n        var pw = this.pageWidth;\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        var cs = this._columnSections;\n        // Fetch the overlay gc.\n        var gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the header clipping rect.\n        gc.beginPath();\n        gc.rect(hw, 0, pw, hh);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Fetch the max column.\n        var maxCol = cs.count - 1;\n        // Fetch the visible columns.\n        var c1 = cs.indexOf(sx);\n        var c2 = cs.indexOf(sx + pw - 1);\n        c2 = c2 < 0 ? maxCol : c2;\n        // Iterate over the visible columns.\n        for (var i = c1; i <= c2; ++i) {\n            // Skip columns which aren't selected.\n            if (!model.isColumnSelected(i)) {\n                continue;\n            }\n            // Get the dimensions of the column.\n            var x = cs.offsetOf(i) - sx + hw;\n            var w = cs.sizeOf(i);\n            // Adjust the width for column stretch.\n            if (this._stretchLastColumn && pw > bw && i === maxCol) {\n                w = hw + pw - x;\n            }\n            // Skip zero sized columns.\n            if (w === 0) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(x, 0, w, hh);\n            }\n            // Draw the border if needed.\n            if (stroke) {\n                gc.beginPath();\n                gc.moveTo(x - 1, hh - .5);\n                gc.lineTo(x + w, hh - .5);\n                gc.stroke();\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    };\n    /**\n     * Draw the overlay cursor for the data grid.\n     */\n    DataGrid.prototype._drawCursor = function () {\n        // Fetch the selection model.\n        var model = this._selectionModel;\n        // Bail early if there is no cursor.\n        if (!model || model.isEmpty || model.selectionMode !== 'cell') {\n            return;\n        }\n        // Extract the style information.\n        var fill = this._style.cursorFillColor;\n        var stroke = this._style.cursorBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch the cursor location.\n        var row = model.cursorRow;\n        var column = model.cursorColumn;\n        // Fetch the max row and column.\n        var maxRow = this._rowSections.count - 1;\n        var maxColumn = this._columnSections.count - 1;\n        // Bail early if the cursor is out of bounds.\n        if (row < 0 || row > maxRow) {\n            return;\n        }\n        if (column < 0 || column > maxColumn) {\n            return;\n        }\n        // Fetch geometry.\n        var sx = this._scrollX;\n        var sy = this._scrollY;\n        var bw = this.bodyWidth;\n        var bh = this.bodyHeight;\n        var pw = this.pageWidth;\n        var ph = this.pageHeight;\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        var vw = this._viewportWidth;\n        var vh = this._viewportHeight;\n        // Get the cursor bounds in viewport coordinates.\n        var x1 = this._columnSections.offsetOf(column) - sx + hw;\n        var x2 = this._columnSections.extentOf(column) - sx + hw;\n        var y1 = this._rowSections.offsetOf(row) - sy + hh;\n        var y2 = this._rowSections.extentOf(row) - sy + hh;\n        // Adjust the trailing X coordinate for column stretch.\n        if (this._stretchLastColumn && pw > bw && column === maxColumn) {\n            x2 = vw - 1;\n        }\n        // Adjust the trailing Y coordinate for row stretch.\n        if (this._stretchLastRow && ph > bh && row === maxRow) {\n            y2 = vh - 1;\n        }\n        // Skip zero sized cursors.\n        if (x2 < x1 || y2 < y1) {\n            return;\n        }\n        // Bail early if the cursor is off the screen.\n        if ((x1 - 1) >= vw || (y1 - 1) >= vh || (x2 + 1) < hw || (y2 + 1) < hh) {\n            return;\n        }\n        // Fetch the overlay gc.\n        var gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the body clipping rect.\n        gc.beginPath();\n        gc.rect(hw, hh, pw, ph);\n        gc.clip();\n        // Clear any existing overlay content.\n        gc.clearRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n        // Fill the cursor rect if needed.\n        if (fill) {\n            // Set up the fill style.\n            gc.fillStyle = fill;\n            // Fill the cursor rect.\n            gc.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n        }\n        // Stroke the cursor border if needed.\n        if (stroke) {\n            // Set up the stroke style.\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 2;\n            // Stroke the cursor rect.\n            gc.strokeRect(x1, y1, x2 - x1, y2 - y1);\n        }\n        // Restore the gc state.\n        gc.restore();\n    };\n    /**\n     * Draw the overlay shadows for the data grid.\n     */\n    DataGrid.prototype._drawShadows = function () {\n        // Fetch the scroll shadow from the style.\n        var shadow = this._style.scrollShadow;\n        // Bail early if there is no shadow to draw.\n        if (!shadow) {\n            return;\n        }\n        // Fetch the scroll position.\n        var sx = this._scrollX;\n        var sy = this._scrollY;\n        // Fetch maximum scroll position.\n        var sxMax = this.maxScrollX;\n        var syMax = this.maxScrollY;\n        // Fetch the header width and height.\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        // Fetch the page width and height.\n        var pw = this.pageWidth;\n        var ph = this.pageHeight;\n        // Fetch the viewport width and height.\n        var vw = this._viewportWidth;\n        var vh = this._viewportHeight;\n        // Fetch the body width and height.\n        var bw = this.bodyWidth;\n        var bh = this.bodyHeight;\n        // Adjust the body size for row and column stretch.\n        if (this._stretchLastRow && ph > bh) {\n            bh = ph;\n        }\n        if (this._stretchLastColumn && pw > bw) {\n            bw = pw;\n        }\n        // Fetch the gc object.\n        var gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Draw the column header shadow if needed.\n        if (sy > 0) {\n            // Set up the gradient coordinates.\n            var x0 = 0;\n            var y0 = hh;\n            var x1 = 0;\n            var y1 = y0 + shadow.size;\n            // Create the gradient object.\n            var grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            var x = 0;\n            var y = hh;\n            var w = hw + Math.min(pw, bw - sx);\n            var h = shadow.size;\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the row header shadow if needed.\n        if (sx > 0) {\n            // Set up the gradient coordinates.\n            var x0 = hw;\n            var y0 = 0;\n            var x1 = x0 + shadow.size;\n            var y1 = 0;\n            // Create the gradient object.\n            var grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            var x = hw;\n            var y = 0;\n            var w = shadow.size;\n            var h = hh + Math.min(ph, bh - sy);\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the column footer shadow if needed.\n        if (sy < syMax) {\n            // Set up the gradient coordinates.\n            var x0 = 0;\n            var y0 = vh;\n            var x1 = 0;\n            var y1 = vh - shadow.size;\n            // Create the gradient object.\n            var grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            var x = 0;\n            var y = vh - shadow.size;\n            var w = hw + Math.min(pw, bw - sx);\n            var h = shadow.size;\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the row footer shadow if needed.\n        if (sx < sxMax) {\n            // Set up the gradient coordinates.\n            var x0 = vw;\n            var y0 = 0;\n            var x1 = vw - shadow.size;\n            var y1 = 0;\n            // Create the gradient object.\n            var grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            var x = vw - shadow.size;\n            var y = 0;\n            var w = shadow.size;\n            var h = hh + Math.min(ph, bh - sy);\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Restore the gc state.\n        gc.restore();\n    };\n    return DataGrid;\n}(Widget));\n/**\n * The namespace for the `DataGrid` class statics.\n */\n(function (DataGrid) {\n    /**\n     * A generic format function for the copy handler.\n     *\n     * @param args - The format args for the function.\n     *\n     * @returns The string representation of the value.\n     *\n     * #### Notes\n     * This function uses `String()` to coerce a value to a string.\n     */\n    function copyFormatGeneric(args) {\n        if (args.value === null || args.value === undefined) {\n            return '';\n        }\n        return String(args.value);\n    }\n    DataGrid.copyFormatGeneric = copyFormatGeneric;\n    /**\n     * The default theme for a data grid.\n     */\n    DataGrid.defaultStyle = {\n        voidColor: '#F3F3F3',\n        backgroundColor: '#FFFFFF',\n        gridLineColor: 'rgba(20, 20, 20, 0.15)',\n        headerBackgroundColor: '#F3F3F3',\n        headerGridLineColor: 'rgba(20, 20, 20, 0.25)',\n        selectionFillColor: 'rgba(49, 119, 229, 0.2)',\n        selectionBorderColor: 'rgba(0, 107, 247, 1.0)',\n        cursorBorderColor: 'rgba(0, 107, 247, 1.0)',\n        headerSelectionFillColor: 'rgba(20, 20, 20, 0.1)',\n        headerSelectionBorderColor: 'rgba(0, 107, 247, 1.0)',\n        scrollShadow: {\n            size: 10,\n            color1: 'rgba(0, 0, 0, 0.20)',\n            color2: 'rgba(0, 0, 0, 0.05)',\n            color3: 'rgba(0, 0, 0, 0.00)'\n        }\n    };\n    /**\n     * The default sizes for a data grid.\n     */\n    DataGrid.defaultSizes = {\n        rowHeight: 20,\n        columnWidth: 64,\n        rowHeaderWidth: 64,\n        columnHeaderHeight: 20\n    };\n    /**\n     * The default minimum sizes for a data grid.\n     */\n    DataGrid.minimumSizes = {\n        rowHeight: 20,\n        columnWidth: 10,\n        rowHeaderWidth: 10,\n        columnHeaderHeight: 20\n    };\n    /**\n     * The default copy config for a data grid.\n     */\n    DataGrid.defaultCopyConfig = {\n        separator: '\\t',\n        format: copyFormatGeneric,\n        headers: 'none',\n        warningThreshold: 1e6\n    };\n})(DataGrid || (DataGrid = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private$6;\n(function (Private) {\n    /**\n     * A singleton `scroll-request` conflatable message.\n     */\n    Private.ScrollRequest = new ConflatableMessage('scroll-request');\n    /**\n     * A singleton `overlay-paint-request` conflatable message.\n     */\n    Private.OverlayPaintRequest = new ConflatableMessage('overlay-paint-request');\n    /**\n     * Create a new zero-sized canvas element.\n     */\n    function createCanvas() {\n        var canvas = document.createElement('canvas');\n        canvas.width = 0;\n        canvas.height = 0;\n        return canvas;\n    }\n    Private.createCanvas = createCanvas;\n    /**\n     * A conflatable message which merges dirty paint regions.\n     */\n    var PaintRequest = /** @class */ (function (_super) {\n        __extends(PaintRequest, _super);\n        /**\n         * Construct a new paint request messages.\n         *\n         * @param region - The cell region for the paint.\n         *\n         * @param r1 - The top-left row of the dirty region.\n         *\n         * @param c1 - The top-left column of the dirty region.\n         *\n         * @param r2 - The bottom-right row of the dirty region.\n         *\n         * @param c2 - The bottom-right column of the dirty region.\n         */\n        function PaintRequest(region, r1, c1, r2, c2) {\n            var _this = _super.call(this, 'paint-request') || this;\n            _this._region = region;\n            _this._r1 = r1;\n            _this._c1 = c1;\n            _this._r2 = r2;\n            _this._c2 = c2;\n            return _this;\n        }\n        Object.defineProperty(PaintRequest.prototype, \"region\", {\n            /**\n             * The cell region for the paint.\n             */\n            get: function () {\n                return this._region;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PaintRequest.prototype, \"r1\", {\n            /**\n             * The top-left row of the dirty region.\n             */\n            get: function () {\n                return this._r1;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PaintRequest.prototype, \"c1\", {\n            /**\n             * The top-left column of the dirty region.\n             */\n            get: function () {\n                return this._c1;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PaintRequest.prototype, \"r2\", {\n            /**\n             * The bottom-right row of the dirty region.\n             */\n            get: function () {\n                return this._r2;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PaintRequest.prototype, \"c2\", {\n            /**\n             * The bottom-right column of the dirty region.\n             */\n            get: function () {\n                return this._c2;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Conflate this message with another paint request.\n         */\n        PaintRequest.prototype.conflate = function (other) {\n            // Bail early if the request is already painting everything.\n            if (this._region === 'all') {\n                return true;\n            }\n            // Any region can conflate with the `'all'` region.\n            if (other._region === 'all') {\n                this._region = 'all';\n                return true;\n            }\n            // Otherwise, do not conflate with a different region.\n            if (this._region !== other._region) {\n                return false;\n            }\n            // Conflate the region to the total boundary.\n            this._r1 = Math.min(this._r1, other._r1);\n            this._c1 = Math.min(this._c1, other._c1);\n            this._r2 = Math.max(this._r2, other._r2);\n            this._c2 = Math.max(this._c2, other._c2);\n            return true;\n        };\n        return PaintRequest;\n    }(ConflatableMessage));\n    Private.PaintRequest = PaintRequest;\n    /**\n     * A conflatable message for resizing rows.\n     */\n    var RowResizeRequest = /** @class */ (function (_super) {\n        __extends(RowResizeRequest, _super);\n        /**\n         * Construct a new row resize request.\n         *\n         * @param region - The row region which holds the section.\n         *\n         * @param index - The index of row in the region.\n         *\n         * @param size - The target size of the section.\n         */\n        function RowResizeRequest(region, index, size) {\n            var _this = _super.call(this, 'row-resize-request') || this;\n            _this._region = region;\n            _this._index = index;\n            _this._size = size;\n            return _this;\n        }\n        Object.defineProperty(RowResizeRequest.prototype, \"region\", {\n            /**\n             * The row region which holds the section.\n             */\n            get: function () {\n                return this._region;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RowResizeRequest.prototype, \"index\", {\n            /**\n             * The index of the row in the region.\n             */\n            get: function () {\n                return this._index;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RowResizeRequest.prototype, \"size\", {\n            /**\n             * The target size of the section.\n             */\n            get: function () {\n                return this._size;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Conflate this message with another row resize request.\n         */\n        RowResizeRequest.prototype.conflate = function (other) {\n            if (this._region !== other._region || this._index !== other._index) {\n                return false;\n            }\n            this._size = other._size;\n            return true;\n        };\n        return RowResizeRequest;\n    }(ConflatableMessage));\n    Private.RowResizeRequest = RowResizeRequest;\n    /**\n     * A conflatable message for resizing columns.\n     */\n    var ColumnResizeRequest = /** @class */ (function (_super) {\n        __extends(ColumnResizeRequest, _super);\n        /**\n         * Construct a new column resize request.\n         *\n         * @param region - The column region which holds the section.\n         *\n         * @param index - The index of column in the region.\n         *\n         * @param size - The target size of the section.\n         */\n        function ColumnResizeRequest(region, index, size) {\n            var _this = _super.call(this, 'column-resize-request') || this;\n            _this._region = region;\n            _this._index = index;\n            _this._size = size;\n            return _this;\n        }\n        Object.defineProperty(ColumnResizeRequest.prototype, \"region\", {\n            /**\n             * The column region which holds the section.\n             */\n            get: function () {\n                return this._region;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ColumnResizeRequest.prototype, \"index\", {\n            /**\n             * The index of the column in the region.\n             */\n            get: function () {\n                return this._index;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ColumnResizeRequest.prototype, \"size\", {\n            /**\n             * The target size of the section.\n             */\n            get: function () {\n                return this._size;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Conflate this message with another column resize request.\n         */\n        ColumnResizeRequest.prototype.conflate = function (other) {\n            if (this._region !== other._region || this._index !== other._index) {\n                return false;\n            }\n            this._size = other._size;\n            return true;\n        };\n        return ColumnResizeRequest;\n    }(ConflatableMessage));\n    Private.ColumnResizeRequest = ColumnResizeRequest;\n})(Private$6 || (Private$6 = {}));\n\n/**\n * A data model implementation for in-memory JSON data.\n */\nvar JSONModel = /** @class */ (function (_super) {\n    __extends(JSONModel, _super);\n    /**\n     * Create a data model with static JSON data.\n     *\n     * @param options - The options for initializing the data model.\n     */\n    function JSONModel(options) {\n        var _this = _super.call(this) || this;\n        var split = Private$7.splitFields(options.schema);\n        _this._data = options.data;\n        _this._bodyFields = split.bodyFields;\n        _this._headerFields = split.headerFields;\n        _this._missingValues = Private$7.createMissingMap(options.schema);\n        return _this;\n    }\n    /**\n     * Get the row count for a region in the data model.\n     *\n     * @param region - The row region of interest.\n     *\n     * @returns - The row count for the region.\n     */\n    JSONModel.prototype.rowCount = function (region) {\n        if (region === 'body') {\n            return this._data.length;\n        }\n        return 1; // TODO multiple column-header rows?\n    };\n    /**\n     * Get the column count for a region in the data model.\n     *\n     * @param region - The column region of interest.\n     *\n     * @returns - The column count for the region.\n     */\n    JSONModel.prototype.columnCount = function (region) {\n        if (region === 'body') {\n            return this._bodyFields.length;\n        }\n        return this._headerFields.length;\n    };\n    /**\n     * Get the data value for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns - The data value for the specified cell.\n     *\n     * #### Notes\n     * A `missingValue` as defined by the schema is converted to `null`.\n     */\n    JSONModel.prototype.data = function (region, row, column) {\n        // Set up the field and value variables.\n        var field;\n        var value;\n        // Look up the field and value for the region.\n        switch (region) {\n            case 'body':\n                field = this._bodyFields[column];\n                value = this._data[row][field.name];\n                break;\n            case 'column-header':\n                field = this._bodyFields[column];\n                value = field.title || field.name;\n                break;\n            case 'row-header':\n                field = this._headerFields[column];\n                value = this._data[row][field.name];\n                break;\n            case 'corner-header':\n                field = this._headerFields[column];\n                value = field.title || field.name;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Test whether the value is a missing value.\n        var missing = (this._missingValues !== null &&\n            typeof value === 'string' &&\n            this._missingValues[value] === true);\n        // Return the final value.\n        return missing ? null : value;\n    };\n    /**\n     * Get the metadata for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns The metadata for the cell.\n     */\n    JSONModel.prototype.metadata = function (region, row, column) {\n        if (region === 'body' || region === 'column-header') {\n            return this._bodyFields[column];\n        }\n        return this._headerFields[column];\n    };\n    return JSONModel;\n}(DataModel));\n/**\n * The namespace for the module implementation details.\n */\nvar Private$7;\n(function (Private) {\n    /**\n     * Split the schema fields into header and body fields.\n     */\n    function splitFields(schema) {\n        // Normalize the primary keys.\n        var primaryKeys;\n        if (schema.primaryKey === undefined) {\n            primaryKeys = [];\n        }\n        else if (typeof schema.primaryKey === 'string') {\n            primaryKeys = [schema.primaryKey];\n        }\n        else {\n            primaryKeys = schema.primaryKey;\n        }\n        // Separate the fields for the body and header.\n        var bodyFields = [];\n        var headerFields = [];\n        for (var _i = 0, _a = schema.fields; _i < _a.length; _i++) {\n            var field = _a[_i];\n            if (primaryKeys.indexOf(field.name) === -1) {\n                bodyFields.push(field);\n            }\n            else {\n                headerFields.push(field);\n            }\n        }\n        // Return the separated fields.\n        return { bodyFields: bodyFields, headerFields: headerFields };\n    }\n    Private.splitFields = splitFields;\n    /**\n     * Create a missing values map for a schema.\n     *\n     * This returns `null` if there are no missing values.\n     */\n    function createMissingMap(schema) {\n        // Bail early if there are no missing values.\n        if (!schema.missingValues || schema.missingValues.length === 0) {\n            return null;\n        }\n        // Collect the missing values into a map.\n        var result = Object.create(null);\n        for (var _i = 0, _a = schema.missingValues; _i < _a.length; _i++) {\n            var value = _a[_i];\n            result[value] = true;\n        }\n        // Return the populated map.\n        return result;\n    }\n    Private.createMissingMap = createMissingMap;\n})(Private$7 || (Private$7 = {}));\n\nexport { BasicKeyHandler, BasicMouseHandler, BasicSelectionModel, BooleanCellEditor, CellEditor, CellRenderer, DataGrid, DataModel, DateCellEditor, DynamicOptionCellEditor, GraphicsContext, InputCellEditor, IntegerCellEditor, IntegerInputValidator, JSONModel, MutableDataModel, NumberCellEditor, NumberInputValidator, OptionCellEditor, PassInputValidator, Private, RendererMap, SelectionModel, TextCellEditor, TextInputValidator, TextRenderer };\n//# sourceMappingURL=index.es6.js.map\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * Get the global application keyboard layout instance.\n *\n * @returns The keyboard layout for use by the application.\n *\n * #### Notes\n * The default keyboard layout is US-English.\n */\nfunction getKeyboardLayout() {\n    return Private.keyboardLayout;\n}\n/**\n * Set the global application keyboard layout instance.\n *\n * @param - The keyboard layout for use by the application.\n *\n * #### Notes\n * The keyboard layout should typically be set on application startup\n * to a layout which is appropriate for the user's system.\n */\nfunction setKeyboardLayout(layout) {\n    Private.keyboardLayout = layout;\n}\n/**\n * A concrete implementation of [[IKeyboardLayout]] based on keycodes.\n *\n * The `keyCode` property of a `'keydown'` event is a browser and OS\n * specific representation of the physical key (not character) which\n * was pressed on a keyboard. While not the most convenient API, it\n * is currently the only one which works reliably on all browsers.\n *\n * This class accepts a user-defined mapping of keycode to key, which\n * allows for reliable shortcuts tailored to the user's system.\n */\nvar KeycodeLayout = /** @class */ (function () {\n    /**\n     * Construct a new keycode layout.\n     *\n     * @param name - The human readable name for the layout.\n     *\n     * @param codes - A mapping of keycode to key value.\n     */\n    function KeycodeLayout(name, codes) {\n        this.name = name;\n        this._codes = codes;\n        this._keys = KeycodeLayout.extractKeys(codes);\n    }\n    /**\n     * Get an array of the key values supported by the layout.\n     *\n     * @returns A new array of the supported key values.\n     */\n    KeycodeLayout.prototype.keys = function () {\n        return Object.keys(this._keys);\n    };\n    /**\n     * Test whether the given key is a valid value for the layout.\n     *\n     * @param key - The user provided key to test for validity.\n     *\n     * @returns `true` if the key is valid, `false` otherwise.\n     */\n    KeycodeLayout.prototype.isValidKey = function (key) {\n        return key in this._keys;\n    };\n    /**\n     * Get the key for a `'keydown'` event.\n     *\n     * @param event - The event object for a `'keydown'` event.\n     *\n     * @returns The associated key value, or an empty string if\n     *   the event does not represent a valid primary key.\n     */\n    KeycodeLayout.prototype.keyForKeydownEvent = function (event) {\n        return this._codes[event.keyCode] || '';\n    };\n    return KeycodeLayout;\n}());\n/**\n * The namespace for the `KeycodeLayout` class statics.\n */\n(function (KeycodeLayout) {\n    /**\n     * Extract the set of keys from a code map.\n     *\n     * @param code - The code map of interest.\n     *\n     * @returns A set of the keys in the code map.\n     */\n    function extractKeys(codes) {\n        var keys = Object.create(null);\n        for (var c in codes) {\n            keys[codes[c]] = true;\n        }\n        return keys;\n    }\n    KeycodeLayout.extractKeys = extractKeys;\n})(KeycodeLayout || (KeycodeLayout = {}));\n/**\n * A keycode-based keyboard layout for US English keyboards.\n *\n * This layout is valid for the following OS/Browser combinations.\n *\n * - Windows\n *   - Chrome\n *   - Firefox\n *   - IE\n *\n * - OSX\n *   - Chrome\n *   - Firefox\n *   - Safari\n *\n * - Linux\n *   - Chrome\n *   - Firefox\n *\n * Other combinations may also work, but are untested.\n */\nvar EN_US = new KeycodeLayout('en-us', {\n    8: 'Backspace',\n    9: 'Tab',\n    13: 'Enter',\n    19: 'Pause',\n    27: 'Escape',\n    32: 'Space',\n    33: 'PageUp',\n    34: 'PageDown',\n    35: 'End',\n    36: 'Home',\n    37: 'ArrowLeft',\n    38: 'ArrowUp',\n    39: 'ArrowRight',\n    40: 'ArrowDown',\n    45: 'Insert',\n    46: 'Delete',\n    48: '0',\n    49: '1',\n    50: '2',\n    51: '3',\n    52: '4',\n    53: '5',\n    54: '6',\n    55: '7',\n    56: '8',\n    57: '9',\n    59: ';',\n    61: '=',\n    65: 'A',\n    66: 'B',\n    67: 'C',\n    68: 'D',\n    69: 'E',\n    70: 'F',\n    71: 'G',\n    72: 'H',\n    73: 'I',\n    74: 'J',\n    75: 'K',\n    76: 'L',\n    77: 'M',\n    78: 'N',\n    79: 'O',\n    80: 'P',\n    81: 'Q',\n    82: 'R',\n    83: 'S',\n    84: 'T',\n    85: 'U',\n    86: 'V',\n    87: 'W',\n    88: 'X',\n    89: 'Y',\n    90: 'Z',\n    93: 'ContextMenu',\n    96: '0',\n    97: '1',\n    98: '2',\n    99: '3',\n    100: '4',\n    101: '5',\n    102: '6',\n    103: '7',\n    104: '8',\n    105: '9',\n    106: '*',\n    107: '+',\n    109: '-',\n    110: '.',\n    111: '/',\n    112: 'F1',\n    113: 'F2',\n    114: 'F3',\n    115: 'F4',\n    116: 'F5',\n    117: 'F6',\n    118: 'F7',\n    119: 'F8',\n    120: 'F9',\n    121: 'F10',\n    122: 'F11',\n    123: 'F12',\n    173: '-',\n    186: ';',\n    187: '=',\n    188: ',',\n    189: '-',\n    190: '.',\n    191: '/',\n    192: '`',\n    219: '[',\n    220: '\\\\',\n    221: ']',\n    222: '\\''\n});\n/**\n * The namespace for the module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The global keyboard layout instance.\n     */\n    Private.keyboardLayout = EN_US;\n})(Private || (Private = {}));\n\nexport { EN_US, KeycodeLayout, getKeyboardLayout, setKeyboardLayout };\n//# sourceMappingURL=index.es6.js.map\n"],"sourceRoot":""}