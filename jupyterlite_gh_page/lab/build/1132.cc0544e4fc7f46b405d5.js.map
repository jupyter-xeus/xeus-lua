{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc-extension/lib/index.js"],"names":["CommandIDs","runCells","id","autoStart","provides","ITableOfContentsRegistry","requires","IDocumentManager","IEditorTracker","ILabShell","ILayoutRestorer","IMarkdownViewerTracker","INotebookTracker","IRenderMimeRegistry","ITranslator","optional","ISettingRegistry","activate","async","app","docmanager","editorTracker","labShell","restorer","markdownViewerTracker","notebookTracker","rendermime","translator","settingRegistry","trans","load","toc","TableOfContents","registry","settings","title","icon","tocIcon","caption","__","node","setAttribute","add","rank","commands","addCommand","execute","args","runNestedCodeCells","headings","activeEntry","label","contextMenu","addItem","selector","command","error","console","notebookGenerator","createNotebookGenerator","sanitizer","markdownGenerator","createMarkdownGenerator","renderedMarkdownGenerator","createRenderedMarkdownGenerator","latexGenerator","createLatexGenerator","pythonGenerator","createPythonGenerator","currentChanged","connect","widget","shell","currentWidget","generator","find","current","isDisposed"],"mappings":"0KAoBIA,E,8GACJ,SAAWA,GACPA,EAAWC,SAAW,gBAD1B,CAEGD,IAAeA,EAAa,KAqG/B,MAoBA,EApBkB,CACdE,GAAI,yBACJC,WAAW,EACXC,SAAU,EAAAC,yBACVC,SAAU,CACN,EAAAC,iBACA,EAAAC,eACA,EAAAC,UACA,EAAAC,gBACA,EAAAC,uBACA,EAAAC,iBACA,EAAAC,oBACA,EAAAC,aAEJC,SAAU,CAAC,EAAAC,kBACXC,SAnGJC,eAA2BC,EAAKC,EAAYC,EAAeC,EAAUC,EAAUC,EAAuBC,EAAiBC,EAAYC,EAAYC,GAC3I,MAAMC,EAAQF,EAAWG,KAAK,cAExBC,EAAM,IAAI,EAAAC,gBAAgB,CAC5BZ,aACAM,aACAC,eAGEM,EAAW,IAAI,0BAqBrB,IAAIC,EACJ,GApBAH,EAAII,MAAMC,KAAO,EAAAC,QACjBN,EAAII,MAAMG,QAAUT,EAAMU,GAAG,qBAC7BR,EAAI7B,GAAK,oBACT6B,EAAIS,KAAKC,aAAa,OAAQ,UAC9BV,EAAIS,KAAKC,aAAa,aAAcZ,EAAMU,GAAG,8BAC7CjB,EAASoB,IAAIX,EAAK,OAAQ,CAAEY,KAAM,MAClCxB,EAAIyB,SAASC,WAAW7C,EAAWC,SAAU,CACzC6C,QAASC,IACE,IAAAC,oBAAmBjB,EAAIkB,SAAUlB,EAAImB,aAEhDC,MAAOtB,EAAMU,GAAG,iBAEpBpB,EAAIiC,YAAYC,QAAQ,CACpBC,SAAU,cACVC,QAASvD,EAAWC,WAGxBsB,EAASmB,IAAIX,EAAK,0BAGdH,EACA,IACIM,QAAiBN,EAAgBE,KAAK,oCAE1C,MAAO0B,GACHC,QAAQD,MAAM,mEAAmEA,KAIzF,MAAME,GAAoB,IAAAC,yBAAwBlC,EAAiBM,EAAKL,EAAWkC,UAAWjC,EAAYO,GAC1GD,EAASS,IAAIgB,GAEb,MAAMG,GAAoB,IAAAC,yBAAwBzC,EAAeU,EAAKL,EAAWkC,UAAWjC,EAAYO,GACxGD,EAASS,IAAImB,GAEb,MAAME,GAA4B,IAAAC,iCAAgCxC,EAAuBO,EAAKL,EAAWkC,UAAWjC,EAAYO,GAChID,EAASS,IAAIqB,GAEb,MAAME,GAAiB,IAAAC,sBAAqB7C,GAC5CY,EAASS,IAAIuB,GAEb,MAAME,GAAkB,IAAAC,uBAAsB/C,GAI9C,OAHAY,EAASS,IAAIyB,GAEb7C,EAAS+C,eAAeC,SAOxB,WACI,IAAIC,EAASpD,EAAIqD,MAAMC,cACvB,IAAKF,EACD,OAEJ,IAAIG,EAAYzC,EAAS0C,KAAKJ,GACzBG,EAQL3C,EAAI6C,QAAU,CAAEL,SAAQG,aALhB3C,EAAI6C,SAAW7C,EAAI6C,QAAQL,OAAOM,aAClC9C,EAAI6C,QAAU,SAhBnB3C","file":"1132.cc0544e4fc7f46b405d5.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module toc-extension\n */\nimport { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\nimport { IMarkdownViewerTracker } from '@jupyterlab/markdownviewer';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { createLatexGenerator, createMarkdownGenerator, createNotebookGenerator, createPythonGenerator, createRenderedMarkdownGenerator, ITableOfContentsRegistry, TableOfContentsRegistry as Registry, TableOfContents } from '@jupyterlab/toc';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { tocIcon } from '@jupyterlab/ui-components';\nimport { runNestedCodeCells } from '@jupyterlab/toc';\n/**\n * The command IDs used by TOC item.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.runCells = 'toc:run-cells';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Activates the ToC extension.\n *\n * @private\n * @param app - Jupyter application\n * @param docmanager - document manager\n * @param editorTracker - editor tracker\n * @param labShell - Jupyter lab shell\n * @param restorer - application layout restorer\n * @param markdownViewerTracker - Markdown viewer tracker\n * @param notebookTracker - notebook tracker\n * @param rendermime - rendered MIME registry\n * @param translator - translator\n * @param settingRegistry - setting registry\n * @returns table of contents registry\n */\nasync function activateTOC(app, docmanager, editorTracker, labShell, restorer, markdownViewerTracker, notebookTracker, rendermime, translator, settingRegistry) {\n    const trans = translator.load('jupyterlab');\n    // Create the ToC widget:\n    const toc = new TableOfContents({\n        docmanager,\n        rendermime,\n        translator\n    });\n    // Create the ToC registry:\n    const registry = new Registry();\n    // Add the ToC to the left area:\n    toc.title.icon = tocIcon;\n    toc.title.caption = trans.__('Table of Contents');\n    toc.id = 'table-of-contents';\n    toc.node.setAttribute('role', 'region');\n    toc.node.setAttribute('aria-label', trans.__('Table of Contents section'));\n    labShell.add(toc, 'left', { rank: 400 });\n    app.commands.addCommand(CommandIDs.runCells, {\n        execute: args => {\n            return runNestedCodeCells(toc.headings, toc.activeEntry);\n        },\n        label: trans.__('Run Cell(s)')\n    });\n    app.contextMenu.addItem({\n        selector: '.jp-tocItem',\n        command: CommandIDs.runCells\n    });\n    // Add the ToC widget to the application restorer:\n    restorer.add(toc, '@jupyterlab/toc:plugin');\n    // Attempt to load plugin settings:\n    let settings;\n    if (settingRegistry) {\n        try {\n            settings = await settingRegistry.load('@jupyterlab/toc-extension:plugin');\n        }\n        catch (error) {\n            console.error(`Failed to load settings for the Table of Contents extension.\\n\\n${error}`);\n        }\n    }\n    // Create a notebook generator:\n    const notebookGenerator = createNotebookGenerator(notebookTracker, toc, rendermime.sanitizer, translator, settings);\n    registry.add(notebookGenerator);\n    // Create a Markdown generator:\n    const markdownGenerator = createMarkdownGenerator(editorTracker, toc, rendermime.sanitizer, translator, settings);\n    registry.add(markdownGenerator);\n    // Create a rendered Markdown generator:\n    const renderedMarkdownGenerator = createRenderedMarkdownGenerator(markdownViewerTracker, toc, rendermime.sanitizer, translator, settings);\n    registry.add(renderedMarkdownGenerator);\n    // Create a LaTeX generator:\n    const latexGenerator = createLatexGenerator(editorTracker);\n    registry.add(latexGenerator);\n    // Create a Python generator:\n    const pythonGenerator = createPythonGenerator(editorTracker);\n    registry.add(pythonGenerator);\n    // Update the ToC when the active widget changes:\n    labShell.currentChanged.connect(onConnect);\n    return registry;\n    /**\n     * Callback invoked when the active widget changes.\n     *\n     * @private\n     */\n    function onConnect() {\n        let widget = app.shell.currentWidget;\n        if (!widget) {\n            return;\n        }\n        let generator = registry.find(widget);\n        if (!generator) {\n            // If the previously used widget is still available, stick with it.\n            // Otherwise, set the current ToC widget to null.\n            if (toc.current && toc.current.widget.isDisposed) {\n                toc.current = null;\n            }\n            return;\n        }\n        toc.current = { widget, generator };\n    }\n}\n/**\n * Initialization data for the ToC extension.\n *\n * @private\n */\nconst extension = {\n    id: '@jupyterlab/toc:plugin',\n    autoStart: true,\n    provides: ITableOfContentsRegistry,\n    requires: [\n        IDocumentManager,\n        IEditorTracker,\n        ILabShell,\n        ILayoutRestorer,\n        IMarkdownViewerTracker,\n        INotebookTracker,\n        IRenderMimeRegistry,\n        ITranslator\n    ],\n    optional: [ISettingRegistry],\n    activate: activateTOC\n};\n/**\n * Exports.\n */\nexport default extension;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}