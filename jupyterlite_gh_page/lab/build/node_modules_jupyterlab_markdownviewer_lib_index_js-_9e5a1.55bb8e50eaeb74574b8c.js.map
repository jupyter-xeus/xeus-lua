{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/markdownviewer/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/markdownviewer/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/markdownviewer/lib/widget.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACyB;AACA;AACzB,iC;;;;;;;;;;;;;;;;;ACRA;AACA;AAC0C;AAC1C;AACA;AACA;AACO,mCAAmC,oDAAK;AAC/C,kC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACwD;AACA;AACmB;AACxB;AACM;AACL;AACI;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,6BAA6B,mDAAM;AAC1C;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,0BAA0B,8DAAe;AACzC;AACA;AACA;AACA,gDAAgD,mEAAc;AAC9D;AACA;AACA;AACA;AACA,0CAA0C,0DAAa;AACvD;AACA;AACA;AACA;AACA,gCAAgC,kEAAe;AAC/C;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,UAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6DAAS;AACvC;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,iBAAiB,sEAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AACzC;AACA;AACA;AACO,+BAA+B,mEAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,oCAAoC,qEAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA,6CAA6C,mBAAmB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,aAAa,iBAAiB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA,CAAC,0BAA0B;AAC3B,kC","file":"node_modules_jupyterlab_markdownviewer_lib_index_js-_9e5a1.55bb8e50eaeb74574b8c.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module markdownviewer\n */\nexport * from './tokens';\nexport * from './widget';\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The markdownviewer tracker token.\n */\nexport const IMarkdownViewerTracker = new Token('@jupyterlab/markdownviewer:IMarkdownViewerTracker');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { ActivityMonitor } from '@jupyterlab/coreutils';\nimport { ABCWidgetFactory, DocumentWidget } from '@jupyterlab/docregistry';\nimport { MimeModel } from '@jupyterlab/rendermime';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { StackedLayout, Widget } from '@lumino/widgets';\n/**\n * The class name added to a markdown viewer.\n */\nconst MARKDOWNVIEWER_CLASS = 'jp-MarkdownViewer';\n/**\n * The markdown MIME type.\n */\nconst MIMETYPE = 'text/markdown';\n/**\n * A widget for markdown documents.\n */\nexport class MarkdownViewer extends Widget {\n    /**\n     * Construct a new markdown viewer widget.\n     */\n    constructor(options) {\n        super();\n        this._config = Object.assign({}, MarkdownViewer.defaultConfig);\n        this._fragment = '';\n        this._ready = new PromiseDelegate();\n        this._isRendering = false;\n        this._renderRequested = false;\n        this.context = options.context;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.renderer = options.renderer;\n        this.node.tabIndex = 0;\n        this.addClass(MARKDOWNVIEWER_CLASS);\n        const layout = (this.layout = new StackedLayout());\n        layout.addWidget(this.renderer);\n        void this.context.ready.then(async () => {\n            await this._render();\n            // Throttle the rendering rate of the widget.\n            this._monitor = new ActivityMonitor({\n                signal: this.context.model.contentChanged,\n                timeout: this._config.renderTimeout\n            });\n            this._monitor.activityStopped.connect(this.update, this);\n            this._ready.resolve(undefined);\n        });\n    }\n    /**\n     * A promise that resolves when the markdown viewer is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Set URI fragment identifier.\n     */\n    setFragment(fragment) {\n        this._fragment = fragment;\n        this.update();\n    }\n    /**\n     * Set a config option for the markdown viewer.\n     */\n    setOption(option, value) {\n        if (this._config[option] === value) {\n            return;\n        }\n        this._config[option] = value;\n        const { style } = this.renderer.node;\n        switch (option) {\n            case 'fontFamily':\n                style.setProperty('font-family', value);\n                break;\n            case 'fontSize':\n                style.setProperty('font-size', value ? value + 'px' : null);\n                break;\n            case 'hideFrontMatter':\n                this.update();\n                break;\n            case 'lineHeight':\n                style.setProperty('line-height', value ? value.toString() : null);\n                break;\n            case 'lineWidth': {\n                const padding = value ? `calc(50% - ${value / 2}ch)` : null;\n                style.setProperty('padding-left', padding);\n                style.setProperty('padding-right', padding);\n                break;\n            }\n            case 'renderTimeout':\n                if (this._monitor) {\n                    this._monitor.timeout = value;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        if (this._monitor) {\n            this._monitor.dispose();\n        }\n        this._monitor = null;\n        super.dispose();\n    }\n    /**\n     * Handle an `update-request` message to the widget.\n     */\n    onUpdateRequest(msg) {\n        if (this.context.isReady && !this.isDisposed) {\n            void this._render();\n            this._fragment = '';\n        }\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.node.focus();\n    }\n    /**\n     * Render the mime content.\n     */\n    async _render() {\n        if (this.isDisposed) {\n            return;\n        }\n        // Since rendering is async, we note render requests that happen while we\n        // actually are rendering for a future rendering.\n        if (this._isRendering) {\n            this._renderRequested = true;\n            return;\n        }\n        // Set up for this rendering pass.\n        this._renderRequested = false;\n        const { context } = this;\n        const { model } = context;\n        const source = model.toString();\n        const data = {};\n        // If `hideFrontMatter`is true remove front matter.\n        data[MIMETYPE] = this._config.hideFrontMatter\n            ? Private.removeFrontMatter(source)\n            : source;\n        const mimeModel = new MimeModel({\n            data,\n            metadata: { fragment: this._fragment }\n        });\n        try {\n            // Do the rendering asynchronously.\n            this._isRendering = true;\n            await this.renderer.renderModel(mimeModel);\n            this._isRendering = false;\n            // If there is an outstanding request to render, go ahead and render\n            if (this._renderRequested) {\n                return this._render();\n            }\n        }\n        catch (reason) {\n            // Dispose the document if rendering fails.\n            requestAnimationFrame(() => {\n                this.dispose();\n            });\n            void showErrorMessage(this._trans.__('Renderer Failure: %1', context.path), reason);\n        }\n    }\n}\n/**\n * The namespace for MarkdownViewer class statics.\n */\n(function (MarkdownViewer) {\n    /**\n     * The default configuration options for an editor.\n     */\n    MarkdownViewer.defaultConfig = {\n        fontFamily: null,\n        fontSize: null,\n        lineHeight: null,\n        lineWidth: null,\n        hideFrontMatter: true,\n        renderTimeout: 1000\n    };\n})(MarkdownViewer || (MarkdownViewer = {}));\n/**\n * A document widget for markdown content.\n */\nexport class MarkdownDocument extends DocumentWidget {\n    setFragment(fragment) {\n        this.content.setFragment(fragment);\n    }\n}\n/**\n * A widget factory for markdown viewers.\n */\nexport class MarkdownViewerFactory extends ABCWidgetFactory {\n    /**\n     * Construct a new markdown viewer widget factory.\n     */\n    constructor(options) {\n        super(Private.createRegistryOptions(options));\n        this._fileType = options.primaryFileType;\n        this._rendermime = options.rendermime;\n    }\n    /**\n     * Create a new widget given a context.\n     */\n    createNewWidget(context) {\n        var _a, _b, _c, _d, _e;\n        const rendermime = this._rendermime.clone({\n            resolver: context.urlResolver\n        });\n        const renderer = rendermime.createRenderer(MIMETYPE);\n        const content = new MarkdownViewer({ context, renderer });\n        content.title.icon = (_a = this._fileType) === null || _a === void 0 ? void 0 : _a.icon;\n        content.title.iconClass = (_c = (_b = this._fileType) === null || _b === void 0 ? void 0 : _b.iconClass) !== null && _c !== void 0 ? _c : '';\n        content.title.iconLabel = (_e = (_d = this._fileType) === null || _d === void 0 ? void 0 : _d.iconLabel) !== null && _e !== void 0 ? _e : '';\n        const widget = new MarkdownDocument({ content, context });\n        return widget;\n    }\n}\n/**\n * A namespace for markdown viewer widget private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the document registry options.\n     */\n    function createRegistryOptions(options) {\n        return Object.assign(Object.assign({}, options), { readOnly: true });\n    }\n    Private.createRegistryOptions = createRegistryOptions;\n    /**\n     * Remove YALM front matter from source.\n     */\n    function removeFrontMatter(source) {\n        const re = /^---\\n[^]*?\\n(---|...)\\n/;\n        const match = source.match(re);\n        if (!match) {\n            return source;\n        }\n        const { length } = match[0];\n        return source.slice(length);\n    }\n    Private.removeFrontMatter = removeFrontMatter;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map"],"sourceRoot":""}