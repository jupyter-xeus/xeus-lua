{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/running/lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAC0G;AACjD;AACU;AACzB;AACc;AACzB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,oCAAoC,oDAAK;AACzC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAkB;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA,2CAA2C,mEAAc;AACzD;AACA;AACA,uDAAuD,gEAAS;AAChE,YAAY,gDAAmB,QAAQ,wBAAwB;AAC/D,QAAQ,gDAAmB,cAAc,yCAAyC;AAClF,QAAQ,gDAAmB,UAAU,gIAAgI;AACrK,kBAAkB,gDAAmB,UAAU,+BAA+B;AAC9E,QAAQ,gDAAmB,CAAC,wEAAsB,GAAG,0HAA0H;AAC/K;AACA;AACA,YAAY,gDAAmB,QAAQ,wBAAwB,uCAAuC,gDAAmB,QAAQ,wIAAwI;AACzQ;AACA;AACA,YAAY,gDAAmB,CAAC,2DAAS,GAAG,uCAAuC,SAAS,gDAAmB,YAAY,sMAAsM;AACjU;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mEAAc;AACzD;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA,WAAW,iBAAiB,GAAG,mBAAmB;AAClD;AACA,aAAa,gEAAU;AACvB;AACA;AACA;AACA,gBAAgB,qEAAmB,EAAE,4BAA4B;AACjE,gBAAgB,mEAAiB,EAAE,0BAA0B;AAC7D;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,gDAAmB,SAAS,2BAA2B;AACnE,QAAQ,gDAAmB,CAAC,2CAAc;AAC1C,YAAY,gDAAmB,SAAS,eAAe,qBAAqB,yBAAyB;AACrG,gBAAgB,gDAAmB;AACnC,gBAAgB,gDAAmB,CAAC,2DAAS,GAAG,uCAAuC;AACvF;AACA,4BAA4B,gDAAmB,YAAY,eAAe,0BAA0B,iBAAiB,8BAA8B,4CAA4C;AAC/L,iBAAiB;AACjB,YAAY,gDAAmB,SAAS,6BAA6B;AACrE,gBAAgB,gDAAmB,QAAQ,uIAAuI;AAClL;AACA;AACA,2CAA2C,mEAAc;AACzD;AACA,YAAY,gDAAmB,CAAC,2CAAc;AAC9C,QAAQ,gDAAmB,SAAS,0BAA0B;AAC9D,YAAY,gDAAmB,CAAC,wEAAsB,GAAG,0CAA0C,kEAAW,sFAAsF;AACpM,+CAA+C,gDAAmB,WAAW,oEAAoE;AACjJ;AACA;AACA;AACA;AACO,8BAA8B,6DAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mEAAc;AACtD;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB,4BAA4B,uDAAuD;AACtH;AACA;AACA,iC","file":"node_modules_jupyterlab_running_lib_index_js-_73bd0.8447419d8eea08916fee.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module running\n */\nimport { Dialog, ReactWidget, showDialog, ToolbarButtonComponent, UseSignal } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { closeIcon, refreshIcon } from '@jupyterlab/ui-components';\nimport { Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport * as React from 'react';\n/**\n * The class name added to a running widget.\n */\nconst RUNNING_CLASS = 'jp-RunningSessions';\n/**\n * The class name added to a running widget header.\n */\nconst HEADER_CLASS = 'jp-RunningSessions-header';\n/**\n * The class name added to the running terminal sessions section.\n */\nconst SECTION_CLASS = 'jp-RunningSessions-section';\n/**\n * The class name added to the running sessions section header.\n */\nconst SECTION_HEADER_CLASS = 'jp-RunningSessions-sectionHeader';\n/**\n * The class name added to a section container.\n */\nconst CONTAINER_CLASS = 'jp-RunningSessions-sectionContainer';\n/**\n * The class name added to the running kernel sessions section list.\n */\nconst LIST_CLASS = 'jp-RunningSessions-sectionList';\n/**\n * The class name added to the running sessions items.\n */\nconst ITEM_CLASS = 'jp-RunningSessions-item';\n/**\n * The class name added to a running session item label.\n */\nconst ITEM_LABEL_CLASS = 'jp-RunningSessions-itemLabel';\n/**\n * The class name added to a running session item detail.\n */\nconst ITEM_DETAIL_CLASS = 'jp-RunningSessions-itemDetail';\n/**\n * The class name added to a running session item shutdown button.\n */\nconst SHUTDOWN_BUTTON_CLASS = 'jp-RunningSessions-itemShutdown';\n/**\n * The class name added to a running session item shutdown button.\n */\nconst SHUTDOWN_ALL_BUTTON_CLASS = 'jp-RunningSessions-shutdownAll';\n/* tslint:disable */\n/**\n * The running sessions token.\n */\nexport const IRunningSessionManagers = new Token('@jupyterlab/running:IRunningSessionManagers');\nexport class RunningSessionManagers {\n    constructor() {\n        this._managers = [];\n    }\n    /**\n     * Add a running item manager.\n     *\n     * @param manager - The running item manager.\n     *\n     */\n    add(manager) {\n        this._managers.push(manager);\n        return new DisposableDelegate(() => {\n            const i = this._managers.indexOf(manager);\n            if (i > -1) {\n                this._managers.splice(i, 1);\n            }\n        });\n    }\n    /**\n     * Return an iterator of launcher items.\n     */\n    items() {\n        return this._managers;\n    }\n}\nfunction Item(props) {\n    var _a;\n    const { runningItem } = props;\n    const icon = runningItem.icon();\n    const detail = (_a = runningItem.detail) === null || _a === void 0 ? void 0 : _a.call(runningItem);\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const shutdownLabel = props.shutdownLabel || trans.__('Shut Down');\n    const shutdownItemIcon = props.shutdownItemIcon || closeIcon;\n    return (React.createElement(\"li\", { className: ITEM_CLASS },\n        React.createElement(icon.react, { tag: \"span\", stylesheet: \"runningItem\" }),\n        React.createElement(\"span\", { className: ITEM_LABEL_CLASS, title: runningItem.labelTitle ? runningItem.labelTitle() : '', onClick: () => runningItem.open() }, runningItem.label()),\n        detail && React.createElement(\"span\", { className: ITEM_DETAIL_CLASS }, detail),\n        React.createElement(ToolbarButtonComponent, { className: SHUTDOWN_BUTTON_CLASS, icon: shutdownItemIcon, onClick: () => runningItem.shutdown(), tooltip: shutdownLabel })));\n}\nfunction ListView(props) {\n    return (React.createElement(\"ul\", { className: LIST_CLASS }, props.runningItems.map((item, i) => (React.createElement(Item, { key: i, runningItem: item, shutdownLabel: props.shutdownLabel, shutdownItemIcon: props.shutdownItemIcon, translator: props.translator })))));\n}\nfunction List(props) {\n    return (React.createElement(UseSignal, { signal: props.manager.runningChanged }, () => (React.createElement(ListView, { runningItems: props.manager.running(), shutdownLabel: props.shutdownLabel, shutdownAllLabel: props.shutdownAllLabel, shutdownItemIcon: props.manager.shutdownItemIcon, translator: props.translator }))));\n}\n/**\n * The Section component contains the shared look and feel for an interactive\n * list of kernels and sessions.\n *\n * It is specialized for each based on its props.\n */\nfunction Section(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const shutdownAllLabel = props.manager.shutdownAllLabel || trans.__('Shut Down All');\n    const shutdownTitle = `${shutdownAllLabel}?`;\n    const shutdownAllConfirmationText = props.manager.shutdownAllConfirmationText ||\n        `${shutdownAllLabel} ${props.manager.name}`;\n    function onShutdown() {\n        void showDialog({\n            title: shutdownTitle,\n            body: shutdownAllConfirmationText,\n            buttons: [\n                Dialog.cancelButton({ label: trans.__('Cancel') }),\n                Dialog.warnButton({ label: shutdownAllLabel })\n            ]\n        }).then(result => {\n            if (result.button.accept) {\n                props.manager.shutdownAll();\n            }\n        });\n    }\n    return (React.createElement(\"div\", { className: SECTION_CLASS },\n        React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: `${SECTION_HEADER_CLASS} jp-stack-panel-header` },\n                React.createElement(\"h2\", null, props.manager.name),\n                React.createElement(UseSignal, { signal: props.manager.runningChanged }, () => {\n                    const disabled = props.manager.running().length === 0;\n                    return (React.createElement(\"button\", { className: `${SHUTDOWN_ALL_BUTTON_CLASS} jp-mod-styled ${disabled && 'jp-mod-disabled'}`, disabled: disabled, onClick: onShutdown }, shutdownAllLabel));\n                })),\n            React.createElement(\"div\", { className: CONTAINER_CLASS },\n                React.createElement(List, { manager: props.manager, shutdownLabel: props.manager.shutdownLabel, shutdownAllLabel: shutdownAllLabel, translator: props.translator })))));\n}\nfunction RunningSessionsComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: HEADER_CLASS },\n            React.createElement(ToolbarButtonComponent, { tooltip: trans.__('Refresh List'), icon: refreshIcon, onClick: () => props.managers.items().forEach(manager => manager.refreshRunning()) })),\n        props.managers.items().map(manager => (React.createElement(Section, { key: manager.name, manager: manager, translator: props.translator })))));\n}\n/**\n * A class that exposes the running terminal and kernel sessions.\n */\nexport class RunningSessions extends ReactWidget {\n    /**\n     * Construct a new running widget.\n     */\n    constructor(managers, translator) {\n        super();\n        this.managers = managers;\n        this.translator = translator || nullTranslator;\n        // this can't be in the react element, because then it would be too nested\n        this.addClass(RUNNING_CLASS);\n    }\n    render() {\n        return (React.createElement(RunningSessionsComponent, { managers: this.managers, translator: this.translator }));\n    }\n}\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}