(self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] = self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] || []).push([["vendors-node_modules_jupyterlab_toc_lib_index_js"],{

/***/ 36695:
/*!******************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLatexGenerator": () => (/* reexport safe */ _latex__WEBPACK_IMPORTED_MODULE_0__.createLatexGenerator),
/* harmony export */   "createMarkdownGenerator": () => (/* reexport safe */ _markdown__WEBPACK_IMPORTED_MODULE_1__.createMarkdownGenerator),
/* harmony export */   "createRenderedMarkdownGenerator": () => (/* reexport safe */ _markdown__WEBPACK_IMPORTED_MODULE_1__.createRenderedMarkdownGenerator),
/* harmony export */   "createNotebookGenerator": () => (/* reexport safe */ _notebook__WEBPACK_IMPORTED_MODULE_2__.createNotebookGenerator),
/* harmony export */   "createPythonGenerator": () => (/* reexport safe */ _python__WEBPACK_IMPORTED_MODULE_3__.createPythonGenerator)
/* harmony export */ });
/* harmony import */ var _latex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./latex */ 96091);
/* harmony import */ var _markdown__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./markdown */ 67414);
/* harmony import */ var _notebook__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notebook */ 80369);
/* harmony import */ var _python__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./python */ 15547);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
// Note: keep in alphabetical order...




//# sourceMappingURL=index.js.map

/***/ }),

/***/ 96091:
/*!************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/latex/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLatexGenerator": () => (/* binding */ createLatexGenerator)
/* harmony export */ });
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
/**
 * Maps LaTeX section headings to HTML header levels.
 *
 * ## Notes
 *
 * -   As `part` and `chapter` section headings appear to be less common, assign them to heading level 1.
 *
 * @private
 */
const LATEX_LEVELS = {
    part: 1,
    chapter: 1,
    section: 1,
    subsection: 2,
    subsubsection: 3,
    paragraph: 4,
    subparagraph: 5
};
/**
 * Converts array elements to "entries".
 *
 * @private
 * @param arr - input array
 * @returns input array
 *
 * @example
 * const arr = toEntries([4,5,6]);
 * // returns [[4,0], [5,1], [6,2]]
 */
function toEntries(arr) {
    for (let i = 0; i < arr.length; i++) {
        arr[i] = [arr[i], i];
    }
    return arr;
}
/**
 * Returns a boolean indicating whether this ToC generator is enabled.
 *
 * @private
 * @param editor - editor widget
 * @returns boolean indicating whether this ToC generator is enabled
 */
function isEnabled(editor) {
    // Only enable this if the editor MIME type matches one of a few LaTeX variants:
    let mime = editor.content.model.mimeType;
    return mime === 'text/x-latex' || mime === 'text/x-stex';
}
/**
 * Generates a table of contents.
 *
 * @private
 * @param editor - editor widget
 * @returns a list of headings
 */
function generate(editor) {
    // Split the text into lines:
    let lines = editor.content.model.value.text.split('\n');
    // Convert the list into "entries" so we can use the line number to scroll the editor upon ToC item click:
    lines = toEntries(lines);
    // Iterate over the lines to get the heading level and text for each line:
    let headings = [];
    for (let i = 0; i < lines.length; i++) {
        const RE = /^\s*\\(section|subsection|subsubsection){(.+)}/;
        const match = lines[i][0].match(RE);
        if (match) {
            headings.push({
                text: match[2],
                level: LATEX_LEVELS[match[1]],
                onClick: onClick(lines[i][1])
            });
        }
    }
    return headings;
    /**
     * Returns a "click" handler.
     *
     * @private
     * @param line - line number
     * @returns click handler
     */
    function onClick(line) {
        return () => {
            editor.content.editor.setCursorPosition({
                line: line,
                column: 0
            });
        };
    }
}
/**
 * Returns a ToC generator for LaTeX files.
 *
 * @private
 * @param tracker - file editor tracker
 * @returns ToC generator capable of parsing LaTeX files
 */
function createLatexGenerator(tracker) {
    return {
        tracker,
        usesLatex: true,
        isEnabled: isEnabled,
        generate: generate
    };
}
/**
 * Exports.
 */

//# sourceMappingURL=index.js.map

/***/ }),

/***/ 55551:
/*!**********************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/markdown/get_headings.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getHeadings": () => (/* binding */ getHeadings)
/* harmony export */ });
/* harmony import */ var _utils_generate_numbering__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/generate_numbering */ 85885);
/* harmony import */ var _utils_parse_heading__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/parse_heading */ 28038);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.


/**
 * Parses a provided string and returns a list of headings.
 *
 * @private
 * @param text - input text
 * @param onClick - callback which returns a "click" handler
 * @param dict - numbering dictionary
 * @param numberingH1 - whether first level header should be numbered
 * @returns list of headings
 */
function getHeadings(text, onClick, dict, numberingH1) {
    // Split the text into lines:
    const lines = text.split('\n');
    // Iterate over the lines to get the header level and text for each line:
    let headings = [];
    let FLG;
    for (let i = 0; i < lines.length; i++) {
        let line = lines[i];
        // Don't check for Markdown headings if in a code block:
        if (line.indexOf('```') === 0) {
            FLG = !FLG;
        }
        if (FLG) {
            continue;
        }
        line += lines[i + 1] ? '\n' + lines[i + 1] : '';
        const heading = (0,_utils_parse_heading__WEBPACK_IMPORTED_MODULE_0__.parseHeading)(line); // append the next line to capture alternative style Markdown headings
        if (heading) {
            let level = heading.level;
            if (!numberingH1) {
                level -= 1;
            }
            headings.push({
                text: heading.text,
                numbering: (0,_utils_generate_numbering__WEBPACK_IMPORTED_MODULE_1__.generateNumbering)(dict, level),
                level: heading.level,
                onClick: onClick(i)
            });
        }
    }
    return headings;
}
/**
 * Exports.
 */

//# sourceMappingURL=get_headings.js.map

/***/ }),

/***/ 42507:
/*!*******************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/markdown/get_rendered_headings.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRenderedHeadings": () => (/* binding */ getRenderedHeadings)
/* harmony export */ });
/* harmony import */ var _utils_generate_numbering__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/generate_numbering */ 85885);
/* harmony import */ var _utils_sanitizer_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/sanitizer_options */ 6760);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.


/**
 * Returns a "click" handler.
 *
 * @private
 * @param heading - heading element
 * @returns "click" handler
 */
function onClick(heading) {
    return () => {
        heading.scrollIntoView();
    };
}
/**
 * Processes an HTML element containing rendered Markdown and returns a list of headings.
 *
 * @private
 * @param node - HTML element
 * @param sanitizer - HTML sanitizer
 * @param dict - numbering dictionary
 * @param numbering - boolean indicating whether to enable numbering
 * @param numberingH1 - whether first level header should be numbered
 * @returns list of headings
 */
function getRenderedHeadings(node, sanitizer, dict, numbering = true, numberingH1 = true) {
    let nodes = node.querySelectorAll('h1, h2, h3, h4, h5, h6');
    let headings = [];
    for (let i = 0; i < nodes.length; i++) {
        const heading = nodes[i];
        let level = parseInt(heading.tagName[1], 10);
        let text = heading.textContent ? heading.textContent : '';
        let hide = !numbering;
        // Show/hide numbering DOM element based on user settings:
        if (heading.getElementsByClassName('numbering-entry').length > 0) {
            heading.removeChild(heading.getElementsByClassName('numbering-entry')[0]);
        }
        let html = sanitizer.sanitize(heading.innerHTML, _utils_sanitizer_options__WEBPACK_IMPORTED_MODULE_0__.sanitizerOptions);
        html = html.replace('¶', ''); // remove the anchor symbol
        // Generate a numbering string:
        if (!numberingH1) {
            level -= 1;
        }
        let nstr = (0,_utils_generate_numbering__WEBPACK_IMPORTED_MODULE_1__.generateNumbering)(dict, level);
        // Generate the numbering DOM element:
        let nhtml = '';
        if (!hide) {
            nhtml = '<span class="numbering-entry">' + nstr + '</span>';
        }
        // Append the numbering element to the document:
        heading.innerHTML = nhtml + html;
        headings.push({
            level,
            text: text.replace('¶', ''),
            numbering: nstr,
            html,
            onClick: onClick(heading)
        });
    }
    return headings;
}
/**
 * Exports.
 */

//# sourceMappingURL=get_rendered_headings.js.map

/***/ }),

/***/ 67414:
/*!***************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/markdown/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMarkdownGenerator": () => (/* binding */ createMarkdownGenerator),
/* harmony export */   "createRenderedMarkdownGenerator": () => (/* binding */ createRenderedMarkdownGenerator)
/* harmony export */ });
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/translation */ 57630);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_is_markdown__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is_markdown */ 77540);
/* harmony import */ var _options_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./options_manager */ 51668);
/* harmony import */ var _render__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./render */ 42287);
/* harmony import */ var _toolbar_generator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toolbar_generator */ 79135);
/* harmony import */ var _get_headings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./get_headings */ 55551);
/* harmony import */ var _get_rendered_headings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./get_rendered_headings */ 42507);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.







/**
 * Returns a boolean indicating whether this ToC generator is enabled.
 *
 * @private
 * @param editor - editor widget
 * @returns boolean indicating whether this ToC generator is enabled
 */
function isEnabled(editor) {
    // Only enable this if the editor MIME type matches one of a few Markdown variants:
    return (0,_utils_is_markdown__WEBPACK_IMPORTED_MODULE_1__.isMarkdown)(editor.content.model.mimeType);
}
/**
 * Generates a table of contents.
 *
 * @private
 * @param editor - editor widget
 * @param options - manage Markdown ToC generator options
 * @returns a list of headings
 */
function generate(editor, options) {
    let dict = {};
    let numberingH1 = true;
    if (options !== undefined) {
        numberingH1 = options.numberingH1;
    }
    return (0,_get_headings__WEBPACK_IMPORTED_MODULE_2__.getHeadings)(editor.content.model.value.text, onClick, dict, numberingH1);
    /**
     * Returns a "click" handler.
     *
     * @private
     * @param line - line number
     * @returns click handler
     */
    function onClick(line) {
        return () => {
            editor.content.editor.setCursorPosition({
                line: line,
                column: 0
            });
        };
    }
}
/**
 * Returns a ToC generator for Markdown files.
 *
 * @private
 * @param tracker - file editor tracker
 * @param widget - table of contents widget
 * @param sanitizer - HTML sanitizer
 * @param settings - advanced settings for toc extension
 * @returns ToC generator capable of parsing Markdown files
 */
function createMarkdownGenerator(tracker, widget, sanitizer, translator, settings) {
    let numberingH1 = true;
    if (settings) {
        numberingH1 = settings.composite.numberingH1;
    }
    const options = new _options_manager__WEBPACK_IMPORTED_MODULE_3__.OptionsManager(widget, {
        numbering: true,
        numberingH1: numberingH1,
        sanitizer,
        translator: translator || _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__.nullTranslator
    });
    if (settings) {
        settings.changed.connect(() => {
            options.numberingH1 = settings.composite.numberingH1;
        });
    }
    return {
        tracker,
        usesLatex: true,
        options: options,
        toolbarGenerator: generateToolbar,
        itemRenderer: renderItem,
        isEnabled: isEnabled,
        generate: generate
    };
    /**
     * Returns a toolbar generator.
     *
     * @private
     * @returns toolbar generator
     */
    function generateToolbar() {
        return (0,_toolbar_generator__WEBPACK_IMPORTED_MODULE_4__.toolbar)(options);
    }
    /**
     * Renders a table of contents item.
     *
     * @private
     * @param item - heading to render
     * @returns rendered item
     */
    function renderItem(item) {
        return (0,_render__WEBPACK_IMPORTED_MODULE_5__.render)(options, item);
    }
}
/**
 * Returns a ToC generator for rendered Markdown files.
 *
 * @param tracker - Markdown viewer tracker
 * @param sanitizer - HTML sanitizer
 * @param widget - table of contents widget
 * @param settings - advanced settings for toc extension
 * @returns ToC generator capable of parsing rendered Markdown files
 */
function createRenderedMarkdownGenerator(tracker, widget, sanitizer, translator, settings) {
    let numberingH1 = true;
    if (settings) {
        numberingH1 = settings.composite.numberingH1;
    }
    const options = new _options_manager__WEBPACK_IMPORTED_MODULE_3__.OptionsManager(widget, {
        numbering: true,
        numberingH1: numberingH1,
        sanitizer,
        translator: translator || _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__.nullTranslator
    });
    if (settings) {
        settings.changed.connect(() => {
            options.numberingH1 = settings.composite.numberingH1;
        });
    }
    return {
        tracker,
        usesLatex: true,
        options: options,
        toolbarGenerator: generateToolbar,
        itemRenderer: renderItem,
        generate: generate
    };
    /**
     * Returns a toolbar generator.
     *
     * @private
     * @returns toolbar generator
     */
    function generateToolbar() {
        return (0,_toolbar_generator__WEBPACK_IMPORTED_MODULE_4__.toolbar)(options);
    }
    /**
     * Renders a table of contents item.
     *
     * @private
     * @param item - heading to render
     * @returns rendered item
     */
    function renderItem(item) {
        return (0,_render__WEBPACK_IMPORTED_MODULE_5__.render)(options, item);
    }
    /**
     * Generates a table of contents.
     *
     * @private
     * @param widget - Markdown document widget
     * @returns a list of headings
     */
    function generate(widget) {
        let dict = {};
        return (0,_get_rendered_headings__WEBPACK_IMPORTED_MODULE_6__.getRenderedHeadings)(widget.content.node, sanitizer, dict, options.numbering, options.numberingH1);
    }
}
/**
 * Exports.
 */


//# sourceMappingURL=index.js.map

/***/ }),

/***/ 51668:
/*!*************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/markdown/options_manager.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OptionsManager": () => (/* binding */ OptionsManager)
/* harmony export */ });
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/translation */ 57630);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../registry */ 80631);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.


/**
 * Class for managing Markdown ToC generator options.
 *
 * @private
 */
class OptionsManager extends _registry__WEBPACK_IMPORTED_MODULE_1__.TableOfContentsRegistry.IOptionsManager {
    /**
     * Returns an options manager.
     *
     * @param widget - table of contents widget
     * @param options - generator options
     * @returns options manager
     */
    constructor(widget, options) {
        super();
        this._numbering = options.numbering;
        this._numberingH1 = options.numberingH1;
        this._widget = widget;
        this.translator = options.translator || _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__.nullTranslator;
        this.sanitizer = options.sanitizer;
    }
    /**
     * Gets/sets ToC generator numbering.
     */
    set numbering(value) {
        this._numbering = value;
        this._widget.update();
    }
    get numbering() {
        return this._numbering;
    }
    /**
     * Gets/sets ToC generator numbering h1 headers.
     */
    set numberingH1(value) {
        if (this._numberingH1 != value) {
            this._numberingH1 = value;
            this._widget.update();
        }
    }
    get numberingH1() {
        return this._numberingH1;
    }
    /**
     * Initializes options.
     *
     * ## Notes
     *
     * -  This will **not** change notebook meta-data.
     *
     * @param numbering - boolean indicating whether to number items
     */
    initializeOptions(numbering, numberingH1) {
        this._numbering = numbering;
        this._numberingH1 = numberingH1;
        this._widget.update();
    }
}
/**
 * Exports.
 */

//# sourceMappingURL=options_manager.js.map

/***/ }),

/***/ 42287:
/*!****************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/markdown/render.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ 2411);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_sanitizer_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/sanitizer_options */ 6760);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.


/**
 * Renders a Markdown table of contents item.
 *
 * @private
 * @param options - generator options
 * @param item - numbered heading
 * @returns rendered item
 */
function render(options, item) {
    let fontSizeClass = 'toc-level-size-' + item.level;
    // Render item numbering:
    let numbering = item.numbering && options.numbering ? item.numbering : '';
    // Render the item:
    let jsx;
    if (item.html) {
        let html = options.sanitizer.sanitize(item.html, _utils_sanitizer_options__WEBPACK_IMPORTED_MODULE_1__.sanitizerOptions);
        jsx = (react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { dangerouslySetInnerHTML: { __html: numbering + html }, className: 'toc-markdown-cell ' + fontSizeClass }));
    }
    else {
        jsx = react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { className: fontSizeClass },
            " ",
            numbering + item.text);
    }
    return jsx;
}
/**
 * Exports.
 */

//# sourceMappingURL=render.js.map

/***/ }),

/***/ 79135:
/*!***************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/markdown/toolbar_generator.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toolbar": () => (/* binding */ toolbar)
/* harmony export */ });
/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/ui-components */ 65995);
/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ 2411);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.


/**
 * Returns a component for rendering a Markdown table of contents toolbar.
 *
 * @private
 * @param options - generator options
 * @returns toolbar component
 */
function toolbar(options) {
    return class Toolbar extends react__WEBPACK_IMPORTED_MODULE_1__.Component {
        /**
         * Returns a component for rendering a Markdown table of contents toolbar.
         *
         * @param props - toolbar properties
         * @returns toolbar component
         */
        constructor(props) {
            super(props);
            this.state = { numbering: false };
            options.initializeOptions(false, options.numberingH1);
            this._trans = options.translator.load('jupyterlab');
        }
        /**
         * Renders a toolbar.
         *
         * @returns rendered toolbar
         */
        render() {
            const toggleNumbering = () => {
                options.numbering = !options.numbering;
                this.setState({ numbering: options.numbering });
            };
            const icon = (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { onClick: event => toggleNumbering(), role: "text", "aria-label": this._trans.__('Toggle Auto-Numbering'), title: this._trans.__('Toggle Auto-Numbering'), className: this.state.numbering
                    ? 'toc-toolbar-icon-selected'
                    : 'toc-toolbar-icon' },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_0__.numberingIcon.react, null)));
            return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", null,
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'toc-toolbar' }, icon)));
        }
    };
}
/**
 * Exports.
 */

//# sourceMappingURL=toolbar_generator.js.map

/***/ }),

/***/ 56059:
/*!************************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/append_collapsible_heading.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "appendCollapsibleHeading": () => (/* binding */ appendCollapsibleHeading)
/* harmony export */ });
/* harmony import */ var _is_heading_filtered__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is_heading_filtered */ 29633);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.

/**
 * Appends a collapsible notebook heading to a list of headings.
 *
 * @private
 * @param headings - list of notebook headings
 * @param heading - rendered heading
 * @param prev - previous heading
 * @param collapseLevel - collapse level
 * @param tags - filter tags
 * @param collapsed - boolean indicating whether a heading is collapsed
 * @param cellCollapseMetadata - indicates which metadata string to use based on the cellSyncSetting
 * @returns result tuple
 */
function appendCollapsibleHeading(headings, heading, prev, collapseLevel, tags, collapsed, cellCollapseMetadata) {
    const len = headings.length;
    if (!(0,_is_heading_filtered__WEBPACK_IMPORTED_MODULE_0__.isHeadingFiltered)(heading, tags)) {
        // If the previous heading is a higher level heading, update the heading to note that it has a child heading...
        if (prev && prev.type === 'header' && prev.level < heading.level) {
            for (let j = len - 1; j >= 0; j--) {
                if (headings[j] === prev) {
                    // TODO: can a heading be the child of multiple headings? If not, we can `break` here upon finding a parent heading, so we don't traverse the entire heading list...
                    headings[j].hasChild = true;
                }
            }
        }
        // If the collapse level doesn't include the heading, or, if there is no collapsing, add to headings and adjust the collapse level...
        if (collapseLevel >= heading.level || collapseLevel < 0) {
            headings.push(heading);
            collapseLevel = collapsed ? heading.level : -1;
        }
        prev = heading;
    }
    else if (prev && heading.level <= prev.level) {
        // If the heading is filtered out and has a lower level previous heading, determine if the heading has a parent...
        let parent = false;
        let k = len - 1;
        for (; k >= 0; k--) {
            if (headings[k].level < heading.level) {
                prev = headings[k];
                parent = true;
                break;
            }
        }
        // If there is no parent, reset collapsing...
        if (parent) {
            const isCollapsed = headings[k + 1].cellRef.model.metadata.get(cellCollapseMetadata);
            collapseLevel = isCollapsed ? headings[k + 1].level : -1;
        }
        else {
            prev = null;
            collapseLevel = -1;
        }
    }
    return [headings, prev, collapseLevel];
}
/**
 * Exports.
 */

//# sourceMappingURL=append_collapsible_heading.js.map

/***/ }),

/***/ 55847:
/*!************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/append_heading.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "appendHeading": () => (/* binding */ appendHeading)
/* harmony export */ });
/* harmony import */ var _is_heading_filtered__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is_heading_filtered */ 29633);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.

/**
 * Appends a notebook heading to a list of headings.
 *
 * @private
 * @param headings - list of notebook headings
 * @param heading - rendered heading
 * @param prev - previous heading
 * @param collapseLevel - collapse level
 * @param tags - filter tags
 * @returns result tuple
 */
function appendHeading(headings, heading, prev, collapseLevel, tags) {
    if (heading && !(0,_is_heading_filtered__WEBPACK_IMPORTED_MODULE_0__.isHeadingFiltered)(heading, tags) && heading.text) {
        // Determine whether this heading is a child of a "header" notebook heading...
        if (prev && prev.type === 'header') {
            for (let j = headings.length - 1; j >= 0; j--) {
                if (headings[j] === prev) {
                    // TODO: can a heading be the child of multiple headings? If not, we can `break` here upon finding a parent heading, so we don't traverse the entire heading list...
                    headings[j].hasChild = true;
                }
            }
        }
        if (collapseLevel < 0) {
            headings.push(heading);
        }
        prev = heading;
    }
    return [headings, prev];
}
/**
 * Exports.
 */

//# sourceMappingURL=append_heading.js.map

/***/ }),

/***/ 41871:
/*!*********************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/append_markdown_heading.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "appendMarkdownHeading": () => (/* binding */ appendMarkdownHeading)
/* harmony export */ });
/* harmony import */ var _append_collapsible_heading__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./append_collapsible_heading */ 56059);
/* harmony import */ var _append_heading__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./append_heading */ 55847);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.


/**
 * Appends a Markdown notebook heading to a list of headings.
 *
 * @private
 * @param headings - list of notebook headings
 * @param heading - rendered heading
 * @param prev - previous heading
 * @param collapseLevel - collapse level
 * @param tags - filter tags
 * @param collapsed - boolean indicating whether a heading is collapsed
 * @param showMarkdown - boolean indicating whether to show Markdown previews
 * @param cellCollapseMetadata - indicates which metadata string to use based on the cellSyncSetting
 * @returns result tuple
 */
function appendMarkdownHeading(heading, headings, prev, collapseLevel, tags, collapsed, showMarkdown, cellCollapseMetadata) {
    if (heading && heading.type === 'markdown' && showMarkdown) {
        // Append a Markdown preview heading:
        [headings, prev] = (0,_append_heading__WEBPACK_IMPORTED_MODULE_0__.appendHeading)(headings, heading, prev, collapseLevel, tags);
    }
    else if (heading && heading.type === 'header') {
        [headings, prev, collapseLevel] = (0,_append_collapsible_heading__WEBPACK_IMPORTED_MODULE_1__.appendCollapsibleHeading)(headings, heading, prev, collapseLevel, tags, collapsed, cellCollapseMetadata);
    }
    return [headings, prev, collapseLevel];
}
/**
 * Exports.
 */

//# sourceMappingURL=append_markdown_heading.js.map

/***/ }),

/***/ 16082:
/*!********************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/codemirror.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CodeComponent": () => (/* binding */ CodeComponent)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ 2411);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_sanitizer_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/sanitizer_options */ 6760);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.


/**
 * Class for rendering a code component.
 *
 * @private
 */
class CodeComponent extends react__WEBPACK_IMPORTED_MODULE_0__.Component {
    /**
     * Returns a code component.
     *
     * @param props - component properties
     * @returns code component
     */
    constructor(props) {
        super(props);
        this.state = { heading: props.heading };
    }
    /**
     * Updates code component state.
     *
     * @param props - component properties
     */
    UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState({ heading: nextProps.heading });
    }
    /**
     * Renders a code component.
     *
     * @returns rendered component
     */
    render() {
        // Get the current rendered CodeMirror:
        let html = this.state.heading.cellRef.editor.host.innerHTML;
        // Sanitize the HTML:
        html = this.props.sanitizer.sanitize(html, _utils_sanitizer_options__WEBPACK_IMPORTED_MODULE_1__.sanitizerOptions);
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "cm-toc", dangerouslySetInnerHTML: { __html: html } }));
    }
}
/**
 * Exports.
 */

//# sourceMappingURL=codemirror.js.map

/***/ }),

/***/ 60002:
/*!*******************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/get_code_cell_heading.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCodeCellHeading": () => (/* binding */ getCodeCellHeading)
/* harmony export */ });
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
/**
 * Returns a code entry notebook heading from a code string.
 *
 * @private
 * @param text - code string
 * @param onClick - callback which returns a "click" handler
 * @param executionCount - execution count
 * @param lastLevel - last heading level
 * @param cellRef - cell reference
 * @param index - index of referenced cell relative to other cells in the notebook
 * @returns notebook heading
 */
function getCodeCellHeading(text, onClick, executionCount, lastLevel, cellRef, index = -1) {
    let headings = [];
    if (index === -1) {
        console.warn('Deprecation warning! index argument will become mandatory in the next version');
    }
    if (text) {
        const lines = text.split('\n');
        const len = Math.min(lines.length, 3);
        let str = '';
        let i = 0;
        for (; i < len - 1; i++) {
            str += lines[i] + '\n';
        }
        str += lines[i];
        headings.push({
            text: str,
            level: lastLevel + 1,
            onClick: onClick(0),
            type: 'code',
            prompt: executionCount,
            cellRef: cellRef,
            hasChild: false,
            index: index
        });
    }
    return headings[0];
}
/**
 * Exports.
 */

//# sourceMappingURL=get_code_cell_heading.js.map

/***/ }),

/***/ 81294:
/*!********************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/get_last_heading_level.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getLastHeadingLevel": () => (/* binding */ getLastHeadingLevel)
/* harmony export */ });
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
/**
 * Returns the last heading level.
 *
 * @private
 * @param headings - list of notebook headings
 * @returns heading level
 */
function getLastHeadingLevel(headings) {
    if (headings.length > 0) {
        let loc = headings.length - 1;
        while (loc >= 0) {
            if (headings[loc].type === 'header') {
                return headings[loc].level;
            }
            loc -= 1;
        }
    }
    return 0;
}
/**
 * Exports.
 */

//# sourceMappingURL=get_last_heading_level.js.map

/***/ }),

/***/ 58491:
/*!******************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/get_markdown_heading.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getMarkdownHeadings": () => (/* binding */ getMarkdownHeadings)
/* harmony export */ });
/* harmony import */ var _utils_generate_numbering__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/generate_numbering */ 85885);
/* harmony import */ var _utils_parse_heading__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/parse_heading */ 28038);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.


/**
 * Parses a Markdown string and returns a notebook heading.
 *
 * @private
 * @param text - Markdown string
 * @param onClick - callback which returns a "click" handler
 * @param dict - numbering dictionary
 * @param lastLevel - last level
 * @param cellRef - cell reference
 * @param index - index of referenced cell relative to other cells in the notebook
 * @returns notebook heading
 */
function getMarkdownHeadings(text, onClick, dict, lastLevel, cellRef, index = -1) {
    const callback = onClick(0);
    let headings = [];
    if (index === -1) {
        console.warn('Deprecation warning! index argument will become mandatory in the next version');
    }
    for (const line of text.split('\n')) {
        const heading = (0,_utils_parse_heading__WEBPACK_IMPORTED_MODULE_0__.parseHeading)(line);
        if (heading) {
            headings.push({
                text: heading.text,
                level: heading.level,
                numbering: (0,_utils_generate_numbering__WEBPACK_IMPORTED_MODULE_1__.generateNumbering)(dict, heading.level),
                onClick: callback,
                type: 'header',
                cellRef: cellRef,
                hasChild: false,
                index
            });
        }
        else {
            headings.push({
                text: text,
                level: lastLevel + 1,
                onClick: callback,
                type: 'markdown',
                cellRef: cellRef,
                hasChild: false,
                index
            });
        }
    }
    return headings;
}
/**
 * Exports.
 */

//# sourceMappingURL=get_markdown_heading.js.map

/***/ }),

/***/ 97137:
/*!***********************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/get_rendered_html_heading.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRenderedHTMLHeadings": () => (/* binding */ getRenderedHTMLHeadings)
/* harmony export */ });
/* harmony import */ var _utils_generate_numbering__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/generate_numbering */ 85885);
/* harmony import */ var _utils_sanitizer_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/sanitizer_options */ 6760);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.


/**
 * Returns a notebook heading from an HTML element.
 *
 * @private
 * @param node - HTML element
 * @param onClick - callback which returns a "click" handler
 * @param dict - numbering dictionary
 * @param lastLevel - last level
 * @param numbering - boolean indicating whether to enable numbering
 * @param numberingH1 - boolean indicating whether to enable first level headers numbering
 * @param cellRef - cell reference
 * @param index - index of referenced cell relative to other cells in the notebook
 * @returns notebook heading
 */
function getRenderedHTMLHeadings(node, onClick, sanitizer, dict, lastLevel, numbering = false, numberingH1 = true, cellRef, index = -1) {
    let nodes = node.querySelectorAll('h1, h2, h3, h4, h5, h6, p');
    if (index === -1) {
        console.warn('Deprecation warning! index argument will become mandatory in the next version');
    }
    let headings = [];
    for (const el of nodes) {
        if (el.classList.contains('jp-toc-ignore')) {
            // skip this element if a special class name is included
            continue;
        }
        if (el.nodeName.toLowerCase() === 'p') {
            if (el.innerHTML) {
                let html = sanitizer.sanitize(el.innerHTML, _utils_sanitizer_options__WEBPACK_IMPORTED_MODULE_0__.sanitizerOptions);
                headings.push({
                    level: lastLevel + 1,
                    html: html.replace('¶', ''),
                    text: el.textContent ? el.textContent : '',
                    onClick: onClick(el),
                    type: 'markdown',
                    cellRef: cellRef,
                    hasChild: false,
                    index: index
                });
            }
            continue;
        }
        if (el.getElementsByClassName('numbering-entry').length > 0) {
            el.removeChild(el.getElementsByClassName('numbering-entry')[0]);
        }
        let html = sanitizer.sanitize(el.innerHTML, _utils_sanitizer_options__WEBPACK_IMPORTED_MODULE_0__.sanitizerOptions);
        html = html.replace('¶', '');
        let level = parseInt(el.tagName[1], 10);
        if (!numberingH1) {
            level -= 1;
        }
        let nstr = (0,_utils_generate_numbering__WEBPACK_IMPORTED_MODULE_1__.generateNumbering)(dict, level);
        if (numbering) {
            const nhtml = document.createElement('span');
            nhtml.classList.add('numbering-entry');
            nhtml.textContent = nstr !== null && nstr !== void 0 ? nstr : '';
            el.insertBefore(nhtml, el.firstChild);
        }
        headings.push({
            level: level,
            text: el.textContent ? el.textContent : '',
            numbering: nstr,
            html: html,
            onClick: onClick(el),
            type: 'header',
            cellRef: cellRef,
            hasChild: false,
            index: index
        });
    }
    return headings;
}
/**
 * Exports.
 */

//# sourceMappingURL=get_rendered_html_heading.js.map

/***/ }),

/***/ 80369:
/*!***************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createNotebookGenerator": () => (/* binding */ createNotebookGenerator)
/* harmony export */ });
/* harmony import */ var _jupyterlab_cells__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/cells */ 96462);
/* harmony import */ var _jupyterlab_cells__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_cells__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/translation */ 57630);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils_is_dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/is_dom */ 43655);
/* harmony import */ var _utils_is_markdown__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/is_markdown */ 77540);
/* harmony import */ var _append_heading__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./append_heading */ 55847);
/* harmony import */ var _append_markdown_heading__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./append_markdown_heading */ 41871);
/* harmony import */ var _get_code_cell_heading__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./get_code_cell_heading */ 60002);
/* harmony import */ var _get_last_heading_level__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./get_last_heading_level */ 81294);
/* harmony import */ var _get_markdown_heading__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./get_markdown_heading */ 58491);
/* harmony import */ var _get_rendered_html_heading__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./get_rendered_html_heading */ 97137);
/* harmony import */ var _options_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./options_manager */ 13845);
/* harmony import */ var _render__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./render */ 89692);
/* harmony import */ var _toolbar_generator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./toolbar_generator */ 93832);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.













/**
 * Returns a ToC generator for notebooks.
 *
 * @private
 * @param tracker - notebook tracker
 * @param widget - table of contents widget
 * @param sanitizer - HTML sanitizer
 * @param translator - Language translator
 * @param settings - advanced settings for toc extension
 * @returns ToC generator capable of parsing notebooks
 */
function createNotebookGenerator(tracker, widget, sanitizer, translator, settings) {
    let numberingH1 = true;
    let includeOutput = true;
    let syncCollapseState = false;
    if (settings) {
        numberingH1 = settings.composite.numberingH1;
        includeOutput = settings.composite.includeOutput;
        syncCollapseState = settings.composite.syncCollapseState;
    }
    const options = new _options_manager__WEBPACK_IMPORTED_MODULE_2__.OptionsManager(widget, tracker, {
        numbering: false,
        numberingH1: numberingH1,
        includeOutput: includeOutput,
        syncCollapseState: syncCollapseState,
        sanitizer: sanitizer,
        translator: translator || _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_1__.nullTranslator
    });
    if (settings) {
        settings.changed.connect(() => {
            options.numberingH1 = settings.composite.numberingH1;
            options.includeOutput = settings.composite.includeOutput;
            options.syncCollapseState = settings.composite
                .syncCollapseState;
        });
    }
    tracker.activeCellChanged.connect((sender, args) => {
        widget.update();
    });
    return {
        tracker,
        usesLatex: true,
        options: options,
        toolbarGenerator: generateToolbar,
        itemRenderer: renderItem,
        generate: generate,
        collapseChanged: options.collapseChanged
    };
    /**
     * Returns a toolbar generator.
     *
     * @private
     * @returns toolbar generator
     */
    function generateToolbar() {
        return (0,_toolbar_generator__WEBPACK_IMPORTED_MODULE_3__.toolbar)(options, tracker);
    }
    /**
     * Renders a table of contents item.
     *
     * @private
     * @param item - heading to render
     * @param toc - list of all headers to render
     * @returns rendered item
     */
    function renderItem(item, toc = []) {
        return (0,_render__WEBPACK_IMPORTED_MODULE_4__.render)(options, tracker, item, toc);
    }
    /**
     * Generates a table of contents.
     *
     * @private
     * @param panel - notebook widget
     * @returns a list of headings
     */
    function generate(panel) {
        let headings = [];
        let collapseLevel = -1;
        let dict = {};
        // Initialize a variable for keeping track of the previous heading:
        let prev = null;
        // Generate headings by iterating through all notebook cells...
        for (let i = 0; i < panel.content.widgets.length; i++) {
            let cell = panel.content.widgets[i];
            let model = cell.model;
            let cellCollapseMetadata = options.syncCollapseState
                ? _jupyterlab_cells__WEBPACK_IMPORTED_MODULE_0__.MARKDOWN_HEADING_COLLAPSED
                : 'toc-hr-collapsed';
            let collapsed = model.metadata.get(cellCollapseMetadata);
            collapsed = collapsed || false;
            if (model.type === 'code') {
                if (!widget || (widget && options.showCode)) {
                    const onClick = (line) => {
                        return () => {
                            panel.content.activeCellIndex = i;
                            cell.node.scrollIntoView();
                        };
                    };
                    let count = cell.model.executionCount;
                    let executionCount = count !== null ? '[' + count + ']: ' : '[ ]: ';
                    let heading = (0,_get_code_cell_heading__WEBPACK_IMPORTED_MODULE_5__.getCodeCellHeading)(model.value.text, onClick, executionCount, (0,_get_last_heading_level__WEBPACK_IMPORTED_MODULE_6__.getLastHeadingLevel)(headings), cell, i);
                    [headings, prev] = (0,_append_heading__WEBPACK_IMPORTED_MODULE_7__.appendHeading)(headings, heading, prev, collapseLevel, options.filtered);
                }
                if (options.includeOutput) {
                    // Iterate over the code cell outputs to check for Markdown or HTML from which we can generate ToC headings...
                    for (let j = 0; j < model.outputs.length; j++) {
                        const m = model.outputs.get(j);
                        let dtypes = Object.keys(m.data);
                        dtypes = dtypes.filter(t => (0,_utils_is_markdown__WEBPACK_IMPORTED_MODULE_8__.isMarkdown)(t) || (0,_utils_is_dom__WEBPACK_IMPORTED_MODULE_9__.isDOM)(t));
                        if (!dtypes.length) {
                            continue;
                        }
                        const onClick = (el) => {
                            return () => {
                                panel.content.activeCellIndex = i;
                                panel.content.mode = 'command';
                                el.scrollIntoView();
                            };
                        };
                        let htmlHeadings = (0,_get_rendered_html_heading__WEBPACK_IMPORTED_MODULE_10__.getRenderedHTMLHeadings)(cell.outputArea.widgets[j].node, onClick, sanitizer, dict, (0,_get_last_heading_level__WEBPACK_IMPORTED_MODULE_6__.getLastHeadingLevel)(headings), options.numbering, options.numberingH1, cell, i);
                        for (const heading of htmlHeadings) {
                            [headings, prev, collapseLevel] = (0,_append_markdown_heading__WEBPACK_IMPORTED_MODULE_11__.appendMarkdownHeading)(heading, headings, prev, collapseLevel, options.filtered, collapsed, options.showMarkdown, cellCollapseMetadata);
                        }
                    }
                }
                continue;
            }
            if (model.type === 'markdown') {
                let mcell = cell;
                let heading;
                let lastLevel = (0,_get_last_heading_level__WEBPACK_IMPORTED_MODULE_6__.getLastHeadingLevel)(headings);
                // If the cell is rendered, generate the ToC items from the HTML...
                if (mcell.rendered && !mcell.inputHidden) {
                    const onClick = (el) => {
                        return () => {
                            if (!mcell.rendered) {
                                panel.content.activeCellIndex = i;
                                el.scrollIntoView();
                            }
                            else {
                                panel.content.mode = 'command';
                                cell.node.scrollIntoView();
                                panel.content.activeCellIndex = i;
                            }
                        };
                    };
                    const htmlHeadings = (0,_get_rendered_html_heading__WEBPACK_IMPORTED_MODULE_10__.getRenderedHTMLHeadings)(cell.node, onClick, sanitizer, dict, lastLevel, options.numbering, options.numberingH1, cell, i);
                    for (heading of htmlHeadings) {
                        [headings, prev, collapseLevel] = (0,_append_markdown_heading__WEBPACK_IMPORTED_MODULE_11__.appendMarkdownHeading)(heading, headings, prev, collapseLevel, options.filtered, collapsed, options.showMarkdown, cellCollapseMetadata);
                    }
                    // If not rendered, generate ToC items from the cell text...
                }
                else {
                    const onClick = (line) => {
                        return () => {
                            panel.content.activeCellIndex = i;
                            cell.node.scrollIntoView();
                        };
                    };
                    const markdownHeadings = (0,_get_markdown_heading__WEBPACK_IMPORTED_MODULE_12__.getMarkdownHeadings)(model.value.text, onClick, dict, lastLevel, cell, i);
                    for (heading of markdownHeadings) {
                        [headings, prev, collapseLevel] = (0,_append_markdown_heading__WEBPACK_IMPORTED_MODULE_11__.appendMarkdownHeading)(heading, headings, prev, collapseLevel, options.filtered, collapsed, options.showMarkdown, cellCollapseMetadata);
                    }
                }
            }
        }
        return headings;
    }
}
/**
 * Exports.
 */

//# sourceMappingURL=index.js.map

/***/ }),

/***/ 29633:
/*!*****************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/is_heading_filtered.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isHeadingFiltered": () => (/* binding */ isHeadingFiltered)
/* harmony export */ });
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
/**
 * Returns a boolean indicating whether a heading is filtered out by selected tags.
 *
 * @private
 * @param heading - notebook heading
 * @param tags - list of tags
 * @returns boolean indicating whether a heading is filtered
 */
function isHeadingFiltered(heading, tags) {
    if (tags.length === 0) {
        return false;
    }
    if (heading && heading.cellRef) {
        let meta = heading.cellRef.model.metadata;
        let ctags = meta.get('tags');
        if (ctags) {
            for (let j = 0; j < ctags.length; j++) {
                let name = ctags[j];
                for (let k = 0; k < tags.length; k++) {
                    if (tags[k] === name) {
                        return false;
                    }
                }
            }
        }
    }
    return true;
}
/**
 * Exports.
 */

//# sourceMappingURL=is_heading_filtered.js.map

/***/ }),

/***/ 13845:
/*!*************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/options_manager.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OptionsManager": () => (/* binding */ OptionsManager)
/* harmony export */ });
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/translation */ 57630);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _lumino_signaling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lumino/signaling */ 75138);
/* harmony import */ var _lumino_signaling__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lumino_signaling__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../registry */ 80631);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.



/**
 * Class for managing notebook ToC generator options.
 *
 * @private
 */
class OptionsManager extends _registry__WEBPACK_IMPORTED_MODULE_2__.TableOfContentsRegistry.IOptionsManager {
    /**
     * Returns an options manager.
     *
     * @param widget - table of contents widget
     * @param notebook - notebook tracker
     * @param options - generator options
     * @returns options manager
     */
    constructor(widget, notebook, options) {
        super();
        this._preRenderedToolbar = null;
        this._filtered = [];
        this._showCode = false;
        this._showMarkdown = false;
        this._showTags = false;
        this._tagTool = null;
        this._numbering = options.numbering;
        this._numberingH1 = options.numberingH1;
        this._includeOutput = options.includeOutput;
        this._syncCollapseState = options.syncCollapseState;
        this._widget = widget;
        this._notebook = notebook;
        this.sanitizer = options.sanitizer;
        this.storeTags = [];
        this.translator = options.translator || _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__.nullTranslator;
        this._collapseChanged = new _lumino_signaling__WEBPACK_IMPORTED_MODULE_1__.Signal(this);
    }
    /**
     * Gets/sets the tag tool component.
     */
    set tagTool(tagTool) {
        this._tagTool = tagTool;
    }
    get tagTool() {
        return this._tagTool;
    }
    /**
     * Sets notebook meta data.
     */
    set notebookMetadata(value) {
        if (this._notebook.currentWidget != null) {
            this._notebook.currentWidget.model.metadata.set(value[0], value[1]);
        }
    }
    /**
     * Gets/sets ToC generator numbering.
     */
    set numbering(value) {
        this._numbering = value;
        this._widget.update();
        this.notebookMetadata = ['toc-autonumbering', this._numbering];
    }
    get numbering() {
        return this._numbering;
    }
    /**
     * Gets/sets ToC generator numbering h1 headers.
     */
    set numberingH1(value) {
        if (this._numberingH1 != value) {
            this._numberingH1 = value;
            this._widget.update();
        }
    }
    get numberingH1() {
        return this._numberingH1;
    }
    /**
     * Toggles whether cell outputs should be included in headings.
     */
    set includeOutput(value) {
        if (this._includeOutput != value) {
            this._includeOutput = value;
            this._widget.update();
        }
    }
    get includeOutput() {
        return this._includeOutput;
    }
    /**
     * Gets/sets option for ToC heading collapsing to be reflected in Notebook and vice versa
     */
    set syncCollapseState(value) {
        if (this._syncCollapseState != value) {
            this._syncCollapseState = value;
            this._widget.update();
        }
    }
    get syncCollapseState() {
        return this._syncCollapseState;
    }
    /**
     * Toggles whether to show code previews in the table of contents.
     */
    set showCode(value) {
        this._showCode = value;
        this.notebookMetadata = ['toc-showcode', this._showCode];
        this._widget.update();
    }
    get showCode() {
        return this._showCode;
    }
    /**
     * Toggles whether to show Markdown previews in the table of contents.
     */
    set showMarkdown(value) {
        this._showMarkdown = value;
        this.notebookMetadata = ['toc-showmarkdowntxt', this._showMarkdown];
        this._widget.update();
    }
    get showMarkdown() {
        return this._showMarkdown;
    }
    /**
     * Signal emitted when a "collapse" twist button is pressed in the ToC
     */
    get collapseChanged() {
        return this._collapseChanged;
    }
    /**
     * Toggles whether to show tags in the table of contents.
     */
    set showTags(value) {
        this._showTags = value;
        this.notebookMetadata = ['toc-showtags', this._showTags];
        this._widget.update();
    }
    get showTags() {
        return this._showTags;
    }
    /**
     * Returns a list of selected tags.
     */
    get filtered() {
        if (this.tagTool) {
            this._filtered = this.tagTool.filtered;
        }
        else if (this.storeTags.length > 0) {
            this._filtered = this.storeTags;
        }
        else {
            this._filtered = [];
        }
        return this._filtered;
    }
    /**
     * Gets/sets a pre-rendered a toolbar.
     */
    set preRenderedToolbar(value) {
        this._preRenderedToolbar = value;
    }
    get preRenderedToolbar() {
        return this._preRenderedToolbar;
    }
    /**
     * Updates a table of contents widget.
     */
    updateWidget() {
        this._widget.update();
    }
    /**
     * Updates a table of contents widget and
     * emits a signal in case an extension wants
     * to perform an action when the collapse button
     * is pressed.
     */
    updateAndCollapse(args) {
        this._collapseChanged.emit(args);
        this._widget.update();
    }
    /**
     * Initializes options.
     *
     * ## Notes
     *
     * -  This will **not** change notebook meta-data.
     *
     * @param numbering - boolean indicating whether to number items
     * @param numberingH1 - boolean indicating whether to number first level items
     * @param includeOutput - boolean indicating whether cell outputs should be included in headings
     * @param syncCollapseState - boolean indicating whether collapsing in ToC should be reflected in Notebook and vice versa
     * @param showCode - boolean indicating whether to show code previews
     * @param showMarkdown - boolean indicating whether to show Markdown previews
     * @param showTags - boolean indicating whether to show tags
     */
    initializeOptions(numbering, numberingH1, includeOutput, syncCollapseState, showCode, showMarkdown, showTags) {
        this._numbering = numbering;
        this._numberingH1 = numberingH1;
        this._includeOutput = includeOutput;
        this._syncCollapseState = syncCollapseState;
        this._showCode = showCode;
        this._showMarkdown = showMarkdown;
        this._showTags = showTags;
        this._widget.update();
    }
}
/**
 * Exports.
 */

//# sourceMappingURL=options_manager.js.map

/***/ }),

/***/ 89692:
/*!****************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/render.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ 2411);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/notebook */ 86944);
/* harmony import */ var _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/ui-components */ 65995);
/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _jupyterlab_cells__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/cells */ 96462);
/* harmony import */ var _jupyterlab_cells__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_cells__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _utils_sanitizer_options__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/sanitizer_options */ 6760);
/* harmony import */ var _codemirror__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./codemirror */ 16082);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.






/**
 * Renders a notebook table of contents item.
 *
 * @private
 * @param options - generator options
 * @param tracker - notebook tracker
 * @param item - notebook heading
 * @param toc - current list of notebook headings
 * @returns rendered item
 */
function render(options, tracker, item, toc = []) {
    let jsx;
    if (item.type === 'markdown' || item.type === 'header') {
        let fontSizeClass = 'toc-level-size-default';
        let numbering = item.numbering && options.numbering ? item.numbering : '';
        let cellCollapseMetadata = options.syncCollapseState
            ? _jupyterlab_cells__WEBPACK_IMPORTED_MODULE_3__.MARKDOWN_HEADING_COLLAPSED
            : 'toc-hr-collapsed';
        if (item.type === 'header') {
            fontSizeClass = 'toc-level-size-' + item.level;
        }
        if (item.html && (item.type === 'header' || options.showMarkdown)) {
            jsx = (react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { dangerouslySetInnerHTML: {
                    __html: numbering +
                        options.sanitizer.sanitize(item.html, _utils_sanitizer_options__WEBPACK_IMPORTED_MODULE_4__.sanitizerOptions)
                }, className: item.type + '-cell toc-cell-item' }));
            // Render the headers:
            if (item.type === 'header') {
                let button = (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "jp-Collapser p-Widget lm-Widget", onClick: (event) => {
                        event.stopPropagation();
                        onClick(tracker, cellCollapseMetadata, item);
                    } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "toc-Collapser-child" })));
                let collapsed;
                if (item.cellRef.model.metadata.has(cellCollapseMetadata)) {
                    collapsed = item.cellRef.model.metadata.get(cellCollapseMetadata);
                }
                let ellipseButton = collapsed ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "toc-Ellipses", onClick: (event) => {
                        event.stopPropagation();
                        onClick(tracker, cellCollapseMetadata, item);
                    } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_2__.ellipsesIcon.react, null))) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null));
                // Render the heading item:
                jsx = (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'toc-entry-holder ' +
                        fontSizeClass +
                        (tracker.activeCell === item.cellRef
                            ? ' toc-active-cell'
                            : previousHeader(tracker, item, toc)
                                ? ' toc-active-cell'
                                : '') },
                    button,
                    jsx,
                    ellipseButton));
            }
            return jsx;
        }
        if (item.type === 'header' || options.showMarkdown) {
            // Render headers/markdown for plain text:
            jsx = (react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { className: item.type + '-cell toc-cell-item' }, numbering + item.text));
            if (item.type === 'header') {
                let button = (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "jp-Collapser p-Widget lm-Widget", onClick: (event) => {
                        event.stopPropagation();
                        onClick(tracker, cellCollapseMetadata, item);
                    } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "toc-Collapser-child" })));
                let collapsed;
                if (item.cellRef.model.metadata.has(cellCollapseMetadata)) {
                    collapsed = item.cellRef.model.metadata.get(cellCollapseMetadata);
                }
                let ellipseButton = collapsed ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "toc-Ellipses", onClick: (event) => {
                        event.stopPropagation();
                        onClick(tracker, cellCollapseMetadata, item);
                    } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_2__.ellipsesIcon.react, null))) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null));
                jsx = (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'toc-entry-holder ' +
                        fontSizeClass +
                        (tracker.activeCell === item.cellRef
                            ? ' toc-active-cell'
                            : previousHeader(tracker, item, toc)
                                ? ' toc-active-cell'
                                : '') },
                    button,
                    jsx,
                    ellipseButton));
            }
            return jsx;
        }
        return null;
    }
    if (item.type === 'code' && options.showCode) {
        // Render code cells:
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "toc-code-cell-div" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "toc-code-cell-prompt" }, item.prompt),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { className: 'toc-code-span' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_codemirror__WEBPACK_IMPORTED_MODULE_5__.CodeComponent, { sanitizer: options.sanitizer, heading: item }))));
    }
    return null;
    /**
     * Callback invoked upon encountering a "click" event.
     *
     * @private
     * @param heading - notebook heading that was clicked
     */
    function onClick(tracker, cellCollapseMetadata, heading) {
        let collapsed = false;
        let syncCollapseState = options.syncCollapseState;
        if (heading.cellRef.model.metadata.get(cellCollapseMetadata)) {
            collapsed = heading.cellRef.model.metadata.get(cellCollapseMetadata);
        }
        if (heading) {
            if (syncCollapseState) {
                // if collapse state is synced, update state here
                if (tracker.currentWidget) {
                    _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_1__.NotebookActions.setHeadingCollapse(heading.cellRef, !collapsed, tracker.currentWidget.content);
                }
            }
            else {
                if (collapsed) {
                    heading.cellRef.model.metadata.delete(cellCollapseMetadata);
                }
                else {
                    heading.cellRef.model.metadata.set(cellCollapseMetadata, true);
                }
            }
            options.updateAndCollapse({
                heading: heading,
                collapsedState: collapsed,
                tocType: 'notebook'
            });
        }
        else {
            options.updateWidget();
        }
    }
}
/**
 * Used to find the nearest above heading to an active notebook cell
 *
 * @private
 * @param tracker - notebook tracker
 * @param item - notebook heading
 * @param toc - current list of notebook headings
 * @returns true if heading is nearest above a selected cell, otherwise false
 */
function previousHeader(tracker, item, toc) {
    if (item.index > -1 || (toc === null || toc === void 0 ? void 0 : toc.length)) {
        let activeCellIndex = tracker.currentWidget.content.activeCellIndex;
        let headerIndex = item.index;
        // header index has to be less than the active cell index
        if (headerIndex < activeCellIndex) {
            let tocIndexOfNextHeader = toc.indexOf(item) + 1;
            // return true if header is the last header
            if (tocIndexOfNextHeader >= toc.length) {
                return true;
            }
            // return true if the next header cells index is greater than the active cells index
            let nextHeaderIndex = toc === null || toc === void 0 ? void 0 : toc[tocIndexOfNextHeader].index;
            if (nextHeaderIndex > activeCellIndex) {
                return true;
            }
        }
    }
    return false;
}
/**
 * Exports.
 */

//# sourceMappingURL=render.js.map

/***/ }),

/***/ 30923:
/*!************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TagsToolComponent": () => (/* binding */ TagsToolComponent)
/* harmony export */ });
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/translation */ 57630);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ 2411);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _tag_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tag_list */ 78038);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.



/**
 * Tag dropdown React component.
 *
 * @private
 */
class TagsToolComponent extends react__WEBPACK_IMPORTED_MODULE_1__.Component {
    /**
     * Returns a component.
     *
     * @param props - component properties
     * @returns component
     */
    constructor(props) {
        super(props);
        /**
         * Changes the dropdown selection state.
         *
         * @param newState - new state
         * @param add - boolean indicating whether to add to selection
         */
        this.changeSelectionState = (newState, add) => {
            let tags = this.state.selected;
            if (add) {
                tags.push(newState);
                this.setState({ selected: tags });
                this.filterTags(tags);
            }
            else {
                let selected = [];
                for (let i = 0; i < tags.length; i++) {
                    if (tags[i] !== newState) {
                        selected.push(tags[i]);
                    }
                }
                this.setState({ selected: selected });
                this.filterTags(selected);
            }
        };
        /**
         * De-selects all tags in the dropdown and clear filters in the ToC.
         */
        this.deselectAll = () => {
            this.setState({ selected: [] });
            this.props.options.updateWidget();
        };
        /**
         * Select all the cells that contains all of the current tags and activates the first of those cells.
         */
        this.selectAllCellsWithCurrentTags = () => {
            const tags = this.state.selected;
            const panel = this.props.tracker.currentWidget;
            const widgets = panel === null || panel === void 0 ? void 0 : panel.content.widgets;
            panel === null || panel === void 0 ? void 0 : panel.content.deselectAll();
            let changedActive = false;
            widgets === null || widgets === void 0 ? void 0 : widgets.forEach((cell, ix) => {
                const hasAllCurrentTags = tags.every(tag => this.containsTag(tag, cell));
                if (hasAllCurrentTags) {
                    if (!changedActive) {
                        if (panel) {
                            panel.content.activeCellIndex = ix;
                        }
                        changedActive = true;
                    }
                    panel === null || panel === void 0 ? void 0 : panel.content.select(cell);
                }
            });
        };
        /**
         * Filters the ToC by according to selected tags.
         *
         * @param selected - selected tags
         */
        this.filterTags = (selected) => {
            this.setState({ selected });
            this.props.options.updateWidget();
        };
        /**
         * Updates filters.
         */
        this.updateFilters = () => {
            let tmp = [];
            let idx = 0;
            let update = false;
            for (let i = 0; i < this.state.selected.length; i++) {
                if (this.props.tags.indexOf(this.state.selected[i]) > -1) {
                    tmp[idx] = this.state.selected[i];
                    idx += 1;
                }
                else if (this.props.options.showTags === true) {
                    update = true;
                }
            }
            if (update) {
                this.filterTags(tmp);
                this.setState({ selected: tmp });
            }
        };
        this.state = {
            selected: this.props.inputFilter
        };
        const translator = this.props.translator || _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__.nullTranslator;
        this._trans = translator.load('jupyterlab');
    }
    /**
     * Returns a list of selected tags.
     *
     * @returns tag list
     */
    get filtered() {
        return this.state.selected;
    }
    /**
     * Checks whether a cell has a provided tag.
     *
     * @param tag - tag
     * @param cell - cell reference
     * @returns boolean indicating whether a cell has a provided tag
     */
    containsTag(tag, cell) {
        if (cell === null) {
            return false;
        }
        let tagList = cell.model.metadata.get('tags');
        if (tagList) {
            for (let i = 0; i < tagList.length; i++) {
                if (tagList[i] === tag) {
                    return true;
                }
            }
            return false;
        }
    }
    /**
     * Updates filters.
     */
    UNSAFE_componentWillUpdate() {
        this.updateFilters();
    }
    /**
     * Renders the interior of the tag dropdown.
     *
     * @returns rendered component
     */
    render() {
        let jsx = (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "toc-no-tags-div" }, this._trans.__('No Tags Available')));
        let text;
        if (this.state.selected.length === 0) {
            text = (react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", { className: 'toc-filter-button-na' }, this._trans.__('Clear Filters')));
        }
        else if (this.state.selected.length === 1) {
            text = (react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", { className: 'toc-filter-button', onClick: () => this.deselectAll() },
                ' ',
                "Clear 1 Filter",
                ' '));
        }
        else {
            text = (react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", { className: 'toc-filter-button', onClick: () => this.deselectAll() },
                ' ',
                "Clear ",
                this.state.selected.length,
                " Filters",
                ' '));
        }
        let command;
        if (this.state.selected.length === 0) {
            command = (react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", { className: 'toc-filter-button-na', role: "text", "aria-label": this._trans.__('Select All Cells With Current Tags'), title: this._trans.__('Select All Cells With Current Tags') }, this._trans.__('Select All Cells With Current Tags')));
        }
        else {
            command = (react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", { className: 'toc-filter-button', role: "button", "aria-label": this._trans.__('Select All Cells With Current Tags'), title: this._trans.__('Select All Cells With Current Tags'), onClick: this.selectAllCellsWithCurrentTags, onKeyDown: this.selectAllCellsWithCurrentTags }, this._trans.__('Select All Cells With Current Tags')));
        }
        if (this.props.tags && this.props.tags.length > 0) {
            jsx = (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'toc-tags-container' },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_tag_list__WEBPACK_IMPORTED_MODULE_2__.TagListComponent, { tags: this.props.tags, selectionStateHandler: this.changeSelectionState, selectedTags: this.state.selected }),
                text,
                command));
        }
        return jsx;
    }
}
/**
 * Exports.
 */

//# sourceMappingURL=index.js.map

/***/ }),

/***/ 31070:
/*!**********************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/tag.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TagComponent": () => (/* binding */ TagComponent)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ 2411);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.

/**
 * Abstract class defining a React component containing one tag label.
 *
 * @private
 */
class TagComponent extends react__WEBPACK_IMPORTED_MODULE_0__.Component {
    /**
     * Returns a React component.
     *
     * @param props - properties
     * @returns component
     */
    constructor(props) {
        super(props);
    }
    /**
     * Renders a component.
     *
     * @returns rendered component
     */
    render() {
        const tag = this.props.tag;
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "toc-tag-label", key: new Date().toLocaleTimeString() }, tag)));
    }
}
/**
 * Exports.
 */

//# sourceMappingURL=tag.js.map

/***/ }),

/***/ 78038:
/*!***************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/tag_list.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TagListComponent": () => (/* binding */ TagListComponent)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ 2411);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _tag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tag */ 31070);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.


/**
 * Class for a React component that renders all tags in a list.
 *
 * @private
 */
class TagListComponent extends react__WEBPACK_IMPORTED_MODULE_0__.Component {
    /**
     * Returns a React component.
     *
     * @param props - properties
     * @returns component
     */
    constructor(props) {
        super(props);
        /**
         * Toggles whether a tag is selected when clicked.
         *
         * @param name - tag name
         */
        this.selectedTagWithName = (name) => {
            if (this.props.selectedTags.indexOf(name) >= 0) {
                this.props.selectionStateHandler(name, false);
            }
            else {
                this.props.selectionStateHandler(name, true);
            }
        };
        /**
         * Renders a tag component for each tag within a list of tags.
         *
         * @param tags - list of tags
         */
        this.renderTagComponents = (tags) => {
            const selectedTags = this.props.selectedTags;
            const selectedTagWithName = this.selectedTagWithName;
            return tags.map((tag, index) => {
                const tagClass = selectedTags.indexOf(tag) >= 0
                    ? 'toc-selected-tag toc-tag'
                    : 'toc-unselected-tag toc-tag';
                return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { key: tag, className: tagClass, onClick: event => {
                        selectedTagWithName(tag);
                    }, tabIndex: 0 },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_tag__WEBPACK_IMPORTED_MODULE_1__.TagComponent, { selectionStateHandler: this.props.selectionStateHandler, selectedTags: this.props.selectedTags, tag: tag })));
            });
        };
        this.state = { selected: this.props.selectedTags };
    }
    /**
     * Renders the list of tags in the ToC tags dropdown.
     *
     * @returns rendered list
     */
    render() {
        let tags = this.props.tags;
        let jsx = null;
        if (tags) {
            jsx = this.renderTagComponents(tags);
        }
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "toc-tag-holder" }, jsx);
    }
}
/**
 * Exports.
 */

//# sourceMappingURL=tag_list.js.map

/***/ }),

/***/ 93832:
/*!***************************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/notebook/toolbar_generator.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toolbar": () => (/* binding */ toolbar)
/* harmony export */ });
/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/ui-components */ 65995);
/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ 2411);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _tagstool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tagstool */ 30923);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.



/**
 * Returns a component for rendering a notebook table of contents toolbar.
 *
 * @private
 * @param options - generator options
 * @param tracker - notebook tracker
 * @returns toolbar component
 */
function toolbar(options, tracker) {
    return class Toolbar extends react__WEBPACK_IMPORTED_MODULE_1__.Component {
        /**
         * Returns a component for rendering a notebook table of contents toolbar.
         *
         * @param props - toolbar properties
         * @returns toolbar component
         */
        constructor(props) {
            super(props);
            this._trans = options.translator.load('jupyterlab');
            this.tagTool = null;
            this.state = {
                showCode: true,
                showMarkdown: false,
                showTags: false,
                numbering: false
            };
            if (tracker.currentWidget) {
                // Read saved user settings in notebook meta data:
                void tracker.currentWidget.context.ready.then(() => {
                    if (tracker.currentWidget) {
                        tracker.currentWidget.content.activeCellChanged.connect(() => {
                            options.updateWidget();
                        });
                        const numbering = tracker.currentWidget.model.metadata.get('toc-autonumbering');
                        const showCode = tracker.currentWidget.model.metadata.get('toc-showcode');
                        const showMarkdown = tracker.currentWidget.model.metadata.get('toc-showmarkdowntxt');
                        const showTags = tracker.currentWidget.model.metadata.get('toc-showtags');
                        options.initializeOptions(numbering || options.numbering, options.numberingH1, options.includeOutput, options.syncCollapseState, showCode || options.showCode, showMarkdown || options.showMarkdown, showTags || options.showTags);
                        this.setState({
                            showCode: options.showCode,
                            showMarkdown: options.showMarkdown,
                            showTags: options.showTags,
                            numbering: options.numbering
                        });
                        this.tags = [];
                    }
                });
            }
        }
        /**
         * Toggle whether to show code previews.
         */
        toggleCode() {
            options.showCode = !options.showCode;
            this.setState({ showCode: options.showCode });
        }
        /**
         * Toggle whether to show Markdown previews.
         */
        toggleMarkdown() {
            options.showMarkdown = !options.showMarkdown;
            this.setState({ showMarkdown: options.showMarkdown });
        }
        /**
         * Toggle whether to number headings.
         */
        toggleNumbering() {
            options.numbering = !options.numbering;
            this.setState({ numbering: options.numbering });
        }
        /**
         * Toggle tag dropdown.
         */
        toggleTagDropdown() {
            if (options.showTags && this.tagTool) {
                options.storeTags = this.tagTool.state.selected;
            }
            options.showTags = !options.showTags;
            this.setState({ showTags: options.showTags });
        }
        /**
         * Loads all document tags.
         */
        loadTags() {
            const notebook = tracker.currentWidget;
            if (notebook) {
                const cells = notebook.model.cells;
                const tags = new Set();
                this.tags = [];
                for (let i = 0; i < cells.length; i++) {
                    const cell = cells.get(i);
                    const list = cell.metadata.get('tags');
                    if (Array.isArray(list)) {
                        list.forEach((tag) => tag && tags.add(tag));
                    }
                }
                this.tags = Array.from(tags);
            }
        }
        /**
         * Renders a toolbar.
         *
         * @returns rendered toolbar
         */
        render() {
            const codeToggleIcon = (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { onClick: event => this.toggleCode(), role: "text", "aria-label": this._trans.__('Toggle Code Cells'), title: this._trans.__('Toggle Code Cells'), className: this.state.showCode
                    ? 'toc-toolbar-code-icon toc-toolbar-icon-selected'
                    : 'toc-toolbar-code-icon toc-toolbar-icon' },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_0__.codeIcon.react, null)));
            const markdownToggleIcon = (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { onClick: event => this.toggleMarkdown(), role: "text", "aria-label": this._trans.__('Toggle Markdown Text Cells'), title: this._trans.__('Toggle Markdown Text Cells'), className: this.state.showMarkdown
                    ? 'toc-toolbar-icon-selected'
                    : 'toc-toolbar-icon' },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_0__.markdownIcon.react, null)));
            const numberingToggleIcon = (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { onClick: event => this.toggleNumbering(), role: "text", "aria-label": this._trans.__('Toggle Auto-Numbering'), title: this._trans.__('Toggle Auto-Numbering'), className: this.state.numbering
                    ? 'toc-toolbar-icon-selected'
                    : 'toc-toolbar-icon' },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_0__.numberingIcon.react, null)));
            let tagDropdown = react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", null);
            let tagToggleIcon = (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { role: "text", "aria-label": this._trans.__('Show Tags Menu'), title: this._trans.__('Show Tags Menu'), className: this.state.showTags
                    ? 'toc-toolbar-icon-selected'
                    : 'toc-toolbar-icon' },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_0__.tagIcon.react, null)));
            if (this.state.showTags) {
                this.loadTags();
                const tagTool = (react__WEBPACK_IMPORTED_MODULE_1__.createElement(_tagstool__WEBPACK_IMPORTED_MODULE_2__.TagsToolComponent, { tags: this.tags, tracker: tracker, options: options, inputFilter: options.storeTags, translator: options.translator, ref: tagTool => (this.tagTool = tagTool) }));
                options.tagTool = this.tagTool;
                tagDropdown = react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'toc-tag-dropdown' },
                    " ",
                    tagTool,
                    " ");
            }
            return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", null,
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'toc-toolbar' },
                    codeToggleIcon,
                    markdownToggleIcon,
                    numberingToggleIcon,
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'toc-tag-dropdown-button', onClick: event => this.toggleTagDropdown() }, tagToggleIcon)),
                tagDropdown));
        }
    };
}
/**
 * Exports.
 */

//# sourceMappingURL=toolbar_generator.js.map

/***/ }),

/***/ 15547:
/*!*************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/python/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPythonGenerator": () => (/* binding */ createPythonGenerator)
/* harmony export */ });
/* harmony import */ var _render__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./render */ 33366);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.

/**
 * Generates a table of contents.
 *
 * @private
 * @param editor - editor widget
 * @returns a list of headings
 */
function generate(editor) {
    // Split the text into lines:
    let lines = editor.content.model.value.text.split('\n');
    // Iterate over the lines to get the heading level and text for each line:
    let headings = [];
    let processingImports = false;
    for (let i = 0; i < lines.length; i++) {
        let line = lines[i].trim();
        if (line.indexOf('def ') === 0) {
            processingImports = false;
            headings.push({
                text: line.slice(0, -1),
                level: 2,
                onClick: onClick(i)
            });
        }
        else if (line.indexOf('class ') === 0) {
            processingImports = false;
            headings.push({
                text: line.slice(0, -1),
                level: 1,
                onClick: onClick(i)
            });
        }
        else if (line.indexOf('import ') == 0 && !processingImports) {
            processingImports = true;
            headings.push({
                text: line,
                level: 2,
                onClick: onClick(i)
            });
        }
    }
    return headings;
    /**
     * Returns a "click" handler.
     *
     * @private
     * @param line - line number
     * @returns click handler
     */
    function onClick(line) {
        return () => {
            editor.content.editor.setCursorPosition({
                line: line,
                column: 0
            });
        };
    }
}
/**
 * Returns a boolean indicating whether this ToC generator is enabled.
 *
 * @private
 * @param editor - editor widget
 * @returns boolean indicating whether this ToC generator is enabled
 */
function isEnabled(editor) {
    let mime = editor.content.model.mimeType;
    return mime === 'application/x-python-code' || mime === 'text/x-python';
}
/**
 * Returns a ToC generator for Python files.
 *
 * @private
 * @param tracker - file editor tracker
 * @returns ToC generator capable of parsing Python files
 */
function createPythonGenerator(tracker) {
    return {
        tracker,
        isEnabled: isEnabled,
        itemRenderer: _render__WEBPACK_IMPORTED_MODULE_0__.render,
        generate: generate
    };
}
/**
 * Exports.
 */

//# sourceMappingURL=index.js.map

/***/ }),

/***/ 33366:
/*!**************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/generators/python/render.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ 2411);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.

/**
 * Renders a Python table of contents item.
 *
 * @private
 * @param item - numbered heading
 * @returns rendered item
 */
function render(item) {
    let fontSizeClass = 'toc-level-size-' + item.level;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: fontSizeClass + ' toc-entry-holder' },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "jp-Collapser p-Widget lm-Widget" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "toc-Collapser-child" })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { className: "header-cell toc-cell-item" },
            " ",
            item.text,
            " ")));
}
/**
 * Exports.
 */

//# sourceMappingURL=render.js.map

/***/ }),

/***/ 59261:
/*!*******************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLatexGenerator": () => (/* reexport safe */ _generators__WEBPACK_IMPORTED_MODULE_0__.createLatexGenerator),
/* harmony export */   "createMarkdownGenerator": () => (/* reexport safe */ _generators__WEBPACK_IMPORTED_MODULE_0__.createMarkdownGenerator),
/* harmony export */   "createNotebookGenerator": () => (/* reexport safe */ _generators__WEBPACK_IMPORTED_MODULE_0__.createNotebookGenerator),
/* harmony export */   "createPythonGenerator": () => (/* reexport safe */ _generators__WEBPACK_IMPORTED_MODULE_0__.createPythonGenerator),
/* harmony export */   "createRenderedMarkdownGenerator": () => (/* reexport safe */ _generators__WEBPACK_IMPORTED_MODULE_0__.createRenderedMarkdownGenerator),
/* harmony export */   "ITableOfContentsRegistry": () => (/* reexport safe */ _registry__WEBPACK_IMPORTED_MODULE_1__.ITableOfContentsRegistry),
/* harmony export */   "TableOfContentsRegistry": () => (/* reexport safe */ _registry__WEBPACK_IMPORTED_MODULE_1__.TableOfContentsRegistry),
/* harmony export */   "TableOfContents": () => (/* reexport safe */ _toc__WEBPACK_IMPORTED_MODULE_2__.TableOfContents),
/* harmony export */   "TOCItem": () => (/* reexport safe */ _toc_item__WEBPACK_IMPORTED_MODULE_3__.TOCItem),
/* harmony export */   "runNestedCodeCells": () => (/* reexport safe */ _utils_headings__WEBPACK_IMPORTED_MODULE_4__.runNestedCodeCells)
/* harmony export */ });
/* harmony import */ var _generators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generators */ 36695);
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registry */ 80631);
/* harmony import */ var _toc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./toc */ 97957);
/* harmony import */ var _toc_item__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./toc_item */ 89032);
/* harmony import */ var _utils_headings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/headings */ 85683);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
/**
 * @packageDocumentation
 * @module toc
 */
// Note: keep in alphabetical order...





//# sourceMappingURL=index.js.map

/***/ }),

/***/ 80631:
/*!**********************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/registry.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ITableOfContentsRegistry": () => (/* binding */ ITableOfContentsRegistry),
/* harmony export */   "TableOfContentsRegistry": () => (/* binding */ TableOfContentsRegistry)
/* harmony export */ });
/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lumino/coreutils */ 9727);
/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _lumino_signaling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lumino/signaling */ 75138);
/* harmony import */ var _lumino_signaling__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lumino_signaling__WEBPACK_IMPORTED_MODULE_1__);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.


/* tslint:disable */
/**
 * Table of contents registry token.
 */
const ITableOfContentsRegistry = new _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__.Token('@jupyterlab/toc:ITableOfContentsRegistry');
/* tslint:enable */
/**
 * Class for registering widgets for which we can generate a table of contents.
 */
class TableOfContentsRegistry {
    constructor() {
        this._collapseChanged = new _lumino_signaling__WEBPACK_IMPORTED_MODULE_1__.Signal(this);
        this._generators = [];
    }
    /**
     * Finds a table of contents generator for a widget.
     *
     * ## Notes
     *
     * -   If unable to find a table of contents generator, the method return `undefined`.
     *
     * @param widget - widget
     * @returns table of contents generator
     */
    find(widget) {
        for (let i = 0; i < this._generators.length; i++) {
            const gen = this._generators[i];
            if (gen.tracker.has(widget)) {
                if (gen.isEnabled && !gen.isEnabled(widget)) {
                    continue;
                }
                return gen;
            }
        }
    }
    /**
     * Adds a table of contents generator to the registry.
     *
     * @param generator - table of contents generator
     */
    add(generator) {
        if (generator.collapseChanged) {
            // If there is a collapseChanged for a given generator, propagate the arguments through the registry's signal
            generator.collapseChanged.connect((sender, args) => {
                this._collapseChanged.emit(args);
            });
        }
        this._generators.push(generator);
    }
    get collapseChanged() {
        return this._collapseChanged;
    }
}
/**
 * Static registry methods.
 */
(function (TableOfContentsRegistry) {
    /**
     * Abstract class for managing options affecting how a table of contents is generated for a particular widget type.
     */
    class IOptionsManager {
    }
    TableOfContentsRegistry.IOptionsManager = IOptionsManager;
})(TableOfContentsRegistry || (TableOfContentsRegistry = {}));
//# sourceMappingURL=registry.js.map

/***/ }),

/***/ 97957:
/*!*****************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/toc.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TableOfContents": () => (/* binding */ TableOfContents)
/* harmony export */ });
/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/coreutils */ 78548);
/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/translation */ 57630);
/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lumino/widgets */ 61389);
/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_lumino_widgets__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ 2411);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-dom */ 43006);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _toc_tree__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./toc_tree */ 77954);
/* harmony import */ var _lumino_signaling__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lumino/signaling */ 75138);
/* harmony import */ var _lumino_signaling__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_lumino_signaling__WEBPACK_IMPORTED_MODULE_5__);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.







/**
 * Timeout for throttling ToC rendering.
 *
 * @private
 */
const RENDER_TIMEOUT = 1000;
/**
 * Widget for hosting a notebook table of contents.
 */
class TableOfContents extends _lumino_widgets__WEBPACK_IMPORTED_MODULE_2__.Widget {
    /**
     * Returns a new table of contents.
     *
     * @param options - options
     * @returns widget
     */
    constructor(options) {
        super();
        this.translator = options.translator || _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_1__.nullTranslator;
        this._docmanager = options.docmanager;
        this._rendermime = options.rendermime;
        this._trans = this.translator.load('jupyterlab');
        this._headings = [];
        this._entryClicked = new _lumino_signaling__WEBPACK_IMPORTED_MODULE_5__.Signal(this);
        this._entryClicked.connect((toc, item) => {
            this.activeEntry = item.props.heading;
        });
        if (this._current) {
            this._headings = this._current.generator.generate(this._current.widget, this._current.generator.options);
        }
    }
    /**
     * Current widget-generator tuple for the ToC.
     */
    get current() {
        return this._current;
    }
    set current(value) {
        // If they are the same as previously, do nothing...
        if (value &&
            this._current &&
            this._current.widget === value.widget &&
            this._current.generator === value.generator) {
            return;
        }
        this._current = value;
        if (this.generator) {
            if (this.generator.toolbarGenerator) {
                this._toolbar = this.generator.toolbarGenerator();
            }
            else {
                this._toolbar = null;
            }
        }
        // Dispose an old activity monitor if one existed...
        if (this._monitor) {
            this._monitor.dispose();
            this._monitor = null;
        }
        // If we are wiping the ToC, update and return...
        if (!this._current) {
            this.update();
            return;
        }
        // Find the document model associated with the widget:
        const context = this._docmanager.contextForWidget(this._current.widget);
        if (!context || !context.model) {
            throw Error('Could not find a context for the Table of Contents');
        }
        // Throttle the rendering rate of the table of contents:
        this._monitor = new _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_0__.ActivityMonitor({
            signal: context.model.contentChanged,
            timeout: RENDER_TIMEOUT
        });
        this._monitor.activityStopped.connect(this.update, this);
        this.update();
    }
    /**
     * Current table of contents generator.
     *
     * @returns table of contents generator
     */
    get generator() {
        if (this._current) {
            return this._current.generator;
        }
        return null;
    }
    /**
     * Callback invoked upon an update request.
     *
     * @param msg - message
     */
    onUpdateRequest(msg) {
        let title = this._trans.__('Table of Contents');
        if (this._current) {
            this._headings = this._current.generator.generate(this._current.widget, this._current.generator.options);
            const context = this._docmanager.contextForWidget(this._current.widget);
            if (context) {
                title = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_0__.PathExt.basename(context.localPath);
            }
        }
        let itemRenderer = (item) => {
            return react__WEBPACK_IMPORTED_MODULE_3__.createElement("span", null, item.text);
        };
        if (this._current && this._current.generator.itemRenderer) {
            itemRenderer = this._current.generator.itemRenderer;
        }
        let jsx = (react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { className: "jp-TableOfContents" },
            react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", { className: "jp-stack-panel-header" }, title)));
        if (this._current && this._current.generator) {
            jsx = (react__WEBPACK_IMPORTED_MODULE_3__.createElement(_toc_tree__WEBPACK_IMPORTED_MODULE_6__.TOCTree, { title: title, toc: this._headings, entryClicked: this._entryClicked, generator: this.generator, itemRenderer: itemRenderer, toolbar: this._toolbar }));
        }
        react_dom__WEBPACK_IMPORTED_MODULE_4__.render(jsx, this.node, () => {
            if (this._current &&
                this._current.generator.usesLatex === true &&
                this._rendermime.latexTypesetter) {
                this._rendermime.latexTypesetter.typeset(this.node);
            }
        });
    }
    /**
     * Current active entry.
     *
     * @returns table of contents active entry
     */
    get activeEntry() {
        return this._activeEntry;
    }
    set activeEntry(value) {
        this._activeEntry = value;
    }
    /**
     * List of headings.
     *
     * @returns table of contents list of headings
     */
    get headings() {
        return this._headings;
    }
    /**
     * Callback invoked to re-render after showing a table of contents.
     *
     * @param msg - message
     */
    onAfterShow(msg) {
        this.update();
    }
}
//# sourceMappingURL=toc.js.map

/***/ }),

/***/ 89032:
/*!**********************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/toc_item.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TOCItem": () => (/* binding */ TOCItem)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ 2411);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.

/**
 * React component for a table of contents entry.
 *
 * @private
 */
class TOCItem extends react__WEBPACK_IMPORTED_MODULE_0__.Component {
    /**
     * Renders a table of contents entry.
     *
     * @returns rendered entry
     */
    render() {
        const { heading, toc } = this.props;
        // Create an onClick handler for the TOC item
        // that scrolls the anchor into view.
        const onClick = (event) => {
            var _a;
            event.preventDefault();
            event.stopPropagation();
            (_a = this.props.entryClicked) === null || _a === void 0 ? void 0 : _a.emit(this);
            heading.onClick();
        };
        let content = this.props.itemRenderer(heading, toc);
        if (!content) {
            return null;
        }
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { className: "jp-tocItem", onClick: onClick, onContextMenu: (event) => {
                var _a;
                (_a = this.props.entryClicked) === null || _a === void 0 ? void 0 : _a.emit(this);
                heading.onClick();
            } }, content));
    }
}
/**
 * Exports.
 */

//# sourceMappingURL=toc_item.js.map

/***/ }),

/***/ 77954:
/*!**********************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/toc_tree.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TOCTree": () => (/* binding */ TOCTree)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ 2411);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _toc_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toc_item */ 89032);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.


/**
 * React component for a table of contents tree.
 *
 * @private
 */
class TOCTree extends react__WEBPACK_IMPORTED_MODULE_0__.Component {
    /**
     * Renders a table of contents tree.
     */
    render() {
        const Toolbar = this.props.toolbar;
        // Map the heading objects onto a list of JSX elements...
        let i = 0;
        let list = this.props.toc.map(el => {
            return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_toc_item__WEBPACK_IMPORTED_MODULE_1__.TOCItem, { heading: el, toc: this.props.toc, entryClicked: this.props.entryClicked, itemRenderer: this.props.itemRenderer, key: `${el.text}-${el.level}-${i++}` }));
        });
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "jp-TableOfContents" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "jp-stack-panel-header" }, this.props.title),
            Toolbar && react__WEBPACK_IMPORTED_MODULE_0__.createElement(Toolbar, null),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", { className: "jp-TableOfContents-content" }, list)));
    }
}
/**
 * Exports.
 */

//# sourceMappingURL=toc_tree.js.map

/***/ }),

/***/ 85885:
/*!**************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/utils/generate_numbering.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "generateNumbering": () => (/* binding */ generateNumbering)
/* harmony export */ });
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
// Maximum heading level:
const MAX_HEADING_LEVEL = 6;
/**
 * Updates numbering dictionary levels.
 *
 * ## Notes
 *
 * -   Mutates a provided dictionary.
 *
 * @private
 * @param dict - numbering dictionary
 * @param level - current level
 * @returns input dictionary
 */
function update(dict, level) {
    for (let l = level + 1; l <= MAX_HEADING_LEVEL; l++) {
        if (dict[l] !== void 0) {
            dict[l] = void 0;
        }
    }
    if (dict[level] === void 0) {
        dict[level] = 1;
    }
    else {
        dict[level] += 1;
    }
    return dict;
}
/**
 * Generate the current numbering based on a provided numbering dictionary and the current level.
 *
 * @private
 * @param dict - numbering dictionary
 * @param level - current level
 * @returns numbering
 */
function generateNumbering(dict, level) {
    if (dict === null) {
        return;
    }
    let numbering = '';
    dict = update(dict, level);
    if (level >= 1) {
        for (let j = 1; j <= level; j++) {
            numbering += (dict[j] === void 0 ? '0' : dict[j]) + '.';
        }
        numbering += ' ';
    }
    return numbering;
}
/**
 * Exports.
 */

//# sourceMappingURL=generate_numbering.js.map

/***/ }),

/***/ 85683:
/*!****************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/utils/headings.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "runNestedCodeCells": () => (/* binding */ runNestedCodeCells)
/* harmony export */ });
/* harmony import */ var _jupyterlab_cells__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/cells */ 96462);
/* harmony import */ var _jupyterlab_cells__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_cells__WEBPACK_IMPORTED_MODULE_0__);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.

/**
 * Tests whether a heading is a notebook heading.
 *
 * @param heading - heading to test
 * @returns boolean indicating whether a heading is a notebook heading
 */
const isNotebookHeading = (heading) => {
    return heading.type !== undefined && heading.cellRef !== undefined;
};
/**
 * Runs runnable code cells.
 *
 * @private
 * @param headings - list of headings
 * @param heading - heading
 */
const runNestedCodeCells = (headings, heading) => {
    var _a;
    let h;
    let i;
    if (!isNotebookHeading(heading)) {
        return;
    }
    let runCode = [];
    // Find the heading in the list of headings...
    i = headings.indexOf(heading);
    // Check if the current heading is a "code" heading...
    h = heading;
    if (h.type === 'code') {
        runCode.push(h);
    }
    else {
        // Check for nested code headings...
        const level = heading.level;
        for (i = i + 1; i < headings.length; i++) {
            h = headings[i];
            if (h.level <= level) {
                break;
            }
            if (h.type === 'code') {
                runCode.push(h);
            }
        }
    }
    // Run each of the associated code cells...
    for (i = 0; i < runCode.length; i++) {
        if (runCode[i].cellRef) {
            const cell = runCode[i].cellRef;
            const panel = (_a = cell.parent) === null || _a === void 0 ? void 0 : _a.parent;
            if (panel) {
                void _jupyterlab_cells__WEBPACK_IMPORTED_MODULE_0__.CodeCell.execute(cell, panel.sessionContext);
            }
        }
    }
};

//# sourceMappingURL=headings.js.map

/***/ }),

/***/ 43655:
/*!**************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/utils/is_dom.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isDOM": () => (/* binding */ isDOM)
/* harmony export */ });
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
/**
 * Returns whether a MIME type corresponds to either HTML or virtual DOM.
 *
 * @private
 * @param mime - MIME type string
 * @returns boolean indicating whether a provided MIME type corresponds to either HTML or virtual DOM
 *
 * @example
 * const bool = isDOM('text/html');
 * // returns true
 *
 * @example
 * const bool = isDOM('text/plain');
 * // returns false
 */
function isDOM(mime) {
    return mime === 'application/vdom.v1+json' || mime === 'text/html';
}
/**
 * Exports.
 */

//# sourceMappingURL=is_dom.js.map

/***/ }),

/***/ 77540:
/*!*******************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/utils/is_markdown.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isMarkdown": () => (/* binding */ isMarkdown)
/* harmony export */ });
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
/**
 * Returns whether a MIME type corresponds to a Markdown flavor.
 *
 * @private
 * @param mime - MIME type string
 * @returns boolean indicating whether a provided MIME type corresponds to a Markdown flavor
 *
 * @example
 * const bool = isMarkdown('text/markdown');
 * // returns true
 *
 * @example
 * const bool = isMarkdown('text/plain');
 * // returns false
 */
function isMarkdown(mime) {
    return (mime === 'text/x-ipythongfm' ||
        mime === 'text/x-markdown' ||
        mime === 'text/x-gfm' ||
        mime === 'text/markdown');
}
/**
 * Exports.
 */

//# sourceMappingURL=is_markdown.js.map

/***/ }),

/***/ 28038:
/*!*********************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/utils/parse_heading.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseHeading": () => (/* binding */ parseHeading)
/* harmony export */ });
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
/**
 * Parses a heading, if one exists, from a provided string.
 *
 * ## Notes
 *
 * -   Heading examples:
 *
 *     -   Markdown heading:
 *
 *         ```
 *         # Foo
 *         ```
 *
 *     -   Markdown heading (alternative style):
 *
 *         ```
 *         Foo
 *         ===
 *         ```
 *
 *         ```
 *         Foo
 *         ---
 *         ```
 *
 *     -   HTML heading:
 *
 *         ```
 *         <h3>Foo</h3>
 *         ```
 *
 * @private
 * @param str - input text
 * @returns heading info
 *
 * @example
 * const out = parseHeading('### Foo\n');
 * // returns {'text': 'Foo', 'level': 3, 'type': 'markdown'}
 *
 * @example
 * const out = parseHeading('Foo\n===\n');
 * // returns {'text': 'Foo', 'level': 1, 'type': 'markdown-alt'}
 *
 * @example
 * const out = parseHeading('<h4>Foo</h4>\n');
 * // returns {'text': 'Foo', 'level': 4, 'type': 'html'}
 *
 * @example
 * const out = parseHeading('Foo');
 * // returns null
 */
function parseHeading(str) {
    const lines = str.split('\n');
    // Case: Markdown heading
    let match = lines[0].match(/^([#]{1,6}) (.*)/);
    if (match) {
        return {
            text: match[2].replace(/\[(.+)\]\(.+\)/g, '$1'),
            level: match[1].length,
            type: 'markdown'
        };
    }
    // Case: Markdown heading (alternative style)
    if (lines.length > 1) {
        match = lines[1].match(/^ {0,3}([=]{2,}|[-]{2,})\s*$/);
        if (match) {
            return {
                text: lines[0].replace(/\[(.+)\]\(.+\)/g, '$1'),
                level: match[1][0] === '=' ? 1 : 2,
                type: 'markdown-alt'
            };
        }
    }
    // Case: HTML heading (WARNING: this is not particularly robust, as HTML headings can span multiple lines)
    match = lines[0].match(/<h([1-6]).*>(.*)<\/h\1>/i);
    if (match) {
        return {
            text: match[2],
            level: parseInt(match[1], 10),
            type: 'html'
        };
    }
    return null;
}
/**
 * Exports.
 */

//# sourceMappingURL=parse_heading.js.map

/***/ }),

/***/ 6760:
/*!*************************************************************************!*\
  !*** ../../node_modules/@jupyterlab/toc/lib/utils/sanitizer_options.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sanitizerOptions": () => (/* binding */ sanitizerOptions)
/* harmony export */ });
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
/**
 * Allowed HTML tags and associated attributes for ToC entries when sanitizing HTML headings.
 *
 * ## Notes
 *
 * -   We specifically disallow anchor tags, since we are adding our own.
 *
 * @private
 */
const sanitizerOptions = {
    allowedTags: [
        'p',
        'blockquote',
        'b',
        'i',
        'strong',
        'em',
        'strike',
        'code',
        'br',
        'div',
        'span',
        'pre',
        'del'
    ],
    allowedAttributes: {
        // Allow "class" attribute for <code> tags.
        code: ['class'],
        // Allow "class" attribute for <span> tags.
        span: ['class'],
        // Allow "class" attribute for <div> tags.
        div: ['class'],
        // Allow "class" attribute for <p> tags.
        p: ['class'],
        // Allow "class" attribute for <pre> tags.
        pre: ['class']
    }
};
/**
 * Exports.
 */

//# sourceMappingURL=sanitizer_options.js.map

/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_jupyterlab_toc_lib_index_js.dc28ffacc2dd5f032604.js.map