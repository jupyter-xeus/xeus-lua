{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/components/group.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/components/hover.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/components/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/components/progressBar.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/components/text.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/defaults/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/defaults/kernelStatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/defaults/lineCol.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/defaults/runningSessions.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/statusbar.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/style/layout.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/style/lineForm.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/style/progressBar.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/style/statusbar.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/style/text.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/style/variables.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/statusbar/lib/tokens.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA,cAAc,SAAI,IAAI,SAAI;AAC1B;AACA;AACA;AACA;AACA,4DAA4D,cAAc;AAC1E;AACA;AACA;AACA;AACA;AAC+B;AACgB;AACa;AAC5D,wBAAwB,oDAAK,CAAC,uDAAY,EAAE,sDAAW;AACvD;AACA;AACA;AACO;AACP,WAAW,+BAA+B;AAC1C,wBAAwB,iDAAoB;AAC5C,YAAY,gDAAmB,uBAAuB,YAAY,sDAAO,8BAA8B,SAAS,+CAAkB;AAClI;AACA,mBAAmB,gDAAmB,SAAS,SAAS,iBAAiB,QAAQ,KAAK,EAAE;AACxF;AACA;AACA,mBAAmB,gDAAmB,SAAS,SAAS,gBAAgB,QAAQ,KAAK,EAAE;AACvF;AACA;AACA,mBAAmB,gDAAmB,SAAS,SAAS,gBAAgB,QAAQ,KAAK,EAAE;AACvF;AACA,KAAK;AACL;AACA,iC;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACgD;AACM;AAChB;AAC4B;AAClE,kBAAkB,oDAAK;AACvB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO,oBAAoB,mDAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,wDAAW;AACrD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAa;AACrB;AACA,8BAA8B,yDAAW;AACzC,iCAAiC,6DAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yDAAW;AAC5C,8BAA8B,6DAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,iC;;;;;;;;;;;;;;;;;;;;;;;AClJA;AACA;AACwB;AACA;AACM;AACP;AACvB,iC;;;;;;;;;;;;;;;;;;ACNA;AACA;AAC+B;AACoC;AACnE;AACA;AACA;AACO;AACP,YAAY,gDAAmB,SAAS,YAAY,+DAAe,EAAE;AACrE,QAAQ,gDAAmB,UAAU,+BAA+B;AACpE;AACA;AACA;AACA;AACA;AACA,YAAY,gDAAmB,SAAS,YAAY,0DAAU;AAC9D,sBAAsB,iBAAiB;AACvC,SAAS,EAAE;AACX;AACA,uC;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA,cAAc,SAAI,IAAI,SAAI;AAC1B;AACA;AACA;AACA;AACA,4DAA4D,cAAc;AAC1E;AACA;AACA;AACA;AACA;AAC+B;AACS;AACC;AACzC;AACA;AACA;AACO;AACP,WAAW,2BAA2B;AACtC,YAAY,gDAAmB,wBAAwB,YAAY,sDAAO,CAAC,iDAAQ,4BAA4B;AAC/G;AACA,gC;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAC+B;AACL;AACQ;AAClC,iC;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AAC+D;AAClB;AACY;AACb;AAClB;AACqB;AAC/C;AACA;AACA;AACA;AACA,2CAA2C,mEAAc;AACzD;AACA;AACA;AACA,2BAA2B,iEAAc,yBAAyB;AAClE;AACA,YAAY,0DAAmB,CAAC,uCAAQ,GAAG,wCAAwC,iBAAiB,EAAE,WAAW,gEAAgE;AACjL;AACA;AACA;AACA;AACO,2BAA2B,8DAAY;AAC9C;AACA;AACA;AACA;AACA;AACA,wCAAwC,mEAAc;AACtD;AACA,sBAAsB,8CAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0DAAmB,yBAAyB,mKAAmK;AACnO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,uCAAuC,mEAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oLAAoL;AACpL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gEAAiB;AACjC;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC,wC;;;;;;;;;;;;;;;;;;;;;;;;;;ACzIA;AACA;AAC4E;AACnB;AACA;AAC/B;AACc;AACkB;AAC6H;AACvL;AACA;AACA;AACA,gCAAgC,wDAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA,8CAA8C,mEAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,SAAS,YAAY,2DAAc,EAAE;AACxE,YAAY,0DAAmB,UAAU,yEAAyE;AAClH,gBAAgB,0DAAmB,SAAS,YAAY,sDAAO,CAAC,4DAAe,+CAA+C,uEAA0B,eAAe;AACvK,oBAAoB,0DAAmB,WAAW,0BAA0B,0DAAa;AACzF;AACA,yBAAyB,EAAE;AAC3B,oBAAoB,0DAAmB,SAAS,YAAY,8DAAiB,EAAE;AAC/E,wBAAwB,0DAAmB,CAAC,yEAAkB,GAAG,YAAY,+DAAkB,6BAA6B;AAC5H,wBAAwB,0DAAmB,WAAW,4BAA4B,2DAAc,aAAa;AAC7G,gBAAgB,0DAAmB,WAAW,YAAY,4DAAe,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mEAAc;AACzD;AACA,YAAY,0DAAmB,CAAC,uCAAQ,GAAG,iIAAiI;AAC5K;AACA;AACA;AACA;AACO,sBAAsB,8DAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAe;AACrC,wCAAwC,mEAAc;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0DAAmB,oBAAoB,wHAAwH;AACnL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAkB,CAAC,0DAAmB,qBAAqB,gJAAgJ;AAChO,sBAAsB,4CAAS;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,6CAA6C,6BAA6B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;AAC3B,mC;;;;;;;;;;;;;;;;;;;;;;;;AChNA;AACA;AAC+D;AACN;AACY;AAC3C;AACgC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,CAAC,wCAAS,GAAG,oDAAoD;AAChG,QAAQ,0DAAmB,CAAC,wCAAS,GAAG,wBAAwB;AAChE,YAAY,0DAAmB,CAAC,uCAAQ,GAAG,0BAA0B;AACrE,YAAY,0DAAmB,CAAC,yEAAkB,GAAG,mDAAmD;AACxG,QAAQ,0DAAmB,CAAC,wCAAS,GAAG,wBAAwB;AAChE,YAAY,0DAAmB,CAAC,uCAAQ,GAAG,yBAAyB;AACpE,YAAY,0DAAmB,CAAC,uEAAgB,GAAG,sCAAsC;AACzF;AACA;AACA;AACA;AACO,8BAA8B,8DAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,mEAAc;AAC3D;AACA;AACA;AACA,sBAAsB,8CAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,4BAA4B,iGAAiG;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C;AAC3C,2C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6B;AACF;AACC;AACM;AACT;AACzB,iC;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AAC6C;AAC0B;AACV;AAC2F;AACxJ;AACA;AACA;AACO,wBAAwB,mDAAM;AACrC;AACA;AACA;AACA;AACA;AACA,gCAAgC,6DAAa;AAC7C,sBAAsB,uDAAQ;AAC9B,8CAA8C,wDAAW;AACzD,gDAAgD,kDAAK;AACrD,qDAAqD,kDAAK;AAC1D,kDAAkD,kDAAK;AACvD,2BAA2B,kDAAS;AACpC,2BAA2B,sDAAa;AACxC,6BAA6B,kDAAS;AACtC,4BAA4B,kDAAS;AACrC,4BAA4B,uDAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,GAAG;AAC9C;AACA;AACA,6DAA6D;AAC7D,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,qCAAqC,kDAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8DAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8DAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,+BAA+B,kEAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sEAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;AAC3B,qC;;;;;;;;;;;;;;;;;;AC9IA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA,kC;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACsC;AAC/B,kBAAkB,oDAAK;AAC9B;AACA,CAAC;AACM,uBAAuB,oDAAK;AACnC;AACA;AACA;AACA;AACA;AACA,CAAC;AACM,wBAAwB,oDAAK;AACpC;AACA;AACA;AACA;AACA,CAAC;AACM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,0BAA0B,oDAAK;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC;AACM,2BAA2B,oDAAK;AACvC;AACA;AACA;AACA;AACA;AACA,CAAC;AACM,uBAAuB,oDAAK;AACnC;AACA;AACA;AACA;AACA,CAAC;AACM,wBAAwB,oDAAK;AACpC;AACA;AACA;AACA;AACA;AACA,CAAC;AACM,mCAAmC,oDAAK;AAC/C;AACA;AACA,CAAC;AACM,sBAAsB,oDAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oC;;;;;;;;;;;;;;;;;ACtEA;AACA;AACsC;AAC/B,wBAAwB,oDAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACM,mBAAmB,oDAAK;AAC/B;AACA;AACA,CAAC;AACD,uC;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACsC;AAC4B;AAChC;AACH;AAC/B;AACA,iBAAiB,2DAAgB;AACjC,kBAAkB,2DAAgB;AAClC;AACA;AACA;AACA;AACA,6BAA6B,0DAAe;AAC5C;AACA;AACA;AACA;AACA,qBAAqB,0DAAe;AACpC;AACA,eAAe,2CAAQ;AACvB,mBAAmB,8DAAmB;AACtC;AACA;AACA;AACO,kBAAkB,oDAAK;AAC9B,gBAAgB,+DAAoB;AACpC,eAAe,sDAAW;AAC1B;AACA,iBAAiB,gEAAqB;AACtC,kBAAkB,gEAAqB;AACvC,CAAC,EAAE,iDAAY;AACR,aAAa,oDAAK,CAAC,iDAAY;AAC/B,iBAAiB,oDAAK,CAAC,gDAAW;AAClC,kBAAkB,oDAAK,CAAC,gDAAW;AACnC,aAAa,oDAAK;AACzB,eAAe,sDAAW;AAC1B,gBAAgB,0DAAe;AAC/B,iBAAiB,0DAAe;AAChC,YAAY,sDAAW;AACvB,gBAAgB,0DAAe;AAC/B,kBAAkB,4DAAiB;AACnC,WAAW,yDAAc;AACzB,CAAC;AACM,oBAAoB,oDAAK;AACzB,wBAAwB,oDAAK;AACpC,qC;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACsC;AACP;AACxB;AACP,cAAc,wDAAa;AAC3B,gBAAgB,0DAAe;AAC/B;AACO,iBAAiB,oDAAK;AAC7B;AACA,WAAW,yDAAc;AACzB,CAAC;AACD,gC;;;;;;;;;;;;;;;ACZA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;AACF,qC;;;;;;;;;;;;;;;;;AChBA;AACA;AAC0C;AAC1C;AACO,uBAAuB,oDAAK;AACnC,kC","file":"vendors-node_modules_jupyterlab_statusbar_lib_index_js.6ec9ccb6e2bab7613175.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { classes, style } from 'typestyle/lib';\nimport { centeredFlex, leftToRight } from '../style/layout';\nconst groupItemLayout = style(centeredFlex, leftToRight);\n/**\n * A tsx component for a set of items logically grouped together.\n */\nexport function GroupItem(props) {\n    const { spacing, children, className } = props, rest = __rest(props, [\"spacing\", \"children\", \"className\"]);\n    const numChildren = React.Children.count(children);\n    return (React.createElement(\"div\", Object.assign({ className: classes(groupItemLayout, className) }, rest), React.Children.map(children, (child, i) => {\n        if (i === 0) {\n            return React.createElement(\"div\", { style: { marginRight: `${spacing}px` } }, child);\n        }\n        else if (i === numChildren - 1) {\n            return React.createElement(\"div\", { style: { marginLeft: `${spacing}px` } }, child);\n        }\n        else {\n            return React.createElement(\"div\", { style: { margin: `0px ${spacing}px` } }, child);\n        }\n    })));\n}\n//# sourceMappingURL=group.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { HoverBox } from '@jupyterlab/apputils';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { style } from 'typestyle/lib';\nimport { clickedItem, interactiveItem } from '../style/statusbar';\nconst hoverItem = style({\n    boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.25)'\n});\n/**\n * Create and show a popup component.\n *\n * @param options - options for the popup\n *\n * @returns the popup that was created.\n */\nexport function showPopup(options) {\n    const dialog = new Popup(options);\n    dialog.launch();\n    return dialog;\n}\n/**\n * A class for a Popup widget.\n */\nexport class Popup extends Widget {\n    /**\n     * Construct a new Popup.\n     */\n    constructor(options) {\n        super();\n        this._body = options.body;\n        this._body.addClass(hoverItem);\n        this._anchor = options.anchor;\n        this._align = options.align;\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(options.body);\n        this._body.node.addEventListener('resize', () => {\n            this.update();\n        });\n    }\n    /**\n     * Attach the popup widget to the page.\n     */\n    launch() {\n        this._setGeometry();\n        Widget.attach(this, document.body);\n        this.update();\n        this._anchor.addClass(clickedItem);\n        this._anchor.removeClass(interactiveItem);\n    }\n    /**\n     * Handle `'update'` messages for the widget.\n     */\n    onUpdateRequest(msg) {\n        this._setGeometry();\n        super.onUpdateRequest(msg);\n    }\n    /**\n     * Handle `'after-attach'` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        document.addEventListener('click', this, false);\n        this.node.addEventListener('keydown', this, false);\n        window.addEventListener('resize', this, false);\n    }\n    /**\n     * Handle `'after-detach'` messages for the widget.\n     */\n    onAfterDetach(msg) {\n        document.removeEventListener('click', this, false);\n        this.node.removeEventListener('keydown', this, false);\n        window.removeEventListener('resize', this, false);\n    }\n    /**\n     * Handle `'resize'` messages for the widget.\n     */\n    onResize() {\n        this.update();\n    }\n    /**\n     * Dispose of the widget.\n     */\n    dispose() {\n        super.dispose();\n        this._anchor.removeClass(clickedItem);\n        this._anchor.addClass(interactiveItem);\n    }\n    /**\n     * Handle DOM events for the widget.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._evtKeydown(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'resize':\n                this.onResize();\n                break;\n            default:\n                break;\n        }\n    }\n    _evtClick(event) {\n        if (!!event.target &&\n            !(this._body.node.contains(event.target) ||\n                this._anchor.node.contains(event.target))) {\n            this.dispose();\n        }\n    }\n    _evtKeydown(event) {\n        // Check for escape key\n        switch (event.keyCode) {\n            case 27: // Escape.\n                event.stopPropagation();\n                event.preventDefault();\n                this.dispose();\n                break;\n            default:\n                break;\n        }\n    }\n    _setGeometry() {\n        let aligned = 0;\n        const anchorRect = this._anchor.node.getBoundingClientRect();\n        const bodyRect = this._body.node.getBoundingClientRect();\n        if (this._align === 'right') {\n            aligned = -(bodyRect.width - anchorRect.width);\n        }\n        const style = window.getComputedStyle(this._body.node);\n        HoverBox.setGeometry({\n            anchor: anchorRect,\n            host: document.body,\n            maxHeight: 500,\n            minHeight: 20,\n            node: this._body.node,\n            offset: {\n                horizontal: aligned\n            },\n            privilege: 'forceAbove',\n            style\n        });\n    }\n}\n//# sourceMappingURL=hover.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nexport * from './group';\nexport * from './hover';\nexport * from './progressBar';\nexport * from './text';\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { fillerItem, progressBarItem } from '../style/progressBar';\n/**\n * A functional tsx component for a progress bar.\n */\nexport function ProgressBar(props) {\n    return (React.createElement(\"div\", { className: progressBarItem },\n        React.createElement(Filler, { percentage: props.percentage })));\n}\n/**\n * A functional tsx component for a partially filled div.\n */\nfunction Filler(props) {\n    return (React.createElement(\"div\", { className: fillerItem, style: {\n            width: `${props.percentage}px`\n        } }));\n}\n//# sourceMappingURL=progressBar.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { classes } from 'typestyle/lib';\nimport { textItem } from '../style/text';\n/**\n * A functional tsx component for a text item.\n */\nexport function TextItem(props) {\n    const { title, source, className } = props, rest = __rest(props, [\"title\", \"source\", \"className\"]);\n    return (React.createElement(\"span\", Object.assign({ className: classes(textItem, className), title: title }, rest), source));\n}\n//# sourceMappingURL=text.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nexport * from './kernelStatus';\nexport * from './lineCol';\nexport * from './runningSessions';\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { Text } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { JSONExt } from '@lumino/coreutils';\nimport React from 'react';\nimport { interactiveItem, TextItem } from '..';\n/**\n * A pure functional component for rendering kernel status.\n */\nfunction KernelStatusComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    let statusText = '';\n    if (props.status) {\n        statusText = ` | ${Text.titleCase(trans.__(props.status))}`;\n    }\n    return (React.createElement(TextItem, { onClick: props.handleClick, source: `${props.kernelName}${statusText}`, title: trans.__('Change kernel for %1', props.activityName) }));\n}\n/**\n * A VDomRenderer widget for displaying the status of a kernel.\n */\nexport class KernelStatus extends VDomRenderer {\n    /**\n     * Construct the kernel status widget.\n     */\n    constructor(opts, translator) {\n        super(new KernelStatus.Model(translator));\n        this.translator = translator || nullTranslator;\n        this._handleClick = opts.onClick;\n        this.addClass(interactiveItem);\n    }\n    /**\n     * Render the kernel status item.\n     */\n    render() {\n        if (this.model === null) {\n            return null;\n        }\n        else {\n            return (React.createElement(KernelStatusComponent, { status: this.model.status, kernelName: this.model.kernelName, activityName: this.model.activityName, handleClick: this._handleClick, translator: this.translator }));\n        }\n    }\n}\n/**\n * A namespace for KernelStatus statics.\n */\n(function (KernelStatus) {\n    /**\n     * A VDomModel for the kernel status indicator.\n     */\n    class Model extends VDomModel {\n        constructor(translator) {\n            super();\n            /**\n             * React to changes to the kernel status.\n             */\n            this._onKernelStatusChanged = () => {\n                var _a;\n                this._kernelStatus = (_a = this._sessionContext) === null || _a === void 0 ? void 0 : _a.kernelDisplayStatus;\n                this.stateChanged.emit(void 0);\n            };\n            /**\n             * React to changes in the kernel.\n             */\n            this._onKernelChanged = (_sessionContext, change) => {\n                var _a;\n                const oldState = this._getAllState();\n                // sync setting of status and display name\n                this._kernelStatus = (_a = this._sessionContext) === null || _a === void 0 ? void 0 : _a.kernelDisplayStatus;\n                this._kernelName = _sessionContext.kernelDisplayName;\n                this._triggerChange(oldState, this._getAllState());\n            };\n            this._activityName = 'activity'; // FIXME-TRANS:?\n            this._kernelStatus = '';\n            this._sessionContext = null;\n            translator = translator || nullTranslator;\n            this._trans = translator.load('jupyterlab');\n            this._kernelName = this._trans.__('No Kernel!');\n        }\n        /**\n         * The name of the kernel.\n         */\n        get kernelName() {\n            return this._kernelName;\n        }\n        /**\n         * The current status of the kernel.\n         */\n        get status() {\n            return this._kernelStatus;\n        }\n        /**\n         * A display name for the activity.\n         */\n        get activityName() {\n            return this._activityName;\n        }\n        set activityName(val) {\n            const oldVal = this._activityName;\n            if (oldVal === val) {\n                return;\n            }\n            this._activityName = val;\n            this.stateChanged.emit(void 0);\n        }\n        /**\n         * The current client session associated with the kernel status indicator.\n         */\n        get sessionContext() {\n            return this._sessionContext;\n        }\n        set sessionContext(sessionContext) {\n            var _a, _b, _c;\n            (_a = this._sessionContext) === null || _a === void 0 ? void 0 : _a.statusChanged.disconnect(this._onKernelStatusChanged);\n            (_b = this._sessionContext) === null || _b === void 0 ? void 0 : _b.kernelChanged.disconnect(this._onKernelChanged);\n            const oldState = this._getAllState();\n            this._sessionContext = sessionContext;\n            this._kernelStatus = sessionContext === null || sessionContext === void 0 ? void 0 : sessionContext.kernelDisplayStatus;\n            this._kernelName = (_c = sessionContext === null || sessionContext === void 0 ? void 0 : sessionContext.kernelDisplayName) !== null && _c !== void 0 ? _c : 'No Kernel'; // FIXME-TRANS: ?\n            sessionContext === null || sessionContext === void 0 ? void 0 : sessionContext.statusChanged.connect(this._onKernelStatusChanged, this);\n            sessionContext === null || sessionContext === void 0 ? void 0 : sessionContext.connectionStatusChanged.connect(this._onKernelStatusChanged, this);\n            sessionContext === null || sessionContext === void 0 ? void 0 : sessionContext.kernelChanged.connect(this._onKernelChanged, this);\n            this._triggerChange(oldState, this._getAllState());\n        }\n        _getAllState() {\n            return [this._kernelName, this._kernelStatus, this._activityName];\n        }\n        _triggerChange(oldState, newState) {\n            if (JSONExt.deepEqual(oldState, newState)) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    KernelStatus.Model = Model;\n})(KernelStatus || (KernelStatus = {}));\n//# sourceMappingURL=kernelStatus.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ReactWidget, VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { lineFormIcon } from '@jupyterlab/ui-components';\nimport React from 'react';\nimport { classes } from 'typestyle/lib';\nimport { interactiveItem, showPopup, TextItem } from '..';\nimport { lineFormButton, lineFormButtonDiv, lineFormButtonIcon, lineFormCaption, lineFormInput, lineFormSearch, lineFormWrapper, lineFormWrapperFocusWithin } from '../style/lineForm';\n/**\n * A component for rendering a \"go-to-line\" form.\n */\nclass LineFormComponent extends React.Component {\n    /**\n     * Construct a new LineFormComponent.\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Handle a change to the value in the input field.\n         */\n        this._handleChange = (event) => {\n            this.setState({ value: event.currentTarget.value });\n        };\n        /**\n         * Handle submission of the input field.\n         */\n        this._handleSubmit = (event) => {\n            event.preventDefault();\n            const value = parseInt(this._textInput.value, 10);\n            if (!isNaN(value) &&\n                isFinite(value) &&\n                1 <= value &&\n                value <= this.props.maxLine) {\n                this.props.handleSubmit(value);\n            }\n            return false;\n        };\n        /**\n         * Handle focusing of the input field.\n         */\n        this._handleFocus = () => {\n            this.setState({ hasFocus: true });\n        };\n        /**\n         * Handle blurring of the input field.\n         */\n        this._handleBlur = () => {\n            this.setState({ hasFocus: false });\n        };\n        this._textInput = null;\n        this.translator = props.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.state = {\n            value: '',\n            hasFocus: false\n        };\n    }\n    /**\n     * Focus the element on mount.\n     */\n    componentDidMount() {\n        this._textInput.focus();\n    }\n    /**\n     * Render the LineFormComponent.\n     */\n    render() {\n        return (React.createElement(\"div\", { className: lineFormSearch },\n            React.createElement(\"form\", { name: \"lineColumnForm\", onSubmit: this._handleSubmit, noValidate: true },\n                React.createElement(\"div\", { className: classes(lineFormWrapper, 'lm-lineForm-wrapper', this.state.hasFocus ? lineFormWrapperFocusWithin : undefined) },\n                    React.createElement(\"input\", { type: \"text\", className: lineFormInput, onChange: this._handleChange, onFocus: this._handleFocus, onBlur: this._handleBlur, value: this.state.value, ref: input => {\n                            this._textInput = input;\n                        } }),\n                    React.createElement(\"div\", { className: lineFormButtonDiv },\n                        React.createElement(lineFormIcon.react, { className: lineFormButtonIcon, elementPosition: \"center\" }),\n                        React.createElement(\"input\", { type: \"submit\", className: lineFormButton, value: \"\" }))),\n                React.createElement(\"label\", { className: lineFormCaption }, this._trans.__('Go to line number between 1 and %1', this.props.maxLine)))));\n    }\n}\n/**\n * A pure functional component for rendering a line/column\n * status item.\n */\nfunction LineColComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    return (React.createElement(TextItem, { onClick: props.handleClick, source: trans.__('Ln %1, Col %2', props.line, props.column), title: trans.__('Go to line number…') }));\n}\n/**\n * A widget implementing a line/column status item.\n */\nexport class LineCol extends VDomRenderer {\n    /**\n     * Construct a new LineCol status item.\n     */\n    constructor(translator) {\n        super(new LineCol.Model());\n        this._popup = null;\n        this.addClass(interactiveItem);\n        this.translator = translator || nullTranslator;\n    }\n    /**\n     * Render the status item.\n     */\n    render() {\n        if (this.model === null) {\n            return null;\n        }\n        else {\n            return (React.createElement(LineColComponent, { line: this.model.line, column: this.model.column, translator: this.translator, handleClick: () => this._handleClick() }));\n        }\n    }\n    /**\n     * A click handler for the widget.\n     */\n    _handleClick() {\n        if (this._popup) {\n            this._popup.dispose();\n        }\n        const body = ReactWidget.create(React.createElement(LineFormComponent, { handleSubmit: val => this._handleSubmit(val), currentLine: this.model.line, maxLine: this.model.editor.lineCount, translator: this.translator }));\n        this._popup = showPopup({\n            body: body,\n            anchor: this,\n            align: 'right'\n        });\n    }\n    /**\n     * Handle submission for the widget.\n     */\n    _handleSubmit(value) {\n        this.model.editor.setCursorPosition({ line: value - 1, column: 0 });\n        this._popup.dispose();\n        this.model.editor.focus();\n    }\n}\n/**\n * A namespace for LineCol statics.\n */\n(function (LineCol) {\n    /**\n     * A VDom model for a status item tracking the line/column of an editor.\n     */\n    class Model extends VDomModel {\n        constructor() {\n            super(...arguments);\n            /**\n             * React to a change in the cursors of the current editor.\n             */\n            this._onSelectionChanged = () => {\n                const oldState = this._getAllState();\n                const pos = this.editor.getCursorPosition();\n                this._line = pos.line + 1;\n                this._column = pos.column + 1;\n                this._triggerChange(oldState, this._getAllState());\n            };\n            this._line = 1;\n            this._column = 1;\n            this._editor = null;\n        }\n        /**\n         * The current editor of the model.\n         */\n        get editor() {\n            return this._editor;\n        }\n        set editor(editor) {\n            const oldEditor = this._editor;\n            if (oldEditor) {\n                oldEditor.model.selections.changed.disconnect(this._onSelectionChanged);\n            }\n            const oldState = this._getAllState();\n            this._editor = editor;\n            if (!this._editor) {\n                this._column = 1;\n                this._line = 1;\n            }\n            else {\n                this._editor.model.selections.changed.connect(this._onSelectionChanged);\n                const pos = this._editor.getCursorPosition();\n                this._column = pos.column + 1;\n                this._line = pos.line + 1;\n            }\n            this._triggerChange(oldState, this._getAllState());\n        }\n        /**\n         * The current line of the model.\n         */\n        get line() {\n            return this._line;\n        }\n        /**\n         * The current column of the model.\n         */\n        get column() {\n            return this._column;\n        }\n        _getAllState() {\n            return [this._line, this._column];\n        }\n        _triggerChange(oldState, newState) {\n            if (oldState[0] !== newState[0] || oldState[1] !== newState[1]) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    LineCol.Model = Model;\n})(LineCol || (LineCol = {}));\n//# sourceMappingURL=lineCol.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { kernelIcon, terminalIcon } from '@jupyterlab/ui-components';\nimport React from 'react';\nimport { GroupItem, interactiveItem, TextItem } from '..';\n/**\n * Half spacing between subitems in a status item.\n */\nconst HALF_SPACING = 4;\n/**\n * A pure functional component for rendering kernel and terminal sessions.\n *\n * @param props: the props for the component.\n *\n * @returns a tsx component for the running sessions.\n */\nfunction RunningSessionsComponent(props) {\n    return (React.createElement(GroupItem, { spacing: HALF_SPACING, onClick: props.handleClick },\n        React.createElement(GroupItem, { spacing: HALF_SPACING },\n            React.createElement(TextItem, { source: props.terminals }),\n            React.createElement(terminalIcon.react, { left: '1px', top: '3px', stylesheet: 'statusBar' })),\n        React.createElement(GroupItem, { spacing: HALF_SPACING },\n            React.createElement(TextItem, { source: props.sessions }),\n            React.createElement(kernelIcon.react, { top: '2px', stylesheet: 'statusBar' }))));\n}\n/**\n * A VDomRenderer for a RunningSessions status item.\n */\nexport class RunningSessions extends VDomRenderer {\n    /**\n     * Create a new RunningSessions widget.\n     */\n    constructor(opts) {\n        super(new RunningSessions.Model());\n        this._serviceManager = opts.serviceManager;\n        this._handleClick = opts.onClick;\n        this.translator = opts.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterload');\n        this._serviceManager.sessions.runningChanged.connect(this._onSessionsRunningChanged, this);\n        this._serviceManager.terminals.runningChanged.connect(this._onTerminalsRunningChanged, this);\n        this.addClass(interactiveItem);\n    }\n    /**\n     * Render the running sessions widget.\n     */\n    render() {\n        if (!this.model) {\n            return null;\n        }\n        // TODO-TRANS: Should probably be handled differently.\n        // This is more localizable friendly: \"Terminals: %1 | Kernels: %2\"\n        this.title.caption = this._trans.__('%1 Terminals, %2 Kernel sessions', this.model.terminals, this.model.sessions);\n        return (React.createElement(RunningSessionsComponent, { sessions: this.model.sessions, terminals: this.model.terminals, handleClick: this._handleClick }));\n    }\n    /**\n     * Dispose of the status item.\n     */\n    dispose() {\n        super.dispose();\n        this._serviceManager.sessions.runningChanged.disconnect(this._onSessionsRunningChanged, this);\n        this._serviceManager.terminals.runningChanged.disconnect(this._onTerminalsRunningChanged, this);\n    }\n    /**\n     * Set the number of kernel sessions when the list changes.\n     */\n    _onSessionsRunningChanged(manager, sessions) {\n        this.model.sessions = sessions.length;\n    }\n    /**\n     * Set the number of terminal sessions when the list changes.\n     */\n    _onTerminalsRunningChanged(manager, terminals) {\n        this.model.terminals = terminals.length;\n    }\n}\n/**\n * A namespace for RunningSessions statics.\n */\n(function (RunningSessions) {\n    /**\n     * A VDomModel for the RunningSessions status item.\n     */\n    class Model extends VDomModel {\n        constructor() {\n            super(...arguments);\n            this._terminals = 0;\n            this._sessions = 0;\n        }\n        /**\n         * The number of active kernel sessions.\n         */\n        get sessions() {\n            return this._sessions;\n        }\n        set sessions(sessions) {\n            const oldSessions = this._sessions;\n            this._sessions = sessions;\n            if (oldSessions !== this._sessions) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n        /**\n         * The number of active terminal sessions.\n         */\n        get terminals() {\n            return this._terminals;\n        }\n        set terminals(terminals) {\n            const oldTerminals = this._terminals;\n            this._terminals = terminals;\n            if (oldTerminals !== this._terminals) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    RunningSessions.Model = Model;\n})(RunningSessions || (RunningSessions = {}));\n//# sourceMappingURL=runningSessions.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module statusbar\n */\nexport * from './components';\nexport * from './defaults';\nexport * from './statusbar';\nexport * from './style/statusbar';\nexport * from './tokens';\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt } from '@lumino/algorithm';\nimport { DisposableDelegate, DisposableSet } from '@lumino/disposable';\nimport { Panel, PanelLayout, Widget } from '@lumino/widgets';\nimport { statusBar as barStyle, item as itemStyle, leftSide as leftSideStyle, rightSide as rightSideStyle, side as sideStyle } from './style/statusbar';\n/**\n * Main status bar object which contains all items.\n */\nexport class StatusBar extends Widget {\n    constructor() {\n        super();\n        this._leftRankItems = [];\n        this._rightRankItems = [];\n        this._statusItems = {};\n        this._disposables = new DisposableSet();\n        this.addClass(barStyle);\n        const rootLayout = (this.layout = new PanelLayout());\n        const leftPanel = (this._leftSide = new Panel());\n        const middlePanel = (this._middlePanel = new Panel());\n        const rightPanel = (this._rightSide = new Panel());\n        leftPanel.addClass(sideStyle);\n        leftPanel.addClass(leftSideStyle);\n        middlePanel.addClass(sideStyle);\n        rightPanel.addClass(sideStyle);\n        rightPanel.addClass(rightSideStyle);\n        rootLayout.addWidget(leftPanel);\n        rootLayout.addWidget(middlePanel);\n        rootLayout.addWidget(rightPanel);\n    }\n    /**\n     * Register a new status item.\n     *\n     * @param id - a unique id for the status item.\n     *\n     * @param statusItem - The item to add to the status bar.\n     */\n    registerStatusItem(id, statusItem) {\n        if (id in this._statusItems) {\n            throw new Error(`Status item ${id} already registered.`);\n        }\n        // Populate defaults for the optional properties of the status item.\n        const fullStatusItem = Object.assign(Object.assign({}, Private.statusItemDefaults), statusItem);\n        const { align, item, rank } = fullStatusItem;\n        // Connect the activeStateChanged signal to refreshing the status item,\n        // if the signal was provided.\n        const onActiveStateChanged = () => {\n            this._refreshItem(id);\n        };\n        if (fullStatusItem.activeStateChanged) {\n            fullStatusItem.activeStateChanged.connect(onActiveStateChanged);\n        }\n        const rankItem = { id, rank };\n        fullStatusItem.item.addClass(itemStyle);\n        this._statusItems[id] = fullStatusItem;\n        if (align === 'left') {\n            const insertIndex = this._findInsertIndex(this._leftRankItems, rankItem);\n            if (insertIndex === -1) {\n                this._leftSide.addWidget(item);\n                this._leftRankItems.push(rankItem);\n            }\n            else {\n                ArrayExt.insert(this._leftRankItems, insertIndex, rankItem);\n                this._leftSide.insertWidget(insertIndex, item);\n            }\n        }\n        else if (align === 'right') {\n            const insertIndex = this._findInsertIndex(this._rightRankItems, rankItem);\n            if (insertIndex === -1) {\n                this._rightSide.addWidget(item);\n                this._rightRankItems.push(rankItem);\n            }\n            else {\n                ArrayExt.insert(this._rightRankItems, insertIndex, rankItem);\n                this._rightSide.insertWidget(insertIndex, item);\n            }\n        }\n        else {\n            this._middlePanel.addWidget(item);\n        }\n        this._refreshItem(id); // Initially refresh the status item.\n        const disposable = new DisposableDelegate(() => {\n            delete this._statusItems[id];\n            if (fullStatusItem.activeStateChanged) {\n                fullStatusItem.activeStateChanged.disconnect(onActiveStateChanged);\n            }\n            item.parent = null;\n            item.dispose();\n        });\n        this._disposables.add(disposable);\n        return disposable;\n    }\n    /**\n     * Dispose of the status bar.\n     */\n    dispose() {\n        this._leftRankItems.length = 0;\n        this._rightRankItems.length = 0;\n        this._disposables.dispose();\n        super.dispose();\n    }\n    /**\n     * Handle an 'update-request' message to the status bar.\n     */\n    onUpdateRequest(msg) {\n        this._refreshAll();\n        super.onUpdateRequest(msg);\n    }\n    _findInsertIndex(side, newItem) {\n        return ArrayExt.findFirstIndex(side, item => item.rank > newItem.rank);\n    }\n    _refreshItem(id) {\n        const statusItem = this._statusItems[id];\n        if (statusItem.isActive()) {\n            statusItem.item.show();\n            statusItem.item.update();\n        }\n        else {\n            statusItem.item.hide();\n        }\n    }\n    _refreshAll() {\n        Object.keys(this._statusItems).forEach(id => {\n            this._refreshItem(id);\n        });\n    }\n}\n/**\n * A namespace for private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Default options for a status item, less the item itself.\n     */\n    Private.statusItemDefaults = {\n        align: 'left',\n        rank: 0,\n        isActive: () => true,\n        activeStateChanged: undefined\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=statusbar.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nexport const centeredFlex = {\n    display: 'flex',\n    alignItems: 'center'\n};\nexport const leftToRight = {\n    flexDirection: 'row'\n};\nexport const rightToLeft = {\n    flexDirection: 'row-reverse'\n};\nexport const equiDistant = {\n    justifyContent: 'space-between'\n};\n//# sourceMappingURL=layout.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { style } from 'typestyle/lib';\nexport const hoverItem = style({\n    boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.25)'\n});\nexport const lineFormSearch = style({\n    padding: '4px 12px',\n    backgroundColor: 'var(--jp-layout-color2)',\n    boxShadow: 'var(--jp-toolbar-box-shadow)',\n    zIndex: 2,\n    fontSize: 'var(--jp-ui-font-size1)'\n});\nexport const lineFormCaption = style({\n    fontSize: 'var(--jp-ui-font-size0)',\n    lineHeight: 'var(--jp-ui-font-size1)',\n    marginTop: '4px',\n    color: 'var(--jp-ui-font-color0)'\n});\nexport const baseLineForm = {\n    border: 'none',\n    borderRadius: '0px',\n    position: 'absolute',\n    backgroundSize: '16px',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center',\n    outline: 'none',\n    top: '0px',\n    right: '0px'\n};\nexport const lineFormButtonDiv = style(baseLineForm, {\n    top: '4px',\n    right: '8px',\n    height: '24px',\n    padding: '0px 12px',\n    width: '12px'\n});\nexport const lineFormButtonIcon = style(baseLineForm, {\n    backgroundColor: 'var(--jp-brand-color1)',\n    height: '100%',\n    width: '100%',\n    boxSizing: 'border-box',\n    padding: '4px 6px'\n});\nexport const lineFormButton = style(baseLineForm, {\n    backgroundColor: 'transparent',\n    height: '100%',\n    width: '100%',\n    boxSizing: 'border-box'\n});\nexport const lineFormWrapper = style({\n    overflow: 'hidden',\n    padding: '0px 8px',\n    border: '1px solid var(--jp-border-color0)',\n    backgroundColor: 'var(--jp-input-active-background)',\n    height: '22px'\n});\nexport const lineFormWrapperFocusWithin = style({\n    border: 'var(--jp-border-width) solid var(--md-blue-500)',\n    boxShadow: 'inset 0 0 4px var(--md-blue-300)'\n});\nexport const lineFormInput = style({\n    background: 'transparent',\n    width: '200px',\n    height: '100%',\n    border: 'none',\n    outline: 'none',\n    color: 'var(--jp-ui-font-color0)',\n    lineHeight: '28px'\n});\n//# sourceMappingURL=lineForm.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { style } from 'typestyle/lib';\nexport const progressBarItem = style({\n    background: 'black',\n    height: '10px',\n    width: '100px',\n    border: '1px solid black',\n    borderRadius: '3px',\n    marginLeft: '4px',\n    overflow: 'hidden'\n});\nexport const fillerItem = style({\n    background: 'var(--jp-brand-color2)',\n    height: '10px'\n});\n//# sourceMappingURL=progressBar.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { style } from 'typestyle/lib';\nimport { centeredFlex, leftToRight, rightToLeft } from './layout';\nimport { textItem } from './text';\nimport vars from './variables';\nconst itemPadding = {\n    paddingLeft: vars.itemPadding,\n    paddingRight: vars.itemPadding\n};\nconst interactiveHover = {\n    $nest: {\n        '&:hover': {\n            backgroundColor: vars.hoverColor\n        }\n    }\n};\nconst clicked = {\n    backgroundColor: vars.clickColor,\n    $nest: {\n        ['.' + textItem]: {\n            color: vars.textClickColor\n        }\n    }\n};\nexport const statusBar = style({\n    background: vars.backgroundColor,\n    minHeight: vars.height,\n    justifyContent: 'space-between',\n    paddingLeft: vars.statusBarPadding,\n    paddingRight: vars.statusBarPadding\n}, centeredFlex);\nexport const side = style(centeredFlex);\nexport const leftSide = style(leftToRight);\nexport const rightSide = style(rightToLeft);\nexport const item = style({\n    maxHeight: vars.height,\n    marginLeft: vars.itemMargin,\n    marginRight: vars.itemMargin,\n    height: vars.height,\n    whiteSpace: vars.whiteSpace,\n    textOverflow: vars.textOverflow,\n    color: vars.textColor\n}, itemPadding);\nexport const clickedItem = style(clicked);\nexport const interactiveItem = style(interactiveHover);\n//# sourceMappingURL=statusbar.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { style } from 'typestyle/lib';\nimport vars from './variables';\nexport const baseText = {\n    fontSize: vars.fontSize,\n    fontFamily: vars.fontFamily\n};\nexport const textItem = style(baseText, {\n    lineHeight: '24px',\n    color: vars.textColor\n});\n//# sourceMappingURL=text.js.map","export default {\n    hoverColor: 'var(--jp-layout-color3)',\n    clickColor: 'var(--jp-brand-color1)',\n    backgroundColor: 'var(--jp-layout-color2)',\n    height: 'var(--jp-statusbar-height)',\n    fontSize: 'var(--jp-ui-font-size1)',\n    fontFamily: 'var(--jp-ui-font-family)',\n    textColor: 'var(--jp-ui-font-color1)',\n    textClickColor: 'white',\n    itemMargin: '2px',\n    itemPadding: '6px',\n    statusBarPadding: '10px',\n    interItemHalfSpacing: '2px',\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis'\n};\n//# sourceMappingURL=variables.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n// tslint:disable-next-line:variable-name\nexport const IStatusBar = new Token('@jupyterlab/statusbar:IStatusBar');\n//# sourceMappingURL=tokens.js.map"],"sourceRoot":""}